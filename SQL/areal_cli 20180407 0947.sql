--
-- Скрипт сгенерирован Devart dbForge Studio for MySQL, Версия 7.3.148.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/mysql/studio
-- Дата скрипта: 07.04.2018 9:47:50
-- Версия сервера: 5.6.12-log
-- Версия клиента: 4.1
--


-- 
-- Отключение внешних ключей
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Установить режим SQL (SQL mode)
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Установка базы данных по умолчанию
--
USE areal_cli;

--
-- Удалить представление "v_sender"
--
DROP VIEW IF EXISTS v_sender CASCADE;

--
-- Удалить представление "v_instance"
--
DROP VIEW IF EXISTS v_instance CASCADE;

--
-- Удалить представление "v_autoworkplace_ru_ru"
--
DROP VIEW IF EXISTS v_autoworkplace_ru_ru CASCADE;

--
-- Удалить представление "v_autoworkplace_en_us"
--
DROP VIEW IF EXISTS v_autoworkplace_en_us CASCADE;

--
-- Удалить представление "v_autoworkplace"
--
DROP VIEW IF EXISTS v_autoworkplace CASCADE;

--
-- Удалить представление "v_autoviewcolumn_ru_ru"
--
DROP VIEW IF EXISTS v_autoviewcolumn_ru_ru CASCADE;

--
-- Удалить представление "v_autoviewcolumn_en_us"
--
DROP VIEW IF EXISTS v_autoviewcolumn_en_us CASCADE;

--
-- Удалить представление "v_autoviewcolumn"
--
DROP VIEW IF EXISTS v_autoviewcolumn CASCADE;

--
-- Удалить представление "v_autovalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autovalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autovalidator_en_us"
--
DROP VIEW IF EXISTS v_autovalidator_en_us CASCADE;

--
-- Удалить представление "v_autovalidator"
--
DROP VIEW IF EXISTS v_autovalidator CASCADE;

--
-- Удалить представление "v_autousers_ru_ru"
--
DROP VIEW IF EXISTS v_autousers_ru_ru CASCADE;

--
-- Удалить представление "v_autousers_en_us"
--
DROP VIEW IF EXISTS v_autousers_en_us CASCADE;

--
-- Удалить представление "v_autousers"
--
DROP VIEW IF EXISTS v_autousers CASCADE;

--
-- Удалить представление "v_autouniqueconstraint_ru_ru"
--
DROP VIEW IF EXISTS v_autouniqueconstraint_ru_ru CASCADE;

--
-- Удалить представление "v_autouniqueconstraint_en_us"
--
DROP VIEW IF EXISTS v_autouniqueconstraint_en_us CASCADE;

--
-- Удалить представление "v_autouniqueconstraint"
--
DROP VIEW IF EXISTS v_autouniqueconstraint CASCADE;

--
-- Удалить представление "v_autotypemenu_ru_ru"
--
DROP VIEW IF EXISTS v_autotypemenu_ru_ru CASCADE;

--
-- Удалить представление "v_autotypemenu_en_us"
--
DROP VIEW IF EXISTS v_autotypemenu_en_us CASCADE;

--
-- Удалить представление "v_autotypemenu"
--
DROP VIEW IF EXISTS v_autotypemenu CASCADE;

--
-- Удалить представление "v_autothe_session_ru_ru"
--
DROP VIEW IF EXISTS v_autothe_session_ru_ru CASCADE;

--
-- Удалить представление "v_autothe_session_en_us"
--
DROP VIEW IF EXISTS v_autothe_session_en_us CASCADE;

--
-- Удалить представление "v_autothe_session"
--
DROP VIEW IF EXISTS v_autothe_session CASCADE;

--
-- Удалить представление "v_autosysrefcache_ru_ru"
--
DROP VIEW IF EXISTS v_autosysrefcache_ru_ru CASCADE;

--
-- Удалить представление "v_autosysrefcache_en_us"
--
DROP VIEW IF EXISTS v_autosysrefcache_en_us CASCADE;

--
-- Удалить представление "v_autosysrefcache"
--
DROP VIEW IF EXISTS v_autosysrefcache CASCADE;

--
-- Удалить представление "v_autosyslog_ru_ru"
--
DROP VIEW IF EXISTS v_autosyslog_ru_ru CASCADE;

--
-- Удалить представление "v_autosyslog_en_us"
--
DROP VIEW IF EXISTS v_autosyslog_en_us CASCADE;

--
-- Удалить представление "v_autosyslog"
--
DROP VIEW IF EXISTS v_autosyslog CASCADE;

--
-- Удалить представление "v_autostructrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_autostructrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_autostructrestriction_en_us"
--
DROP VIEW IF EXISTS v_autostructrestriction_en_us CASCADE;

--
-- Удалить представление "v_autostructrestriction"
--
DROP VIEW IF EXISTS v_autostructrestriction CASCADE;

--
-- Удалить представление "v_autosharedmethod_ru_ru"
--
DROP VIEW IF EXISTS v_autosharedmethod_ru_ru CASCADE;

--
-- Удалить представление "v_autosharedmethod_en_us"
--
DROP VIEW IF EXISTS v_autosharedmethod_en_us CASCADE;

--
-- Удалить представление "v_autosharedmethod"
--
DROP VIEW IF EXISTS v_autosharedmethod CASCADE;

--
-- Удалить представление "v_autoscript_ru_ru"
--
DROP VIEW IF EXISTS v_autoscript_ru_ru CASCADE;

--
-- Удалить представление "v_autoscript_en_us"
--
DROP VIEW IF EXISTS v_autoscript_en_us CASCADE;

--
-- Удалить представление "v_autoscript"
--
DROP VIEW IF EXISTS v_autoscript CASCADE;

--
-- Удалить представление "v_autorptstruct_ru_ru"
--
DROP VIEW IF EXISTS v_autorptstruct_ru_ru CASCADE;

--
-- Удалить представление "v_autorptstruct_en_us"
--
DROP VIEW IF EXISTS v_autorptstruct_en_us CASCADE;

--
-- Удалить представление "v_autorptstruct"
--
DROP VIEW IF EXISTS v_autorptstruct CASCADE;

--
-- Удалить представление "v_autorptformula_ru_ru"
--
DROP VIEW IF EXISTS v_autorptformula_ru_ru CASCADE;

--
-- Удалить представление "v_autorptformula_en_us"
--
DROP VIEW IF EXISTS v_autorptformula_en_us CASCADE;

--
-- Удалить представление "v_autorptformula"
--
DROP VIEW IF EXISTS v_autorptformula CASCADE;

--
-- Удалить представление "v_autorptfields_ru_ru"
--
DROP VIEW IF EXISTS v_autorptfields_ru_ru CASCADE;

--
-- Удалить представление "v_autorptfields_en_us"
--
DROP VIEW IF EXISTS v_autorptfields_en_us CASCADE;

--
-- Удалить представление "v_autorptfields"
--
DROP VIEW IF EXISTS v_autorptfields CASCADE;

--
-- Удалить представление "v_autoreports_ru_ru"
--
DROP VIEW IF EXISTS v_autoreports_ru_ru CASCADE;

--
-- Удалить представление "v_autoreports_en_us"
--
DROP VIEW IF EXISTS v_autoreports_en_us CASCADE;

--
-- Удалить представление "v_autoreports"
--
DROP VIEW IF EXISTS v_autoreports CASCADE;

--
-- Удалить представление "v_autopartview_ru_ru"
--
DROP VIEW IF EXISTS v_autopartview_ru_ru CASCADE;

--
-- Удалить представление "v_autopartview_lnk_ru_ru"
--
DROP VIEW IF EXISTS v_autopartview_lnk_ru_ru CASCADE;

--
-- Удалить представление "v_autopartview_lnk_en_us"
--
DROP VIEW IF EXISTS v_autopartview_lnk_en_us CASCADE;

--
-- Удалить представление "v_autopartview_lnk"
--
DROP VIEW IF EXISTS v_autopartview_lnk CASCADE;

--
-- Удалить представление "v_autopartview_en_us"
--
DROP VIEW IF EXISTS v_autopartview_en_us CASCADE;

--
-- Удалить представление "v_autopartview"
--
DROP VIEW IF EXISTS v_autopartview CASCADE;

--
-- Удалить представление "v_autopartparammap_ru_ru"
--
DROP VIEW IF EXISTS v_autopartparammap_ru_ru CASCADE;

--
-- Удалить представление "v_autopartparammap_en_us"
--
DROP VIEW IF EXISTS v_autopartparammap_en_us CASCADE;

--
-- Удалить представление "v_autopartparammap"
--
DROP VIEW IF EXISTS v_autopartparammap CASCADE;

--
-- Удалить представление "v_autopartmenu_ru_ru"
--
DROP VIEW IF EXISTS v_autopartmenu_ru_ru CASCADE;

--
-- Удалить представление "v_autopartmenu_en_us"
--
DROP VIEW IF EXISTS v_autopartmenu_en_us CASCADE;

--
-- Удалить представление "v_autopartmenu"
--
DROP VIEW IF EXISTS v_autopartmenu CASCADE;

--
-- Удалить представление "v_autopart_ru_ru"
--
DROP VIEW IF EXISTS v_autopart_ru_ru CASCADE;

--
-- Удалить представление "v_autopart_en_us"
--
DROP VIEW IF EXISTS v_autopart_en_us CASCADE;

--
-- Удалить представление "v_autopart"
--
DROP VIEW IF EXISTS v_autopart CASCADE;

--
-- Удалить представление "v_autoparentpackage_ru_ru"
--
DROP VIEW IF EXISTS v_autoparentpackage_ru_ru CASCADE;

--
-- Удалить представление "v_autoparentpackage_en_us"
--
DROP VIEW IF EXISTS v_autoparentpackage_en_us CASCADE;

--
-- Удалить представление "v_autoparentpackage"
--
DROP VIEW IF EXISTS v_autoparentpackage CASCADE;

--
-- Удалить представление "v_autoparameters_ru_ru"
--
DROP VIEW IF EXISTS v_autoparameters_ru_ru CASCADE;

--
-- Удалить представление "v_autoparameters_en_us"
--
DROP VIEW IF EXISTS v_autoparameters_en_us CASCADE;

--
-- Удалить представление "v_autoparameters"
--
DROP VIEW IF EXISTS v_autoparameters CASCADE;

--
-- Удалить представление "v_autoobjstatus_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjstatus_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjstatus_en_us"
--
DROP VIEW IF EXISTS v_autoobjstatus_en_us CASCADE;

--
-- Удалить представление "v_autoobjstatus"
--
DROP VIEW IF EXISTS v_autoobjstatus CASCADE;

--
-- Удалить представление "v_autoobjecttype_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjecttype_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjecttype_en_us"
--
DROP VIEW IF EXISTS v_autoobjecttype_en_us CASCADE;

--
-- Удалить представление "v_autoobjecttype"
--
DROP VIEW IF EXISTS v_autoobjecttype CASCADE;

--
-- Удалить представление "v_autoobjectmode_ru_ru"
--
DROP VIEW IF EXISTS v_autoobjectmode_ru_ru CASCADE;

--
-- Удалить представление "v_autoobjectmode_en_us"
--
DROP VIEW IF EXISTS v_autoobjectmode_en_us CASCADE;

--
-- Удалить представление "v_autoobjectmode"
--
DROP VIEW IF EXISTS v_autoobjectmode CASCADE;

--
-- Удалить представление "v_autonum_zones_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_zones_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_zones_en_us"
--
DROP VIEW IF EXISTS v_autonum_zones_en_us CASCADE;

--
-- Удалить представление "v_autonum_zones"
--
DROP VIEW IF EXISTS v_autonum_zones CASCADE;

--
-- Удалить представление "v_autonum_values_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_values_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_values_en_us"
--
DROP VIEW IF EXISTS v_autonum_values_en_us CASCADE;

--
-- Удалить представление "v_autonum_values"
--
DROP VIEW IF EXISTS v_autonum_values CASCADE;

--
-- Удалить представление "v_autonum_head_ru_ru"
--
DROP VIEW IF EXISTS v_autonum_head_ru_ru CASCADE;

--
-- Удалить представление "v_autonum_head_en_us"
--
DROP VIEW IF EXISTS v_autonum_head_en_us CASCADE;

--
-- Удалить представление "v_autonum_head"
--
DROP VIEW IF EXISTS v_autonum_head CASCADE;

--
-- Удалить представление "v_automtzextrel_ru_ru"
--
DROP VIEW IF EXISTS v_automtzextrel_ru_ru CASCADE;

--
-- Удалить представление "v_automtzextrel_en_us"
--
DROP VIEW IF EXISTS v_automtzextrel_en_us CASCADE;

--
-- Удалить представление "v_automtzextrel"
--
DROP VIEW IF EXISTS v_automtzextrel CASCADE;

--
-- Удалить представление "v_automtzext_def_ru_ru"
--
DROP VIEW IF EXISTS v_automtzext_def_ru_ru CASCADE;

--
-- Удалить представление "v_automtzext_def_en_us"
--
DROP VIEW IF EXISTS v_automtzext_def_en_us CASCADE;

--
-- Удалить представление "v_automtzext_def"
--
DROP VIEW IF EXISTS v_automtzext_def CASCADE;

--
-- Удалить представление "v_automtzapp_ru_ru"
--
DROP VIEW IF EXISTS v_automtzapp_ru_ru CASCADE;

--
-- Удалить представление "v_automtzapp_en_us"
--
DROP VIEW IF EXISTS v_automtzapp_en_us CASCADE;

--
-- Удалить представление "v_automtzapp"
--
DROP VIEW IF EXISTS v_automtzapp CASCADE;

--
-- Удалить представление "v_automethodrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_automethodrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_automethodrestriction_en_us"
--
DROP VIEW IF EXISTS v_automethodrestriction_en_us CASCADE;

--
-- Удалить представление "v_automethodrestriction"
--
DROP VIEW IF EXISTS v_automethodrestriction CASCADE;

--
-- Удалить представление "v_autolocalizeinfo_ru_ru"
--
DROP VIEW IF EXISTS v_autolocalizeinfo_ru_ru CASCADE;

--
-- Удалить представление "v_autolocalizeinfo_en_us"
--
DROP VIEW IF EXISTS v_autolocalizeinfo_en_us CASCADE;

--
-- Удалить представление "v_autolocalizeinfo"
--
DROP VIEW IF EXISTS v_autolocalizeinfo CASCADE;

--
-- Удалить представление "v_autojournalsrc_ru_ru"
--
DROP VIEW IF EXISTS v_autojournalsrc_ru_ru CASCADE;

--
-- Удалить представление "v_autojournalsrc_en_us"
--
DROP VIEW IF EXISTS v_autojournalsrc_en_us CASCADE;

--
-- Удалить представление "v_autojournalsrc"
--
DROP VIEW IF EXISTS v_autojournalsrc CASCADE;

--
-- Удалить представление "v_autojournalcolumn_ru_ru"
--
DROP VIEW IF EXISTS v_autojournalcolumn_ru_ru CASCADE;

--
-- Удалить представление "v_autojournalcolumn_en_us"
--
DROP VIEW IF EXISTS v_autojournalcolumn_en_us CASCADE;

--
-- Удалить представление "v_autojournalcolumn"
--
DROP VIEW IF EXISTS v_autojournalcolumn CASCADE;

--
-- Удалить представление "v_autojournal_ru_ru"
--
DROP VIEW IF EXISTS v_autojournal_ru_ru CASCADE;

--
-- Удалить представление "v_autojournal_en_us"
--
DROP VIEW IF EXISTS v_autojournal_en_us CASCADE;

--
-- Удалить представление "v_autojournal"
--
DROP VIEW IF EXISTS v_autojournal CASCADE;

--
-- Удалить представление "v_autojcolumnsource_ru_ru"
--
DROP VIEW IF EXISTS v_autojcolumnsource_ru_ru CASCADE;

--
-- Удалить представление "v_autojcolumnsource_en_us"
--
DROP VIEW IF EXISTS v_autojcolumnsource_en_us CASCADE;

--
-- Удалить представление "v_autojcolumnsource"
--
DROP VIEW IF EXISTS v_autojcolumnsource CASCADE;

--
-- Удалить представление "v_autoiu_u_def_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_u_def_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_u_def_en_us"
--
DROP VIEW IF EXISTS v_autoiu_u_def_en_us CASCADE;

--
-- Удалить представление "v_autoiu_u_def"
--
DROP VIEW IF EXISTS v_autoiu_u_def CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_mod"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_mod CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_docmode"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_docmode CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def_en_us"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def_en_us CASCADE;

--
-- Удалить представление "v_autoiu_rcfg_def"
--
DROP VIEW IF EXISTS v_autoiu_rcfg_def CASCADE;

--
-- Удалить представление "v_autoiu_int_modules_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_int_modules_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_int_modules_en_us"
--
DROP VIEW IF EXISTS v_autoiu_int_modules_en_us CASCADE;

--
-- Удалить представление "v_autoiu_int_modules"
--
DROP VIEW IF EXISTS v_autoiu_int_modules CASCADE;

--
-- Удалить представление "v_autoiu_crole_ru_ru"
--
DROP VIEW IF EXISTS v_autoiu_crole_ru_ru CASCADE;

--
-- Удалить представление "v_autoiu_crole_en_us"
--
DROP VIEW IF EXISTS v_autoiu_crole_en_us CASCADE;

--
-- Удалить представление "v_autoiu_crole"
--
DROP VIEW IF EXISTS v_autoiu_crole CASCADE;

--
-- Удалить представление "v_autoinstancevalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autoinstancevalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autoinstancevalidator_en_us"
--
DROP VIEW IF EXISTS v_autoinstancevalidator_en_us CASCADE;

--
-- Удалить представление "v_autoinstancevalidator"
--
DROP VIEW IF EXISTS v_autoinstancevalidator CASCADE;

--
-- Удалить представление "v_autogroupuser_ru_ru"
--
DROP VIEW IF EXISTS v_autogroupuser_ru_ru CASCADE;

--
-- Удалить представление "v_autogroupuser_en_us"
--
DROP VIEW IF EXISTS v_autogroupuser_en_us CASCADE;

--
-- Удалить представление "v_autogroupuser"
--
DROP VIEW IF EXISTS v_autogroupuser CASCADE;

--
-- Удалить представление "v_autogroups_ru_ru"
--
DROP VIEW IF EXISTS v_autogroups_ru_ru CASCADE;

--
-- Удалить представление "v_autogroups_en_us"
--
DROP VIEW IF EXISTS v_autogroups_en_us CASCADE;

--
-- Удалить представление "v_autogroups"
--
DROP VIEW IF EXISTS v_autogroups CASCADE;

--
-- Удалить представление "v_autogenreference_ru_ru"
--
DROP VIEW IF EXISTS v_autogenreference_ru_ru CASCADE;

--
-- Удалить представление "v_autogenreference_en_us"
--
DROP VIEW IF EXISTS v_autogenreference_en_us CASCADE;

--
-- Удалить представление "v_autogenreference"
--
DROP VIEW IF EXISTS v_autogenreference CASCADE;

--
-- Удалить представление "v_autogenpackage_ru_ru"
--
DROP VIEW IF EXISTS v_autogenpackage_ru_ru CASCADE;

--
-- Удалить представление "v_autogenpackage_en_us"
--
DROP VIEW IF EXISTS v_autogenpackage_en_us CASCADE;

--
-- Удалить представление "v_autogenpackage"
--
DROP VIEW IF EXISTS v_autogenpackage CASCADE;

--
-- Удалить представление "v_autogenmanualcode_ru_ru"
--
DROP VIEW IF EXISTS v_autogenmanualcode_ru_ru CASCADE;

--
-- Удалить представление "v_autogenmanualcode_en_us"
--
DROP VIEW IF EXISTS v_autogenmanualcode_en_us CASCADE;

--
-- Удалить представление "v_autogenmanualcode"
--
DROP VIEW IF EXISTS v_autogenmanualcode CASCADE;

--
-- Удалить представление "v_autogenerator_target_ru_ru"
--
DROP VIEW IF EXISTS v_autogenerator_target_ru_ru CASCADE;

--
-- Удалить представление "v_autogenerator_target_en_us"
--
DROP VIEW IF EXISTS v_autogenerator_target_en_us CASCADE;

--
-- Удалить представление "v_autogenerator_target"
--
DROP VIEW IF EXISTS v_autogenerator_target CASCADE;

--
-- Удалить представление "v_autogencontrols_ru_ru"
--
DROP VIEW IF EXISTS v_autogencontrols_ru_ru CASCADE;

--
-- Удалить представление "v_autogencontrols_en_us"
--
DROP VIEW IF EXISTS v_autogencontrols_en_us CASCADE;

--
-- Удалить представление "v_autogencontrols"
--
DROP VIEW IF EXISTS v_autogencontrols CASCADE;

--
-- Удалить представление "v_autofldextenders_ru_ru"
--
DROP VIEW IF EXISTS v_autofldextenders_ru_ru CASCADE;

--
-- Удалить представление "v_autofldextenders_en_us"
--
DROP VIEW IF EXISTS v_autofldextenders_en_us CASCADE;

--
-- Удалить представление "v_autofldextenders"
--
DROP VIEW IF EXISTS v_autofldextenders CASCADE;

--
-- Удалить представление "v_autofilters_ru_ru"
--
DROP VIEW IF EXISTS v_autofilters_ru_ru CASCADE;

--
-- Удалить представление "v_autofilters_en_us"
--
DROP VIEW IF EXISTS v_autofilters_en_us CASCADE;

--
-- Удалить представление "v_autofilters"
--
DROP VIEW IF EXISTS v_autofilters CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup_ru_ru"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup_ru_ru CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup_en_us"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup_en_us CASCADE;

--
-- Удалить представление "v_autofilterfieldgroup"
--
DROP VIEW IF EXISTS v_autofilterfieldgroup CASCADE;

--
-- Удалить представление "v_autofileterfield_ru_ru"
--
DROP VIEW IF EXISTS v_autofileterfield_ru_ru CASCADE;

--
-- Удалить представление "v_autofileterfield_en_us"
--
DROP VIEW IF EXISTS v_autofileterfield_en_us CASCADE;

--
-- Удалить представление "v_autofileterfield"
--
DROP VIEW IF EXISTS v_autofileterfield CASCADE;

--
-- Удалить представление "v_autofieldvalidator_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldvalidator_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldvalidator_en_us"
--
DROP VIEW IF EXISTS v_autofieldvalidator_en_us CASCADE;

--
-- Удалить представление "v_autofieldvalidator"
--
DROP VIEW IF EXISTS v_autofieldvalidator CASCADE;

--
-- Удалить представление "v_autofieldtypemap_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldtypemap_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldtypemap_en_us"
--
DROP VIEW IF EXISTS v_autofieldtypemap_en_us CASCADE;

--
-- Удалить представление "v_autofieldtypemap"
--
DROP VIEW IF EXISTS v_autofieldtypemap CASCADE;

--
-- Удалить представление "v_autofieldtype_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldtype_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldtype_en_us"
--
DROP VIEW IF EXISTS v_autofieldtype_en_us CASCADE;

--
-- Удалить представление "v_autofieldtype"
--
DROP VIEW IF EXISTS v_autofieldtype CASCADE;

--
-- Удалить представление "v_autofieldsrcdef_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldsrcdef_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldsrcdef_en_us"
--
DROP VIEW IF EXISTS v_autofieldsrcdef_en_us CASCADE;

--
-- Удалить представление "v_autofieldsrcdef"
--
DROP VIEW IF EXISTS v_autofieldsrcdef CASCADE;

--
-- Удалить представление "v_autofieldrestriction_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldrestriction_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldrestriction_en_us"
--
DROP VIEW IF EXISTS v_autofieldrestriction_en_us CASCADE;

--
-- Удалить представление "v_autofieldrestriction"
--
DROP VIEW IF EXISTS v_autofieldrestriction CASCADE;

--
-- Удалить представление "v_autofieldparammap_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldparammap_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldparammap_en_us"
--
DROP VIEW IF EXISTS v_autofieldparammap_en_us CASCADE;

--
-- Удалить представление "v_autofieldparammap"
--
DROP VIEW IF EXISTS v_autofieldparammap CASCADE;

--
-- Удалить представление "v_autofieldmenu_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldmenu_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldmenu_en_us"
--
DROP VIEW IF EXISTS v_autofieldmenu_en_us CASCADE;

--
-- Удалить представление "v_autofieldmenu"
--
DROP VIEW IF EXISTS v_autofieldmenu CASCADE;

--
-- Удалить представление "v_autofieldexpression_ru_ru"
--
DROP VIEW IF EXISTS v_autofieldexpression_ru_ru CASCADE;

--
-- Удалить представление "v_autofieldexpression_en_us"
--
DROP VIEW IF EXISTS v_autofieldexpression_en_us CASCADE;

--
-- Удалить представление "v_autofieldexpression"
--
DROP VIEW IF EXISTS v_autofieldexpression CASCADE;

--
-- Удалить представление "v_autofield_ru_ru"
--
DROP VIEW IF EXISTS v_autofield_ru_ru CASCADE;

--
-- Удалить представление "v_autofield_en_us"
--
DROP VIEW IF EXISTS v_autofield_en_us CASCADE;

--
-- Удалить представление "v_autofield"
--
DROP VIEW IF EXISTS v_autofield CASCADE;

--
-- Удалить представление "v_autoextenderinterface_ru_ru"
--
DROP VIEW IF EXISTS v_autoextenderinterface_ru_ru CASCADE;

--
-- Удалить представление "v_autoextenderinterface_en_us"
--
DROP VIEW IF EXISTS v_autoextenderinterface_en_us CASCADE;

--
-- Удалить представление "v_autoextenderinterface"
--
DROP VIEW IF EXISTS v_autoextenderinterface CASCADE;

--
-- Удалить представление "v_autoepfilterlink_ru_ru"
--
DROP VIEW IF EXISTS v_autoepfilterlink_ru_ru CASCADE;

--
-- Удалить представление "v_autoepfilterlink_en_us"
--
DROP VIEW IF EXISTS v_autoepfilterlink_en_us CASCADE;

--
-- Удалить представление "v_autoepfilterlink"
--
DROP VIEW IF EXISTS v_autoepfilterlink CASCADE;

--
-- Удалить представление "v_autoenumitem_ru_ru"
--
DROP VIEW IF EXISTS v_autoenumitem_ru_ru CASCADE;

--
-- Удалить представление "v_autoenumitem_en_us"
--
DROP VIEW IF EXISTS v_autoenumitem_en_us CASCADE;

--
-- Удалить представление "v_autoenumitem"
--
DROP VIEW IF EXISTS v_autoenumitem CASCADE;

--
-- Удалить представление "v_autoentrypoints_ru_ru"
--
DROP VIEW IF EXISTS v_autoentrypoints_ru_ru CASCADE;

--
-- Удалить представление "v_autoentrypoints_en_us"
--
DROP VIEW IF EXISTS v_autoentrypoints_en_us CASCADE;

--
-- Удалить представление "v_autoentrypoints"
--
DROP VIEW IF EXISTS v_autoentrypoints CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript_ru_ru"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript_ru_ru CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript_en_us"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript_en_us CASCADE;

--
-- Удалить представление "v_autodinamicfilterscript"
--
DROP VIEW IF EXISTS v_autodinamicfilterscript CASCADE;

--
-- Удалить представление "v_autoconstraintfield_ru_ru"
--
DROP VIEW IF EXISTS v_autoconstraintfield_ru_ru CASCADE;

--
-- Удалить представление "v_autoconstraintfield_en_us"
--
DROP VIEW IF EXISTS v_autoconstraintfield_en_us CASCADE;

--
-- Удалить представление "v_autoconstraintfield"
--
DROP VIEW IF EXISTS v_autoconstraintfield CASCADE;

--
-- Удалить представление "v_autobpc_info_ru_ru"
--
DROP VIEW IF EXISTS v_autobpc_info_ru_ru CASCADE;

--
-- Удалить представление "v_autobpc_info_en_us"
--
DROP VIEW IF EXISTS v_autobpc_info_en_us CASCADE;

--
-- Удалить представление "v_autobpc_info"
--
DROP VIEW IF EXISTS v_autobpc_info CASCADE;

--
-- Удалить представление "v_autoarsms_data_ru_ru"
--
DROP VIEW IF EXISTS v_autoarsms_data_ru_ru CASCADE;

--
-- Удалить представление "v_autoarsms_data_en_us"
--
DROP VIEW IF EXISTS v_autoarsms_data_en_us CASCADE;

--
-- Удалить представление "v_autoarsms_data"
--
DROP VIEW IF EXISTS v_autoarsms_data CASCADE;

--
-- Удалить представление "v_autoarmtypes_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmtypes_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmtypes_en_us"
--
DROP VIEW IF EXISTS v_autoarmtypes_en_us CASCADE;

--
-- Удалить представление "v_autoarmtypes"
--
DROP VIEW IF EXISTS v_autoarmtypes CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnlrun"
--
DROP VIEW IF EXISTS v_autoarmjrnlrun CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnlrep"
--
DROP VIEW IF EXISTS v_autoarmjrnlrep CASCADE;

--
-- Удалить представление "v_autoarmjrnladd_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjrnladd_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjrnladd_en_us"
--
DROP VIEW IF EXISTS v_autoarmjrnladd_en_us CASCADE;

--
-- Удалить представление "v_autoarmjrnladd"
--
DROP VIEW IF EXISTS v_autoarmjrnladd CASCADE;

--
-- Удалить представление "v_autoarmjournal_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmjournal_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmjournal_en_us"
--
DROP VIEW IF EXISTS v_autoarmjournal_en_us CASCADE;

--
-- Удалить представление "v_autoarmjournal"
--
DROP VIEW IF EXISTS v_autoarmjournal CASCADE;

--
-- Удалить представление "v_autoarmd_type_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmd_type_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmd_type_en_us"
--
DROP VIEW IF EXISTS v_autoarmd_type_en_us CASCADE;

--
-- Удалить представление "v_autoarmd_type"
--
DROP VIEW IF EXISTS v_autoarmd_type CASCADE;

--
-- Удалить представление "v_autoarmd_info_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmd_info_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmd_info_en_us"
--
DROP VIEW IF EXISTS v_autoarmd_info_en_us CASCADE;

--
-- Удалить представление "v_autoarmd_info"
--
DROP VIEW IF EXISTS v_autoarmd_info CASCADE;

--
-- Удалить представление "v_autoarmd_chaneltype_ru_ru"
--
DROP VIEW IF EXISTS v_autoarmd_chaneltype_ru_ru CASCADE;

--
-- Удалить представление "v_autoarmd_chaneltype_en_us"
--
DROP VIEW IF EXISTS v_autoarmd_chaneltype_en_us CASCADE;

--
-- Удалить представление "v_autoarmd_chaneltype"
--
DROP VIEW IF EXISTS v_autoarmd_chaneltype CASCADE;

--
-- Удалить представление "v_autoarlog_data_ru_ru"
--
DROP VIEW IF EXISTS v_autoarlog_data_ru_ru CASCADE;

--
-- Удалить представление "v_autoarlog_data_en_us"
--
DROP VIEW IF EXISTS v_autoarlog_data_en_us CASCADE;

--
-- Удалить представление "v_autoarlog_data"
--
DROP VIEW IF EXISTS v_autoarlog_data CASCADE;

--
-- Удалить представление "v_autoarc_md_ru_ru"
--
DROP VIEW IF EXISTS v_autoarc_md_ru_ru CASCADE;

--
-- Удалить представление "v_autoarc_md_en_us"
--
DROP VIEW IF EXISTS v_autoarc_md_en_us CASCADE;

--
-- Удалить представление "v_autoarc_md"
--
DROP VIEW IF EXISTS v_autoarc_md CASCADE;

--
-- Удалить представление "v_autoarc_info_ru_ru"
--
DROP VIEW IF EXISTS v_autoarc_info_ru_ru CASCADE;

--
-- Удалить представление "v_autoarc_info_en_us"
--
DROP VIEW IF EXISTS v_autoarc_info_en_us CASCADE;

--
-- Удалить представление "v_autoarc_info"
--
DROP VIEW IF EXISTS v_autoarc_info CASCADE;

--
-- Удалить представление "v_autoarc_chanel_ru_ru"
--
DROP VIEW IF EXISTS v_autoarc_chanel_ru_ru CASCADE;

--
-- Удалить представление "v_autoarc_chanel_en_us"
--
DROP VIEW IF EXISTS v_autoarc_chanel_en_us CASCADE;

--
-- Удалить представление "v_autoarc_chanel"
--
DROP VIEW IF EXISTS v_autoarc_chanel CASCADE;

DELIMITER $$

--
-- Удалить функцию "workplace_mref_f"
--
DROP FUNCTION IF EXISTS workplace_mref_f$$

--
-- Удалить функцию "workplace_brief_f"
--
DROP FUNCTION IF EXISTS workplace_brief_f$$

--
-- Удалить функцию "vk_usr_mref_f"
--
DROP FUNCTION IF EXISTS vk_usr_mref_f$$

--
-- Удалить функцию "vk_usr_brief_f"
--
DROP FUNCTION IF EXISTS vk_usr_brief_f$$

--
-- Удалить функцию "vk_trgowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_trgowner_mref_f$$

--
-- Удалить функцию "vk_trgowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_trgowner_brief_f$$

--
-- Удалить функцию "vk_trginfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_trginfo_mref_f$$

--
-- Удалить функцию "vk_trginfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_trginfo_brief_f$$

--
-- Удалить функцию "vk_trgfiles_mref_f"
--
DROP FUNCTION IF EXISTS vk_trgfiles_mref_f$$

--
-- Удалить функцию "vk_trgfiles_brief_f"
--
DROP FUNCTION IF EXISTS vk_trgfiles_brief_f$$

--
-- Удалить функцию "vk_town_mref_f"
--
DROP FUNCTION IF EXISTS vk_town_mref_f$$

--
-- Удалить функцию "vk_town_brief_f"
--
DROP FUNCTION IF EXISTS vk_town_brief_f$$

--
-- Удалить функцию "vk_tasktype_mref_f"
--
DROP FUNCTION IF EXISTS vk_tasktype_mref_f$$

--
-- Удалить функцию "vk_tasktype_brief_f"
--
DROP FUNCTION IF EXISTS vk_tasktype_brief_f$$

--
-- Удалить функцию "vk_taskowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskowner_mref_f$$

--
-- Удалить функцию "vk_taskowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskowner_brief_f$$

--
-- Удалить функцию "vk_taskmsg_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskmsg_mref_f$$

--
-- Удалить функцию "vk_taskmsg_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskmsg_brief_f$$

--
-- Удалить функцию "vk_taskinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_taskinfo_mref_f$$

--
-- Удалить функцию "vk_taskinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_taskinfo_brief_f$$

--
-- Удалить функцию "vk_rotowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotowner_mref_f$$

--
-- Удалить функцию "vk_rotowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotowner_brief_f$$

--
-- Удалить функцию "vk_rotinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotinfo_mref_f$$

--
-- Удалить функцию "vk_rotinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotinfo_brief_f$$

--
-- Удалить функцию "vk_rotads_mref_f"
--
DROP FUNCTION IF EXISTS vk_rotads_mref_f$$

--
-- Удалить функцию "vk_rotads_brief_f"
--
DROP FUNCTION IF EXISTS vk_rotads_brief_f$$

--
-- Удалить функцию "vk_religion_mref_f"
--
DROP FUNCTION IF EXISTS vk_religion_mref_f$$

--
-- Удалить функцию "vk_religion_brief_f"
--
DROP FUNCTION IF EXISTS vk_religion_brief_f$$

--
-- Удалить функцию "vk_region_mref_f"
--
DROP FUNCTION IF EXISTS vk_region_mref_f$$

--
-- Удалить функцию "vk_region_brief_f"
--
DROP FUNCTION IF EXISTS vk_region_brief_f$$

--
-- Удалить функцию "vk_prj_mref_f"
--
DROP FUNCTION IF EXISTS vk_prj_mref_f$$

--
-- Удалить функцию "vk_prj_brief_f"
--
DROP FUNCTION IF EXISTS vk_prj_brief_f$$

--
-- Удалить функцию "vk_prjowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_prjowner_mref_f$$

--
-- Удалить функцию "vk_prjowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_prjowner_brief_f$$

--
-- Удалить функцию "vk_position_mref_f"
--
DROP FUNCTION IF EXISTS vk_position_mref_f$$

--
-- Удалить функцию "vk_position_brief_f"
--
DROP FUNCTION IF EXISTS vk_position_brief_f$$

--
-- Удалить функцию "vk_platform_mref_f"
--
DROP FUNCTION IF EXISTS vk_platform_mref_f$$

--
-- Удалить функцию "vk_platform_brief_f"
--
DROP FUNCTION IF EXISTS vk_platform_brief_f$$

--
-- Удалить функцию "vk_paytype_mref_f"
--
DROP FUNCTION IF EXISTS vk_paytype_mref_f$$

--
-- Удалить функцию "vk_paytype_brief_f"
--
DROP FUNCTION IF EXISTS vk_paytype_brief_f$$

--
-- Удалить функцию "vk_os_mref_f"
--
DROP FUNCTION IF EXISTS vk_os_mref_f$$

--
-- Удалить функцию "vk_os_brief_f"
--
DROP FUNCTION IF EXISTS vk_os_brief_f$$

--
-- Удалить функцию "vk_matrialstatus_mref_f"
--
DROP FUNCTION IF EXISTS vk_matrialstatus_mref_f$$

--
-- Удалить функцию "vk_matrialstatus_brief_f"
--
DROP FUNCTION IF EXISTS vk_matrialstatus_brief_f$$

--
-- Удалить функцию "vk_interest_mref_f"
--
DROP FUNCTION IF EXISTS vk_interest_mref_f$$

--
-- Удалить функцию "vk_interest_brief_f"
--
DROP FUNCTION IF EXISTS vk_interest_brief_f$$

--
-- Удалить функцию "vk_device_mref_f"
--
DROP FUNCTION IF EXISTS vk_device_mref_f$$

--
-- Удалить функцию "vk_device_brief_f"
--
DROP FUNCTION IF EXISTS vk_device_brief_f$$

--
-- Удалить функцию "vk_country_mref_f"
--
DROP FUNCTION IF EXISTS vk_country_mref_f$$

--
-- Удалить функцию "vk_country_brief_f"
--
DROP FUNCTION IF EXISTS vk_country_brief_f$$

--
-- Удалить функцию "vk_category_mref_f"
--
DROP FUNCTION IF EXISTS vk_category_mref_f$$

--
-- Удалить функцию "vk_category_brief_f"
--
DROP FUNCTION IF EXISTS vk_category_brief_f$$

--
-- Удалить функцию "vk_castate_mref_f"
--
DROP FUNCTION IF EXISTS vk_castate_mref_f$$

--
-- Удалить функцию "vk_castate_brief_f"
--
DROP FUNCTION IF EXISTS vk_castate_brief_f$$

--
-- Удалить функцию "vk_camstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_camstat_mref_f$$

--
-- Удалить функцию "vk_camstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_camstat_brief_f$$

--
-- Удалить функцию "vk_camp_mref_f"
--
DROP FUNCTION IF EXISTS vk_camp_mref_f$$

--
-- Удалить функцию "vk_camp_brief_f"
--
DROP FUNCTION IF EXISTS vk_camp_brief_f$$

--
-- Удалить функцию "vk_camowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_camowner_mref_f$$

--
-- Удалить функцию "vk_camowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_camowner_brief_f$$

--
-- Удалить функцию "vk_camovstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_camovstat_mref_f$$

--
-- Удалить функцию "vk_camovstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_camovstat_brief_f$$

--
-- Удалить функцию "vk_cab_mref_f"
--
DROP FUNCTION IF EXISTS vk_cab_mref_f$$

--
-- Удалить функцию "vk_cab_brief_f"
--
DROP FUNCTION IF EXISTS vk_cab_brief_f$$

--
-- Удалить функцию "vk_browser_mref_f"
--
DROP FUNCTION IF EXISTS vk_browser_mref_f$$

--
-- Удалить функцию "vk_browser_brief_f"
--
DROP FUNCTION IF EXISTS vk_browser_brief_f$$

--
-- Удалить функцию "vk_brkowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_brkowner_mref_f$$

--
-- Удалить функцию "vk_brkowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_brkowner_brief_f$$

--
-- Удалить функцию "vk_brkinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_brkinfo_mref_f$$

--
-- Удалить функцию "vk_brkinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_brkinfo_brief_f$$

--
-- Удалить функцию "vk_approve_mref_f"
--
DROP FUNCTION IF EXISTS vk_approve_mref_f$$

--
-- Удалить функцию "vk_approve_brief_f"
--
DROP FUNCTION IF EXISTS vk_approve_brief_f$$

--
-- Удалить функцию "vk_age_mref_f"
--
DROP FUNCTION IF EXISTS vk_age_mref_f$$

--
-- Удалить функцию "vk_age_brief_f"
--
DROP FUNCTION IF EXISTS vk_age_brief_f$$

--
-- Удалить функцию "vk_adsutm_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsutm_mref_f$$

--
-- Удалить функцию "vk_adsutm_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsutm_brief_f$$

--
-- Удалить функцию "vk_adstrg_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstrg_mref_f$$

--
-- Удалить функцию "vk_adstrg_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstrg_brief_f$$

--
-- Удалить функцию "vk_adstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstat_mref_f$$

--
-- Удалить функцию "vk_adstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstat_brief_f$$

--
-- Удалить функцию "vk_adstate_mref_f"
--
DROP FUNCTION IF EXISTS vk_adstate_mref_f$$

--
-- Удалить функцию "vk_adstate_brief_f"
--
DROP FUNCTION IF EXISTS vk_adstate_brief_f$$

--
-- Удалить функцию "vk_adsowner_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsowner_mref_f$$

--
-- Удалить функцию "vk_adsowner_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsowner_brief_f$$

--
-- Удалить функцию "vk_adsovdemografy_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsovdemografy_mref_f$$

--
-- Удалить функцию "vk_adsovdemografy_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsovdemografy_brief_f$$

--
-- Удалить функцию "vk_adsdaydemografy_mref_f"
--
DROP FUNCTION IF EXISTS vk_adsdaydemografy_mref_f$$

--
-- Удалить функцию "vk_adsdaydemografy_brief_f"
--
DROP FUNCTION IF EXISTS vk_adsdaydemografy_brief_f$$

--
-- Удалить функцию "vk_adovstat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adovstat_mref_f$$

--
-- Удалить функцию "vk_adovstat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adovstat_brief_f$$

--
-- Удалить функцию "vk_adinfo_mref_f"
--
DROP FUNCTION IF EXISTS vk_adinfo_mref_f$$

--
-- Удалить функцию "vk_adinfo_brief_f"
--
DROP FUNCTION IF EXISTS vk_adinfo_brief_f$$

--
-- Удалить функцию "vk_adformat_mref_f"
--
DROP FUNCTION IF EXISTS vk_adformat_mref_f$$

--
-- Удалить функцию "vk_adformat_brief_f"
--
DROP FUNCTION IF EXISTS vk_adformat_brief_f$$

--
-- Удалить функцию "vkusr_export_f"
--
DROP FUNCTION IF EXISTS vkusr_export_f$$

--
-- Удалить функцию "vkusr_access_f"
--
DROP FUNCTION IF EXISTS vkusr_access_f$$

--
-- Удалить функцию "vktsk_export_f"
--
DROP FUNCTION IF EXISTS vktsk_export_f$$

--
-- Удалить функцию "vktsk_access_f"
--
DROP FUNCTION IF EXISTS vktsk_access_f$$

--
-- Удалить функцию "vktrg_export_f"
--
DROP FUNCTION IF EXISTS vktrg_export_f$$

--
-- Удалить функцию "vktrg_access_f"
--
DROP FUNCTION IF EXISTS vktrg_access_f$$

--
-- Удалить функцию "vkrot_export_f"
--
DROP FUNCTION IF EXISTS vkrot_export_f$$

--
-- Удалить функцию "vkrot_access_f"
--
DROP FUNCTION IF EXISTS vkrot_access_f$$

--
-- Удалить функцию "vkprj_export_f"
--
DROP FUNCTION IF EXISTS vkprj_export_f$$

--
-- Удалить функцию "vkprj_access_f"
--
DROP FUNCTION IF EXISTS vkprj_access_f$$

--
-- Удалить функцию "vkcam_export_f"
--
DROP FUNCTION IF EXISTS vkcam_export_f$$

--
-- Удалить функцию "vkcam_access_f"
--
DROP FUNCTION IF EXISTS vkcam_access_f$$

--
-- Удалить функцию "vkbrk_export_f"
--
DROP FUNCTION IF EXISTS vkbrk_export_f$$

--
-- Удалить функцию "vkbrk_access_f"
--
DROP FUNCTION IF EXISTS vkbrk_access_f$$

--
-- Удалить функцию "vkads_export_f"
--
DROP FUNCTION IF EXISTS vkads_export_f$$

--
-- Удалить функцию "vkads_access_f"
--
DROP FUNCTION IF EXISTS vkads_access_f$$

--
-- Удалить функцию "viewcolumn_mref_f"
--
DROP FUNCTION IF EXISTS viewcolumn_mref_f$$

--
-- Удалить функцию "viewcolumn_brief_f"
--
DROP FUNCTION IF EXISTS viewcolumn_brief_f$$

--
-- Удалить функцию "vdt_export_f"
--
DROP FUNCTION IF EXISTS vdt_export_f$$

--
-- Удалить функцию "vdt_access_f"
--
DROP FUNCTION IF EXISTS vdt_access_f$$

--
-- Удалить функцию "vdtt_export_f"
--
DROP FUNCTION IF EXISTS vdtt_export_f$$

--
-- Удалить функцию "vdtt_access_f"
--
DROP FUNCTION IF EXISTS vdtt_access_f$$

--
-- Удалить функцию "vdrg_export_f"
--
DROP FUNCTION IF EXISTS vdrg_export_f$$

--
-- Удалить функцию "vdrg_access_f"
--
DROP FUNCTION IF EXISTS vdrg_access_f$$

--
-- Удалить функцию "vdrel_export_f"
--
DROP FUNCTION IF EXISTS vdrel_export_f$$

--
-- Удалить функцию "vdrel_access_f"
--
DROP FUNCTION IF EXISTS vdrel_access_f$$

--
-- Удалить функцию "vdpt_export_f"
--
DROP FUNCTION IF EXISTS vdpt_export_f$$

--
-- Удалить функцию "vdpt_access_f"
--
DROP FUNCTION IF EXISTS vdpt_access_f$$

--
-- Удалить функцию "vdpos_export_f"
--
DROP FUNCTION IF EXISTS vdpos_export_f$$

--
-- Удалить функцию "vdpos_access_f"
--
DROP FUNCTION IF EXISTS vdpos_access_f$$

--
-- Удалить функцию "vdos_export_f"
--
DROP FUNCTION IF EXISTS vdos_export_f$$

--
-- Удалить функцию "vdos_access_f"
--
DROP FUNCTION IF EXISTS vdos_access_f$$

--
-- Удалить функцию "vdmstat_export_f"
--
DROP FUNCTION IF EXISTS vdmstat_export_f$$

--
-- Удалить функцию "vdmstat_access_f"
--
DROP FUNCTION IF EXISTS vdmstat_access_f$$

--
-- Удалить функцию "vdinter_export_f"
--
DROP FUNCTION IF EXISTS vdinter_export_f$$

--
-- Удалить функцию "vdinter_access_f"
--
DROP FUNCTION IF EXISTS vdinter_access_f$$

--
-- Удалить функцию "vdfrmt_export_f"
--
DROP FUNCTION IF EXISTS vdfrmt_export_f$$

--
-- Удалить функцию "vdfrmt_access_f"
--
DROP FUNCTION IF EXISTS vdfrmt_access_f$$

--
-- Удалить функцию "vddev_export_f"
--
DROP FUNCTION IF EXISTS vddev_export_f$$

--
-- Удалить функцию "vddev_access_f"
--
DROP FUNCTION IF EXISTS vddev_access_f$$

--
-- Удалить функцию "vdcst_export_f"
--
DROP FUNCTION IF EXISTS vdcst_export_f$$

--
-- Удалить функцию "vdcst_access_f"
--
DROP FUNCTION IF EXISTS vdcst_access_f$$

--
-- Удалить функцию "vdcn_export_f"
--
DROP FUNCTION IF EXISTS vdcn_export_f$$

--
-- Удалить функцию "vdcn_access_f"
--
DROP FUNCTION IF EXISTS vdcn_access_f$$

--
-- Удалить функцию "vdcat_export_f"
--
DROP FUNCTION IF EXISTS vdcat_export_f$$

--
-- Удалить функцию "vdcat_access_f"
--
DROP FUNCTION IF EXISTS vdcat_access_f$$

--
-- Удалить функцию "vdbrw_export_f"
--
DROP FUNCTION IF EXISTS vdbrw_export_f$$

--
-- Удалить функцию "vdbrw_access_f"
--
DROP FUNCTION IF EXISTS vdbrw_access_f$$

--
-- Удалить функцию "vdast_export_f"
--
DROP FUNCTION IF EXISTS vdast_export_f$$

--
-- Удалить функцию "vdast_access_f"
--
DROP FUNCTION IF EXISTS vdast_access_f$$

--
-- Удалить функцию "vdappr_export_f"
--
DROP FUNCTION IF EXISTS vdappr_export_f$$

--
-- Удалить функцию "vdappr_access_f"
--
DROP FUNCTION IF EXISTS vdappr_access_f$$

--
-- Удалить функцию "vdapl_export_f"
--
DROP FUNCTION IF EXISTS vdapl_export_f$$

--
-- Удалить функцию "vdapl_access_f"
--
DROP FUNCTION IF EXISTS vdapl_access_f$$

--
-- Удалить функцию "vdage_export_f"
--
DROP FUNCTION IF EXISTS vdage_export_f$$

--
-- Удалить функцию "vdage_access_f"
--
DROP FUNCTION IF EXISTS vdage_access_f$$

--
-- Удалить функцию "validator_mref_f"
--
DROP FUNCTION IF EXISTS validator_mref_f$$

--
-- Удалить функцию "validator_brief_f"
--
DROP FUNCTION IF EXISTS validator_brief_f$$

--
-- Удалить функцию "users_mref_f"
--
DROP FUNCTION IF EXISTS users_mref_f$$

--
-- Удалить функцию "users_brief_f"
--
DROP FUNCTION IF EXISTS users_brief_f$$

--
-- Удалить функцию "uniqueconstraint_mref_f"
--
DROP FUNCTION IF EXISTS uniqueconstraint_mref_f$$

--
-- Удалить функцию "uniqueconstraint_brief_f"
--
DROP FUNCTION IF EXISTS uniqueconstraint_brief_f$$

--
-- Удалить функцию "typemenu_mref_f"
--
DROP FUNCTION IF EXISTS typemenu_mref_f$$

--
-- Удалить функцию "typemenu_brief_f"
--
DROP FUNCTION IF EXISTS typemenu_brief_f$$

--
-- Удалить функцию "totrn_export_f"
--
DROP FUNCTION IF EXISTS totrn_export_f$$

--
-- Удалить функцию "totrn_access_f"
--
DROP FUNCTION IF EXISTS totrn_access_f$$

--
-- Удалить функцию "totask_export_f"
--
DROP FUNCTION IF EXISTS totask_export_f$$

--
-- Удалить функцию "totask_access_f"
--
DROP FUNCTION IF EXISTS totask_access_f$$

--
-- Удалить функцию "tosched_export_f"
--
DROP FUNCTION IF EXISTS tosched_export_f$$

--
-- Удалить функцию "tosched_access_f"
--
DROP FUNCTION IF EXISTS tosched_access_f$$

--
-- Удалить функцию "tor_export_f"
--
DROP FUNCTION IF EXISTS tor_export_f$$

--
-- Удалить функцию "tor_access_f"
--
DROP FUNCTION IF EXISTS tor_access_f$$

--
-- Удалить функцию "toop_export_f"
--
DROP FUNCTION IF EXISTS toop_export_f$$

--
-- Удалить функцию "toop_access_f"
--
DROP FUNCTION IF EXISTS toop_access_f$$

--
-- Удалить функцию "toimg_export_f"
--
DROP FUNCTION IF EXISTS toimg_export_f$$

--
-- Удалить функцию "toimg_access_f"
--
DROP FUNCTION IF EXISTS toimg_access_f$$

--
-- Удалить функцию "tod_valtype_mref_f"
--
DROP FUNCTION IF EXISTS tod_valtype_mref_f$$

--
-- Удалить функцию "tod_valtype_brief_f"
--
DROP FUNCTION IF EXISTS tod_valtype_brief_f$$

--
-- Удалить функцию "tod_trand_mref_f"
--
DROP FUNCTION IF EXISTS tod_trand_mref_f$$

--
-- Удалить функцию "tod_trand_brief_f"
--
DROP FUNCTION IF EXISTS tod_trand_brief_f$$

--
-- Удалить функцию "tod_system_mref_f"
--
DROP FUNCTION IF EXISTS tod_system_mref_f$$

--
-- Удалить функцию "tod_system_brief_f"
--
DROP FUNCTION IF EXISTS tod_system_brief_f$$

--
-- Удалить функцию "tod_st_mref_f"
--
DROP FUNCTION IF EXISTS tod_st_mref_f$$

--
-- Удалить функцию "tod_st_brief_f"
--
DROP FUNCTION IF EXISTS tod_st_brief_f$$

--
-- Удалить функцию "tod_oprole_mref_f"
--
DROP FUNCTION IF EXISTS tod_oprole_mref_f$$

--
-- Удалить функцию "tod_oprole_brief_f"
--
DROP FUNCTION IF EXISTS tod_oprole_brief_f$$

--
-- Удалить функцию "tod_model_mref_f"
--
DROP FUNCTION IF EXISTS tod_model_mref_f$$

--
-- Удалить функцию "tod_model_brief_f"
--
DROP FUNCTION IF EXISTS tod_model_brief_f$$

--
-- Удалить функцию "tod_material_mref_f"
--
DROP FUNCTION IF EXISTS tod_material_mref_f$$

--
-- Удалить функцию "tod_material_brief_f"
--
DROP FUNCTION IF EXISTS tod_material_brief_f$$

--
-- Удалить функцию "tod_factory_mref_f"
--
DROP FUNCTION IF EXISTS tod_factory_mref_f$$

--
-- Удалить функцию "tod_factory_brief_f"
--
DROP FUNCTION IF EXISTS tod_factory_brief_f$$

--
-- Удалить функцию "tod_export_f"
--
DROP FUNCTION IF EXISTS tod_export_f$$

--
-- Удалить функцию "tod_edizm_mref_f"
--
DROP FUNCTION IF EXISTS tod_edizm_mref_f$$

--
-- Удалить функцию "tod_edizm_brief_f"
--
DROP FUNCTION IF EXISTS tod_edizm_brief_f$$

--
-- Удалить функцию "tod_building_mref_f"
--
DROP FUNCTION IF EXISTS tod_building_mref_f$$

--
-- Удалить функцию "tod_building_brief_f"
--
DROP FUNCTION IF EXISTS tod_building_brief_f$$

--
-- Удалить функцию "tod_bug_mref_f"
--
DROP FUNCTION IF EXISTS tod_bug_mref_f$$

--
-- Удалить функцию "tod_bug_brief_f"
--
DROP FUNCTION IF EXISTS tod_bug_brief_f$$

--
-- Удалить функцию "tod_access_f"
--
DROP FUNCTION IF EXISTS tod_access_f$$

--
-- Удалить функцию "tocard_export_f"
--
DROP FUNCTION IF EXISTS tocard_export_f$$

--
-- Удалить функцию "tocard_access_f"
--
DROP FUNCTION IF EXISTS tocard_access_f$$

--
-- Удалить функцию "the_session_mref_f"
--
DROP FUNCTION IF EXISTS the_session_mref_f$$

--
-- Удалить функцию "the_session_brief_f"
--
DROP FUNCTION IF EXISTS the_session_brief_f$$

--
-- Удалить функцию "sysrefcache_mref_f"
--
DROP FUNCTION IF EXISTS sysrefcache_mref_f$$

--
-- Удалить функцию "sysrefcache_brief_f"
--
DROP FUNCTION IF EXISTS sysrefcache_brief_f$$

--
-- Удалить функцию "syslog_mref_f"
--
DROP FUNCTION IF EXISTS syslog_mref_f$$

--
-- Удалить функцию "syslog_brief_f"
--
DROP FUNCTION IF EXISTS syslog_brief_f$$

--
-- Удалить функцию "structrestriction_mref_f"
--
DROP FUNCTION IF EXISTS structrestriction_mref_f$$

--
-- Удалить функцию "structrestriction_brief_f"
--
DROP FUNCTION IF EXISTS structrestriction_brief_f$$

--
-- Удалить функцию "stdnumerator_export_f"
--
DROP FUNCTION IF EXISTS stdnumerator_export_f$$

--
-- Удалить функцию "stdnumerator_access_f"
--
DROP FUNCTION IF EXISTS stdnumerator_access_f$$

--
-- Удалить функцию "stdinfostore_export_f"
--
DROP FUNCTION IF EXISTS stdinfostore_export_f$$

--
-- Удалить функцию "stdinfostore_access_f"
--
DROP FUNCTION IF EXISTS stdinfostore_access_f$$

--
-- Удалить функцию "sharedmethod_mref_f"
--
DROP FUNCTION IF EXISTS sharedmethod_mref_f$$

--
-- Удалить функцию "sharedmethod_brief_f"
--
DROP FUNCTION IF EXISTS sharedmethod_brief_f$$

--
-- Удалить функцию "script_mref_f"
--
DROP FUNCTION IF EXISTS script_mref_f$$

--
-- Удалить функцию "script_brief_f"
--
DROP FUNCTION IF EXISTS script_brief_f$$

--
-- Удалить функцию "rptstruct_mref_f"
--
DROP FUNCTION IF EXISTS rptstruct_mref_f$$

--
-- Удалить функцию "rptstruct_brief_f"
--
DROP FUNCTION IF EXISTS rptstruct_brief_f$$

--
-- Удалить функцию "rptformula_mref_f"
--
DROP FUNCTION IF EXISTS rptformula_mref_f$$

--
-- Удалить функцию "rptformula_brief_f"
--
DROP FUNCTION IF EXISTS rptformula_brief_f$$

--
-- Удалить функцию "rptfields_mref_f"
--
DROP FUNCTION IF EXISTS rptfields_mref_f$$

--
-- Удалить функцию "rptfields_brief_f"
--
DROP FUNCTION IF EXISTS rptfields_brief_f$$

--
-- Удалить функцию "roles_export_f"
--
DROP FUNCTION IF EXISTS roles_export_f$$

--
-- Удалить функцию "roles_access_f"
--
DROP FUNCTION IF EXISTS roles_access_f$$

--
-- Удалить функцию "reports_mref_f"
--
DROP FUNCTION IF EXISTS reports_mref_f$$

--
-- Удалить функцию "reports_brief_f"
--
DROP FUNCTION IF EXISTS reports_brief_f$$

--
-- Удалить функцию "part_mref_f"
--
DROP FUNCTION IF EXISTS part_mref_f$$

--
-- Удалить функцию "part_brief_f"
--
DROP FUNCTION IF EXISTS part_brief_f$$

--
-- Удалить функцию "partview_mref_f"
--
DROP FUNCTION IF EXISTS partview_mref_f$$

--
-- Удалить функцию "partview_lnk_mref_f"
--
DROP FUNCTION IF EXISTS partview_lnk_mref_f$$

--
-- Удалить функцию "partview_lnk_brief_f"
--
DROP FUNCTION IF EXISTS partview_lnk_brief_f$$

--
-- Удалить функцию "partview_brief_f"
--
DROP FUNCTION IF EXISTS partview_brief_f$$

--
-- Удалить функцию "partparammap_mref_f"
--
DROP FUNCTION IF EXISTS partparammap_mref_f$$

--
-- Удалить функцию "partparammap_brief_f"
--
DROP FUNCTION IF EXISTS partparammap_brief_f$$

--
-- Удалить функцию "partmenu_mref_f"
--
DROP FUNCTION IF EXISTS partmenu_mref_f$$

--
-- Удалить функцию "partmenu_brief_f"
--
DROP FUNCTION IF EXISTS partmenu_brief_f$$

--
-- Удалить функцию "parentpackage_mref_f"
--
DROP FUNCTION IF EXISTS parentpackage_mref_f$$

--
-- Удалить функцию "parentpackage_brief_f"
--
DROP FUNCTION IF EXISTS parentpackage_brief_f$$

--
-- Удалить функцию "parameters_mref_f"
--
DROP FUNCTION IF EXISTS parameters_mref_f$$

--
-- Удалить функцию "parameters_brief_f"
--
DROP FUNCTION IF EXISTS parameters_brief_f$$

--
-- Удалить функцию "objstatus_mref_f"
--
DROP FUNCTION IF EXISTS objstatus_mref_f$$

--
-- Удалить функцию "objstatus_brief_f"
--
DROP FUNCTION IF EXISTS objstatus_brief_f$$

--
-- Удалить функцию "objecttype_mref_f"
--
DROP FUNCTION IF EXISTS objecttype_mref_f$$

--
-- Удалить функцию "objecttype_brief_f"
--
DROP FUNCTION IF EXISTS objecttype_brief_f$$

--
-- Удалить функцию "objectmode_mref_f"
--
DROP FUNCTION IF EXISTS objectmode_mref_f$$

--
-- Удалить функцию "objectmode_brief_f"
--
DROP FUNCTION IF EXISTS objectmode_brief_f$$

--
-- Удалить функцию "num_zones_mref_f"
--
DROP FUNCTION IF EXISTS num_zones_mref_f$$

--
-- Удалить функцию "num_zones_brief_f"
--
DROP FUNCTION IF EXISTS num_zones_brief_f$$

--
-- Удалить функцию "num_values_mref_f"
--
DROP FUNCTION IF EXISTS num_values_mref_f$$

--
-- Удалить функцию "num_values_brief_f"
--
DROP FUNCTION IF EXISTS num_values_brief_f$$

--
-- Удалить функцию "num_head_mref_f"
--
DROP FUNCTION IF EXISTS num_head_mref_f$$

--
-- Удалить функцию "num_head_brief_f"
--
DROP FUNCTION IF EXISTS num_head_brief_f$$

--
-- Удалить функцию "NotArchived"
--
DROP FUNCTION IF EXISTS NotArchived$$

--
-- Удалить функцию "nextstate_mref_f"
--
DROP FUNCTION IF EXISTS nextstate_mref_f$$

--
-- Удалить функцию "nextstate_brief_f"
--
DROP FUNCTION IF EXISTS nextstate_brief_f$$

--
-- Удалить функцию "mtzwp_export_f"
--
DROP FUNCTION IF EXISTS mtzwp_export_f$$

--
-- Удалить функцию "mtzwp_access_f"
--
DROP FUNCTION IF EXISTS mtzwp_access_f$$

--
-- Удалить функцию "mtzusers_export_f"
--
DROP FUNCTION IF EXISTS mtzusers_export_f$$

--
-- Удалить функцию "mtzusers_access_f"
--
DROP FUNCTION IF EXISTS mtzusers_access_f$$

--
-- Удалить функцию "mtzsystem_export_f"
--
DROP FUNCTION IF EXISTS mtzsystem_export_f$$

--
-- Удалить функцию "mtzsystem_access_f"
--
DROP FUNCTION IF EXISTS mtzsystem_access_f$$

--
-- Удалить функцию "mtzrprt_export_f"
--
DROP FUNCTION IF EXISTS mtzrprt_export_f$$

--
-- Удалить функцию "mtzrprt_access_f"
--
DROP FUNCTION IF EXISTS mtzrprt_access_f$$

--
-- Удалить функцию "mtzmetamodel_export_f"
--
DROP FUNCTION IF EXISTS mtzmetamodel_export_f$$

--
-- Удалить функцию "mtzmetamodel_access_f"
--
DROP FUNCTION IF EXISTS mtzmetamodel_access_f$$

--
-- Удалить функцию "mtzjrnl_export_f"
--
DROP FUNCTION IF EXISTS mtzjrnl_export_f$$

--
-- Удалить функцию "mtzjrnl_access_f"
--
DROP FUNCTION IF EXISTS mtzjrnl_access_f$$

--
-- Удалить функцию "mtzfltr_export_f"
--
DROP FUNCTION IF EXISTS mtzfltr_export_f$$

--
-- Удалить функцию "mtzfltr_access_f"
--
DROP FUNCTION IF EXISTS mtzfltr_access_f$$

--
-- Удалить функцию "mtzext_export_f"
--
DROP FUNCTION IF EXISTS mtzext_export_f$$

--
-- Удалить функцию "mtzext_def_mref_f"
--
DROP FUNCTION IF EXISTS mtzext_def_mref_f$$

--
-- Удалить функцию "mtzext_def_brief_f"
--
DROP FUNCTION IF EXISTS mtzext_def_brief_f$$

--
-- Удалить функцию "mtzext_access_f"
--
DROP FUNCTION IF EXISTS mtzext_access_f$$

--
-- Удалить функцию "mtzextrel_mref_f"
--
DROP FUNCTION IF EXISTS mtzextrel_mref_f$$

--
-- Удалить функцию "mtzextrel_brief_f"
--
DROP FUNCTION IF EXISTS mtzextrel_brief_f$$

--
-- Удалить функцию "mtzapp_mref_f"
--
DROP FUNCTION IF EXISTS mtzapp_mref_f$$

--
-- Удалить функцию "mtzapp_brief_f"
--
DROP FUNCTION IF EXISTS mtzapp_brief_f$$

--
-- Удалить функцию "mtz2job_export_f"
--
DROP FUNCTION IF EXISTS mtz2job_export_f$$

--
-- Удалить функцию "mtz2job_access_f"
--
DROP FUNCTION IF EXISTS mtz2job_access_f$$

--
-- Удалить функцию "methodrestriction_mref_f"
--
DROP FUNCTION IF EXISTS methodrestriction_mref_f$$

--
-- Удалить функцию "methodrestriction_brief_f"
--
DROP FUNCTION IF EXISTS methodrestriction_brief_f$$

--
-- Удалить функцию "localizeinfo_mref_f"
--
DROP FUNCTION IF EXISTS localizeinfo_mref_f$$

--
-- Удалить функцию "localizeinfo_brief_f"
--
DROP FUNCTION IF EXISTS localizeinfo_brief_f$$

--
-- Удалить функцию "journal_mref_f"
--
DROP FUNCTION IF EXISTS journal_mref_f$$

--
-- Удалить функцию "journal_brief_f"
--
DROP FUNCTION IF EXISTS journal_brief_f$$

--
-- Удалить функцию "journalsrc_mref_f"
--
DROP FUNCTION IF EXISTS journalsrc_mref_f$$

--
-- Удалить функцию "journalsrc_brief_f"
--
DROP FUNCTION IF EXISTS journalsrc_brief_f$$

--
-- Удалить функцию "journalcolumn_mref_f"
--
DROP FUNCTION IF EXISTS journalcolumn_mref_f$$

--
-- Удалить функцию "journalcolumn_brief_f"
--
DROP FUNCTION IF EXISTS journalcolumn_brief_f$$

--
-- Удалить функцию "jcolumnsource_mref_f"
--
DROP FUNCTION IF EXISTS jcolumnsource_mref_f$$

--
-- Удалить функцию "jcolumnsource_brief_f"
--
DROP FUNCTION IF EXISTS jcolumnsource_brief_f$$

--
-- Удалить функцию "iu_u_def_mref_f"
--
DROP FUNCTION IF EXISTS iu_u_def_mref_f$$

--
-- Удалить функцию "iu_u_def_brief_f"
--
DROP FUNCTION IF EXISTS iu_u_def_brief_f$$

--
-- Удалить функцию "iu_rcfg_mod_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_mod_mref_f$$

--
-- Удалить функцию "iu_rcfg_mod_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_mod_brief_f$$

--
-- Удалить функцию "iu_rcfg_docmode_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_docmode_mref_f$$

--
-- Удалить функцию "iu_rcfg_docmode_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_docmode_brief_f$$

--
-- Удалить функцию "iu_rcfg_def_mref_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_def_mref_f$$

--
-- Удалить функцию "iu_rcfg_def_brief_f"
--
DROP FUNCTION IF EXISTS iu_rcfg_def_brief_f$$

--
-- Удалить функцию "iu_int_modules_mref_f"
--
DROP FUNCTION IF EXISTS iu_int_modules_mref_f$$

--
-- Удалить функцию "iu_int_modules_brief_f"
--
DROP FUNCTION IF EXISTS iu_int_modules_brief_f$$

--
-- Удалить функцию "iu_crole_mref_f"
--
DROP FUNCTION IF EXISTS iu_crole_mref_f$$

--
-- Удалить функцию "iu_crole_brief_f"
--
DROP FUNCTION IF EXISTS iu_crole_brief_f$$

--
-- Удалить функцию "instance_mref_f"
--
DROP FUNCTION IF EXISTS instance_mref_f$$

--
-- Удалить функцию "instance_brief_f"
--
DROP FUNCTION IF EXISTS instance_brief_f$$

--
-- Удалить функцию "instancevalidator_mref_f"
--
DROP FUNCTION IF EXISTS instancevalidator_mref_f$$

--
-- Удалить функцию "instancevalidator_brief_f"
--
DROP FUNCTION IF EXISTS instancevalidator_brief_f$$

--
-- Удалить функцию "groupuser_mref_f"
--
DROP FUNCTION IF EXISTS groupuser_mref_f$$

--
-- Удалить функцию "groupuser_brief_f"
--
DROP FUNCTION IF EXISTS groupuser_brief_f$$

--
-- Удалить функцию "groups_mref_f"
--
DROP FUNCTION IF EXISTS groups_mref_f$$

--
-- Удалить функцию "groups_brief_f"
--
DROP FUNCTION IF EXISTS groups_brief_f$$

--
-- Удалить функцию "getmodulename"
--
DROP FUNCTION IF EXISTS getmodulename$$

--
-- Удалить функцию "getidfromxml"
--
DROP FUNCTION IF EXISTS getidfromxml$$

--
-- Удалить функцию "getclientsms"
--
DROP FUNCTION IF EXISTS getclientsms$$

--
-- Удалить функцию "getbrieffromxml"
--
DROP FUNCTION IF EXISTS getbrieffromxml$$

--
-- Удалить функцию "genreference_mref_f"
--
DROP FUNCTION IF EXISTS genreference_mref_f$$

--
-- Удалить функцию "genreference_brief_f"
--
DROP FUNCTION IF EXISTS genreference_brief_f$$

--
-- Удалить функцию "genpackage_mref_f"
--
DROP FUNCTION IF EXISTS genpackage_mref_f$$

--
-- Удалить функцию "genpackage_brief_f"
--
DROP FUNCTION IF EXISTS genpackage_brief_f$$

--
-- Удалить функцию "genmanualcode_mref_f"
--
DROP FUNCTION IF EXISTS genmanualcode_mref_f$$

--
-- Удалить функцию "genmanualcode_brief_f"
--
DROP FUNCTION IF EXISTS genmanualcode_brief_f$$

--
-- Удалить функцию "generator_target_mref_f"
--
DROP FUNCTION IF EXISTS generator_target_mref_f$$

--
-- Удалить функцию "generator_target_brief_f"
--
DROP FUNCTION IF EXISTS generator_target_brief_f$$

--
-- Удалить функцию "gencontrols_mref_f"
--
DROP FUNCTION IF EXISTS gencontrols_mref_f$$

--
-- Удалить функцию "gencontrols_brief_f"
--
DROP FUNCTION IF EXISTS gencontrols_brief_f$$

--
-- Удалить функцию "g2b"
--
DROP FUNCTION IF EXISTS g2b$$

--
-- Удалить функцию "fldextenders_mref_f"
--
DROP FUNCTION IF EXISTS fldextenders_mref_f$$

--
-- Удалить функцию "fldextenders_brief_f"
--
DROP FUNCTION IF EXISTS fldextenders_brief_f$$

--
-- Удалить функцию "filters_mref_f"
--
DROP FUNCTION IF EXISTS filters_mref_f$$

--
-- Удалить функцию "filters_brief_f"
--
DROP FUNCTION IF EXISTS filters_brief_f$$

--
-- Удалить функцию "filterfieldgroup_mref_f"
--
DROP FUNCTION IF EXISTS filterfieldgroup_mref_f$$

--
-- Удалить функцию "filterfieldgroup_brief_f"
--
DROP FUNCTION IF EXISTS filterfieldgroup_brief_f$$

--
-- Удалить функцию "fileterfield_mref_f"
--
DROP FUNCTION IF EXISTS fileterfield_mref_f$$

--
-- Удалить функцию "fileterfield_brief_f"
--
DROP FUNCTION IF EXISTS fileterfield_brief_f$$

--
-- Удалить функцию "field_mref_f"
--
DROP FUNCTION IF EXISTS field_mref_f$$

--
-- Удалить функцию "field_brief_f"
--
DROP FUNCTION IF EXISTS field_brief_f$$

--
-- Удалить функцию "fieldvalidator_mref_f"
--
DROP FUNCTION IF EXISTS fieldvalidator_mref_f$$

--
-- Удалить функцию "fieldvalidator_brief_f"
--
DROP FUNCTION IF EXISTS fieldvalidator_brief_f$$

--
-- Удалить функцию "fieldtype_mref_f"
--
DROP FUNCTION IF EXISTS fieldtype_mref_f$$

--
-- Удалить функцию "fieldtype_brief_f"
--
DROP FUNCTION IF EXISTS fieldtype_brief_f$$

--
-- Удалить функцию "fieldtypemap_mref_f"
--
DROP FUNCTION IF EXISTS fieldtypemap_mref_f$$

--
-- Удалить функцию "fieldtypemap_brief_f"
--
DROP FUNCTION IF EXISTS fieldtypemap_brief_f$$

--
-- Удалить функцию "fieldsrcdef_mref_f"
--
DROP FUNCTION IF EXISTS fieldsrcdef_mref_f$$

--
-- Удалить функцию "fieldsrcdef_brief_f"
--
DROP FUNCTION IF EXISTS fieldsrcdef_brief_f$$

--
-- Удалить функцию "fieldrestriction_mref_f"
--
DROP FUNCTION IF EXISTS fieldrestriction_mref_f$$

--
-- Удалить функцию "fieldrestriction_brief_f"
--
DROP FUNCTION IF EXISTS fieldrestriction_brief_f$$

--
-- Удалить функцию "fieldparammap_mref_f"
--
DROP FUNCTION IF EXISTS fieldparammap_mref_f$$

--
-- Удалить функцию "fieldparammap_brief_f"
--
DROP FUNCTION IF EXISTS fieldparammap_brief_f$$

--
-- Удалить функцию "fieldmenu_mref_f"
--
DROP FUNCTION IF EXISTS fieldmenu_mref_f$$

--
-- Удалить функцию "fieldmenu_brief_f"
--
DROP FUNCTION IF EXISTS fieldmenu_brief_f$$

--
-- Удалить функцию "fieldexpression_mref_f"
--
DROP FUNCTION IF EXISTS fieldexpression_mref_f$$

--
-- Удалить функцию "fieldexpression_brief_f"
--
DROP FUNCTION IF EXISTS fieldexpression_brief_f$$

--
-- Удалить функцию "extenderinterface_mref_f"
--
DROP FUNCTION IF EXISTS extenderinterface_mref_f$$

--
-- Удалить функцию "extenderinterface_brief_f"
--
DROP FUNCTION IF EXISTS extenderinterface_brief_f$$

--
-- Удалить функцию "epfilterlink_mref_f"
--
DROP FUNCTION IF EXISTS epfilterlink_mref_f$$

--
-- Удалить функцию "epfilterlink_brief_f"
--
DROP FUNCTION IF EXISTS epfilterlink_brief_f$$

--
-- Удалить функцию "enumitem_mref_f"
--
DROP FUNCTION IF EXISTS enumitem_mref_f$$

--
-- Удалить функцию "enumitem_brief_f"
--
DROP FUNCTION IF EXISTS enumitem_brief_f$$

--
-- Удалить функцию "entrypoints_mref_f"
--
DROP FUNCTION IF EXISTS entrypoints_mref_f$$

--
-- Удалить функцию "entrypoints_brief_f"
--
DROP FUNCTION IF EXISTS entrypoints_brief_f$$

--
-- Удалить функцию "dinamicfilterscript_mref_f"
--
DROP FUNCTION IF EXISTS dinamicfilterscript_mref_f$$

--
-- Удалить функцию "dinamicfilterscript_brief_f"
--
DROP FUNCTION IF EXISTS dinamicfilterscript_brief_f$$

--
-- Удалить функцию "constraintfield_mref_f"
--
DROP FUNCTION IF EXISTS constraintfield_mref_f$$

--
-- Удалить функцию "constraintfield_brief_f"
--
DROP FUNCTION IF EXISTS constraintfield_brief_f$$

--
-- Удалить функцию "checkoperation"
--
DROP FUNCTION IF EXISTS checkoperation$$

--
-- Удалить функцию "bpu_export_f"
--
DROP FUNCTION IF EXISTS bpu_export_f$$

--
-- Удалить функцию "bpu_access_f"
--
DROP FUNCTION IF EXISTS bpu_access_f$$

--
-- Удалить функцию "bprcfg_export_f"
--
DROP FUNCTION IF EXISTS bprcfg_export_f$$

--
-- Удалить функцию "bprcfg_access_f"
--
DROP FUNCTION IF EXISTS bprcfg_access_f$$

--
-- Удалить функцию "bpdr_export_f"
--
DROP FUNCTION IF EXISTS bpdr_export_f$$

--
-- Удалить функцию "bpdr_access_f"
--
DROP FUNCTION IF EXISTS bpdr_access_f$$

--
-- Удалить функцию "bpdi_export_f"
--
DROP FUNCTION IF EXISTS bpdi_export_f$$

--
-- Удалить функцию "bpdi_access_f"
--
DROP FUNCTION IF EXISTS bpdi_access_f$$

--
-- Удалить функцию "bpc_info_mref_f"
--
DROP FUNCTION IF EXISTS bpc_info_mref_f$$

--
-- Удалить функцию "bpc_info_brief_f"
--
DROP FUNCTION IF EXISTS bpc_info_brief_f$$

--
-- Удалить функцию "bpc_export_f"
--
DROP FUNCTION IF EXISTS bpc_export_f$$

--
-- Удалить функцию "bpc_access_f"
--
DROP FUNCTION IF EXISTS bpc_access_f$$

--
-- Удалить функцию "b2g"
--
DROP FUNCTION IF EXISTS b2g$$

--
-- Удалить функцию "arsms_export_f"
--
DROP FUNCTION IF EXISTS arsms_export_f$$

--
-- Удалить функцию "arsms_data_mref_f"
--
DROP FUNCTION IF EXISTS arsms_data_mref_f$$

--
-- Удалить функцию "arsms_data_brief_f"
--
DROP FUNCTION IF EXISTS arsms_data_brief_f$$

--
-- Удалить функцию "arsms_access_f"
--
DROP FUNCTION IF EXISTS arsms_access_f$$

--
-- Удалить функцию "armtypes_mref_f"
--
DROP FUNCTION IF EXISTS armtypes_mref_f$$

--
-- Удалить функцию "armtypes_brief_f"
--
DROP FUNCTION IF EXISTS armtypes_brief_f$$

--
-- Удалить функцию "armjrnlrun_mref_f"
--
DROP FUNCTION IF EXISTS armjrnlrun_mref_f$$

--
-- Удалить функцию "armjrnlrun_brief_f"
--
DROP FUNCTION IF EXISTS armjrnlrun_brief_f$$

--
-- Удалить функцию "armjrnlrep_mref_f"
--
DROP FUNCTION IF EXISTS armjrnlrep_mref_f$$

--
-- Удалить функцию "armjrnlrep_brief_f"
--
DROP FUNCTION IF EXISTS armjrnlrep_brief_f$$

--
-- Удалить функцию "armjrnladd_mref_f"
--
DROP FUNCTION IF EXISTS armjrnladd_mref_f$$

--
-- Удалить функцию "armjrnladd_brief_f"
--
DROP FUNCTION IF EXISTS armjrnladd_brief_f$$

--
-- Удалить функцию "armjournal_mref_f"
--
DROP FUNCTION IF EXISTS armjournal_mref_f$$

--
-- Удалить функцию "armjournal_brief_f"
--
DROP FUNCTION IF EXISTS armjournal_brief_f$$

--
-- Удалить функцию "armd_type_mref_f"
--
DROP FUNCTION IF EXISTS armd_type_mref_f$$

--
-- Удалить функцию "armd_type_brief_f"
--
DROP FUNCTION IF EXISTS armd_type_brief_f$$

--
-- Удалить функцию "armd_info_mref_f"
--
DROP FUNCTION IF EXISTS armd_info_mref_f$$

--
-- Удалить функцию "armd_info_brief_f"
--
DROP FUNCTION IF EXISTS armd_info_brief_f$$

--
-- Удалить функцию "armd_export_f"
--
DROP FUNCTION IF EXISTS armd_export_f$$

--
-- Удалить функцию "armd_chaneltype_mref_f"
--
DROP FUNCTION IF EXISTS armd_chaneltype_mref_f$$

--
-- Удалить функцию "armd_chaneltype_brief_f"
--
DROP FUNCTION IF EXISTS armd_chaneltype_brief_f$$

--
-- Удалить функцию "armd_access_f"
--
DROP FUNCTION IF EXISTS armd_access_f$$

--
-- Удалить функцию "arlog_export_f"
--
DROP FUNCTION IF EXISTS arlog_export_f$$

--
-- Удалить функцию "arlog_data_mref_f"
--
DROP FUNCTION IF EXISTS arlog_data_mref_f$$

--
-- Удалить функцию "arlog_data_brief_f"
--
DROP FUNCTION IF EXISTS arlog_data_brief_f$$

--
-- Удалить функцию "arlog_access_f"
--
DROP FUNCTION IF EXISTS arlog_access_f$$

--
-- Удалить функцию "arc_md_mref_f"
--
DROP FUNCTION IF EXISTS arc_md_mref_f$$

--
-- Удалить функцию "arc_md_brief_f"
--
DROP FUNCTION IF EXISTS arc_md_brief_f$$

--
-- Удалить функцию "arc_info_mref_f"
--
DROP FUNCTION IF EXISTS arc_info_mref_f$$

--
-- Удалить функцию "arc_info_brief_f"
--
DROP FUNCTION IF EXISTS arc_info_brief_f$$

--
-- Удалить функцию "arc_export_f"
--
DROP FUNCTION IF EXISTS arc_export_f$$

--
-- Удалить функцию "arc_chanel_mref_f"
--
DROP FUNCTION IF EXISTS arc_chanel_mref_f$$

--
-- Удалить функцию "arc_chanel_brief_f"
--
DROP FUNCTION IF EXISTS arc_chanel_brief_f$$

--
-- Удалить функцию "arc_access_f"
--
DROP FUNCTION IF EXISTS arc_access_f$$

--
-- Удалить процедуру "workplace_unlock"
--
DROP PROCEDURE IF EXISTS workplace_unlock$$

--
-- Удалить процедуру "workplace_save"
--
DROP PROCEDURE IF EXISTS workplace_save$$

--
-- Удалить процедуру "workplace_parent"
--
DROP PROCEDURE IF EXISTS workplace_parent$$

--
-- Удалить процедуру "workplace_logger"
--
DROP PROCEDURE IF EXISTS workplace_logger$$

--
-- Удалить процедуру "workplace_lock"
--
DROP PROCEDURE IF EXISTS workplace_lock$$

--
-- Удалить процедуру "workplace_islocked"
--
DROP PROCEDURE IF EXISTS workplace_islocked$$

--
-- Удалить процедуру "workplace_delete"
--
DROP PROCEDURE IF EXISTS workplace_delete$$

--
-- Удалить процедуру "workplace_copy"
--
DROP PROCEDURE IF EXISTS workplace_copy$$

--
-- Удалить процедуру "workplace_client_trigger"
--
DROP PROCEDURE IF EXISTS workplace_client_trigger$$

--
-- Удалить процедуру "workplace_brief"
--
DROP PROCEDURE IF EXISTS workplace_brief$$

--
-- Удалить процедуру "vk_usr_unlock"
--
DROP PROCEDURE IF EXISTS vk_usr_unlock$$

--
-- Удалить процедуру "vk_usr_save"
--
DROP PROCEDURE IF EXISTS vk_usr_save$$

--
-- Удалить процедуру "vk_usr_parent"
--
DROP PROCEDURE IF EXISTS vk_usr_parent$$

--
-- Удалить процедуру "vk_usr_logger"
--
DROP PROCEDURE IF EXISTS vk_usr_logger$$

--
-- Удалить процедуру "vk_usr_lock"
--
DROP PROCEDURE IF EXISTS vk_usr_lock$$

--
-- Удалить процедуру "vk_usr_islocked"
--
DROP PROCEDURE IF EXISTS vk_usr_islocked$$

--
-- Удалить процедуру "vk_usr_delete"
--
DROP PROCEDURE IF EXISTS vk_usr_delete$$

--
-- Удалить процедуру "vk_usr_copy"
--
DROP PROCEDURE IF EXISTS vk_usr_copy$$

--
-- Удалить процедуру "vk_usr_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_usr_client_trigger$$

--
-- Удалить процедуру "vk_usr_brief"
--
DROP PROCEDURE IF EXISTS vk_usr_brief$$

--
-- Удалить процедуру "vk_trgowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_trgowner_unlock$$

--
-- Удалить процедуру "vk_trgowner_save"
--
DROP PROCEDURE IF EXISTS vk_trgowner_save$$

--
-- Удалить процедуру "vk_trgowner_parent"
--
DROP PROCEDURE IF EXISTS vk_trgowner_parent$$

--
-- Удалить процедуру "vk_trgowner_logger"
--
DROP PROCEDURE IF EXISTS vk_trgowner_logger$$

--
-- Удалить процедуру "vk_trgowner_lock"
--
DROP PROCEDURE IF EXISTS vk_trgowner_lock$$

--
-- Удалить процедуру "vk_trgowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_trgowner_islocked$$

--
-- Удалить процедуру "vk_trgowner_delete"
--
DROP PROCEDURE IF EXISTS vk_trgowner_delete$$

--
-- Удалить процедуру "vk_trgowner_copy"
--
DROP PROCEDURE IF EXISTS vk_trgowner_copy$$

--
-- Удалить процедуру "vk_trgowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_trgowner_client_trigger$$

--
-- Удалить процедуру "vk_trgowner_brief"
--
DROP PROCEDURE IF EXISTS vk_trgowner_brief$$

--
-- Удалить процедуру "vk_trginfo_unlock"
--
DROP PROCEDURE IF EXISTS vk_trginfo_unlock$$

--
-- Удалить процедуру "vk_trginfo_save"
--
DROP PROCEDURE IF EXISTS vk_trginfo_save$$

--
-- Удалить процедуру "vk_trginfo_parent"
--
DROP PROCEDURE IF EXISTS vk_trginfo_parent$$

--
-- Удалить процедуру "vk_trginfo_logger"
--
DROP PROCEDURE IF EXISTS vk_trginfo_logger$$

--
-- Удалить процедуру "vk_trginfo_lock"
--
DROP PROCEDURE IF EXISTS vk_trginfo_lock$$

--
-- Удалить процедуру "vk_trginfo_islocked"
--
DROP PROCEDURE IF EXISTS vk_trginfo_islocked$$

--
-- Удалить процедуру "vk_trginfo_delete"
--
DROP PROCEDURE IF EXISTS vk_trginfo_delete$$

--
-- Удалить процедуру "vk_trginfo_copy"
--
DROP PROCEDURE IF EXISTS vk_trginfo_copy$$

--
-- Удалить процедуру "vk_trginfo_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_trginfo_client_trigger$$

--
-- Удалить процедуру "vk_trginfo_brief"
--
DROP PROCEDURE IF EXISTS vk_trginfo_brief$$

--
-- Удалить процедуру "vk_trgfiles_unlock"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_unlock$$

--
-- Удалить процедуру "vk_trgfiles_save"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_save$$

--
-- Удалить процедуру "vk_trgfiles_parent"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_parent$$

--
-- Удалить процедуру "vk_trgfiles_logger"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_logger$$

--
-- Удалить процедуру "vk_trgfiles_lock"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_lock$$

--
-- Удалить процедуру "vk_trgfiles_islocked"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_islocked$$

--
-- Удалить процедуру "vk_trgfiles_delete"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_delete$$

--
-- Удалить процедуру "vk_trgfiles_copy"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_copy$$

--
-- Удалить процедуру "vk_trgfiles_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_client_trigger$$

--
-- Удалить процедуру "vk_trgfiles_brief"
--
DROP PROCEDURE IF EXISTS vk_trgfiles_brief$$

--
-- Удалить процедуру "vk_town_unlock"
--
DROP PROCEDURE IF EXISTS vk_town_unlock$$

--
-- Удалить процедуру "vk_town_save"
--
DROP PROCEDURE IF EXISTS vk_town_save$$

--
-- Удалить процедуру "vk_town_parent"
--
DROP PROCEDURE IF EXISTS vk_town_parent$$

--
-- Удалить процедуру "vk_town_logger"
--
DROP PROCEDURE IF EXISTS vk_town_logger$$

--
-- Удалить процедуру "vk_town_lock"
--
DROP PROCEDURE IF EXISTS vk_town_lock$$

--
-- Удалить процедуру "vk_town_islocked"
--
DROP PROCEDURE IF EXISTS vk_town_islocked$$

--
-- Удалить процедуру "vk_town_delete"
--
DROP PROCEDURE IF EXISTS vk_town_delete$$

--
-- Удалить процедуру "vk_town_copy"
--
DROP PROCEDURE IF EXISTS vk_town_copy$$

--
-- Удалить процедуру "vk_town_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_town_client_trigger$$

--
-- Удалить процедуру "vk_town_brief"
--
DROP PROCEDURE IF EXISTS vk_town_brief$$

--
-- Удалить процедуру "vk_tasktype_unlock"
--
DROP PROCEDURE IF EXISTS vk_tasktype_unlock$$

--
-- Удалить процедуру "vk_tasktype_save"
--
DROP PROCEDURE IF EXISTS vk_tasktype_save$$

--
-- Удалить процедуру "vk_tasktype_parent"
--
DROP PROCEDURE IF EXISTS vk_tasktype_parent$$

--
-- Удалить процедуру "vk_tasktype_logger"
--
DROP PROCEDURE IF EXISTS vk_tasktype_logger$$

--
-- Удалить процедуру "vk_tasktype_lock"
--
DROP PROCEDURE IF EXISTS vk_tasktype_lock$$

--
-- Удалить процедуру "vk_tasktype_islocked"
--
DROP PROCEDURE IF EXISTS vk_tasktype_islocked$$

--
-- Удалить процедуру "vk_tasktype_delete"
--
DROP PROCEDURE IF EXISTS vk_tasktype_delete$$

--
-- Удалить процедуру "vk_tasktype_copy"
--
DROP PROCEDURE IF EXISTS vk_tasktype_copy$$

--
-- Удалить процедуру "vk_tasktype_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_tasktype_client_trigger$$

--
-- Удалить процедуру "vk_tasktype_brief"
--
DROP PROCEDURE IF EXISTS vk_tasktype_brief$$

--
-- Удалить процедуру "vk_taskowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_taskowner_unlock$$

--
-- Удалить процедуру "vk_taskowner_save"
--
DROP PROCEDURE IF EXISTS vk_taskowner_save$$

--
-- Удалить процедуру "vk_taskowner_parent"
--
DROP PROCEDURE IF EXISTS vk_taskowner_parent$$

--
-- Удалить процедуру "vk_taskowner_logger"
--
DROP PROCEDURE IF EXISTS vk_taskowner_logger$$

--
-- Удалить процедуру "vk_taskowner_lock"
--
DROP PROCEDURE IF EXISTS vk_taskowner_lock$$

--
-- Удалить процедуру "vk_taskowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_taskowner_islocked$$

--
-- Удалить процедуру "vk_taskowner_delete"
--
DROP PROCEDURE IF EXISTS vk_taskowner_delete$$

--
-- Удалить процедуру "vk_taskowner_copy"
--
DROP PROCEDURE IF EXISTS vk_taskowner_copy$$

--
-- Удалить процедуру "vk_taskowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_taskowner_client_trigger$$

--
-- Удалить процедуру "vk_taskowner_brief"
--
DROP PROCEDURE IF EXISTS vk_taskowner_brief$$

--
-- Удалить процедуру "vk_taskmsg_unlock"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_unlock$$

--
-- Удалить процедуру "vk_taskmsg_save"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_save$$

--
-- Удалить процедуру "vk_taskmsg_parent"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_parent$$

--
-- Удалить процедуру "vk_taskmsg_logger"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_logger$$

--
-- Удалить процедуру "vk_taskmsg_lock"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_lock$$

--
-- Удалить процедуру "vk_taskmsg_islocked"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_islocked$$

--
-- Удалить процедуру "vk_taskmsg_delete"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_delete$$

--
-- Удалить процедуру "vk_taskmsg_copy"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_copy$$

--
-- Удалить процедуру "vk_taskmsg_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_client_trigger$$

--
-- Удалить процедуру "vk_taskmsg_brief"
--
DROP PROCEDURE IF EXISTS vk_taskmsg_brief$$

--
-- Удалить процедуру "vk_taskinfo_unlock"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_unlock$$

--
-- Удалить процедуру "vk_taskinfo_save"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_save$$

--
-- Удалить процедуру "vk_taskinfo_parent"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_parent$$

--
-- Удалить процедуру "vk_taskinfo_logger"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_logger$$

--
-- Удалить процедуру "vk_taskinfo_lock"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_lock$$

--
-- Удалить процедуру "vk_taskinfo_islocked"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_islocked$$

--
-- Удалить процедуру "vk_taskinfo_delete"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_delete$$

--
-- Удалить процедуру "vk_taskinfo_copy"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_copy$$

--
-- Удалить процедуру "vk_taskinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_client_trigger$$

--
-- Удалить процедуру "vk_taskinfo_brief"
--
DROP PROCEDURE IF EXISTS vk_taskinfo_brief$$

--
-- Удалить процедуру "vk_rotowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_rotowner_unlock$$

--
-- Удалить процедуру "vk_rotowner_save"
--
DROP PROCEDURE IF EXISTS vk_rotowner_save$$

--
-- Удалить процедуру "vk_rotowner_parent"
--
DROP PROCEDURE IF EXISTS vk_rotowner_parent$$

--
-- Удалить процедуру "vk_rotowner_logger"
--
DROP PROCEDURE IF EXISTS vk_rotowner_logger$$

--
-- Удалить процедуру "vk_rotowner_lock"
--
DROP PROCEDURE IF EXISTS vk_rotowner_lock$$

--
-- Удалить процедуру "vk_rotowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_rotowner_islocked$$

--
-- Удалить процедуру "vk_rotowner_delete"
--
DROP PROCEDURE IF EXISTS vk_rotowner_delete$$

--
-- Удалить процедуру "vk_rotowner_copy"
--
DROP PROCEDURE IF EXISTS vk_rotowner_copy$$

--
-- Удалить процедуру "vk_rotowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_rotowner_client_trigger$$

--
-- Удалить процедуру "vk_rotowner_brief"
--
DROP PROCEDURE IF EXISTS vk_rotowner_brief$$

--
-- Удалить процедуру "vk_rotinfo_unlock"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_unlock$$

--
-- Удалить процедуру "vk_rotinfo_save"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_save$$

--
-- Удалить процедуру "vk_rotinfo_parent"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_parent$$

--
-- Удалить процедуру "vk_rotinfo_logger"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_logger$$

--
-- Удалить процедуру "vk_rotinfo_lock"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_lock$$

--
-- Удалить процедуру "vk_rotinfo_islocked"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_islocked$$

--
-- Удалить процедуру "vk_rotinfo_delete"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_delete$$

--
-- Удалить процедуру "vk_rotinfo_copy"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_copy$$

--
-- Удалить процедуру "vk_rotinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_client_trigger$$

--
-- Удалить процедуру "vk_rotinfo_brief"
--
DROP PROCEDURE IF EXISTS vk_rotinfo_brief$$

--
-- Удалить процедуру "vk_rotads_unlock"
--
DROP PROCEDURE IF EXISTS vk_rotads_unlock$$

--
-- Удалить процедуру "vk_rotads_save"
--
DROP PROCEDURE IF EXISTS vk_rotads_save$$

--
-- Удалить процедуру "vk_rotads_parent"
--
DROP PROCEDURE IF EXISTS vk_rotads_parent$$

--
-- Удалить процедуру "vk_rotads_logger"
--
DROP PROCEDURE IF EXISTS vk_rotads_logger$$

--
-- Удалить процедуру "vk_rotads_lock"
--
DROP PROCEDURE IF EXISTS vk_rotads_lock$$

--
-- Удалить процедуру "vk_rotads_islocked"
--
DROP PROCEDURE IF EXISTS vk_rotads_islocked$$

--
-- Удалить процедуру "vk_rotads_delete"
--
DROP PROCEDURE IF EXISTS vk_rotads_delete$$

--
-- Удалить процедуру "vk_rotads_copy"
--
DROP PROCEDURE IF EXISTS vk_rotads_copy$$

--
-- Удалить процедуру "vk_rotads_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_rotads_client_trigger$$

--
-- Удалить процедуру "vk_rotads_brief"
--
DROP PROCEDURE IF EXISTS vk_rotads_brief$$

--
-- Удалить процедуру "vk_religion_unlock"
--
DROP PROCEDURE IF EXISTS vk_religion_unlock$$

--
-- Удалить процедуру "vk_religion_save"
--
DROP PROCEDURE IF EXISTS vk_religion_save$$

--
-- Удалить процедуру "vk_religion_parent"
--
DROP PROCEDURE IF EXISTS vk_religion_parent$$

--
-- Удалить процедуру "vk_religion_logger"
--
DROP PROCEDURE IF EXISTS vk_religion_logger$$

--
-- Удалить процедуру "vk_religion_lock"
--
DROP PROCEDURE IF EXISTS vk_religion_lock$$

--
-- Удалить процедуру "vk_religion_islocked"
--
DROP PROCEDURE IF EXISTS vk_religion_islocked$$

--
-- Удалить процедуру "vk_religion_delete"
--
DROP PROCEDURE IF EXISTS vk_religion_delete$$

--
-- Удалить процедуру "vk_religion_copy"
--
DROP PROCEDURE IF EXISTS vk_religion_copy$$

--
-- Удалить процедуру "vk_religion_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_religion_client_trigger$$

--
-- Удалить процедуру "vk_religion_brief"
--
DROP PROCEDURE IF EXISTS vk_religion_brief$$

--
-- Удалить процедуру "vk_region_unlock"
--
DROP PROCEDURE IF EXISTS vk_region_unlock$$

--
-- Удалить процедуру "vk_region_save"
--
DROP PROCEDURE IF EXISTS vk_region_save$$

--
-- Удалить процедуру "vk_region_parent"
--
DROP PROCEDURE IF EXISTS vk_region_parent$$

--
-- Удалить процедуру "vk_region_logger"
--
DROP PROCEDURE IF EXISTS vk_region_logger$$

--
-- Удалить процедуру "vk_region_lock"
--
DROP PROCEDURE IF EXISTS vk_region_lock$$

--
-- Удалить процедуру "vk_region_islocked"
--
DROP PROCEDURE IF EXISTS vk_region_islocked$$

--
-- Удалить процедуру "vk_region_delete"
--
DROP PROCEDURE IF EXISTS vk_region_delete$$

--
-- Удалить процедуру "vk_region_copy"
--
DROP PROCEDURE IF EXISTS vk_region_copy$$

--
-- Удалить процедуру "vk_region_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_region_client_trigger$$

--
-- Удалить процедуру "vk_region_brief"
--
DROP PROCEDURE IF EXISTS vk_region_brief$$

--
-- Удалить процедуру "vk_prj_unlock"
--
DROP PROCEDURE IF EXISTS vk_prj_unlock$$

--
-- Удалить процедуру "vk_prj_save"
--
DROP PROCEDURE IF EXISTS vk_prj_save$$

--
-- Удалить процедуру "vk_prj_parent"
--
DROP PROCEDURE IF EXISTS vk_prj_parent$$

--
-- Удалить процедуру "vk_prj_logger"
--
DROP PROCEDURE IF EXISTS vk_prj_logger$$

--
-- Удалить процедуру "vk_prj_lock"
--
DROP PROCEDURE IF EXISTS vk_prj_lock$$

--
-- Удалить процедуру "vk_prj_islocked"
--
DROP PROCEDURE IF EXISTS vk_prj_islocked$$

--
-- Удалить процедуру "vk_prj_delete"
--
DROP PROCEDURE IF EXISTS vk_prj_delete$$

--
-- Удалить процедуру "vk_prj_copy"
--
DROP PROCEDURE IF EXISTS vk_prj_copy$$

--
-- Удалить процедуру "vk_prj_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_prj_client_trigger$$

--
-- Удалить процедуру "vk_prj_brief"
--
DROP PROCEDURE IF EXISTS vk_prj_brief$$

--
-- Удалить процедуру "vk_prjowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_prjowner_unlock$$

--
-- Удалить процедуру "vk_prjowner_save"
--
DROP PROCEDURE IF EXISTS vk_prjowner_save$$

--
-- Удалить процедуру "vk_prjowner_parent"
--
DROP PROCEDURE IF EXISTS vk_prjowner_parent$$

--
-- Удалить процедуру "vk_prjowner_logger"
--
DROP PROCEDURE IF EXISTS vk_prjowner_logger$$

--
-- Удалить процедуру "vk_prjowner_lock"
--
DROP PROCEDURE IF EXISTS vk_prjowner_lock$$

--
-- Удалить процедуру "vk_prjowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_prjowner_islocked$$

--
-- Удалить процедуру "vk_prjowner_delete"
--
DROP PROCEDURE IF EXISTS vk_prjowner_delete$$

--
-- Удалить процедуру "vk_prjowner_copy"
--
DROP PROCEDURE IF EXISTS vk_prjowner_copy$$

--
-- Удалить процедуру "vk_prjowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_prjowner_client_trigger$$

--
-- Удалить процедуру "vk_prjowner_brief"
--
DROP PROCEDURE IF EXISTS vk_prjowner_brief$$

--
-- Удалить процедуру "vk_position_unlock"
--
DROP PROCEDURE IF EXISTS vk_position_unlock$$

--
-- Удалить процедуру "vk_position_save"
--
DROP PROCEDURE IF EXISTS vk_position_save$$

--
-- Удалить процедуру "vk_position_parent"
--
DROP PROCEDURE IF EXISTS vk_position_parent$$

--
-- Удалить процедуру "vk_position_logger"
--
DROP PROCEDURE IF EXISTS vk_position_logger$$

--
-- Удалить процедуру "vk_position_lock"
--
DROP PROCEDURE IF EXISTS vk_position_lock$$

--
-- Удалить процедуру "vk_position_islocked"
--
DROP PROCEDURE IF EXISTS vk_position_islocked$$

--
-- Удалить процедуру "vk_position_delete"
--
DROP PROCEDURE IF EXISTS vk_position_delete$$

--
-- Удалить процедуру "vk_position_copy"
--
DROP PROCEDURE IF EXISTS vk_position_copy$$

--
-- Удалить процедуру "vk_position_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_position_client_trigger$$

--
-- Удалить процедуру "vk_position_brief"
--
DROP PROCEDURE IF EXISTS vk_position_brief$$

--
-- Удалить процедуру "vk_platform_unlock"
--
DROP PROCEDURE IF EXISTS vk_platform_unlock$$

--
-- Удалить процедуру "vk_platform_save"
--
DROP PROCEDURE IF EXISTS vk_platform_save$$

--
-- Удалить процедуру "vk_platform_parent"
--
DROP PROCEDURE IF EXISTS vk_platform_parent$$

--
-- Удалить процедуру "vk_platform_logger"
--
DROP PROCEDURE IF EXISTS vk_platform_logger$$

--
-- Удалить процедуру "vk_platform_lock"
--
DROP PROCEDURE IF EXISTS vk_platform_lock$$

--
-- Удалить процедуру "vk_platform_islocked"
--
DROP PROCEDURE IF EXISTS vk_platform_islocked$$

--
-- Удалить процедуру "vk_platform_delete"
--
DROP PROCEDURE IF EXISTS vk_platform_delete$$

--
-- Удалить процедуру "vk_platform_copy"
--
DROP PROCEDURE IF EXISTS vk_platform_copy$$

--
-- Удалить процедуру "vk_platform_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_platform_client_trigger$$

--
-- Удалить процедуру "vk_platform_brief"
--
DROP PROCEDURE IF EXISTS vk_platform_brief$$

--
-- Удалить процедуру "vk_paytype_unlock"
--
DROP PROCEDURE IF EXISTS vk_paytype_unlock$$

--
-- Удалить процедуру "vk_paytype_save"
--
DROP PROCEDURE IF EXISTS vk_paytype_save$$

--
-- Удалить процедуру "vk_paytype_parent"
--
DROP PROCEDURE IF EXISTS vk_paytype_parent$$

--
-- Удалить процедуру "vk_paytype_logger"
--
DROP PROCEDURE IF EXISTS vk_paytype_logger$$

--
-- Удалить процедуру "vk_paytype_lock"
--
DROP PROCEDURE IF EXISTS vk_paytype_lock$$

--
-- Удалить процедуру "vk_paytype_islocked"
--
DROP PROCEDURE IF EXISTS vk_paytype_islocked$$

--
-- Удалить процедуру "vk_paytype_delete"
--
DROP PROCEDURE IF EXISTS vk_paytype_delete$$

--
-- Удалить процедуру "vk_paytype_copy"
--
DROP PROCEDURE IF EXISTS vk_paytype_copy$$

--
-- Удалить процедуру "vk_paytype_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_paytype_client_trigger$$

--
-- Удалить процедуру "vk_paytype_brief"
--
DROP PROCEDURE IF EXISTS vk_paytype_brief$$

--
-- Удалить процедуру "vk_os_unlock"
--
DROP PROCEDURE IF EXISTS vk_os_unlock$$

--
-- Удалить процедуру "vk_os_save"
--
DROP PROCEDURE IF EXISTS vk_os_save$$

--
-- Удалить процедуру "vk_os_parent"
--
DROP PROCEDURE IF EXISTS vk_os_parent$$

--
-- Удалить процедуру "vk_os_logger"
--
DROP PROCEDURE IF EXISTS vk_os_logger$$

--
-- Удалить процедуру "vk_os_lock"
--
DROP PROCEDURE IF EXISTS vk_os_lock$$

--
-- Удалить процедуру "vk_os_islocked"
--
DROP PROCEDURE IF EXISTS vk_os_islocked$$

--
-- Удалить процедуру "vk_os_delete"
--
DROP PROCEDURE IF EXISTS vk_os_delete$$

--
-- Удалить процедуру "vk_os_copy"
--
DROP PROCEDURE IF EXISTS vk_os_copy$$

--
-- Удалить процедуру "vk_os_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_os_client_trigger$$

--
-- Удалить процедуру "vk_os_brief"
--
DROP PROCEDURE IF EXISTS vk_os_brief$$

--
-- Удалить процедуру "vk_matrialstatus_unlock"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_unlock$$

--
-- Удалить процедуру "vk_matrialstatus_save"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_save$$

--
-- Удалить процедуру "vk_matrialstatus_parent"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_parent$$

--
-- Удалить процедуру "vk_matrialstatus_logger"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_logger$$

--
-- Удалить процедуру "vk_matrialstatus_lock"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_lock$$

--
-- Удалить процедуру "vk_matrialstatus_islocked"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_islocked$$

--
-- Удалить процедуру "vk_matrialstatus_delete"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_delete$$

--
-- Удалить процедуру "vk_matrialstatus_copy"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_copy$$

--
-- Удалить процедуру "vk_matrialstatus_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_client_trigger$$

--
-- Удалить процедуру "vk_matrialstatus_brief"
--
DROP PROCEDURE IF EXISTS vk_matrialstatus_brief$$

--
-- Удалить процедуру "vk_interest_unlock"
--
DROP PROCEDURE IF EXISTS vk_interest_unlock$$

--
-- Удалить процедуру "vk_interest_save"
--
DROP PROCEDURE IF EXISTS vk_interest_save$$

--
-- Удалить процедуру "vk_interest_parent"
--
DROP PROCEDURE IF EXISTS vk_interest_parent$$

--
-- Удалить процедуру "vk_interest_logger"
--
DROP PROCEDURE IF EXISTS vk_interest_logger$$

--
-- Удалить процедуру "vk_interest_lock"
--
DROP PROCEDURE IF EXISTS vk_interest_lock$$

--
-- Удалить процедуру "vk_interest_islocked"
--
DROP PROCEDURE IF EXISTS vk_interest_islocked$$

--
-- Удалить процедуру "vk_interest_delete"
--
DROP PROCEDURE IF EXISTS vk_interest_delete$$

--
-- Удалить процедуру "vk_interest_copy"
--
DROP PROCEDURE IF EXISTS vk_interest_copy$$

--
-- Удалить процедуру "vk_interest_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_interest_client_trigger$$

--
-- Удалить процедуру "vk_interest_brief"
--
DROP PROCEDURE IF EXISTS vk_interest_brief$$

--
-- Удалить процедуру "vk_device_unlock"
--
DROP PROCEDURE IF EXISTS vk_device_unlock$$

--
-- Удалить процедуру "vk_device_save"
--
DROP PROCEDURE IF EXISTS vk_device_save$$

--
-- Удалить процедуру "vk_device_parent"
--
DROP PROCEDURE IF EXISTS vk_device_parent$$

--
-- Удалить процедуру "vk_device_logger"
--
DROP PROCEDURE IF EXISTS vk_device_logger$$

--
-- Удалить процедуру "vk_device_lock"
--
DROP PROCEDURE IF EXISTS vk_device_lock$$

--
-- Удалить процедуру "vk_device_islocked"
--
DROP PROCEDURE IF EXISTS vk_device_islocked$$

--
-- Удалить процедуру "vk_device_delete"
--
DROP PROCEDURE IF EXISTS vk_device_delete$$

--
-- Удалить процедуру "vk_device_copy"
--
DROP PROCEDURE IF EXISTS vk_device_copy$$

--
-- Удалить процедуру "vk_device_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_device_client_trigger$$

--
-- Удалить процедуру "vk_device_brief"
--
DROP PROCEDURE IF EXISTS vk_device_brief$$

--
-- Удалить процедуру "vk_country_unlock"
--
DROP PROCEDURE IF EXISTS vk_country_unlock$$

--
-- Удалить процедуру "vk_country_save"
--
DROP PROCEDURE IF EXISTS vk_country_save$$

--
-- Удалить процедуру "vk_country_parent"
--
DROP PROCEDURE IF EXISTS vk_country_parent$$

--
-- Удалить процедуру "vk_country_logger"
--
DROP PROCEDURE IF EXISTS vk_country_logger$$

--
-- Удалить процедуру "vk_country_lock"
--
DROP PROCEDURE IF EXISTS vk_country_lock$$

--
-- Удалить процедуру "vk_country_islocked"
--
DROP PROCEDURE IF EXISTS vk_country_islocked$$

--
-- Удалить процедуру "vk_country_delete"
--
DROP PROCEDURE IF EXISTS vk_country_delete$$

--
-- Удалить процедуру "vk_country_copy"
--
DROP PROCEDURE IF EXISTS vk_country_copy$$

--
-- Удалить процедуру "vk_country_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_country_client_trigger$$

--
-- Удалить процедуру "vk_country_brief"
--
DROP PROCEDURE IF EXISTS vk_country_brief$$

--
-- Удалить процедуру "vk_category_unlock"
--
DROP PROCEDURE IF EXISTS vk_category_unlock$$

--
-- Удалить процедуру "vk_category_save"
--
DROP PROCEDURE IF EXISTS vk_category_save$$

--
-- Удалить процедуру "vk_category_parent"
--
DROP PROCEDURE IF EXISTS vk_category_parent$$

--
-- Удалить процедуру "vk_category_logger"
--
DROP PROCEDURE IF EXISTS vk_category_logger$$

--
-- Удалить процедуру "vk_category_lock"
--
DROP PROCEDURE IF EXISTS vk_category_lock$$

--
-- Удалить процедуру "vk_category_islocked"
--
DROP PROCEDURE IF EXISTS vk_category_islocked$$

--
-- Удалить процедуру "vk_category_delete"
--
DROP PROCEDURE IF EXISTS vk_category_delete$$

--
-- Удалить процедуру "vk_category_copy"
--
DROP PROCEDURE IF EXISTS vk_category_copy$$

--
-- Удалить процедуру "vk_category_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_category_client_trigger$$

--
-- Удалить процедуру "vk_category_brief"
--
DROP PROCEDURE IF EXISTS vk_category_brief$$

--
-- Удалить процедуру "vk_castate_unlock"
--
DROP PROCEDURE IF EXISTS vk_castate_unlock$$

--
-- Удалить процедуру "vk_castate_save"
--
DROP PROCEDURE IF EXISTS vk_castate_save$$

--
-- Удалить процедуру "vk_castate_parent"
--
DROP PROCEDURE IF EXISTS vk_castate_parent$$

--
-- Удалить процедуру "vk_castate_logger"
--
DROP PROCEDURE IF EXISTS vk_castate_logger$$

--
-- Удалить процедуру "vk_castate_lock"
--
DROP PROCEDURE IF EXISTS vk_castate_lock$$

--
-- Удалить процедуру "vk_castate_islocked"
--
DROP PROCEDURE IF EXISTS vk_castate_islocked$$

--
-- Удалить процедуру "vk_castate_delete"
--
DROP PROCEDURE IF EXISTS vk_castate_delete$$

--
-- Удалить процедуру "vk_castate_copy"
--
DROP PROCEDURE IF EXISTS vk_castate_copy$$

--
-- Удалить процедуру "vk_castate_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_castate_client_trigger$$

--
-- Удалить процедуру "vk_castate_brief"
--
DROP PROCEDURE IF EXISTS vk_castate_brief$$

--
-- Удалить процедуру "vk_camstat_unlock"
--
DROP PROCEDURE IF EXISTS vk_camstat_unlock$$

--
-- Удалить процедуру "vk_camstat_save"
--
DROP PROCEDURE IF EXISTS vk_camstat_save$$

--
-- Удалить процедуру "vk_camstat_parent"
--
DROP PROCEDURE IF EXISTS vk_camstat_parent$$

--
-- Удалить процедуру "vk_camstat_logger"
--
DROP PROCEDURE IF EXISTS vk_camstat_logger$$

--
-- Удалить процедуру "vk_camstat_lock"
--
DROP PROCEDURE IF EXISTS vk_camstat_lock$$

--
-- Удалить процедуру "vk_camstat_islocked"
--
DROP PROCEDURE IF EXISTS vk_camstat_islocked$$

--
-- Удалить процедуру "vk_camstat_delete"
--
DROP PROCEDURE IF EXISTS vk_camstat_delete$$

--
-- Удалить процедуру "vk_camstat_copy"
--
DROP PROCEDURE IF EXISTS vk_camstat_copy$$

--
-- Удалить процедуру "vk_camstat_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_camstat_client_trigger$$

--
-- Удалить процедуру "vk_camstat_brief"
--
DROP PROCEDURE IF EXISTS vk_camstat_brief$$

--
-- Удалить процедуру "vk_camp_unlock"
--
DROP PROCEDURE IF EXISTS vk_camp_unlock$$

--
-- Удалить процедуру "vk_camp_save"
--
DROP PROCEDURE IF EXISTS vk_camp_save$$

--
-- Удалить процедуру "vk_camp_parent"
--
DROP PROCEDURE IF EXISTS vk_camp_parent$$

--
-- Удалить процедуру "vk_camp_logger"
--
DROP PROCEDURE IF EXISTS vk_camp_logger$$

--
-- Удалить процедуру "vk_camp_lock"
--
DROP PROCEDURE IF EXISTS vk_camp_lock$$

--
-- Удалить процедуру "vk_camp_islocked"
--
DROP PROCEDURE IF EXISTS vk_camp_islocked$$

--
-- Удалить процедуру "vk_camp_delete"
--
DROP PROCEDURE IF EXISTS vk_camp_delete$$

--
-- Удалить процедуру "vk_camp_copy"
--
DROP PROCEDURE IF EXISTS vk_camp_copy$$

--
-- Удалить процедуру "vk_camp_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_camp_client_trigger$$

--
-- Удалить процедуру "vk_camp_brief"
--
DROP PROCEDURE IF EXISTS vk_camp_brief$$

--
-- Удалить процедуру "vk_camowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_camowner_unlock$$

--
-- Удалить процедуру "vk_camowner_save"
--
DROP PROCEDURE IF EXISTS vk_camowner_save$$

--
-- Удалить процедуру "vk_camowner_parent"
--
DROP PROCEDURE IF EXISTS vk_camowner_parent$$

--
-- Удалить процедуру "vk_camowner_logger"
--
DROP PROCEDURE IF EXISTS vk_camowner_logger$$

--
-- Удалить процедуру "vk_camowner_lock"
--
DROP PROCEDURE IF EXISTS vk_camowner_lock$$

--
-- Удалить процедуру "vk_camowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_camowner_islocked$$

--
-- Удалить процедуру "vk_camowner_delete"
--
DROP PROCEDURE IF EXISTS vk_camowner_delete$$

--
-- Удалить процедуру "vk_camowner_copy"
--
DROP PROCEDURE IF EXISTS vk_camowner_copy$$

--
-- Удалить процедуру "vk_camowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_camowner_client_trigger$$

--
-- Удалить процедуру "vk_camowner_brief"
--
DROP PROCEDURE IF EXISTS vk_camowner_brief$$

--
-- Удалить процедуру "vk_camovstat_unlock"
--
DROP PROCEDURE IF EXISTS vk_camovstat_unlock$$

--
-- Удалить процедуру "vk_camovstat_save"
--
DROP PROCEDURE IF EXISTS vk_camovstat_save$$

--
-- Удалить процедуру "vk_camovstat_parent"
--
DROP PROCEDURE IF EXISTS vk_camovstat_parent$$

--
-- Удалить процедуру "vk_camovstat_logger"
--
DROP PROCEDURE IF EXISTS vk_camovstat_logger$$

--
-- Удалить процедуру "vk_camovstat_lock"
--
DROP PROCEDURE IF EXISTS vk_camovstat_lock$$

--
-- Удалить процедуру "vk_camovstat_islocked"
--
DROP PROCEDURE IF EXISTS vk_camovstat_islocked$$

--
-- Удалить процедуру "vk_camovstat_delete"
--
DROP PROCEDURE IF EXISTS vk_camovstat_delete$$

--
-- Удалить процедуру "vk_camovstat_copy"
--
DROP PROCEDURE IF EXISTS vk_camovstat_copy$$

--
-- Удалить процедуру "vk_camovstat_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_camovstat_client_trigger$$

--
-- Удалить процедуру "vk_camovstat_brief"
--
DROP PROCEDURE IF EXISTS vk_camovstat_brief$$

--
-- Удалить процедуру "vk_cab_unlock"
--
DROP PROCEDURE IF EXISTS vk_cab_unlock$$

--
-- Удалить процедуру "vk_cab_save"
--
DROP PROCEDURE IF EXISTS vk_cab_save$$

--
-- Удалить процедуру "vk_cab_parent"
--
DROP PROCEDURE IF EXISTS vk_cab_parent$$

--
-- Удалить процедуру "vk_cab_logger"
--
DROP PROCEDURE IF EXISTS vk_cab_logger$$

--
-- Удалить процедуру "vk_cab_lock"
--
DROP PROCEDURE IF EXISTS vk_cab_lock$$

--
-- Удалить процедуру "vk_cab_islocked"
--
DROP PROCEDURE IF EXISTS vk_cab_islocked$$

--
-- Удалить процедуру "vk_cab_delete"
--
DROP PROCEDURE IF EXISTS vk_cab_delete$$

--
-- Удалить процедуру "vk_cab_copy"
--
DROP PROCEDURE IF EXISTS vk_cab_copy$$

--
-- Удалить процедуру "vk_cab_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_cab_client_trigger$$

--
-- Удалить процедуру "vk_cab_brief"
--
DROP PROCEDURE IF EXISTS vk_cab_brief$$

--
-- Удалить процедуру "vk_browser_unlock"
--
DROP PROCEDURE IF EXISTS vk_browser_unlock$$

--
-- Удалить процедуру "vk_browser_save"
--
DROP PROCEDURE IF EXISTS vk_browser_save$$

--
-- Удалить процедуру "vk_browser_parent"
--
DROP PROCEDURE IF EXISTS vk_browser_parent$$

--
-- Удалить процедуру "vk_browser_logger"
--
DROP PROCEDURE IF EXISTS vk_browser_logger$$

--
-- Удалить процедуру "vk_browser_lock"
--
DROP PROCEDURE IF EXISTS vk_browser_lock$$

--
-- Удалить процедуру "vk_browser_islocked"
--
DROP PROCEDURE IF EXISTS vk_browser_islocked$$

--
-- Удалить процедуру "vk_browser_delete"
--
DROP PROCEDURE IF EXISTS vk_browser_delete$$

--
-- Удалить процедуру "vk_browser_copy"
--
DROP PROCEDURE IF EXISTS vk_browser_copy$$

--
-- Удалить процедуру "vk_browser_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_browser_client_trigger$$

--
-- Удалить процедуру "vk_browser_brief"
--
DROP PROCEDURE IF EXISTS vk_browser_brief$$

--
-- Удалить процедуру "vk_brkowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_brkowner_unlock$$

--
-- Удалить процедуру "vk_brkowner_save"
--
DROP PROCEDURE IF EXISTS vk_brkowner_save$$

--
-- Удалить процедуру "vk_brkowner_parent"
--
DROP PROCEDURE IF EXISTS vk_brkowner_parent$$

--
-- Удалить процедуру "vk_brkowner_logger"
--
DROP PROCEDURE IF EXISTS vk_brkowner_logger$$

--
-- Удалить процедуру "vk_brkowner_lock"
--
DROP PROCEDURE IF EXISTS vk_brkowner_lock$$

--
-- Удалить процедуру "vk_brkowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_brkowner_islocked$$

--
-- Удалить процедуру "vk_brkowner_delete"
--
DROP PROCEDURE IF EXISTS vk_brkowner_delete$$

--
-- Удалить процедуру "vk_brkowner_copy"
--
DROP PROCEDURE IF EXISTS vk_brkowner_copy$$

--
-- Удалить процедуру "vk_brkowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_brkowner_client_trigger$$

--
-- Удалить процедуру "vk_brkowner_brief"
--
DROP PROCEDURE IF EXISTS vk_brkowner_brief$$

--
-- Удалить процедуру "vk_brkinfo_unlock"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_unlock$$

--
-- Удалить процедуру "vk_brkinfo_save"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_save$$

--
-- Удалить процедуру "vk_brkinfo_parent"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_parent$$

--
-- Удалить процедуру "vk_brkinfo_logger"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_logger$$

--
-- Удалить процедуру "vk_brkinfo_lock"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_lock$$

--
-- Удалить процедуру "vk_brkinfo_islocked"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_islocked$$

--
-- Удалить процедуру "vk_brkinfo_delete"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_delete$$

--
-- Удалить процедуру "vk_brkinfo_copy"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_copy$$

--
-- Удалить процедуру "vk_brkinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_client_trigger$$

--
-- Удалить процедуру "vk_brkinfo_brief"
--
DROP PROCEDURE IF EXISTS vk_brkinfo_brief$$

--
-- Удалить процедуру "vk_approve_unlock"
--
DROP PROCEDURE IF EXISTS vk_approve_unlock$$

--
-- Удалить процедуру "vk_approve_save"
--
DROP PROCEDURE IF EXISTS vk_approve_save$$

--
-- Удалить процедуру "vk_approve_parent"
--
DROP PROCEDURE IF EXISTS vk_approve_parent$$

--
-- Удалить процедуру "vk_approve_logger"
--
DROP PROCEDURE IF EXISTS vk_approve_logger$$

--
-- Удалить процедуру "vk_approve_lock"
--
DROP PROCEDURE IF EXISTS vk_approve_lock$$

--
-- Удалить процедуру "vk_approve_islocked"
--
DROP PROCEDURE IF EXISTS vk_approve_islocked$$

--
-- Удалить процедуру "vk_approve_delete"
--
DROP PROCEDURE IF EXISTS vk_approve_delete$$

--
-- Удалить процедуру "vk_approve_copy"
--
DROP PROCEDURE IF EXISTS vk_approve_copy$$

--
-- Удалить процедуру "vk_approve_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_approve_client_trigger$$

--
-- Удалить процедуру "vk_approve_brief"
--
DROP PROCEDURE IF EXISTS vk_approve_brief$$

--
-- Удалить процедуру "vk_age_unlock"
--
DROP PROCEDURE IF EXISTS vk_age_unlock$$

--
-- Удалить процедуру "vk_age_save"
--
DROP PROCEDURE IF EXISTS vk_age_save$$

--
-- Удалить процедуру "vk_age_parent"
--
DROP PROCEDURE IF EXISTS vk_age_parent$$

--
-- Удалить процедуру "vk_age_logger"
--
DROP PROCEDURE IF EXISTS vk_age_logger$$

--
-- Удалить процедуру "vk_age_lock"
--
DROP PROCEDURE IF EXISTS vk_age_lock$$

--
-- Удалить процедуру "vk_age_islocked"
--
DROP PROCEDURE IF EXISTS vk_age_islocked$$

--
-- Удалить процедуру "vk_age_delete"
--
DROP PROCEDURE IF EXISTS vk_age_delete$$

--
-- Удалить процедуру "vk_age_copy"
--
DROP PROCEDURE IF EXISTS vk_age_copy$$

--
-- Удалить процедуру "vk_age_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_age_client_trigger$$

--
-- Удалить процедуру "vk_age_brief"
--
DROP PROCEDURE IF EXISTS vk_age_brief$$

--
-- Удалить процедуру "vk_adsutm_unlock"
--
DROP PROCEDURE IF EXISTS vk_adsutm_unlock$$

--
-- Удалить процедуру "vk_adsutm_save"
--
DROP PROCEDURE IF EXISTS vk_adsutm_save$$

--
-- Удалить процедуру "vk_adsutm_parent"
--
DROP PROCEDURE IF EXISTS vk_adsutm_parent$$

--
-- Удалить процедуру "vk_adsutm_logger"
--
DROP PROCEDURE IF EXISTS vk_adsutm_logger$$

--
-- Удалить процедуру "vk_adsutm_lock"
--
DROP PROCEDURE IF EXISTS vk_adsutm_lock$$

--
-- Удалить процедуру "vk_adsutm_islocked"
--
DROP PROCEDURE IF EXISTS vk_adsutm_islocked$$

--
-- Удалить процедуру "vk_adsutm_delete"
--
DROP PROCEDURE IF EXISTS vk_adsutm_delete$$

--
-- Удалить процедуру "vk_adsutm_copy"
--
DROP PROCEDURE IF EXISTS vk_adsutm_copy$$

--
-- Удалить процедуру "vk_adsutm_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adsutm_client_trigger$$

--
-- Удалить процедуру "vk_adsutm_brief"
--
DROP PROCEDURE IF EXISTS vk_adsutm_brief$$

--
-- Удалить процедуру "vk_adstrg_unlock"
--
DROP PROCEDURE IF EXISTS vk_adstrg_unlock$$

--
-- Удалить процедуру "vk_adstrg_save"
--
DROP PROCEDURE IF EXISTS vk_adstrg_save$$

--
-- Удалить процедуру "vk_adstrg_parent"
--
DROP PROCEDURE IF EXISTS vk_adstrg_parent$$

--
-- Удалить процедуру "vk_adstrg_logger"
--
DROP PROCEDURE IF EXISTS vk_adstrg_logger$$

--
-- Удалить процедуру "vk_adstrg_lock"
--
DROP PROCEDURE IF EXISTS vk_adstrg_lock$$

--
-- Удалить процедуру "vk_adstrg_islocked"
--
DROP PROCEDURE IF EXISTS vk_adstrg_islocked$$

--
-- Удалить процедуру "vk_adstrg_delete"
--
DROP PROCEDURE IF EXISTS vk_adstrg_delete$$

--
-- Удалить процедуру "vk_adstrg_copy"
--
DROP PROCEDURE IF EXISTS vk_adstrg_copy$$

--
-- Удалить процедуру "vk_adstrg_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adstrg_client_trigger$$

--
-- Удалить процедуру "vk_adstrg_brief"
--
DROP PROCEDURE IF EXISTS vk_adstrg_brief$$

--
-- Удалить процедуру "vk_adstat_unlock"
--
DROP PROCEDURE IF EXISTS vk_adstat_unlock$$

--
-- Удалить процедуру "vk_adstat_save"
--
DROP PROCEDURE IF EXISTS vk_adstat_save$$

--
-- Удалить процедуру "vk_adstat_parent"
--
DROP PROCEDURE IF EXISTS vk_adstat_parent$$

--
-- Удалить процедуру "vk_adstat_logger"
--
DROP PROCEDURE IF EXISTS vk_adstat_logger$$

--
-- Удалить процедуру "vk_adstat_lock"
--
DROP PROCEDURE IF EXISTS vk_adstat_lock$$

--
-- Удалить процедуру "vk_adstat_islocked"
--
DROP PROCEDURE IF EXISTS vk_adstat_islocked$$

--
-- Удалить процедуру "vk_adstat_delete"
--
DROP PROCEDURE IF EXISTS vk_adstat_delete$$

--
-- Удалить процедуру "vk_adstat_copy"
--
DROP PROCEDURE IF EXISTS vk_adstat_copy$$

--
-- Удалить процедуру "vk_adstat_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adstat_client_trigger$$

--
-- Удалить процедуру "vk_adstat_brief"
--
DROP PROCEDURE IF EXISTS vk_adstat_brief$$

--
-- Удалить процедуру "vk_adstate_unlock"
--
DROP PROCEDURE IF EXISTS vk_adstate_unlock$$

--
-- Удалить процедуру "vk_adstate_save"
--
DROP PROCEDURE IF EXISTS vk_adstate_save$$

--
-- Удалить процедуру "vk_adstate_parent"
--
DROP PROCEDURE IF EXISTS vk_adstate_parent$$

--
-- Удалить процедуру "vk_adstate_logger"
--
DROP PROCEDURE IF EXISTS vk_adstate_logger$$

--
-- Удалить процедуру "vk_adstate_lock"
--
DROP PROCEDURE IF EXISTS vk_adstate_lock$$

--
-- Удалить процедуру "vk_adstate_islocked"
--
DROP PROCEDURE IF EXISTS vk_adstate_islocked$$

--
-- Удалить процедуру "vk_adstate_delete"
--
DROP PROCEDURE IF EXISTS vk_adstate_delete$$

--
-- Удалить процедуру "vk_adstate_copy"
--
DROP PROCEDURE IF EXISTS vk_adstate_copy$$

--
-- Удалить процедуру "vk_adstate_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adstate_client_trigger$$

--
-- Удалить процедуру "vk_adstate_brief"
--
DROP PROCEDURE IF EXISTS vk_adstate_brief$$

--
-- Удалить процедуру "vk_adsowner_unlock"
--
DROP PROCEDURE IF EXISTS vk_adsowner_unlock$$

--
-- Удалить процедуру "vk_adsowner_save"
--
DROP PROCEDURE IF EXISTS vk_adsowner_save$$

--
-- Удалить процедуру "vk_adsowner_parent"
--
DROP PROCEDURE IF EXISTS vk_adsowner_parent$$

--
-- Удалить процедуру "vk_adsowner_logger"
--
DROP PROCEDURE IF EXISTS vk_adsowner_logger$$

--
-- Удалить процедуру "vk_adsowner_lock"
--
DROP PROCEDURE IF EXISTS vk_adsowner_lock$$

--
-- Удалить процедуру "vk_adsowner_islocked"
--
DROP PROCEDURE IF EXISTS vk_adsowner_islocked$$

--
-- Удалить процедуру "vk_adsowner_delete"
--
DROP PROCEDURE IF EXISTS vk_adsowner_delete$$

--
-- Удалить процедуру "vk_adsowner_copy"
--
DROP PROCEDURE IF EXISTS vk_adsowner_copy$$

--
-- Удалить процедуру "vk_adsowner_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adsowner_client_trigger$$

--
-- Удалить процедуру "vk_adsowner_brief"
--
DROP PROCEDURE IF EXISTS vk_adsowner_brief$$

--
-- Удалить процедуру "vk_adsovdemografy_unlock"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_unlock$$

--
-- Удалить процедуру "vk_adsovdemografy_save"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_save$$

--
-- Удалить процедуру "vk_adsovdemografy_parent"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_parent$$

--
-- Удалить процедуру "vk_adsovdemografy_logger"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_logger$$

--
-- Удалить процедуру "vk_adsovdemografy_lock"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_lock$$

--
-- Удалить процедуру "vk_adsovdemografy_islocked"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_islocked$$

--
-- Удалить процедуру "vk_adsovdemografy_delete"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_delete$$

--
-- Удалить процедуру "vk_adsovdemografy_copy"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_copy$$

--
-- Удалить процедуру "vk_adsovdemografy_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_client_trigger$$

--
-- Удалить процедуру "vk_adsovdemografy_brief"
--
DROP PROCEDURE IF EXISTS vk_adsovdemografy_brief$$

--
-- Удалить процедуру "vk_adsdaydemografy_unlock"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_unlock$$

--
-- Удалить процедуру "vk_adsdaydemografy_save"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_save$$

--
-- Удалить процедуру "vk_adsdaydemografy_parent"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_parent$$

--
-- Удалить процедуру "vk_adsdaydemografy_logger"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_logger$$

--
-- Удалить процедуру "vk_adsdaydemografy_lock"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_lock$$

--
-- Удалить процедуру "vk_adsdaydemografy_islocked"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_islocked$$

--
-- Удалить процедуру "vk_adsdaydemografy_delete"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_delete$$

--
-- Удалить процедуру "vk_adsdaydemografy_copy"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_copy$$

--
-- Удалить процедуру "vk_adsdaydemografy_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_client_trigger$$

--
-- Удалить процедуру "vk_adsdaydemografy_brief"
--
DROP PROCEDURE IF EXISTS vk_adsdaydemografy_brief$$

--
-- Удалить процедуру "vk_adovstat_unlock"
--
DROP PROCEDURE IF EXISTS vk_adovstat_unlock$$

--
-- Удалить процедуру "vk_adovstat_save"
--
DROP PROCEDURE IF EXISTS vk_adovstat_save$$

--
-- Удалить процедуру "vk_adovstat_parent"
--
DROP PROCEDURE IF EXISTS vk_adovstat_parent$$

--
-- Удалить процедуру "vk_adovstat_logger"
--
DROP PROCEDURE IF EXISTS vk_adovstat_logger$$

--
-- Удалить процедуру "vk_adovstat_lock"
--
DROP PROCEDURE IF EXISTS vk_adovstat_lock$$

--
-- Удалить процедуру "vk_adovstat_islocked"
--
DROP PROCEDURE IF EXISTS vk_adovstat_islocked$$

--
-- Удалить процедуру "vk_adovstat_delete"
--
DROP PROCEDURE IF EXISTS vk_adovstat_delete$$

--
-- Удалить процедуру "vk_adovstat_copy"
--
DROP PROCEDURE IF EXISTS vk_adovstat_copy$$

--
-- Удалить процедуру "vk_adovstat_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adovstat_client_trigger$$

--
-- Удалить процедуру "vk_adovstat_brief"
--
DROP PROCEDURE IF EXISTS vk_adovstat_brief$$

--
-- Удалить процедуру "vk_adinfo_unlock"
--
DROP PROCEDURE IF EXISTS vk_adinfo_unlock$$

--
-- Удалить процедуру "vk_adinfo_save"
--
DROP PROCEDURE IF EXISTS vk_adinfo_save$$

--
-- Удалить процедуру "vk_adinfo_parent"
--
DROP PROCEDURE IF EXISTS vk_adinfo_parent$$

--
-- Удалить процедуру "vk_adinfo_logger"
--
DROP PROCEDURE IF EXISTS vk_adinfo_logger$$

--
-- Удалить процедуру "vk_adinfo_lock"
--
DROP PROCEDURE IF EXISTS vk_adinfo_lock$$

--
-- Удалить процедуру "vk_adinfo_islocked"
--
DROP PROCEDURE IF EXISTS vk_adinfo_islocked$$

--
-- Удалить процедуру "vk_adinfo_delete"
--
DROP PROCEDURE IF EXISTS vk_adinfo_delete$$

--
-- Удалить процедуру "vk_adinfo_copy"
--
DROP PROCEDURE IF EXISTS vk_adinfo_copy$$

--
-- Удалить процедуру "vk_adinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adinfo_client_trigger$$

--
-- Удалить процедуру "vk_adinfo_brief"
--
DROP PROCEDURE IF EXISTS vk_adinfo_brief$$

--
-- Удалить процедуру "vk_adformat_unlock"
--
DROP PROCEDURE IF EXISTS vk_adformat_unlock$$

--
-- Удалить процедуру "vk_adformat_save"
--
DROP PROCEDURE IF EXISTS vk_adformat_save$$

--
-- Удалить процедуру "vk_adformat_parent"
--
DROP PROCEDURE IF EXISTS vk_adformat_parent$$

--
-- Удалить процедуру "vk_adformat_logger"
--
DROP PROCEDURE IF EXISTS vk_adformat_logger$$

--
-- Удалить процедуру "vk_adformat_lock"
--
DROP PROCEDURE IF EXISTS vk_adformat_lock$$

--
-- Удалить процедуру "vk_adformat_islocked"
--
DROP PROCEDURE IF EXISTS vk_adformat_islocked$$

--
-- Удалить процедуру "vk_adformat_delete"
--
DROP PROCEDURE IF EXISTS vk_adformat_delete$$

--
-- Удалить процедуру "vk_adformat_copy"
--
DROP PROCEDURE IF EXISTS vk_adformat_copy$$

--
-- Удалить процедуру "vk_adformat_client_trigger"
--
DROP PROCEDURE IF EXISTS vk_adformat_client_trigger$$

--
-- Удалить процедуру "vk_adformat_brief"
--
DROP PROCEDURE IF EXISTS vk_adformat_brief$$

--
-- Удалить процедуру "vkusr_initownership"
--
DROP PROCEDURE IF EXISTS vkusr_initownership$$

--
-- Удалить процедуру "vkusr_copy"
--
DROP PROCEDURE IF EXISTS vkusr_copy$$

--
-- Удалить процедуру "vktsk_initownership"
--
DROP PROCEDURE IF EXISTS vktsk_initownership$$

--
-- Удалить процедуру "vktsk_copy"
--
DROP PROCEDURE IF EXISTS vktsk_copy$$

--
-- Удалить процедуру "vktrg_initownership"
--
DROP PROCEDURE IF EXISTS vktrg_initownership$$

--
-- Удалить процедуру "vktrg_copy"
--
DROP PROCEDURE IF EXISTS vktrg_copy$$

--
-- Удалить процедуру "vkrot_initownership"
--
DROP PROCEDURE IF EXISTS vkrot_initownership$$

--
-- Удалить процедуру "vkrot_copy"
--
DROP PROCEDURE IF EXISTS vkrot_copy$$

--
-- Удалить процедуру "vkprj_initownership"
--
DROP PROCEDURE IF EXISTS vkprj_initownership$$

--
-- Удалить процедуру "vkprj_copy"
--
DROP PROCEDURE IF EXISTS vkprj_copy$$

--
-- Удалить процедуру "vkcam_initownership"
--
DROP PROCEDURE IF EXISTS vkcam_initownership$$

--
-- Удалить процедуру "vkcam_copy"
--
DROP PROCEDURE IF EXISTS vkcam_copy$$

--
-- Удалить процедуру "vkbrk_initownership"
--
DROP PROCEDURE IF EXISTS vkbrk_initownership$$

--
-- Удалить процедуру "vkbrk_copy"
--
DROP PROCEDURE IF EXISTS vkbrk_copy$$

--
-- Удалить процедуру "vkads_initownership"
--
DROP PROCEDURE IF EXISTS vkads_initownership$$

--
-- Удалить процедуру "vkads_copy"
--
DROP PROCEDURE IF EXISTS vkads_copy$$

--
-- Удалить процедуру "viewcolumn_unlock"
--
DROP PROCEDURE IF EXISTS viewcolumn_unlock$$

--
-- Удалить процедуру "viewcolumn_save"
--
DROP PROCEDURE IF EXISTS viewcolumn_save$$

--
-- Удалить процедуру "viewcolumn_parent"
--
DROP PROCEDURE IF EXISTS viewcolumn_parent$$

--
-- Удалить процедуру "viewcolumn_logger"
--
DROP PROCEDURE IF EXISTS viewcolumn_logger$$

--
-- Удалить процедуру "viewcolumn_lock"
--
DROP PROCEDURE IF EXISTS viewcolumn_lock$$

--
-- Удалить процедуру "viewcolumn_islocked"
--
DROP PROCEDURE IF EXISTS viewcolumn_islocked$$

--
-- Удалить процедуру "viewcolumn_delete"
--
DROP PROCEDURE IF EXISTS viewcolumn_delete$$

--
-- Удалить процедуру "viewcolumn_copy"
--
DROP PROCEDURE IF EXISTS viewcolumn_copy$$

--
-- Удалить процедуру "viewcolumn_client_trigger"
--
DROP PROCEDURE IF EXISTS viewcolumn_client_trigger$$

--
-- Удалить процедуру "viewcolumn_brief"
--
DROP PROCEDURE IF EXISTS viewcolumn_brief$$

--
-- Удалить процедуру "vdt_copy"
--
DROP PROCEDURE IF EXISTS vdt_copy$$

--
-- Удалить процедуру "vdtt_copy"
--
DROP PROCEDURE IF EXISTS vdtt_copy$$

--
-- Удалить процедуру "vdrg_copy"
--
DROP PROCEDURE IF EXISTS vdrg_copy$$

--
-- Удалить процедуру "vdrel_copy"
--
DROP PROCEDURE IF EXISTS vdrel_copy$$

--
-- Удалить процедуру "vdpt_copy"
--
DROP PROCEDURE IF EXISTS vdpt_copy$$

--
-- Удалить процедуру "vdpos_copy"
--
DROP PROCEDURE IF EXISTS vdpos_copy$$

--
-- Удалить процедуру "vdos_copy"
--
DROP PROCEDURE IF EXISTS vdos_copy$$

--
-- Удалить процедуру "vdmstat_copy"
--
DROP PROCEDURE IF EXISTS vdmstat_copy$$

--
-- Удалить процедуру "vdinter_copy"
--
DROP PROCEDURE IF EXISTS vdinter_copy$$

--
-- Удалить процедуру "vdfrmt_copy"
--
DROP PROCEDURE IF EXISTS vdfrmt_copy$$

--
-- Удалить процедуру "vddev_copy"
--
DROP PROCEDURE IF EXISTS vddev_copy$$

--
-- Удалить процедуру "vdcst_copy"
--
DROP PROCEDURE IF EXISTS vdcst_copy$$

--
-- Удалить процедуру "vdcn_copy"
--
DROP PROCEDURE IF EXISTS vdcn_copy$$

--
-- Удалить процедуру "vdcat_copy"
--
DROP PROCEDURE IF EXISTS vdcat_copy$$

--
-- Удалить процедуру "vdbrw_copy"
--
DROP PROCEDURE IF EXISTS vdbrw_copy$$

--
-- Удалить процедуру "vdast_copy"
--
DROP PROCEDURE IF EXISTS vdast_copy$$

--
-- Удалить процедуру "vdappr_copy"
--
DROP PROCEDURE IF EXISTS vdappr_copy$$

--
-- Удалить процедуру "vdapl_copy"
--
DROP PROCEDURE IF EXISTS vdapl_copy$$

--
-- Удалить процедуру "vdage_copy"
--
DROP PROCEDURE IF EXISTS vdage_copy$$

--
-- Удалить процедуру "validator_unlock"
--
DROP PROCEDURE IF EXISTS validator_unlock$$

--
-- Удалить процедуру "validator_save"
--
DROP PROCEDURE IF EXISTS validator_save$$

--
-- Удалить процедуру "validator_parent"
--
DROP PROCEDURE IF EXISTS validator_parent$$

--
-- Удалить процедуру "validator_logger"
--
DROP PROCEDURE IF EXISTS validator_logger$$

--
-- Удалить процедуру "validator_lock"
--
DROP PROCEDURE IF EXISTS validator_lock$$

--
-- Удалить процедуру "validator_islocked"
--
DROP PROCEDURE IF EXISTS validator_islocked$$

--
-- Удалить процедуру "validator_delete"
--
DROP PROCEDURE IF EXISTS validator_delete$$

--
-- Удалить процедуру "validator_copy"
--
DROP PROCEDURE IF EXISTS validator_copy$$

--
-- Удалить процедуру "validator_client_trigger"
--
DROP PROCEDURE IF EXISTS validator_client_trigger$$

--
-- Удалить процедуру "validator_brief"
--
DROP PROCEDURE IF EXISTS validator_brief$$

--
-- Удалить процедуру "user_register"
--
DROP PROCEDURE IF EXISTS user_register$$

--
-- Удалить процедуру "users_unlock"
--
DROP PROCEDURE IF EXISTS users_unlock$$

--
-- Удалить процедуру "users_save"
--
DROP PROCEDURE IF EXISTS users_save$$

--
-- Удалить процедуру "users_parent"
--
DROP PROCEDURE IF EXISTS users_parent$$

--
-- Удалить процедуру "users_logger"
--
DROP PROCEDURE IF EXISTS users_logger$$

--
-- Удалить процедуру "users_lock"
--
DROP PROCEDURE IF EXISTS users_lock$$

--
-- Удалить процедуру "users_islocked"
--
DROP PROCEDURE IF EXISTS users_islocked$$

--
-- Удалить процедуру "users_delete"
--
DROP PROCEDURE IF EXISTS users_delete$$

--
-- Удалить процедуру "users_copy"
--
DROP PROCEDURE IF EXISTS users_copy$$

--
-- Удалить процедуру "users_client_trigger"
--
DROP PROCEDURE IF EXISTS users_client_trigger$$

--
-- Удалить процедуру "users_brief"
--
DROP PROCEDURE IF EXISTS users_brief$$

--
-- Удалить процедуру "uniqueconstraint_unlock"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_unlock$$

--
-- Удалить процедуру "uniqueconstraint_save"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_save$$

--
-- Удалить процедуру "uniqueconstraint_parent"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_parent$$

--
-- Удалить процедуру "uniqueconstraint_logger"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_logger$$

--
-- Удалить процедуру "uniqueconstraint_lock"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_lock$$

--
-- Удалить процедуру "uniqueconstraint_islocked"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_islocked$$

--
-- Удалить процедуру "uniqueconstraint_delete"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_delete$$

--
-- Удалить процедуру "uniqueconstraint_copy"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_copy$$

--
-- Удалить процедуру "uniqueconstraint_client_trigger"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_client_trigger$$

--
-- Удалить процедуру "uniqueconstraint_brief"
--
DROP PROCEDURE IF EXISTS uniqueconstraint_brief$$

--
-- Удалить процедуру "typemenu_unlock"
--
DROP PROCEDURE IF EXISTS typemenu_unlock$$

--
-- Удалить процедуру "typemenu_save"
--
DROP PROCEDURE IF EXISTS typemenu_save$$

--
-- Удалить процедуру "typemenu_parent"
--
DROP PROCEDURE IF EXISTS typemenu_parent$$

--
-- Удалить процедуру "typemenu_logger"
--
DROP PROCEDURE IF EXISTS typemenu_logger$$

--
-- Удалить процедуру "typemenu_lock"
--
DROP PROCEDURE IF EXISTS typemenu_lock$$

--
-- Удалить процедуру "typemenu_islocked"
--
DROP PROCEDURE IF EXISTS typemenu_islocked$$

--
-- Удалить процедуру "typemenu_delete"
--
DROP PROCEDURE IF EXISTS typemenu_delete$$

--
-- Удалить процедуру "typemenu_copy"
--
DROP PROCEDURE IF EXISTS typemenu_copy$$

--
-- Удалить процедуру "typemenu_client_trigger"
--
DROP PROCEDURE IF EXISTS typemenu_client_trigger$$

--
-- Удалить процедуру "typemenu_brief"
--
DROP PROCEDURE IF EXISTS typemenu_brief$$

--
-- Удалить процедуру "totrn_copy"
--
DROP PROCEDURE IF EXISTS totrn_copy$$

--
-- Удалить процедуру "totask_copy"
--
DROP PROCEDURE IF EXISTS totask_copy$$

--
-- Удалить процедуру "tosched_copy"
--
DROP PROCEDURE IF EXISTS tosched_copy$$

--
-- Удалить процедуру "tor_copy"
--
DROP PROCEDURE IF EXISTS tor_copy$$

--
-- Удалить процедуру "toop_copy"
--
DROP PROCEDURE IF EXISTS toop_copy$$

--
-- Удалить процедуру "toimg_copy"
--
DROP PROCEDURE IF EXISTS toimg_copy$$

--
-- Удалить процедуру "tod_valtype_unlock"
--
DROP PROCEDURE IF EXISTS tod_valtype_unlock$$

--
-- Удалить процедуру "tod_valtype_parent"
--
DROP PROCEDURE IF EXISTS tod_valtype_parent$$

--
-- Удалить процедуру "tod_valtype_logger"
--
DROP PROCEDURE IF EXISTS tod_valtype_logger$$

--
-- Удалить процедуру "tod_valtype_lock"
--
DROP PROCEDURE IF EXISTS tod_valtype_lock$$

--
-- Удалить процедуру "tod_valtype_islocked"
--
DROP PROCEDURE IF EXISTS tod_valtype_islocked$$

--
-- Удалить процедуру "tod_valtype_delete"
--
DROP PROCEDURE IF EXISTS tod_valtype_delete$$

--
-- Удалить процедуру "tod_valtype_copy"
--
DROP PROCEDURE IF EXISTS tod_valtype_copy$$

--
-- Удалить процедуру "tod_valtype_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_valtype_client_trigger$$

--
-- Удалить процедуру "tod_valtype_brief"
--
DROP PROCEDURE IF EXISTS tod_valtype_brief$$

--
-- Удалить процедуру "tod_trand_unlock"
--
DROP PROCEDURE IF EXISTS tod_trand_unlock$$

--
-- Удалить процедуру "tod_trand_save"
--
DROP PROCEDURE IF EXISTS tod_trand_save$$

--
-- Удалить процедуру "tod_trand_parent"
--
DROP PROCEDURE IF EXISTS tod_trand_parent$$

--
-- Удалить процедуру "tod_trand_logger"
--
DROP PROCEDURE IF EXISTS tod_trand_logger$$

--
-- Удалить процедуру "tod_trand_lock"
--
DROP PROCEDURE IF EXISTS tod_trand_lock$$

--
-- Удалить процедуру "tod_trand_islocked"
--
DROP PROCEDURE IF EXISTS tod_trand_islocked$$

--
-- Удалить процедуру "tod_trand_delete"
--
DROP PROCEDURE IF EXISTS tod_trand_delete$$

--
-- Удалить процедуру "tod_trand_copy"
--
DROP PROCEDURE IF EXISTS tod_trand_copy$$

--
-- Удалить процедуру "tod_trand_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_trand_client_trigger$$

--
-- Удалить процедуру "tod_trand_brief"
--
DROP PROCEDURE IF EXISTS tod_trand_brief$$

--
-- Удалить процедуру "tod_system_unlock"
--
DROP PROCEDURE IF EXISTS tod_system_unlock$$

--
-- Удалить процедуру "tod_system_parent"
--
DROP PROCEDURE IF EXISTS tod_system_parent$$

--
-- Удалить процедуру "tod_system_logger"
--
DROP PROCEDURE IF EXISTS tod_system_logger$$

--
-- Удалить процедуру "tod_system_lock"
--
DROP PROCEDURE IF EXISTS tod_system_lock$$

--
-- Удалить процедуру "tod_system_islocked"
--
DROP PROCEDURE IF EXISTS tod_system_islocked$$

--
-- Удалить процедуру "tod_system_delete"
--
DROP PROCEDURE IF EXISTS tod_system_delete$$

--
-- Удалить процедуру "tod_system_copy"
--
DROP PROCEDURE IF EXISTS tod_system_copy$$

--
-- Удалить процедуру "tod_system_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_system_client_trigger$$

--
-- Удалить процедуру "tod_system_brief"
--
DROP PROCEDURE IF EXISTS tod_system_brief$$

--
-- Удалить процедуру "tod_st_unlock"
--
DROP PROCEDURE IF EXISTS tod_st_unlock$$

--
-- Удалить процедуру "tod_st_save"
--
DROP PROCEDURE IF EXISTS tod_st_save$$

--
-- Удалить процедуру "tod_st_parent"
--
DROP PROCEDURE IF EXISTS tod_st_parent$$

--
-- Удалить процедуру "tod_st_logger"
--
DROP PROCEDURE IF EXISTS tod_st_logger$$

--
-- Удалить процедуру "tod_st_lock"
--
DROP PROCEDURE IF EXISTS tod_st_lock$$

--
-- Удалить процедуру "tod_st_islocked"
--
DROP PROCEDURE IF EXISTS tod_st_islocked$$

--
-- Удалить процедуру "tod_st_delete"
--
DROP PROCEDURE IF EXISTS tod_st_delete$$

--
-- Удалить процедуру "tod_st_copy"
--
DROP PROCEDURE IF EXISTS tod_st_copy$$

--
-- Удалить процедуру "tod_st_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_st_client_trigger$$

--
-- Удалить процедуру "tod_st_brief"
--
DROP PROCEDURE IF EXISTS tod_st_brief$$

--
-- Удалить процедуру "tod_oprole_unlock"
--
DROP PROCEDURE IF EXISTS tod_oprole_unlock$$

--
-- Удалить процедуру "tod_oprole_parent"
--
DROP PROCEDURE IF EXISTS tod_oprole_parent$$

--
-- Удалить процедуру "tod_oprole_logger"
--
DROP PROCEDURE IF EXISTS tod_oprole_logger$$

--
-- Удалить процедуру "tod_oprole_lock"
--
DROP PROCEDURE IF EXISTS tod_oprole_lock$$

--
-- Удалить процедуру "tod_oprole_islocked"
--
DROP PROCEDURE IF EXISTS tod_oprole_islocked$$

--
-- Удалить процедуру "tod_oprole_delete"
--
DROP PROCEDURE IF EXISTS tod_oprole_delete$$

--
-- Удалить процедуру "tod_oprole_copy"
--
DROP PROCEDURE IF EXISTS tod_oprole_copy$$

--
-- Удалить процедуру "tod_oprole_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_oprole_client_trigger$$

--
-- Удалить процедуру "tod_oprole_brief"
--
DROP PROCEDURE IF EXISTS tod_oprole_brief$$

--
-- Удалить процедуру "tod_model_unlock"
--
DROP PROCEDURE IF EXISTS tod_model_unlock$$

--
-- Удалить процедуру "tod_model_parent"
--
DROP PROCEDURE IF EXISTS tod_model_parent$$

--
-- Удалить процедуру "tod_model_logger"
--
DROP PROCEDURE IF EXISTS tod_model_logger$$

--
-- Удалить процедуру "tod_model_lock"
--
DROP PROCEDURE IF EXISTS tod_model_lock$$

--
-- Удалить процедуру "tod_model_islocked"
--
DROP PROCEDURE IF EXISTS tod_model_islocked$$

--
-- Удалить процедуру "tod_model_delete"
--
DROP PROCEDURE IF EXISTS tod_model_delete$$

--
-- Удалить процедуру "tod_model_copy"
--
DROP PROCEDURE IF EXISTS tod_model_copy$$

--
-- Удалить процедуру "tod_model_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_model_client_trigger$$

--
-- Удалить процедуру "tod_model_brief"
--
DROP PROCEDURE IF EXISTS tod_model_brief$$

--
-- Удалить процедуру "tod_material_unlock"
--
DROP PROCEDURE IF EXISTS tod_material_unlock$$

--
-- Удалить процедуру "tod_material_save"
--
DROP PROCEDURE IF EXISTS tod_material_save$$

--
-- Удалить процедуру "tod_material_parent"
--
DROP PROCEDURE IF EXISTS tod_material_parent$$

--
-- Удалить процедуру "tod_material_logger"
--
DROP PROCEDURE IF EXISTS tod_material_logger$$

--
-- Удалить процедуру "tod_material_lock"
--
DROP PROCEDURE IF EXISTS tod_material_lock$$

--
-- Удалить процедуру "tod_material_islocked"
--
DROP PROCEDURE IF EXISTS tod_material_islocked$$

--
-- Удалить процедуру "tod_material_delete"
--
DROP PROCEDURE IF EXISTS tod_material_delete$$

--
-- Удалить процедуру "tod_material_copy"
--
DROP PROCEDURE IF EXISTS tod_material_copy$$

--
-- Удалить процедуру "tod_material_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_material_client_trigger$$

--
-- Удалить процедуру "tod_material_brief"
--
DROP PROCEDURE IF EXISTS tod_material_brief$$

--
-- Удалить процедуру "tod_factory_unlock"
--
DROP PROCEDURE IF EXISTS tod_factory_unlock$$

--
-- Удалить процедуру "tod_factory_parent"
--
DROP PROCEDURE IF EXISTS tod_factory_parent$$

--
-- Удалить процедуру "tod_factory_logger"
--
DROP PROCEDURE IF EXISTS tod_factory_logger$$

--
-- Удалить процедуру "tod_factory_lock"
--
DROP PROCEDURE IF EXISTS tod_factory_lock$$

--
-- Удалить процедуру "tod_factory_islocked"
--
DROP PROCEDURE IF EXISTS tod_factory_islocked$$

--
-- Удалить процедуру "tod_factory_delete"
--
DROP PROCEDURE IF EXISTS tod_factory_delete$$

--
-- Удалить процедуру "tod_factory_copy"
--
DROP PROCEDURE IF EXISTS tod_factory_copy$$

--
-- Удалить процедуру "tod_factory_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_factory_client_trigger$$

--
-- Удалить процедуру "tod_factory_brief"
--
DROP PROCEDURE IF EXISTS tod_factory_brief$$

--
-- Удалить процедуру "tod_edizm_unlock"
--
DROP PROCEDURE IF EXISTS tod_edizm_unlock$$

--
-- Удалить процедуру "tod_edizm_save"
--
DROP PROCEDURE IF EXISTS tod_edizm_save$$

--
-- Удалить процедуру "tod_edizm_parent"
--
DROP PROCEDURE IF EXISTS tod_edizm_parent$$

--
-- Удалить процедуру "tod_edizm_logger"
--
DROP PROCEDURE IF EXISTS tod_edizm_logger$$

--
-- Удалить процедуру "tod_edizm_lock"
--
DROP PROCEDURE IF EXISTS tod_edizm_lock$$

--
-- Удалить процедуру "tod_edizm_islocked"
--
DROP PROCEDURE IF EXISTS tod_edizm_islocked$$

--
-- Удалить процедуру "tod_edizm_delete"
--
DROP PROCEDURE IF EXISTS tod_edizm_delete$$

--
-- Удалить процедуру "tod_edizm_copy"
--
DROP PROCEDURE IF EXISTS tod_edizm_copy$$

--
-- Удалить процедуру "tod_edizm_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_edizm_client_trigger$$

--
-- Удалить процедуру "tod_edizm_brief"
--
DROP PROCEDURE IF EXISTS tod_edizm_brief$$

--
-- Удалить процедуру "tod_copy"
--
DROP PROCEDURE IF EXISTS tod_copy$$

--
-- Удалить процедуру "tod_building_unlock"
--
DROP PROCEDURE IF EXISTS tod_building_unlock$$

--
-- Удалить процедуру "tod_building_parent"
--
DROP PROCEDURE IF EXISTS tod_building_parent$$

--
-- Удалить процедуру "tod_building_logger"
--
DROP PROCEDURE IF EXISTS tod_building_logger$$

--
-- Удалить процедуру "tod_building_lock"
--
DROP PROCEDURE IF EXISTS tod_building_lock$$

--
-- Удалить процедуру "tod_building_islocked"
--
DROP PROCEDURE IF EXISTS tod_building_islocked$$

--
-- Удалить процедуру "tod_building_delete"
--
DROP PROCEDURE IF EXISTS tod_building_delete$$

--
-- Удалить процедуру "tod_building_copy"
--
DROP PROCEDURE IF EXISTS tod_building_copy$$

--
-- Удалить процедуру "tod_building_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_building_client_trigger$$

--
-- Удалить процедуру "tod_building_brief"
--
DROP PROCEDURE IF EXISTS tod_building_brief$$

--
-- Удалить процедуру "tod_bug_unlock"
--
DROP PROCEDURE IF EXISTS tod_bug_unlock$$

--
-- Удалить процедуру "tod_bug_parent"
--
DROP PROCEDURE IF EXISTS tod_bug_parent$$

--
-- Удалить процедуру "tod_bug_logger"
--
DROP PROCEDURE IF EXISTS tod_bug_logger$$

--
-- Удалить процедуру "tod_bug_lock"
--
DROP PROCEDURE IF EXISTS tod_bug_lock$$

--
-- Удалить процедуру "tod_bug_islocked"
--
DROP PROCEDURE IF EXISTS tod_bug_islocked$$

--
-- Удалить процедуру "tod_bug_delete"
--
DROP PROCEDURE IF EXISTS tod_bug_delete$$

--
-- Удалить процедуру "tod_bug_copy"
--
DROP PROCEDURE IF EXISTS tod_bug_copy$$

--
-- Удалить процедуру "tod_bug_client_trigger"
--
DROP PROCEDURE IF EXISTS tod_bug_client_trigger$$

--
-- Удалить процедуру "tod_bug_brief"
--
DROP PROCEDURE IF EXISTS tod_bug_brief$$

--
-- Удалить процедуру "tocard_copy"
--
DROP PROCEDURE IF EXISTS tocard_copy$$

--
-- Удалить процедуру "the_session_unlock"
--
DROP PROCEDURE IF EXISTS the_session_unlock$$

--
-- Удалить процедуру "the_session_save"
--
DROP PROCEDURE IF EXISTS the_session_save$$

--
-- Удалить процедуру "the_session_parent"
--
DROP PROCEDURE IF EXISTS the_session_parent$$

--
-- Удалить процедуру "the_session_logger"
--
DROP PROCEDURE IF EXISTS the_session_logger$$

--
-- Удалить процедуру "the_session_lock"
--
DROP PROCEDURE IF EXISTS the_session_lock$$

--
-- Удалить процедуру "the_session_islocked"
--
DROP PROCEDURE IF EXISTS the_session_islocked$$

--
-- Удалить процедуру "the_session_delete"
--
DROP PROCEDURE IF EXISTS the_session_delete$$

--
-- Удалить процедуру "the_session_copy"
--
DROP PROCEDURE IF EXISTS the_session_copy$$

--
-- Удалить процедуру "the_session_client_trigger"
--
DROP PROCEDURE IF EXISTS the_session_client_trigger$$

--
-- Удалить процедуру "the_session_brief"
--
DROP PROCEDURE IF EXISTS the_session_brief$$

--
-- Удалить процедуру "sysrefcache_unlock"
--
DROP PROCEDURE IF EXISTS sysrefcache_unlock$$

--
-- Удалить процедуру "sysrefcache_save"
--
DROP PROCEDURE IF EXISTS sysrefcache_save$$

--
-- Удалить процедуру "sysrefcache_parent"
--
DROP PROCEDURE IF EXISTS sysrefcache_parent$$

--
-- Удалить процедуру "sysrefcache_logger"
--
DROP PROCEDURE IF EXISTS sysrefcache_logger$$

--
-- Удалить процедуру "sysrefcache_lock"
--
DROP PROCEDURE IF EXISTS sysrefcache_lock$$

--
-- Удалить процедуру "sysrefcache_islocked"
--
DROP PROCEDURE IF EXISTS sysrefcache_islocked$$

--
-- Удалить процедуру "sysrefcache_delete"
--
DROP PROCEDURE IF EXISTS sysrefcache_delete$$

--
-- Удалить процедуру "sysrefcache_copy"
--
DROP PROCEDURE IF EXISTS sysrefcache_copy$$

--
-- Удалить процедуру "sysrefcache_client_trigger"
--
DROP PROCEDURE IF EXISTS sysrefcache_client_trigger$$

--
-- Удалить процедуру "sysrefcache_brief"
--
DROP PROCEDURE IF EXISTS sysrefcache_brief$$

--
-- Удалить процедуру "sysoptions_save"
--
DROP PROCEDURE IF EXISTS sysoptions_save$$

--
-- Удалить процедуру "syslog_unlock"
--
DROP PROCEDURE IF EXISTS syslog_unlock$$

--
-- Удалить процедуру "syslog_save"
--
DROP PROCEDURE IF EXISTS syslog_save$$

--
-- Удалить процедуру "syslog_parent"
--
DROP PROCEDURE IF EXISTS syslog_parent$$

--
-- Удалить процедуру "syslog_logger"
--
DROP PROCEDURE IF EXISTS syslog_logger$$

--
-- Удалить процедуру "syslog_lock"
--
DROP PROCEDURE IF EXISTS syslog_lock$$

--
-- Удалить процедуру "syslog_islocked"
--
DROP PROCEDURE IF EXISTS syslog_islocked$$

--
-- Удалить процедуру "syslog_delete"
--
DROP PROCEDURE IF EXISTS syslog_delete$$

--
-- Удалить процедуру "syslog_copy"
--
DROP PROCEDURE IF EXISTS syslog_copy$$

--
-- Удалить процедуру "syslog_client_trigger"
--
DROP PROCEDURE IF EXISTS syslog_client_trigger$$

--
-- Удалить процедуру "syslog_brief"
--
DROP PROCEDURE IF EXISTS syslog_brief$$

--
-- Удалить процедуру "structrestriction_unlock"
--
DROP PROCEDURE IF EXISTS structrestriction_unlock$$

--
-- Удалить процедуру "structrestriction_save"
--
DROP PROCEDURE IF EXISTS structrestriction_save$$

--
-- Удалить процедуру "structrestriction_parent"
--
DROP PROCEDURE IF EXISTS structrestriction_parent$$

--
-- Удалить процедуру "structrestriction_logger"
--
DROP PROCEDURE IF EXISTS structrestriction_logger$$

--
-- Удалить процедуру "structrestriction_lock"
--
DROP PROCEDURE IF EXISTS structrestriction_lock$$

--
-- Удалить процедуру "structrestriction_islocked"
--
DROP PROCEDURE IF EXISTS structrestriction_islocked$$

--
-- Удалить процедуру "structrestriction_delete"
--
DROP PROCEDURE IF EXISTS structrestriction_delete$$

--
-- Удалить процедуру "structrestriction_copy"
--
DROP PROCEDURE IF EXISTS structrestriction_copy$$

--
-- Удалить процедуру "structrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS structrestriction_client_trigger$$

--
-- Удалить процедуру "structrestriction_brief"
--
DROP PROCEDURE IF EXISTS structrestriction_brief$$

--
-- Удалить процедуру "stdnumerator_copy"
--
DROP PROCEDURE IF EXISTS stdnumerator_copy$$

--
-- Удалить процедуру "stdinfostore_copy"
--
DROP PROCEDURE IF EXISTS stdinfostore_copy$$

--
-- Удалить процедуру "sharedmethod_unlock"
--
DROP PROCEDURE IF EXISTS sharedmethod_unlock$$

--
-- Удалить процедуру "sharedmethod_save"
--
DROP PROCEDURE IF EXISTS sharedmethod_save$$

--
-- Удалить процедуру "sharedmethod_parent"
--
DROP PROCEDURE IF EXISTS sharedmethod_parent$$

--
-- Удалить процедуру "sharedmethod_logger"
--
DROP PROCEDURE IF EXISTS sharedmethod_logger$$

--
-- Удалить процедуру "sharedmethod_lock"
--
DROP PROCEDURE IF EXISTS sharedmethod_lock$$

--
-- Удалить процедуру "sharedmethod_islocked"
--
DROP PROCEDURE IF EXISTS sharedmethod_islocked$$

--
-- Удалить процедуру "sharedmethod_delete"
--
DROP PROCEDURE IF EXISTS sharedmethod_delete$$

--
-- Удалить процедуру "sharedmethod_copy"
--
DROP PROCEDURE IF EXISTS sharedmethod_copy$$

--
-- Удалить процедуру "sharedmethod_client_trigger"
--
DROP PROCEDURE IF EXISTS sharedmethod_client_trigger$$

--
-- Удалить процедуру "sharedmethod_brief"
--
DROP PROCEDURE IF EXISTS sharedmethod_brief$$

--
-- Удалить процедуру "setpassword_wiz"
--
DROP PROCEDURE IF EXISTS setpassword_wiz$$

--
-- Удалить процедуру "setmypassword_wiz"
--
DROP PROCEDURE IF EXISTS setmypassword_wiz$$

--
-- Удалить процедуру "SessionTouch"
--
DROP PROCEDURE IF EXISTS SessionTouch$$

--
-- Удалить процедуру "script_unlock"
--
DROP PROCEDURE IF EXISTS script_unlock$$

--
-- Удалить процедуру "script_save"
--
DROP PROCEDURE IF EXISTS script_save$$

--
-- Удалить процедуру "script_parent"
--
DROP PROCEDURE IF EXISTS script_parent$$

--
-- Удалить процедуру "script_logger"
--
DROP PROCEDURE IF EXISTS script_logger$$

--
-- Удалить процедуру "script_lock"
--
DROP PROCEDURE IF EXISTS script_lock$$

--
-- Удалить процедуру "script_islocked"
--
DROP PROCEDURE IF EXISTS script_islocked$$

--
-- Удалить процедуру "script_delete"
--
DROP PROCEDURE IF EXISTS script_delete$$

--
-- Удалить процедуру "script_copy"
--
DROP PROCEDURE IF EXISTS script_copy$$

--
-- Удалить процедуру "script_client_trigger"
--
DROP PROCEDURE IF EXISTS script_client_trigger$$

--
-- Удалить процедуру "script_brief"
--
DROP PROCEDURE IF EXISTS script_brief$$

--
-- Удалить процедуру "rptstruct_unlock"
--
DROP PROCEDURE IF EXISTS rptstruct_unlock$$

--
-- Удалить процедуру "rptstruct_save"
--
DROP PROCEDURE IF EXISTS rptstruct_save$$

--
-- Удалить процедуру "rptstruct_parent"
--
DROP PROCEDURE IF EXISTS rptstruct_parent$$

--
-- Удалить процедуру "rptstruct_logger"
--
DROP PROCEDURE IF EXISTS rptstruct_logger$$

--
-- Удалить процедуру "rptstruct_lock"
--
DROP PROCEDURE IF EXISTS rptstruct_lock$$

--
-- Удалить процедуру "rptstruct_islocked"
--
DROP PROCEDURE IF EXISTS rptstruct_islocked$$

--
-- Удалить процедуру "rptstruct_delete"
--
DROP PROCEDURE IF EXISTS rptstruct_delete$$

--
-- Удалить процедуру "rptstruct_copy"
--
DROP PROCEDURE IF EXISTS rptstruct_copy$$

--
-- Удалить процедуру "rptstruct_client_trigger"
--
DROP PROCEDURE IF EXISTS rptstruct_client_trigger$$

--
-- Удалить процедуру "rptstruct_brief"
--
DROP PROCEDURE IF EXISTS rptstruct_brief$$

--
-- Удалить процедуру "rptformula_unlock"
--
DROP PROCEDURE IF EXISTS rptformula_unlock$$

--
-- Удалить процедуру "rptformula_save"
--
DROP PROCEDURE IF EXISTS rptformula_save$$

--
-- Удалить процедуру "rptformula_parent"
--
DROP PROCEDURE IF EXISTS rptformula_parent$$

--
-- Удалить процедуру "rptformula_logger"
--
DROP PROCEDURE IF EXISTS rptformula_logger$$

--
-- Удалить процедуру "rptformula_lock"
--
DROP PROCEDURE IF EXISTS rptformula_lock$$

--
-- Удалить процедуру "rptformula_islocked"
--
DROP PROCEDURE IF EXISTS rptformula_islocked$$

--
-- Удалить процедуру "rptformula_delete"
--
DROP PROCEDURE IF EXISTS rptformula_delete$$

--
-- Удалить процедуру "rptformula_copy"
--
DROP PROCEDURE IF EXISTS rptformula_copy$$

--
-- Удалить процедуру "rptformula_client_trigger"
--
DROP PROCEDURE IF EXISTS rptformula_client_trigger$$

--
-- Удалить процедуру "rptformula_brief"
--
DROP PROCEDURE IF EXISTS rptformula_brief$$

--
-- Удалить процедуру "rptfields_unlock"
--
DROP PROCEDURE IF EXISTS rptfields_unlock$$

--
-- Удалить процедуру "rptfields_save"
--
DROP PROCEDURE IF EXISTS rptfields_save$$

--
-- Удалить процедуру "rptfields_parent"
--
DROP PROCEDURE IF EXISTS rptfields_parent$$

--
-- Удалить процедуру "rptfields_logger"
--
DROP PROCEDURE IF EXISTS rptfields_logger$$

--
-- Удалить процедуру "rptfields_lock"
--
DROP PROCEDURE IF EXISTS rptfields_lock$$

--
-- Удалить процедуру "rptfields_islocked"
--
DROP PROCEDURE IF EXISTS rptfields_islocked$$

--
-- Удалить процедуру "rptfields_delete"
--
DROP PROCEDURE IF EXISTS rptfields_delete$$

--
-- Удалить процедуру "rptfields_copy"
--
DROP PROCEDURE IF EXISTS rptfields_copy$$

--
-- Удалить процедуру "rptfields_client_trigger"
--
DROP PROCEDURE IF EXISTS rptfields_client_trigger$$

--
-- Удалить процедуру "rptfields_brief"
--
DROP PROCEDURE IF EXISTS rptfields_brief$$

--
-- Удалить процедуру "RowParents"
--
DROP PROCEDURE IF EXISTS RowParents$$

--
-- Удалить процедуру "roles_copy"
--
DROP PROCEDURE IF EXISTS roles_copy$$

--
-- Удалить процедуру "reports_unlock"
--
DROP PROCEDURE IF EXISTS reports_unlock$$

--
-- Удалить процедуру "reports_save"
--
DROP PROCEDURE IF EXISTS reports_save$$

--
-- Удалить процедуру "reports_parent"
--
DROP PROCEDURE IF EXISTS reports_parent$$

--
-- Удалить процедуру "reports_logger"
--
DROP PROCEDURE IF EXISTS reports_logger$$

--
-- Удалить процедуру "reports_lock"
--
DROP PROCEDURE IF EXISTS reports_lock$$

--
-- Удалить процедуру "reports_islocked"
--
DROP PROCEDURE IF EXISTS reports_islocked$$

--
-- Удалить процедуру "reports_delete"
--
DROP PROCEDURE IF EXISTS reports_delete$$

--
-- Удалить процедуру "reports_copy"
--
DROP PROCEDURE IF EXISTS reports_copy$$

--
-- Удалить процедуру "reports_client_trigger"
--
DROP PROCEDURE IF EXISTS reports_client_trigger$$

--
-- Удалить процедуру "reports_brief"
--
DROP PROCEDURE IF EXISTS reports_brief$$

--
-- Удалить процедуру "qr_or_qr"
--
DROP PROCEDURE IF EXISTS qr_or_qr$$

--
-- Удалить процедуру "part_unlock"
--
DROP PROCEDURE IF EXISTS part_unlock$$

--
-- Удалить процедуру "part_save"
--
DROP PROCEDURE IF EXISTS part_save$$

--
-- Удалить процедуру "part_parent"
--
DROP PROCEDURE IF EXISTS part_parent$$

--
-- Удалить процедуру "part_logger"
--
DROP PROCEDURE IF EXISTS part_logger$$

--
-- Удалить процедуру "part_lock"
--
DROP PROCEDURE IF EXISTS part_lock$$

--
-- Удалить процедуру "part_islocked"
--
DROP PROCEDURE IF EXISTS part_islocked$$

--
-- Удалить процедуру "part_delete"
--
DROP PROCEDURE IF EXISTS part_delete$$

--
-- Удалить процедуру "part_copy"
--
DROP PROCEDURE IF EXISTS part_copy$$

--
-- Удалить процедуру "part_client_trigger"
--
DROP PROCEDURE IF EXISTS part_client_trigger$$

--
-- Удалить процедуру "part_brief"
--
DROP PROCEDURE IF EXISTS part_brief$$

--
-- Удалить процедуру "partview_unlock"
--
DROP PROCEDURE IF EXISTS partview_unlock$$

--
-- Удалить процедуру "partview_save"
--
DROP PROCEDURE IF EXISTS partview_save$$

--
-- Удалить процедуру "partview_parent"
--
DROP PROCEDURE IF EXISTS partview_parent$$

--
-- Удалить процедуру "partview_logger"
--
DROP PROCEDURE IF EXISTS partview_logger$$

--
-- Удалить процедуру "partview_lock"
--
DROP PROCEDURE IF EXISTS partview_lock$$

--
-- Удалить процедуру "partview_lnk_unlock"
--
DROP PROCEDURE IF EXISTS partview_lnk_unlock$$

--
-- Удалить процедуру "partview_lnk_save"
--
DROP PROCEDURE IF EXISTS partview_lnk_save$$

--
-- Удалить процедуру "partview_lnk_parent"
--
DROP PROCEDURE IF EXISTS partview_lnk_parent$$

--
-- Удалить процедуру "partview_lnk_logger"
--
DROP PROCEDURE IF EXISTS partview_lnk_logger$$

--
-- Удалить процедуру "partview_lnk_lock"
--
DROP PROCEDURE IF EXISTS partview_lnk_lock$$

--
-- Удалить процедуру "partview_lnk_islocked"
--
DROP PROCEDURE IF EXISTS partview_lnk_islocked$$

--
-- Удалить процедуру "partview_lnk_delete"
--
DROP PROCEDURE IF EXISTS partview_lnk_delete$$

--
-- Удалить процедуру "partview_lnk_copy"
--
DROP PROCEDURE IF EXISTS partview_lnk_copy$$

--
-- Удалить процедуру "partview_lnk_client_trigger"
--
DROP PROCEDURE IF EXISTS partview_lnk_client_trigger$$

--
-- Удалить процедуру "partview_lnk_brief"
--
DROP PROCEDURE IF EXISTS partview_lnk_brief$$

--
-- Удалить процедуру "partview_islocked"
--
DROP PROCEDURE IF EXISTS partview_islocked$$

--
-- Удалить процедуру "partview_delete"
--
DROP PROCEDURE IF EXISTS partview_delete$$

--
-- Удалить процедуру "partview_copy"
--
DROP PROCEDURE IF EXISTS partview_copy$$

--
-- Удалить процедуру "partview_client_trigger"
--
DROP PROCEDURE IF EXISTS partview_client_trigger$$

--
-- Удалить процедуру "partview_brief"
--
DROP PROCEDURE IF EXISTS partview_brief$$

--
-- Удалить процедуру "partparammap_unlock"
--
DROP PROCEDURE IF EXISTS partparammap_unlock$$

--
-- Удалить процедуру "partparammap_save"
--
DROP PROCEDURE IF EXISTS partparammap_save$$

--
-- Удалить процедуру "partparammap_parent"
--
DROP PROCEDURE IF EXISTS partparammap_parent$$

--
-- Удалить процедуру "partparammap_logger"
--
DROP PROCEDURE IF EXISTS partparammap_logger$$

--
-- Удалить процедуру "partparammap_lock"
--
DROP PROCEDURE IF EXISTS partparammap_lock$$

--
-- Удалить процедуру "partparammap_islocked"
--
DROP PROCEDURE IF EXISTS partparammap_islocked$$

--
-- Удалить процедуру "partparammap_delete"
--
DROP PROCEDURE IF EXISTS partparammap_delete$$

--
-- Удалить процедуру "partparammap_copy"
--
DROP PROCEDURE IF EXISTS partparammap_copy$$

--
-- Удалить процедуру "partparammap_client_trigger"
--
DROP PROCEDURE IF EXISTS partparammap_client_trigger$$

--
-- Удалить процедуру "partparammap_brief"
--
DROP PROCEDURE IF EXISTS partparammap_brief$$

--
-- Удалить процедуру "partmenu_unlock"
--
DROP PROCEDURE IF EXISTS partmenu_unlock$$

--
-- Удалить процедуру "partmenu_save"
--
DROP PROCEDURE IF EXISTS partmenu_save$$

--
-- Удалить процедуру "partmenu_parent"
--
DROP PROCEDURE IF EXISTS partmenu_parent$$

--
-- Удалить процедуру "partmenu_logger"
--
DROP PROCEDURE IF EXISTS partmenu_logger$$

--
-- Удалить процедуру "partmenu_lock"
--
DROP PROCEDURE IF EXISTS partmenu_lock$$

--
-- Удалить процедуру "partmenu_islocked"
--
DROP PROCEDURE IF EXISTS partmenu_islocked$$

--
-- Удалить процедуру "partmenu_delete"
--
DROP PROCEDURE IF EXISTS partmenu_delete$$

--
-- Удалить процедуру "partmenu_copy"
--
DROP PROCEDURE IF EXISTS partmenu_copy$$

--
-- Удалить процедуру "partmenu_client_trigger"
--
DROP PROCEDURE IF EXISTS partmenu_client_trigger$$

--
-- Удалить процедуру "partmenu_brief"
--
DROP PROCEDURE IF EXISTS partmenu_brief$$

--
-- Удалить процедуру "parentpackage_unlock"
--
DROP PROCEDURE IF EXISTS parentpackage_unlock$$

--
-- Удалить процедуру "parentpackage_save"
--
DROP PROCEDURE IF EXISTS parentpackage_save$$

--
-- Удалить процедуру "parentpackage_parent"
--
DROP PROCEDURE IF EXISTS parentpackage_parent$$

--
-- Удалить процедуру "parentpackage_logger"
--
DROP PROCEDURE IF EXISTS parentpackage_logger$$

--
-- Удалить процедуру "parentpackage_lock"
--
DROP PROCEDURE IF EXISTS parentpackage_lock$$

--
-- Удалить процедуру "parentpackage_islocked"
--
DROP PROCEDURE IF EXISTS parentpackage_islocked$$

--
-- Удалить процедуру "parentpackage_delete"
--
DROP PROCEDURE IF EXISTS parentpackage_delete$$

--
-- Удалить процедуру "parentpackage_copy"
--
DROP PROCEDURE IF EXISTS parentpackage_copy$$

--
-- Удалить процедуру "parentpackage_client_trigger"
--
DROP PROCEDURE IF EXISTS parentpackage_client_trigger$$

--
-- Удалить процедуру "parentpackage_brief"
--
DROP PROCEDURE IF EXISTS parentpackage_brief$$

--
-- Удалить процедуру "parameters_unlock"
--
DROP PROCEDURE IF EXISTS parameters_unlock$$

--
-- Удалить процедуру "parameters_save"
--
DROP PROCEDURE IF EXISTS parameters_save$$

--
-- Удалить процедуру "parameters_parent"
--
DROP PROCEDURE IF EXISTS parameters_parent$$

--
-- Удалить процедуру "parameters_logger"
--
DROP PROCEDURE IF EXISTS parameters_logger$$

--
-- Удалить процедуру "parameters_lock"
--
DROP PROCEDURE IF EXISTS parameters_lock$$

--
-- Удалить процедуру "parameters_islocked"
--
DROP PROCEDURE IF EXISTS parameters_islocked$$

--
-- Удалить процедуру "parameters_delete"
--
DROP PROCEDURE IF EXISTS parameters_delete$$

--
-- Удалить процедуру "parameters_copy"
--
DROP PROCEDURE IF EXISTS parameters_copy$$

--
-- Удалить процедуру "parameters_client_trigger"
--
DROP PROCEDURE IF EXISTS parameters_client_trigger$$

--
-- Удалить процедуру "parameters_brief"
--
DROP PROCEDURE IF EXISTS parameters_brief$$

--
-- Удалить процедуру "origname_save"
--
DROP PROCEDURE IF EXISTS origname_save$$

--
-- Удалить процедуру "objstatus_unlock"
--
DROP PROCEDURE IF EXISTS objstatus_unlock$$

--
-- Удалить процедуру "objstatus_save"
--
DROP PROCEDURE IF EXISTS objstatus_save$$

--
-- Удалить процедуру "objstatus_parent"
--
DROP PROCEDURE IF EXISTS objstatus_parent$$

--
-- Удалить процедуру "objstatus_logger"
--
DROP PROCEDURE IF EXISTS objstatus_logger$$

--
-- Удалить процедуру "objstatus_lock"
--
DROP PROCEDURE IF EXISTS objstatus_lock$$

--
-- Удалить процедуру "objstatus_islocked"
--
DROP PROCEDURE IF EXISTS objstatus_islocked$$

--
-- Удалить процедуру "objstatus_delete"
--
DROP PROCEDURE IF EXISTS objstatus_delete$$

--
-- Удалить процедуру "objstatus_copy"
--
DROP PROCEDURE IF EXISTS objstatus_copy$$

--
-- Удалить процедуру "objstatus_client_trigger"
--
DROP PROCEDURE IF EXISTS objstatus_client_trigger$$

--
-- Удалить процедуру "objstatus_brief"
--
DROP PROCEDURE IF EXISTS objstatus_brief$$

--
-- Удалить процедуру "objecttype_unlock"
--
DROP PROCEDURE IF EXISTS objecttype_unlock$$

--
-- Удалить процедуру "objecttype_save"
--
DROP PROCEDURE IF EXISTS objecttype_save$$

--
-- Удалить процедуру "objecttype_parent"
--
DROP PROCEDURE IF EXISTS objecttype_parent$$

--
-- Удалить процедуру "objecttype_logger"
--
DROP PROCEDURE IF EXISTS objecttype_logger$$

--
-- Удалить процедуру "objecttype_lock"
--
DROP PROCEDURE IF EXISTS objecttype_lock$$

--
-- Удалить процедуру "objecttype_islocked"
--
DROP PROCEDURE IF EXISTS objecttype_islocked$$

--
-- Удалить процедуру "objecttype_delete"
--
DROP PROCEDURE IF EXISTS objecttype_delete$$

--
-- Удалить процедуру "objecttype_copy"
--
DROP PROCEDURE IF EXISTS objecttype_copy$$

--
-- Удалить процедуру "objecttype_client_trigger"
--
DROP PROCEDURE IF EXISTS objecttype_client_trigger$$

--
-- Удалить процедуру "objecttype_brief"
--
DROP PROCEDURE IF EXISTS objecttype_brief$$

--
-- Удалить процедуру "objectmode_unlock"
--
DROP PROCEDURE IF EXISTS objectmode_unlock$$

--
-- Удалить процедуру "objectmode_save"
--
DROP PROCEDURE IF EXISTS objectmode_save$$

--
-- Удалить процедуру "objectmode_parent"
--
DROP PROCEDURE IF EXISTS objectmode_parent$$

--
-- Удалить процедуру "objectmode_logger"
--
DROP PROCEDURE IF EXISTS objectmode_logger$$

--
-- Удалить процедуру "objectmode_lock"
--
DROP PROCEDURE IF EXISTS objectmode_lock$$

--
-- Удалить процедуру "objectmode_islocked"
--
DROP PROCEDURE IF EXISTS objectmode_islocked$$

--
-- Удалить процедуру "objectmode_delete"
--
DROP PROCEDURE IF EXISTS objectmode_delete$$

--
-- Удалить процедуру "objectmode_copy"
--
DROP PROCEDURE IF EXISTS objectmode_copy$$

--
-- Удалить процедуру "objectmode_client_trigger"
--
DROP PROCEDURE IF EXISTS objectmode_client_trigger$$

--
-- Удалить процедуру "objectmode_brief"
--
DROP PROCEDURE IF EXISTS objectmode_brief$$

--
-- Удалить процедуру "num_zones_unlock"
--
DROP PROCEDURE IF EXISTS num_zones_unlock$$

--
-- Удалить процедуру "num_zones_save"
--
DROP PROCEDURE IF EXISTS num_zones_save$$

--
-- Удалить процедуру "num_zones_parent"
--
DROP PROCEDURE IF EXISTS num_zones_parent$$

--
-- Удалить процедуру "num_zones_logger"
--
DROP PROCEDURE IF EXISTS num_zones_logger$$

--
-- Удалить процедуру "num_zones_lock"
--
DROP PROCEDURE IF EXISTS num_zones_lock$$

--
-- Удалить процедуру "num_zones_islocked"
--
DROP PROCEDURE IF EXISTS num_zones_islocked$$

--
-- Удалить процедуру "num_zones_delete"
--
DROP PROCEDURE IF EXISTS num_zones_delete$$

--
-- Удалить процедуру "num_zones_copy"
--
DROP PROCEDURE IF EXISTS num_zones_copy$$

--
-- Удалить процедуру "num_zones_client_trigger"
--
DROP PROCEDURE IF EXISTS num_zones_client_trigger$$

--
-- Удалить процедуру "num_zones_brief"
--
DROP PROCEDURE IF EXISTS num_zones_brief$$

--
-- Удалить процедуру "num_values_unlock"
--
DROP PROCEDURE IF EXISTS num_values_unlock$$

--
-- Удалить процедуру "num_values_save"
--
DROP PROCEDURE IF EXISTS num_values_save$$

--
-- Удалить процедуру "num_values_parent"
--
DROP PROCEDURE IF EXISTS num_values_parent$$

--
-- Удалить процедуру "num_values_logger"
--
DROP PROCEDURE IF EXISTS num_values_logger$$

--
-- Удалить процедуру "num_values_lock"
--
DROP PROCEDURE IF EXISTS num_values_lock$$

--
-- Удалить процедуру "num_values_islocked"
--
DROP PROCEDURE IF EXISTS num_values_islocked$$

--
-- Удалить процедуру "num_values_delete"
--
DROP PROCEDURE IF EXISTS num_values_delete$$

--
-- Удалить процедуру "num_values_copy"
--
DROP PROCEDURE IF EXISTS num_values_copy$$

--
-- Удалить процедуру "num_values_client_trigger"
--
DROP PROCEDURE IF EXISTS num_values_client_trigger$$

--
-- Удалить процедуру "num_values_brief"
--
DROP PROCEDURE IF EXISTS num_values_brief$$

--
-- Удалить процедуру "num_head_unlock"
--
DROP PROCEDURE IF EXISTS num_head_unlock$$

--
-- Удалить процедуру "num_head_save"
--
DROP PROCEDURE IF EXISTS num_head_save$$

--
-- Удалить процедуру "num_head_parent"
--
DROP PROCEDURE IF EXISTS num_head_parent$$

--
-- Удалить процедуру "num_head_logger"
--
DROP PROCEDURE IF EXISTS num_head_logger$$

--
-- Удалить процедуру "num_head_lock"
--
DROP PROCEDURE IF EXISTS num_head_lock$$

--
-- Удалить процедуру "num_head_islocked"
--
DROP PROCEDURE IF EXISTS num_head_islocked$$

--
-- Удалить процедуру "num_head_delete"
--
DROP PROCEDURE IF EXISTS num_head_delete$$

--
-- Удалить процедуру "num_head_copy"
--
DROP PROCEDURE IF EXISTS num_head_copy$$

--
-- Удалить процедуру "num_head_client_trigger"
--
DROP PROCEDURE IF EXISTS num_head_client_trigger$$

--
-- Удалить процедуру "num_head_brief"
--
DROP PROCEDURE IF EXISTS num_head_brief$$

--
-- Удалить процедуру "nextstate_unlock"
--
DROP PROCEDURE IF EXISTS nextstate_unlock$$

--
-- Удалить процедуру "nextstate_save"
--
DROP PROCEDURE IF EXISTS nextstate_save$$

--
-- Удалить процедуру "nextstate_parent"
--
DROP PROCEDURE IF EXISTS nextstate_parent$$

--
-- Удалить процедуру "nextstate_logger"
--
DROP PROCEDURE IF EXISTS nextstate_logger$$

--
-- Удалить процедуру "nextstate_lock"
--
DROP PROCEDURE IF EXISTS nextstate_lock$$

--
-- Удалить процедуру "nextstate_islocked"
--
DROP PROCEDURE IF EXISTS nextstate_islocked$$

--
-- Удалить процедуру "nextstate_delete"
--
DROP PROCEDURE IF EXISTS nextstate_delete$$

--
-- Удалить процедуру "nextstate_copy"
--
DROP PROCEDURE IF EXISTS nextstate_copy$$

--
-- Удалить процедуру "nextstate_client_trigger"
--
DROP PROCEDURE IF EXISTS nextstate_client_trigger$$

--
-- Удалить процедуру "nextstate_brief"
--
DROP PROCEDURE IF EXISTS nextstate_brief$$

--
-- Удалить процедуру "mtzwp_copy"
--
DROP PROCEDURE IF EXISTS mtzwp_copy$$

--
-- Удалить процедуру "mtzusers_copy"
--
DROP PROCEDURE IF EXISTS mtzusers_copy$$

--
-- Удалить процедуру "mtzsystem_copy"
--
DROP PROCEDURE IF EXISTS mtzsystem_copy$$

--
-- Удалить процедуру "mtzrprt_copy"
--
DROP PROCEDURE IF EXISTS mtzrprt_copy$$

--
-- Удалить процедуру "mtzmetamodel_copy"
--
DROP PROCEDURE IF EXISTS mtzmetamodel_copy$$

--
-- Удалить процедуру "mtzjrnl_copy"
--
DROP PROCEDURE IF EXISTS mtzjrnl_copy$$

--
-- Удалить процедуру "mtzfltr_copy"
--
DROP PROCEDURE IF EXISTS mtzfltr_copy$$

--
-- Удалить процедуру "mtzext_def_unlock"
--
DROP PROCEDURE IF EXISTS mtzext_def_unlock$$

--
-- Удалить процедуру "mtzext_def_save"
--
DROP PROCEDURE IF EXISTS mtzext_def_save$$

--
-- Удалить процедуру "mtzext_def_parent"
--
DROP PROCEDURE IF EXISTS mtzext_def_parent$$

--
-- Удалить процедуру "mtzext_def_logger"
--
DROP PROCEDURE IF EXISTS mtzext_def_logger$$

--
-- Удалить процедуру "mtzext_def_lock"
--
DROP PROCEDURE IF EXISTS mtzext_def_lock$$

--
-- Удалить процедуру "mtzext_def_islocked"
--
DROP PROCEDURE IF EXISTS mtzext_def_islocked$$

--
-- Удалить процедуру "mtzext_def_delete"
--
DROP PROCEDURE IF EXISTS mtzext_def_delete$$

--
-- Удалить процедуру "mtzext_def_copy"
--
DROP PROCEDURE IF EXISTS mtzext_def_copy$$

--
-- Удалить процедуру "mtzext_def_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzext_def_client_trigger$$

--
-- Удалить процедуру "mtzext_def_brief"
--
DROP PROCEDURE IF EXISTS mtzext_def_brief$$

--
-- Удалить процедуру "mtzext_copy"
--
DROP PROCEDURE IF EXISTS mtzext_copy$$

--
-- Удалить процедуру "mtzextrel_unlock"
--
DROP PROCEDURE IF EXISTS mtzextrel_unlock$$

--
-- Удалить процедуру "mtzextrel_save"
--
DROP PROCEDURE IF EXISTS mtzextrel_save$$

--
-- Удалить процедуру "mtzextrel_parent"
--
DROP PROCEDURE IF EXISTS mtzextrel_parent$$

--
-- Удалить процедуру "mtzextrel_logger"
--
DROP PROCEDURE IF EXISTS mtzextrel_logger$$

--
-- Удалить процедуру "mtzextrel_lock"
--
DROP PROCEDURE IF EXISTS mtzextrel_lock$$

--
-- Удалить процедуру "mtzextrel_islocked"
--
DROP PROCEDURE IF EXISTS mtzextrel_islocked$$

--
-- Удалить процедуру "mtzextrel_delete"
--
DROP PROCEDURE IF EXISTS mtzextrel_delete$$

--
-- Удалить процедуру "mtzextrel_copy"
--
DROP PROCEDURE IF EXISTS mtzextrel_copy$$

--
-- Удалить процедуру "mtzextrel_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzextrel_client_trigger$$

--
-- Удалить процедуру "mtzextrel_brief"
--
DROP PROCEDURE IF EXISTS mtzextrel_brief$$

--
-- Удалить процедуру "mtzapp_unlock"
--
DROP PROCEDURE IF EXISTS mtzapp_unlock$$

--
-- Удалить процедуру "mtzapp_save"
--
DROP PROCEDURE IF EXISTS mtzapp_save$$

--
-- Удалить процедуру "mtzapp_parent"
--
DROP PROCEDURE IF EXISTS mtzapp_parent$$

--
-- Удалить процедуру "mtzapp_logger"
--
DROP PROCEDURE IF EXISTS mtzapp_logger$$

--
-- Удалить процедуру "mtzapp_lock"
--
DROP PROCEDURE IF EXISTS mtzapp_lock$$

--
-- Удалить процедуру "mtzapp_islocked"
--
DROP PROCEDURE IF EXISTS mtzapp_islocked$$

--
-- Удалить процедуру "mtzapp_delete"
--
DROP PROCEDURE IF EXISTS mtzapp_delete$$

--
-- Удалить процедуру "mtzapp_copy"
--
DROP PROCEDURE IF EXISTS mtzapp_copy$$

--
-- Удалить процедуру "mtzapp_client_trigger"
--
DROP PROCEDURE IF EXISTS mtzapp_client_trigger$$

--
-- Удалить процедуру "mtzapp_brief"
--
DROP PROCEDURE IF EXISTS mtzapp_brief$$

--
-- Удалить процедуру "mtz2job_copy"
--
DROP PROCEDURE IF EXISTS mtz2job_copy$$

--
-- Удалить процедуру "methodrestriction_unlock"
--
DROP PROCEDURE IF EXISTS methodrestriction_unlock$$

--
-- Удалить процедуру "methodrestriction_save"
--
DROP PROCEDURE IF EXISTS methodrestriction_save$$

--
-- Удалить процедуру "methodrestriction_parent"
--
DROP PROCEDURE IF EXISTS methodrestriction_parent$$

--
-- Удалить процедуру "methodrestriction_logger"
--
DROP PROCEDURE IF EXISTS methodrestriction_logger$$

--
-- Удалить процедуру "methodrestriction_lock"
--
DROP PROCEDURE IF EXISTS methodrestriction_lock$$

--
-- Удалить процедуру "methodrestriction_islocked"
--
DROP PROCEDURE IF EXISTS methodrestriction_islocked$$

--
-- Удалить процедуру "methodrestriction_delete"
--
DROP PROCEDURE IF EXISTS methodrestriction_delete$$

--
-- Удалить процедуру "methodrestriction_copy"
--
DROP PROCEDURE IF EXISTS methodrestriction_copy$$

--
-- Удалить процедуру "methodrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS methodrestriction_client_trigger$$

--
-- Удалить процедуру "methodrestriction_brief"
--
DROP PROCEDURE IF EXISTS methodrestriction_brief$$

--
-- Удалить процедуру "Logout"
--
DROP PROCEDURE IF EXISTS Logout$$

--
-- Удалить процедуру "Login"
--
DROP PROCEDURE IF EXISTS Login$$

--
-- Удалить процедуру "localizeinfo_unlock"
--
DROP PROCEDURE IF EXISTS localizeinfo_unlock$$

--
-- Удалить процедуру "localizeinfo_save"
--
DROP PROCEDURE IF EXISTS localizeinfo_save$$

--
-- Удалить процедуру "localizeinfo_parent"
--
DROP PROCEDURE IF EXISTS localizeinfo_parent$$

--
-- Удалить процедуру "localizeinfo_logger"
--
DROP PROCEDURE IF EXISTS localizeinfo_logger$$

--
-- Удалить процедуру "localizeinfo_lock"
--
DROP PROCEDURE IF EXISTS localizeinfo_lock$$

--
-- Удалить процедуру "localizeinfo_islocked"
--
DROP PROCEDURE IF EXISTS localizeinfo_islocked$$

--
-- Удалить процедуру "localizeinfo_delete"
--
DROP PROCEDURE IF EXISTS localizeinfo_delete$$

--
-- Удалить процедуру "localizeinfo_copy"
--
DROP PROCEDURE IF EXISTS localizeinfo_copy$$

--
-- Удалить процедуру "localizeinfo_client_trigger"
--
DROP PROCEDURE IF EXISTS localizeinfo_client_trigger$$

--
-- Удалить процедуру "localizeinfo_brief"
--
DROP PROCEDURE IF EXISTS localizeinfo_brief$$

--
-- Удалить процедуру "journal_unlock"
--
DROP PROCEDURE IF EXISTS journal_unlock$$

--
-- Удалить процедуру "journal_save"
--
DROP PROCEDURE IF EXISTS journal_save$$

--
-- Удалить процедуру "journal_parent"
--
DROP PROCEDURE IF EXISTS journal_parent$$

--
-- Удалить процедуру "journal_logger"
--
DROP PROCEDURE IF EXISTS journal_logger$$

--
-- Удалить процедуру "journal_lock"
--
DROP PROCEDURE IF EXISTS journal_lock$$

--
-- Удалить процедуру "journal_islocked"
--
DROP PROCEDURE IF EXISTS journal_islocked$$

--
-- Удалить процедуру "journal_delete"
--
DROP PROCEDURE IF EXISTS journal_delete$$

--
-- Удалить процедуру "journal_copy"
--
DROP PROCEDURE IF EXISTS journal_copy$$

--
-- Удалить процедуру "journal_client_trigger"
--
DROP PROCEDURE IF EXISTS journal_client_trigger$$

--
-- Удалить процедуру "journal_brief"
--
DROP PROCEDURE IF EXISTS journal_brief$$

--
-- Удалить процедуру "journalsrc_unlock"
--
DROP PROCEDURE IF EXISTS journalsrc_unlock$$

--
-- Удалить процедуру "journalsrc_save"
--
DROP PROCEDURE IF EXISTS journalsrc_save$$

--
-- Удалить процедуру "journalsrc_parent"
--
DROP PROCEDURE IF EXISTS journalsrc_parent$$

--
-- Удалить процедуру "journalsrc_logger"
--
DROP PROCEDURE IF EXISTS journalsrc_logger$$

--
-- Удалить процедуру "journalsrc_lock"
--
DROP PROCEDURE IF EXISTS journalsrc_lock$$

--
-- Удалить процедуру "journalsrc_islocked"
--
DROP PROCEDURE IF EXISTS journalsrc_islocked$$

--
-- Удалить процедуру "journalsrc_delete"
--
DROP PROCEDURE IF EXISTS journalsrc_delete$$

--
-- Удалить процедуру "journalsrc_copy"
--
DROP PROCEDURE IF EXISTS journalsrc_copy$$

--
-- Удалить процедуру "journalsrc_client_trigger"
--
DROP PROCEDURE IF EXISTS journalsrc_client_trigger$$

--
-- Удалить процедуру "journalsrc_brief"
--
DROP PROCEDURE IF EXISTS journalsrc_brief$$

--
-- Удалить процедуру "journalcolumn_unlock"
--
DROP PROCEDURE IF EXISTS journalcolumn_unlock$$

--
-- Удалить процедуру "journalcolumn_save"
--
DROP PROCEDURE IF EXISTS journalcolumn_save$$

--
-- Удалить процедуру "journalcolumn_parent"
--
DROP PROCEDURE IF EXISTS journalcolumn_parent$$

--
-- Удалить процедуру "journalcolumn_logger"
--
DROP PROCEDURE IF EXISTS journalcolumn_logger$$

--
-- Удалить процедуру "journalcolumn_lock"
--
DROP PROCEDURE IF EXISTS journalcolumn_lock$$

--
-- Удалить процедуру "journalcolumn_islocked"
--
DROP PROCEDURE IF EXISTS journalcolumn_islocked$$

--
-- Удалить процедуру "journalcolumn_delete"
--
DROP PROCEDURE IF EXISTS journalcolumn_delete$$

--
-- Удалить процедуру "journalcolumn_copy"
--
DROP PROCEDURE IF EXISTS journalcolumn_copy$$

--
-- Удалить процедуру "journalcolumn_client_trigger"
--
DROP PROCEDURE IF EXISTS journalcolumn_client_trigger$$

--
-- Удалить процедуру "journalcolumn_brief"
--
DROP PROCEDURE IF EXISTS journalcolumn_brief$$

--
-- Удалить процедуру "jcolumnsource_unlock"
--
DROP PROCEDURE IF EXISTS jcolumnsource_unlock$$

--
-- Удалить процедуру "jcolumnsource_save"
--
DROP PROCEDURE IF EXISTS jcolumnsource_save$$

--
-- Удалить процедуру "jcolumnsource_parent"
--
DROP PROCEDURE IF EXISTS jcolumnsource_parent$$

--
-- Удалить процедуру "jcolumnsource_logger"
--
DROP PROCEDURE IF EXISTS jcolumnsource_logger$$

--
-- Удалить процедуру "jcolumnsource_lock"
--
DROP PROCEDURE IF EXISTS jcolumnsource_lock$$

--
-- Удалить процедуру "jcolumnsource_islocked"
--
DROP PROCEDURE IF EXISTS jcolumnsource_islocked$$

--
-- Удалить процедуру "jcolumnsource_delete"
--
DROP PROCEDURE IF EXISTS jcolumnsource_delete$$

--
-- Удалить процедуру "jcolumnsource_copy"
--
DROP PROCEDURE IF EXISTS jcolumnsource_copy$$

--
-- Удалить процедуру "jcolumnsource_client_trigger"
--
DROP PROCEDURE IF EXISTS jcolumnsource_client_trigger$$

--
-- Удалить процедуру "jcolumnsource_brief"
--
DROP PROCEDURE IF EXISTS jcolumnsource_brief$$

--
-- Удалить процедуру "iu_u_def_unlock"
--
DROP PROCEDURE IF EXISTS iu_u_def_unlock$$

--
-- Удалить процедуру "iu_u_def_save"
--
DROP PROCEDURE IF EXISTS iu_u_def_save$$

--
-- Удалить процедуру "iu_u_def_parent"
--
DROP PROCEDURE IF EXISTS iu_u_def_parent$$

--
-- Удалить процедуру "iu_u_def_logger"
--
DROP PROCEDURE IF EXISTS iu_u_def_logger$$

--
-- Удалить процедуру "iu_u_def_lock"
--
DROP PROCEDURE IF EXISTS iu_u_def_lock$$

--
-- Удалить процедуру "iu_u_def_islocked"
--
DROP PROCEDURE IF EXISTS iu_u_def_islocked$$

--
-- Удалить процедуру "iu_u_def_gettotemp"
--
DROP PROCEDURE IF EXISTS iu_u_def_gettotemp$$

--
-- Удалить процедуру "iu_u_def_droptempdata"
--
DROP PROCEDURE IF EXISTS iu_u_def_droptempdata$$

--
-- Удалить процедуру "iu_u_def_delete"
--
DROP PROCEDURE IF EXISTS iu_u_def_delete$$

--
-- Удалить процедуру "iu_u_def_copy"
--
DROP PROCEDURE IF EXISTS iu_u_def_copy$$

--
-- Удалить процедуру "iu_u_def_commitfromtemp"
--
DROP PROCEDURE IF EXISTS iu_u_def_commitfromtemp$$

--
-- Удалить процедуру "iu_u_def_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_u_def_client_trigger$$

--
-- Удалить процедуру "iu_u_def_brief"
--
DROP PROCEDURE IF EXISTS iu_u_def_brief$$

--
-- Удалить процедуру "iu_rcfg_mod_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_unlock$$

--
-- Удалить процедуру "iu_rcfg_mod_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_save$$

--
-- Удалить процедуру "iu_rcfg_mod_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_parent$$

--
-- Удалить процедуру "iu_rcfg_mod_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_logger$$

--
-- Удалить процедуру "iu_rcfg_mod_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_lock$$

--
-- Удалить процедуру "iu_rcfg_mod_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_islocked$$

--
-- Удалить процедуру "iu_rcfg_mod_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_delete$$

--
-- Удалить процедуру "iu_rcfg_mod_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_copy$$

--
-- Удалить процедуру "iu_rcfg_mod_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_mod_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_mod_brief$$

--
-- Удалить процедуру "iu_rcfg_docmode_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_unlock$$

--
-- Удалить процедуру "iu_rcfg_docmode_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_save$$

--
-- Удалить процедуру "iu_rcfg_docmode_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_parent$$

--
-- Удалить процедуру "iu_rcfg_docmode_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_logger$$

--
-- Удалить процедуру "iu_rcfg_docmode_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_lock$$

--
-- Удалить процедуру "iu_rcfg_docmode_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_islocked$$

--
-- Удалить процедуру "iu_rcfg_docmode_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_delete$$

--
-- Удалить процедуру "iu_rcfg_docmode_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_copy$$

--
-- Удалить процедуру "iu_rcfg_docmode_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_docmode_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_docmode_brief$$

--
-- Удалить процедуру "iu_rcfg_def_unlock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_unlock$$

--
-- Удалить процедуру "iu_rcfg_def_save"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_save$$

--
-- Удалить процедуру "iu_rcfg_def_parent"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_parent$$

--
-- Удалить процедуру "iu_rcfg_def_logger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_logger$$

--
-- Удалить процедуру "iu_rcfg_def_lock"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_lock$$

--
-- Удалить процедуру "iu_rcfg_def_islocked"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_islocked$$

--
-- Удалить процедуру "iu_rcfg_def_delete"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_delete$$

--
-- Удалить процедуру "iu_rcfg_def_copy"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_copy$$

--
-- Удалить процедуру "iu_rcfg_def_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_client_trigger$$

--
-- Удалить процедуру "iu_rcfg_def_brief"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_brief$$

--
-- Удалить процедуру "iu_rcfg_def_archive"
--
DROP PROCEDURE IF EXISTS iu_rcfg_def_archive$$

--
-- Удалить процедуру "iu_int_modules_unlock"
--
DROP PROCEDURE IF EXISTS iu_int_modules_unlock$$

--
-- Удалить процедуру "iu_int_modules_save"
--
DROP PROCEDURE IF EXISTS iu_int_modules_save$$

--
-- Удалить процедуру "iu_int_modules_parent"
--
DROP PROCEDURE IF EXISTS iu_int_modules_parent$$

--
-- Удалить процедуру "iu_int_modules_logger"
--
DROP PROCEDURE IF EXISTS iu_int_modules_logger$$

--
-- Удалить процедуру "iu_int_modules_lock"
--
DROP PROCEDURE IF EXISTS iu_int_modules_lock$$

--
-- Удалить процедуру "iu_int_modules_islocked"
--
DROP PROCEDURE IF EXISTS iu_int_modules_islocked$$

--
-- Удалить процедуру "iu_int_modules_delete"
--
DROP PROCEDURE IF EXISTS iu_int_modules_delete$$

--
-- Удалить процедуру "iu_int_modules_copy"
--
DROP PROCEDURE IF EXISTS iu_int_modules_copy$$

--
-- Удалить процедуру "iu_int_modules_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_int_modules_client_trigger$$

--
-- Удалить процедуру "iu_int_modules_brief"
--
DROP PROCEDURE IF EXISTS iu_int_modules_brief$$

--
-- Удалить процедуру "iu_crole_unlock"
--
DROP PROCEDURE IF EXISTS iu_crole_unlock$$

--
-- Удалить процедуру "iu_crole_save"
--
DROP PROCEDURE IF EXISTS iu_crole_save$$

--
-- Удалить процедуру "iu_crole_parent"
--
DROP PROCEDURE IF EXISTS iu_crole_parent$$

--
-- Удалить процедуру "iu_crole_logger"
--
DROP PROCEDURE IF EXISTS iu_crole_logger$$

--
-- Удалить процедуру "iu_crole_lock"
--
DROP PROCEDURE IF EXISTS iu_crole_lock$$

--
-- Удалить процедуру "iu_crole_islocked"
--
DROP PROCEDURE IF EXISTS iu_crole_islocked$$

--
-- Удалить процедуру "iu_crole_delete"
--
DROP PROCEDURE IF EXISTS iu_crole_delete$$

--
-- Удалить процедуру "iu_crole_copy"
--
DROP PROCEDURE IF EXISTS iu_crole_copy$$

--
-- Удалить процедуру "iu_crole_client_trigger"
--
DROP PROCEDURE IF EXISTS iu_crole_client_trigger$$

--
-- Удалить процедуру "iu_crole_brief"
--
DROP PROCEDURE IF EXISTS iu_crole_brief$$

--
-- Удалить процедуру "iu_crole_archive"
--
DROP PROCEDURE IF EXISTS iu_crole_archive$$

--
-- Удалить процедуру "instance_unlock"
--
DROP PROCEDURE IF EXISTS instance_unlock$$

--
-- Удалить процедуру "instance_save"
--
DROP PROCEDURE IF EXISTS instance_save$$

--
-- Удалить процедуру "instance_rearchive"
--
DROP PROCEDURE IF EXISTS instance_rearchive$$

--
-- Удалить процедуру "instance_owner"
--
DROP PROCEDURE IF EXISTS instance_owner$$

--
-- Удалить процедуру "instance_lock"
--
DROP PROCEDURE IF EXISTS instance_lock$$

--
-- Удалить процедуру "instance_islocked"
--
DROP PROCEDURE IF EXISTS instance_islocked$$

--
-- Удалить процедуру "instance_hcl"
--
DROP PROCEDURE IF EXISTS instance_hcl$$

--
-- Удалить процедуру "instance_delete"
--
DROP PROCEDURE IF EXISTS instance_delete$$

--
-- Удалить процедуру "instance_brief"
--
DROP PROCEDURE IF EXISTS instance_brief$$

--
-- Удалить процедуру "instance_archive"
--
DROP PROCEDURE IF EXISTS instance_archive$$

--
-- Удалить процедуру "instancevalidator_unlock"
--
DROP PROCEDURE IF EXISTS instancevalidator_unlock$$

--
-- Удалить процедуру "instancevalidator_save"
--
DROP PROCEDURE IF EXISTS instancevalidator_save$$

--
-- Удалить процедуру "instancevalidator_parent"
--
DROP PROCEDURE IF EXISTS instancevalidator_parent$$

--
-- Удалить процедуру "instancevalidator_logger"
--
DROP PROCEDURE IF EXISTS instancevalidator_logger$$

--
-- Удалить процедуру "instancevalidator_lock"
--
DROP PROCEDURE IF EXISTS instancevalidator_lock$$

--
-- Удалить процедуру "instancevalidator_islocked"
--
DROP PROCEDURE IF EXISTS instancevalidator_islocked$$

--
-- Удалить процедуру "instancevalidator_delete"
--
DROP PROCEDURE IF EXISTS instancevalidator_delete$$

--
-- Удалить процедуру "instancevalidator_copy"
--
DROP PROCEDURE IF EXISTS instancevalidator_copy$$

--
-- Удалить процедуру "instancevalidator_client_trigger"
--
DROP PROCEDURE IF EXISTS instancevalidator_client_trigger$$

--
-- Удалить процедуру "instancevalidator_brief"
--
DROP PROCEDURE IF EXISTS instancevalidator_brief$$

--
-- Удалить процедуру "init"
--
DROP PROCEDURE IF EXISTS init$$

--
-- Удалить процедуру "groupuser_unlock"
--
DROP PROCEDURE IF EXISTS groupuser_unlock$$

--
-- Удалить процедуру "groupuser_save"
--
DROP PROCEDURE IF EXISTS groupuser_save$$

--
-- Удалить процедуру "groupuser_parent"
--
DROP PROCEDURE IF EXISTS groupuser_parent$$

--
-- Удалить процедуру "groupuser_logger"
--
DROP PROCEDURE IF EXISTS groupuser_logger$$

--
-- Удалить процедуру "groupuser_lock"
--
DROP PROCEDURE IF EXISTS groupuser_lock$$

--
-- Удалить процедуру "groupuser_islocked"
--
DROP PROCEDURE IF EXISTS groupuser_islocked$$

--
-- Удалить процедуру "groupuser_delete"
--
DROP PROCEDURE IF EXISTS groupuser_delete$$

--
-- Удалить процедуру "groupuser_copy"
--
DROP PROCEDURE IF EXISTS groupuser_copy$$

--
-- Удалить процедуру "groupuser_client_trigger"
--
DROP PROCEDURE IF EXISTS groupuser_client_trigger$$

--
-- Удалить процедуру "groupuser_brief"
--
DROP PROCEDURE IF EXISTS groupuser_brief$$

--
-- Удалить процедуру "groups_unlock"
--
DROP PROCEDURE IF EXISTS groups_unlock$$

--
-- Удалить процедуру "groups_save"
--
DROP PROCEDURE IF EXISTS groups_save$$

--
-- Удалить процедуру "groups_parent"
--
DROP PROCEDURE IF EXISTS groups_parent$$

--
-- Удалить процедуру "groups_logger"
--
DROP PROCEDURE IF EXISTS groups_logger$$

--
-- Удалить процедуру "groups_lock"
--
DROP PROCEDURE IF EXISTS groups_lock$$

--
-- Удалить процедуру "groups_islocked"
--
DROP PROCEDURE IF EXISTS groups_islocked$$

--
-- Удалить процедуру "groups_delete"
--
DROP PROCEDURE IF EXISTS groups_delete$$

--
-- Удалить процедуру "groups_copy"
--
DROP PROCEDURE IF EXISTS groups_copy$$

--
-- Удалить процедуру "groups_client_trigger"
--
DROP PROCEDURE IF EXISTS groups_client_trigger$$

--
-- Удалить процедуру "groups_brief"
--
DROP PROCEDURE IF EXISTS groups_brief$$

--
-- Удалить процедуру "GetServerTime"
--
DROP PROCEDURE IF EXISTS GetServerTime$$

--
-- Удалить процедуру "genreference_unlock"
--
DROP PROCEDURE IF EXISTS genreference_unlock$$

--
-- Удалить процедуру "genreference_save"
--
DROP PROCEDURE IF EXISTS genreference_save$$

--
-- Удалить процедуру "genreference_parent"
--
DROP PROCEDURE IF EXISTS genreference_parent$$

--
-- Удалить процедуру "genreference_logger"
--
DROP PROCEDURE IF EXISTS genreference_logger$$

--
-- Удалить процедуру "genreference_lock"
--
DROP PROCEDURE IF EXISTS genreference_lock$$

--
-- Удалить процедуру "genreference_islocked"
--
DROP PROCEDURE IF EXISTS genreference_islocked$$

--
-- Удалить процедуру "genreference_delete"
--
DROP PROCEDURE IF EXISTS genreference_delete$$

--
-- Удалить процедуру "genreference_copy"
--
DROP PROCEDURE IF EXISTS genreference_copy$$

--
-- Удалить процедуру "genreference_client_trigger"
--
DROP PROCEDURE IF EXISTS genreference_client_trigger$$

--
-- Удалить процедуру "genreference_brief"
--
DROP PROCEDURE IF EXISTS genreference_brief$$

--
-- Удалить процедуру "genpackage_unlock"
--
DROP PROCEDURE IF EXISTS genpackage_unlock$$

--
-- Удалить процедуру "genpackage_save"
--
DROP PROCEDURE IF EXISTS genpackage_save$$

--
-- Удалить процедуру "genpackage_parent"
--
DROP PROCEDURE IF EXISTS genpackage_parent$$

--
-- Удалить процедуру "genpackage_logger"
--
DROP PROCEDURE IF EXISTS genpackage_logger$$

--
-- Удалить процедуру "genpackage_lock"
--
DROP PROCEDURE IF EXISTS genpackage_lock$$

--
-- Удалить процедуру "genpackage_islocked"
--
DROP PROCEDURE IF EXISTS genpackage_islocked$$

--
-- Удалить процедуру "genpackage_delete"
--
DROP PROCEDURE IF EXISTS genpackage_delete$$

--
-- Удалить процедуру "genpackage_copy"
--
DROP PROCEDURE IF EXISTS genpackage_copy$$

--
-- Удалить процедуру "genpackage_client_trigger"
--
DROP PROCEDURE IF EXISTS genpackage_client_trigger$$

--
-- Удалить процедуру "genpackage_brief"
--
DROP PROCEDURE IF EXISTS genpackage_brief$$

--
-- Удалить процедуру "genmanualcode_unlock"
--
DROP PROCEDURE IF EXISTS genmanualcode_unlock$$

--
-- Удалить процедуру "genmanualcode_save"
--
DROP PROCEDURE IF EXISTS genmanualcode_save$$

--
-- Удалить процедуру "genmanualcode_parent"
--
DROP PROCEDURE IF EXISTS genmanualcode_parent$$

--
-- Удалить процедуру "genmanualcode_logger"
--
DROP PROCEDURE IF EXISTS genmanualcode_logger$$

--
-- Удалить процедуру "genmanualcode_lock"
--
DROP PROCEDURE IF EXISTS genmanualcode_lock$$

--
-- Удалить процедуру "genmanualcode_islocked"
--
DROP PROCEDURE IF EXISTS genmanualcode_islocked$$

--
-- Удалить процедуру "genmanualcode_delete"
--
DROP PROCEDURE IF EXISTS genmanualcode_delete$$

--
-- Удалить процедуру "genmanualcode_copy"
--
DROP PROCEDURE IF EXISTS genmanualcode_copy$$

--
-- Удалить процедуру "genmanualcode_client_trigger"
--
DROP PROCEDURE IF EXISTS genmanualcode_client_trigger$$

--
-- Удалить процедуру "genmanualcode_brief"
--
DROP PROCEDURE IF EXISTS genmanualcode_brief$$

--
-- Удалить процедуру "generator_target_unlock"
--
DROP PROCEDURE IF EXISTS generator_target_unlock$$

--
-- Удалить процедуру "generator_target_save"
--
DROP PROCEDURE IF EXISTS generator_target_save$$

--
-- Удалить процедуру "generator_target_parent"
--
DROP PROCEDURE IF EXISTS generator_target_parent$$

--
-- Удалить процедуру "generator_target_logger"
--
DROP PROCEDURE IF EXISTS generator_target_logger$$

--
-- Удалить процедуру "generator_target_lock"
--
DROP PROCEDURE IF EXISTS generator_target_lock$$

--
-- Удалить процедуру "generator_target_islocked"
--
DROP PROCEDURE IF EXISTS generator_target_islocked$$

--
-- Удалить процедуру "generator_target_delete"
--
DROP PROCEDURE IF EXISTS generator_target_delete$$

--
-- Удалить процедуру "generator_target_copy"
--
DROP PROCEDURE IF EXISTS generator_target_copy$$

--
-- Удалить процедуру "generator_target_client_trigger"
--
DROP PROCEDURE IF EXISTS generator_target_client_trigger$$

--
-- Удалить процедуру "generator_target_brief"
--
DROP PROCEDURE IF EXISTS generator_target_brief$$

--
-- Удалить процедуру "gencontrols_unlock"
--
DROP PROCEDURE IF EXISTS gencontrols_unlock$$

--
-- Удалить процедуру "gencontrols_save"
--
DROP PROCEDURE IF EXISTS gencontrols_save$$

--
-- Удалить процедуру "gencontrols_parent"
--
DROP PROCEDURE IF EXISTS gencontrols_parent$$

--
-- Удалить процедуру "gencontrols_logger"
--
DROP PROCEDURE IF EXISTS gencontrols_logger$$

--
-- Удалить процедуру "gencontrols_lock"
--
DROP PROCEDURE IF EXISTS gencontrols_lock$$

--
-- Удалить процедуру "gencontrols_islocked"
--
DROP PROCEDURE IF EXISTS gencontrols_islocked$$

--
-- Удалить процедуру "gencontrols_delete"
--
DROP PROCEDURE IF EXISTS gencontrols_delete$$

--
-- Удалить процедуру "gencontrols_copy"
--
DROP PROCEDURE IF EXISTS gencontrols_copy$$

--
-- Удалить процедуру "gencontrols_client_trigger"
--
DROP PROCEDURE IF EXISTS gencontrols_client_trigger$$

--
-- Удалить процедуру "gencontrols_brief"
--
DROP PROCEDURE IF EXISTS gencontrols_brief$$

--
-- Удалить процедуру "fldextenders_unlock"
--
DROP PROCEDURE IF EXISTS fldextenders_unlock$$

--
-- Удалить процедуру "fldextenders_save"
--
DROP PROCEDURE IF EXISTS fldextenders_save$$

--
-- Удалить процедуру "fldextenders_parent"
--
DROP PROCEDURE IF EXISTS fldextenders_parent$$

--
-- Удалить процедуру "fldextenders_logger"
--
DROP PROCEDURE IF EXISTS fldextenders_logger$$

--
-- Удалить процедуру "fldextenders_lock"
--
DROP PROCEDURE IF EXISTS fldextenders_lock$$

--
-- Удалить процедуру "fldextenders_islocked"
--
DROP PROCEDURE IF EXISTS fldextenders_islocked$$

--
-- Удалить процедуру "fldextenders_delete"
--
DROP PROCEDURE IF EXISTS fldextenders_delete$$

--
-- Удалить процедуру "fldextenders_copy"
--
DROP PROCEDURE IF EXISTS fldextenders_copy$$

--
-- Удалить процедуру "fldextenders_client_trigger"
--
DROP PROCEDURE IF EXISTS fldextenders_client_trigger$$

--
-- Удалить процедуру "fldextenders_brief"
--
DROP PROCEDURE IF EXISTS fldextenders_brief$$

--
-- Удалить процедуру "filters_unlock"
--
DROP PROCEDURE IF EXISTS filters_unlock$$

--
-- Удалить процедуру "filters_save"
--
DROP PROCEDURE IF EXISTS filters_save$$

--
-- Удалить процедуру "filters_parent"
--
DROP PROCEDURE IF EXISTS filters_parent$$

--
-- Удалить процедуру "filters_logger"
--
DROP PROCEDURE IF EXISTS filters_logger$$

--
-- Удалить процедуру "filters_lock"
--
DROP PROCEDURE IF EXISTS filters_lock$$

--
-- Удалить процедуру "filters_islocked"
--
DROP PROCEDURE IF EXISTS filters_islocked$$

--
-- Удалить процедуру "filters_delete"
--
DROP PROCEDURE IF EXISTS filters_delete$$

--
-- Удалить процедуру "filters_copy"
--
DROP PROCEDURE IF EXISTS filters_copy$$

--
-- Удалить процедуру "filters_client_trigger"
--
DROP PROCEDURE IF EXISTS filters_client_trigger$$

--
-- Удалить процедуру "filters_brief"
--
DROP PROCEDURE IF EXISTS filters_brief$$

--
-- Удалить процедуру "filterfieldgroup_unlock"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_unlock$$

--
-- Удалить процедуру "filterfieldgroup_save"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_save$$

--
-- Удалить процедуру "filterfieldgroup_parent"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_parent$$

--
-- Удалить процедуру "filterfieldgroup_logger"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_logger$$

--
-- Удалить процедуру "filterfieldgroup_lock"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_lock$$

--
-- Удалить процедуру "filterfieldgroup_islocked"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_islocked$$

--
-- Удалить процедуру "filterfieldgroup_delete"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_delete$$

--
-- Удалить процедуру "filterfieldgroup_copy"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_copy$$

--
-- Удалить процедуру "filterfieldgroup_client_trigger"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_client_trigger$$

--
-- Удалить процедуру "filterfieldgroup_brief"
--
DROP PROCEDURE IF EXISTS filterfieldgroup_brief$$

--
-- Удалить процедуру "fileterfield_unlock"
--
DROP PROCEDURE IF EXISTS fileterfield_unlock$$

--
-- Удалить процедуру "fileterfield_save"
--
DROP PROCEDURE IF EXISTS fileterfield_save$$

--
-- Удалить процедуру "fileterfield_parent"
--
DROP PROCEDURE IF EXISTS fileterfield_parent$$

--
-- Удалить процедуру "fileterfield_logger"
--
DROP PROCEDURE IF EXISTS fileterfield_logger$$

--
-- Удалить процедуру "fileterfield_lock"
--
DROP PROCEDURE IF EXISTS fileterfield_lock$$

--
-- Удалить процедуру "fileterfield_islocked"
--
DROP PROCEDURE IF EXISTS fileterfield_islocked$$

--
-- Удалить процедуру "fileterfield_delete"
--
DROP PROCEDURE IF EXISTS fileterfield_delete$$

--
-- Удалить процедуру "fileterfield_copy"
--
DROP PROCEDURE IF EXISTS fileterfield_copy$$

--
-- Удалить процедуру "fileterfield_client_trigger"
--
DROP PROCEDURE IF EXISTS fileterfield_client_trigger$$

--
-- Удалить процедуру "fileterfield_brief"
--
DROP PROCEDURE IF EXISTS fileterfield_brief$$

--
-- Удалить процедуру "field_unlock"
--
DROP PROCEDURE IF EXISTS field_unlock$$

--
-- Удалить процедуру "field_save"
--
DROP PROCEDURE IF EXISTS field_save$$

--
-- Удалить процедуру "field_parent"
--
DROP PROCEDURE IF EXISTS field_parent$$

--
-- Удалить процедуру "field_logger"
--
DROP PROCEDURE IF EXISTS field_logger$$

--
-- Удалить процедуру "field_lock"
--
DROP PROCEDURE IF EXISTS field_lock$$

--
-- Удалить процедуру "field_islocked"
--
DROP PROCEDURE IF EXISTS field_islocked$$

--
-- Удалить процедуру "field_delete"
--
DROP PROCEDURE IF EXISTS field_delete$$

--
-- Удалить процедуру "field_copy"
--
DROP PROCEDURE IF EXISTS field_copy$$

--
-- Удалить процедуру "field_client_trigger"
--
DROP PROCEDURE IF EXISTS field_client_trigger$$

--
-- Удалить процедуру "field_brief"
--
DROP PROCEDURE IF EXISTS field_brief$$

--
-- Удалить процедуру "fieldvalidator_unlock"
--
DROP PROCEDURE IF EXISTS fieldvalidator_unlock$$

--
-- Удалить процедуру "fieldvalidator_save"
--
DROP PROCEDURE IF EXISTS fieldvalidator_save$$

--
-- Удалить процедуру "fieldvalidator_parent"
--
DROP PROCEDURE IF EXISTS fieldvalidator_parent$$

--
-- Удалить процедуру "fieldvalidator_logger"
--
DROP PROCEDURE IF EXISTS fieldvalidator_logger$$

--
-- Удалить процедуру "fieldvalidator_lock"
--
DROP PROCEDURE IF EXISTS fieldvalidator_lock$$

--
-- Удалить процедуру "fieldvalidator_islocked"
--
DROP PROCEDURE IF EXISTS fieldvalidator_islocked$$

--
-- Удалить процедуру "fieldvalidator_delete"
--
DROP PROCEDURE IF EXISTS fieldvalidator_delete$$

--
-- Удалить процедуру "fieldvalidator_copy"
--
DROP PROCEDURE IF EXISTS fieldvalidator_copy$$

--
-- Удалить процедуру "fieldvalidator_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldvalidator_client_trigger$$

--
-- Удалить процедуру "fieldvalidator_brief"
--
DROP PROCEDURE IF EXISTS fieldvalidator_brief$$

--
-- Удалить процедуру "fieldtype_unlock"
--
DROP PROCEDURE IF EXISTS fieldtype_unlock$$

--
-- Удалить процедуру "fieldtype_save"
--
DROP PROCEDURE IF EXISTS fieldtype_save$$

--
-- Удалить процедуру "fieldtype_parent"
--
DROP PROCEDURE IF EXISTS fieldtype_parent$$

--
-- Удалить процедуру "fieldtype_logger"
--
DROP PROCEDURE IF EXISTS fieldtype_logger$$

--
-- Удалить процедуру "fieldtype_lock"
--
DROP PROCEDURE IF EXISTS fieldtype_lock$$

--
-- Удалить процедуру "fieldtype_islocked"
--
DROP PROCEDURE IF EXISTS fieldtype_islocked$$

--
-- Удалить процедуру "fieldtype_delete"
--
DROP PROCEDURE IF EXISTS fieldtype_delete$$

--
-- Удалить процедуру "fieldtype_copy"
--
DROP PROCEDURE IF EXISTS fieldtype_copy$$

--
-- Удалить процедуру "fieldtype_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldtype_client_trigger$$

--
-- Удалить процедуру "fieldtype_brief"
--
DROP PROCEDURE IF EXISTS fieldtype_brief$$

--
-- Удалить процедуру "fieldtypemap_unlock"
--
DROP PROCEDURE IF EXISTS fieldtypemap_unlock$$

--
-- Удалить процедуру "fieldtypemap_save"
--
DROP PROCEDURE IF EXISTS fieldtypemap_save$$

--
-- Удалить процедуру "fieldtypemap_parent"
--
DROP PROCEDURE IF EXISTS fieldtypemap_parent$$

--
-- Удалить процедуру "fieldtypemap_logger"
--
DROP PROCEDURE IF EXISTS fieldtypemap_logger$$

--
-- Удалить процедуру "fieldtypemap_lock"
--
DROP PROCEDURE IF EXISTS fieldtypemap_lock$$

--
-- Удалить процедуру "fieldtypemap_islocked"
--
DROP PROCEDURE IF EXISTS fieldtypemap_islocked$$

--
-- Удалить процедуру "fieldtypemap_delete"
--
DROP PROCEDURE IF EXISTS fieldtypemap_delete$$

--
-- Удалить процедуру "fieldtypemap_copy"
--
DROP PROCEDURE IF EXISTS fieldtypemap_copy$$

--
-- Удалить процедуру "fieldtypemap_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldtypemap_client_trigger$$

--
-- Удалить процедуру "fieldtypemap_brief"
--
DROP PROCEDURE IF EXISTS fieldtypemap_brief$$

--
-- Удалить процедуру "fieldsrcdef_unlock"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_unlock$$

--
-- Удалить процедуру "fieldsrcdef_save"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_save$$

--
-- Удалить процедуру "fieldsrcdef_parent"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_parent$$

--
-- Удалить процедуру "fieldsrcdef_logger"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_logger$$

--
-- Удалить процедуру "fieldsrcdef_lock"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_lock$$

--
-- Удалить процедуру "fieldsrcdef_islocked"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_islocked$$

--
-- Удалить процедуру "fieldsrcdef_delete"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_delete$$

--
-- Удалить процедуру "fieldsrcdef_copy"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_copy$$

--
-- Удалить процедуру "fieldsrcdef_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_client_trigger$$

--
-- Удалить процедуру "fieldsrcdef_brief"
--
DROP PROCEDURE IF EXISTS fieldsrcdef_brief$$

--
-- Удалить процедуру "fieldrestriction_unlock"
--
DROP PROCEDURE IF EXISTS fieldrestriction_unlock$$

--
-- Удалить процедуру "fieldrestriction_save"
--
DROP PROCEDURE IF EXISTS fieldrestriction_save$$

--
-- Удалить процедуру "fieldrestriction_parent"
--
DROP PROCEDURE IF EXISTS fieldrestriction_parent$$

--
-- Удалить процедуру "fieldrestriction_logger"
--
DROP PROCEDURE IF EXISTS fieldrestriction_logger$$

--
-- Удалить процедуру "fieldrestriction_lock"
--
DROP PROCEDURE IF EXISTS fieldrestriction_lock$$

--
-- Удалить процедуру "fieldrestriction_islocked"
--
DROP PROCEDURE IF EXISTS fieldrestriction_islocked$$

--
-- Удалить процедуру "fieldrestriction_delete"
--
DROP PROCEDURE IF EXISTS fieldrestriction_delete$$

--
-- Удалить процедуру "fieldrestriction_copy"
--
DROP PROCEDURE IF EXISTS fieldrestriction_copy$$

--
-- Удалить процедуру "fieldrestriction_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldrestriction_client_trigger$$

--
-- Удалить процедуру "fieldrestriction_brief"
--
DROP PROCEDURE IF EXISTS fieldrestriction_brief$$

--
-- Удалить процедуру "fieldparammap_unlock"
--
DROP PROCEDURE IF EXISTS fieldparammap_unlock$$

--
-- Удалить процедуру "fieldparammap_save"
--
DROP PROCEDURE IF EXISTS fieldparammap_save$$

--
-- Удалить процедуру "fieldparammap_parent"
--
DROP PROCEDURE IF EXISTS fieldparammap_parent$$

--
-- Удалить процедуру "fieldparammap_logger"
--
DROP PROCEDURE IF EXISTS fieldparammap_logger$$

--
-- Удалить процедуру "fieldparammap_lock"
--
DROP PROCEDURE IF EXISTS fieldparammap_lock$$

--
-- Удалить процедуру "fieldparammap_islocked"
--
DROP PROCEDURE IF EXISTS fieldparammap_islocked$$

--
-- Удалить процедуру "fieldparammap_delete"
--
DROP PROCEDURE IF EXISTS fieldparammap_delete$$

--
-- Удалить процедуру "fieldparammap_copy"
--
DROP PROCEDURE IF EXISTS fieldparammap_copy$$

--
-- Удалить процедуру "fieldparammap_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldparammap_client_trigger$$

--
-- Удалить процедуру "fieldparammap_brief"
--
DROP PROCEDURE IF EXISTS fieldparammap_brief$$

--
-- Удалить процедуру "fieldmenu_unlock"
--
DROP PROCEDURE IF EXISTS fieldmenu_unlock$$

--
-- Удалить процедуру "fieldmenu_save"
--
DROP PROCEDURE IF EXISTS fieldmenu_save$$

--
-- Удалить процедуру "fieldmenu_parent"
--
DROP PROCEDURE IF EXISTS fieldmenu_parent$$

--
-- Удалить процедуру "fieldmenu_logger"
--
DROP PROCEDURE IF EXISTS fieldmenu_logger$$

--
-- Удалить процедуру "fieldmenu_lock"
--
DROP PROCEDURE IF EXISTS fieldmenu_lock$$

--
-- Удалить процедуру "fieldmenu_islocked"
--
DROP PROCEDURE IF EXISTS fieldmenu_islocked$$

--
-- Удалить процедуру "fieldmenu_delete"
--
DROP PROCEDURE IF EXISTS fieldmenu_delete$$

--
-- Удалить процедуру "fieldmenu_copy"
--
DROP PROCEDURE IF EXISTS fieldmenu_copy$$

--
-- Удалить процедуру "fieldmenu_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldmenu_client_trigger$$

--
-- Удалить процедуру "fieldmenu_brief"
--
DROP PROCEDURE IF EXISTS fieldmenu_brief$$

--
-- Удалить процедуру "fieldexpression_unlock"
--
DROP PROCEDURE IF EXISTS fieldexpression_unlock$$

--
-- Удалить процедуру "fieldexpression_save"
--
DROP PROCEDURE IF EXISTS fieldexpression_save$$

--
-- Удалить процедуру "fieldexpression_parent"
--
DROP PROCEDURE IF EXISTS fieldexpression_parent$$

--
-- Удалить процедуру "fieldexpression_logger"
--
DROP PROCEDURE IF EXISTS fieldexpression_logger$$

--
-- Удалить процедуру "fieldexpression_lock"
--
DROP PROCEDURE IF EXISTS fieldexpression_lock$$

--
-- Удалить процедуру "fieldexpression_islocked"
--
DROP PROCEDURE IF EXISTS fieldexpression_islocked$$

--
-- Удалить процедуру "fieldexpression_delete"
--
DROP PROCEDURE IF EXISTS fieldexpression_delete$$

--
-- Удалить процедуру "fieldexpression_copy"
--
DROP PROCEDURE IF EXISTS fieldexpression_copy$$

--
-- Удалить процедуру "fieldexpression_client_trigger"
--
DROP PROCEDURE IF EXISTS fieldexpression_client_trigger$$

--
-- Удалить процедуру "fieldexpression_brief"
--
DROP PROCEDURE IF EXISTS fieldexpression_brief$$

--
-- Удалить процедуру "extenderinterface_unlock"
--
DROP PROCEDURE IF EXISTS extenderinterface_unlock$$

--
-- Удалить процедуру "extenderinterface_save"
--
DROP PROCEDURE IF EXISTS extenderinterface_save$$

--
-- Удалить процедуру "extenderinterface_parent"
--
DROP PROCEDURE IF EXISTS extenderinterface_parent$$

--
-- Удалить процедуру "extenderinterface_logger"
--
DROP PROCEDURE IF EXISTS extenderinterface_logger$$

--
-- Удалить процедуру "extenderinterface_lock"
--
DROP PROCEDURE IF EXISTS extenderinterface_lock$$

--
-- Удалить процедуру "extenderinterface_islocked"
--
DROP PROCEDURE IF EXISTS extenderinterface_islocked$$

--
-- Удалить процедуру "extenderinterface_delete"
--
DROP PROCEDURE IF EXISTS extenderinterface_delete$$

--
-- Удалить процедуру "extenderinterface_copy"
--
DROP PROCEDURE IF EXISTS extenderinterface_copy$$

--
-- Удалить процедуру "extenderinterface_client_trigger"
--
DROP PROCEDURE IF EXISTS extenderinterface_client_trigger$$

--
-- Удалить процедуру "extenderinterface_brief"
--
DROP PROCEDURE IF EXISTS extenderinterface_brief$$

--
-- Удалить процедуру "epfilterlink_unlock"
--
DROP PROCEDURE IF EXISTS epfilterlink_unlock$$

--
-- Удалить процедуру "epfilterlink_save"
--
DROP PROCEDURE IF EXISTS epfilterlink_save$$

--
-- Удалить процедуру "epfilterlink_parent"
--
DROP PROCEDURE IF EXISTS epfilterlink_parent$$

--
-- Удалить процедуру "epfilterlink_logger"
--
DROP PROCEDURE IF EXISTS epfilterlink_logger$$

--
-- Удалить процедуру "epfilterlink_lock"
--
DROP PROCEDURE IF EXISTS epfilterlink_lock$$

--
-- Удалить процедуру "epfilterlink_islocked"
--
DROP PROCEDURE IF EXISTS epfilterlink_islocked$$

--
-- Удалить процедуру "epfilterlink_delete"
--
DROP PROCEDURE IF EXISTS epfilterlink_delete$$

--
-- Удалить процедуру "epfilterlink_copy"
--
DROP PROCEDURE IF EXISTS epfilterlink_copy$$

--
-- Удалить процедуру "epfilterlink_client_trigger"
--
DROP PROCEDURE IF EXISTS epfilterlink_client_trigger$$

--
-- Удалить процедуру "epfilterlink_brief"
--
DROP PROCEDURE IF EXISTS epfilterlink_brief$$

--
-- Удалить процедуру "enumitem_unlock"
--
DROP PROCEDURE IF EXISTS enumitem_unlock$$

--
-- Удалить процедуру "enumitem_save"
--
DROP PROCEDURE IF EXISTS enumitem_save$$

--
-- Удалить процедуру "enumitem_parent"
--
DROP PROCEDURE IF EXISTS enumitem_parent$$

--
-- Удалить процедуру "enumitem_logger"
--
DROP PROCEDURE IF EXISTS enumitem_logger$$

--
-- Удалить процедуру "enumitem_lock"
--
DROP PROCEDURE IF EXISTS enumitem_lock$$

--
-- Удалить процедуру "enumitem_islocked"
--
DROP PROCEDURE IF EXISTS enumitem_islocked$$

--
-- Удалить процедуру "enumitem_delete"
--
DROP PROCEDURE IF EXISTS enumitem_delete$$

--
-- Удалить процедуру "enumitem_copy"
--
DROP PROCEDURE IF EXISTS enumitem_copy$$

--
-- Удалить процедуру "enumitem_client_trigger"
--
DROP PROCEDURE IF EXISTS enumitem_client_trigger$$

--
-- Удалить процедуру "enumitem_brief"
--
DROP PROCEDURE IF EXISTS enumitem_brief$$

--
-- Удалить процедуру "entrypoints_unlock"
--
DROP PROCEDURE IF EXISTS entrypoints_unlock$$

--
-- Удалить процедуру "entrypoints_save"
--
DROP PROCEDURE IF EXISTS entrypoints_save$$

--
-- Удалить процедуру "entrypoints_parent"
--
DROP PROCEDURE IF EXISTS entrypoints_parent$$

--
-- Удалить процедуру "entrypoints_logger"
--
DROP PROCEDURE IF EXISTS entrypoints_logger$$

--
-- Удалить процедуру "entrypoints_lock"
--
DROP PROCEDURE IF EXISTS entrypoints_lock$$

--
-- Удалить процедуру "entrypoints_islocked"
--
DROP PROCEDURE IF EXISTS entrypoints_islocked$$

--
-- Удалить процедуру "entrypoints_delete"
--
DROP PROCEDURE IF EXISTS entrypoints_delete$$

--
-- Удалить процедуру "entrypoints_copy"
--
DROP PROCEDURE IF EXISTS entrypoints_copy$$

--
-- Удалить процедуру "entrypoints_client_trigger"
--
DROP PROCEDURE IF EXISTS entrypoints_client_trigger$$

--
-- Удалить процедуру "entrypoints_brief"
--
DROP PROCEDURE IF EXISTS entrypoints_brief$$

--
-- Удалить процедуру "dinamicfilterscript_unlock"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_unlock$$

--
-- Удалить процедуру "dinamicfilterscript_save"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_save$$

--
-- Удалить процедуру "dinamicfilterscript_parent"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_parent$$

--
-- Удалить процедуру "dinamicfilterscript_logger"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_logger$$

--
-- Удалить процедуру "dinamicfilterscript_lock"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_lock$$

--
-- Удалить процедуру "dinamicfilterscript_islocked"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_islocked$$

--
-- Удалить процедуру "dinamicfilterscript_delete"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_delete$$

--
-- Удалить процедуру "dinamicfilterscript_copy"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_copy$$

--
-- Удалить процедуру "dinamicfilterscript_client_trigger"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_client_trigger$$

--
-- Удалить процедуру "dinamicfilterscript_brief"
--
DROP PROCEDURE IF EXISTS dinamicfilterscript_brief$$

--
-- Удалить процедуру "constraintfield_unlock"
--
DROP PROCEDURE IF EXISTS constraintfield_unlock$$

--
-- Удалить процедуру "constraintfield_save"
--
DROP PROCEDURE IF EXISTS constraintfield_save$$

--
-- Удалить процедуру "constraintfield_parent"
--
DROP PROCEDURE IF EXISTS constraintfield_parent$$

--
-- Удалить процедуру "constraintfield_logger"
--
DROP PROCEDURE IF EXISTS constraintfield_logger$$

--
-- Удалить процедуру "constraintfield_lock"
--
DROP PROCEDURE IF EXISTS constraintfield_lock$$

--
-- Удалить процедуру "constraintfield_islocked"
--
DROP PROCEDURE IF EXISTS constraintfield_islocked$$

--
-- Удалить процедуру "constraintfield_delete"
--
DROP PROCEDURE IF EXISTS constraintfield_delete$$

--
-- Удалить процедуру "constraintfield_copy"
--
DROP PROCEDURE IF EXISTS constraintfield_copy$$

--
-- Удалить процедуру "constraintfield_client_trigger"
--
DROP PROCEDURE IF EXISTS constraintfield_client_trigger$$

--
-- Удалить процедуру "constraintfield_brief"
--
DROP PROCEDURE IF EXISTS constraintfield_brief$$

--
-- Удалить процедуру "bpu_gettotemp"
--
DROP PROCEDURE IF EXISTS bpu_gettotemp$$

--
-- Удалить процедуру "bpu_droptempdata"
--
DROP PROCEDURE IF EXISTS bpu_droptempdata$$

--
-- Удалить процедуру "bpu_copy"
--
DROP PROCEDURE IF EXISTS bpu_copy$$

--
-- Удалить процедуру "bpu_commitfromtemp"
--
DROP PROCEDURE IF EXISTS bpu_commitfromtemp$$

--
-- Удалить процедуру "bprcfg_copy"
--
DROP PROCEDURE IF EXISTS bprcfg_copy$$

--
-- Удалить процедуру "bpdr_copy"
--
DROP PROCEDURE IF EXISTS bpdr_copy$$

--
-- Удалить процедуру "bpdi_copy"
--
DROP PROCEDURE IF EXISTS bpdi_copy$$

--
-- Удалить процедуру "bpc_info_unlock"
--
DROP PROCEDURE IF EXISTS bpc_info_unlock$$

--
-- Удалить процедуру "bpc_info_save"
--
DROP PROCEDURE IF EXISTS bpc_info_save$$

--
-- Удалить процедуру "bpc_info_parent"
--
DROP PROCEDURE IF EXISTS bpc_info_parent$$

--
-- Удалить процедуру "bpc_info_logger"
--
DROP PROCEDURE IF EXISTS bpc_info_logger$$

--
-- Удалить процедуру "bpc_info_lock"
--
DROP PROCEDURE IF EXISTS bpc_info_lock$$

--
-- Удалить процедуру "bpc_info_islocked"
--
DROP PROCEDURE IF EXISTS bpc_info_islocked$$

--
-- Удалить процедуру "bpc_info_delete"
--
DROP PROCEDURE IF EXISTS bpc_info_delete$$

--
-- Удалить процедуру "bpc_info_copy"
--
DROP PROCEDURE IF EXISTS bpc_info_copy$$

--
-- Удалить процедуру "bpc_info_client_trigger"
--
DROP PROCEDURE IF EXISTS bpc_info_client_trigger$$

--
-- Удалить процедуру "bpc_info_brief"
--
DROP PROCEDURE IF EXISTS bpc_info_brief$$

--
-- Удалить процедуру "bpc_copy"
--
DROP PROCEDURE IF EXISTS bpc_copy$$

--
-- Удалить процедуру "arsms_initownership"
--
DROP PROCEDURE IF EXISTS arsms_initownership$$

--
-- Удалить процедуру "arsms_data_unlock"
--
DROP PROCEDURE IF EXISTS arsms_data_unlock$$

--
-- Удалить процедуру "arsms_data_save"
--
DROP PROCEDURE IF EXISTS arsms_data_save$$

--
-- Удалить процедуру "arsms_data_parent"
--
DROP PROCEDURE IF EXISTS arsms_data_parent$$

--
-- Удалить процедуру "arsms_data_logger"
--
DROP PROCEDURE IF EXISTS arsms_data_logger$$

--
-- Удалить процедуру "arsms_data_lock"
--
DROP PROCEDURE IF EXISTS arsms_data_lock$$

--
-- Удалить процедуру "arsms_data_islocked"
--
DROP PROCEDURE IF EXISTS arsms_data_islocked$$

--
-- Удалить процедуру "arsms_data_delete"
--
DROP PROCEDURE IF EXISTS arsms_data_delete$$

--
-- Удалить процедуру "arsms_data_copy"
--
DROP PROCEDURE IF EXISTS arsms_data_copy$$

--
-- Удалить процедуру "arsms_data_client_trigger"
--
DROP PROCEDURE IF EXISTS arsms_data_client_trigger$$

--
-- Удалить процедуру "arsms_data_brief"
--
DROP PROCEDURE IF EXISTS arsms_data_brief$$

--
-- Удалить процедуру "arsms_copy"
--
DROP PROCEDURE IF EXISTS arsms_copy$$

--
-- Удалить процедуру "armtypes_unlock"
--
DROP PROCEDURE IF EXISTS armtypes_unlock$$

--
-- Удалить процедуру "armtypes_save"
--
DROP PROCEDURE IF EXISTS armtypes_save$$

--
-- Удалить процедуру "armtypes_parent"
--
DROP PROCEDURE IF EXISTS armtypes_parent$$

--
-- Удалить процедуру "armtypes_logger"
--
DROP PROCEDURE IF EXISTS armtypes_logger$$

--
-- Удалить процедуру "armtypes_lock"
--
DROP PROCEDURE IF EXISTS armtypes_lock$$

--
-- Удалить процедуру "armtypes_islocked"
--
DROP PROCEDURE IF EXISTS armtypes_islocked$$

--
-- Удалить процедуру "armtypes_delete"
--
DROP PROCEDURE IF EXISTS armtypes_delete$$

--
-- Удалить процедуру "armtypes_copy"
--
DROP PROCEDURE IF EXISTS armtypes_copy$$

--
-- Удалить процедуру "armtypes_client_trigger"
--
DROP PROCEDURE IF EXISTS armtypes_client_trigger$$

--
-- Удалить процедуру "armtypes_brief"
--
DROP PROCEDURE IF EXISTS armtypes_brief$$

--
-- Удалить процедуру "armjrnlrun_unlock"
--
DROP PROCEDURE IF EXISTS armjrnlrun_unlock$$

--
-- Удалить процедуру "armjrnlrun_save"
--
DROP PROCEDURE IF EXISTS armjrnlrun_save$$

--
-- Удалить процедуру "armjrnlrun_parent"
--
DROP PROCEDURE IF EXISTS armjrnlrun_parent$$

--
-- Удалить процедуру "armjrnlrun_logger"
--
DROP PROCEDURE IF EXISTS armjrnlrun_logger$$

--
-- Удалить процедуру "armjrnlrun_lock"
--
DROP PROCEDURE IF EXISTS armjrnlrun_lock$$

--
-- Удалить процедуру "armjrnlrun_islocked"
--
DROP PROCEDURE IF EXISTS armjrnlrun_islocked$$

--
-- Удалить процедуру "armjrnlrun_delete"
--
DROP PROCEDURE IF EXISTS armjrnlrun_delete$$

--
-- Удалить процедуру "armjrnlrun_copy"
--
DROP PROCEDURE IF EXISTS armjrnlrun_copy$$

--
-- Удалить процедуру "armjrnlrun_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnlrun_client_trigger$$

--
-- Удалить процедуру "armjrnlrun_brief"
--
DROP PROCEDURE IF EXISTS armjrnlrun_brief$$

--
-- Удалить процедуру "armjrnlrep_unlock"
--
DROP PROCEDURE IF EXISTS armjrnlrep_unlock$$

--
-- Удалить процедуру "armjrnlrep_save"
--
DROP PROCEDURE IF EXISTS armjrnlrep_save$$

--
-- Удалить процедуру "armjrnlrep_parent"
--
DROP PROCEDURE IF EXISTS armjrnlrep_parent$$

--
-- Удалить процедуру "armjrnlrep_logger"
--
DROP PROCEDURE IF EXISTS armjrnlrep_logger$$

--
-- Удалить процедуру "armjrnlrep_lock"
--
DROP PROCEDURE IF EXISTS armjrnlrep_lock$$

--
-- Удалить процедуру "armjrnlrep_islocked"
--
DROP PROCEDURE IF EXISTS armjrnlrep_islocked$$

--
-- Удалить процедуру "armjrnlrep_delete"
--
DROP PROCEDURE IF EXISTS armjrnlrep_delete$$

--
-- Удалить процедуру "armjrnlrep_copy"
--
DROP PROCEDURE IF EXISTS armjrnlrep_copy$$

--
-- Удалить процедуру "armjrnlrep_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnlrep_client_trigger$$

--
-- Удалить процедуру "armjrnlrep_brief"
--
DROP PROCEDURE IF EXISTS armjrnlrep_brief$$

--
-- Удалить процедуру "armjrnladd_unlock"
--
DROP PROCEDURE IF EXISTS armjrnladd_unlock$$

--
-- Удалить процедуру "armjrnladd_save"
--
DROP PROCEDURE IF EXISTS armjrnladd_save$$

--
-- Удалить процедуру "armjrnladd_parent"
--
DROP PROCEDURE IF EXISTS armjrnladd_parent$$

--
-- Удалить процедуру "armjrnladd_logger"
--
DROP PROCEDURE IF EXISTS armjrnladd_logger$$

--
-- Удалить процедуру "armjrnladd_lock"
--
DROP PROCEDURE IF EXISTS armjrnladd_lock$$

--
-- Удалить процедуру "armjrnladd_islocked"
--
DROP PROCEDURE IF EXISTS armjrnladd_islocked$$

--
-- Удалить процедуру "armjrnladd_delete"
--
DROP PROCEDURE IF EXISTS armjrnladd_delete$$

--
-- Удалить процедуру "armjrnladd_copy"
--
DROP PROCEDURE IF EXISTS armjrnladd_copy$$

--
-- Удалить процедуру "armjrnladd_client_trigger"
--
DROP PROCEDURE IF EXISTS armjrnladd_client_trigger$$

--
-- Удалить процедуру "armjrnladd_brief"
--
DROP PROCEDURE IF EXISTS armjrnladd_brief$$

--
-- Удалить процедуру "armjournal_unlock"
--
DROP PROCEDURE IF EXISTS armjournal_unlock$$

--
-- Удалить процедуру "armjournal_save"
--
DROP PROCEDURE IF EXISTS armjournal_save$$

--
-- Удалить процедуру "armjournal_parent"
--
DROP PROCEDURE IF EXISTS armjournal_parent$$

--
-- Удалить процедуру "armjournal_logger"
--
DROP PROCEDURE IF EXISTS armjournal_logger$$

--
-- Удалить процедуру "armjournal_lock"
--
DROP PROCEDURE IF EXISTS armjournal_lock$$

--
-- Удалить процедуру "armjournal_islocked"
--
DROP PROCEDURE IF EXISTS armjournal_islocked$$

--
-- Удалить процедуру "armjournal_delete"
--
DROP PROCEDURE IF EXISTS armjournal_delete$$

--
-- Удалить процедуру "armjournal_copy"
--
DROP PROCEDURE IF EXISTS armjournal_copy$$

--
-- Удалить процедуру "armjournal_client_trigger"
--
DROP PROCEDURE IF EXISTS armjournal_client_trigger$$

--
-- Удалить процедуру "armjournal_brief"
--
DROP PROCEDURE IF EXISTS armjournal_brief$$

--
-- Удалить процедуру "armd_type_unlock"
--
DROP PROCEDURE IF EXISTS armd_type_unlock$$

--
-- Удалить процедуру "armd_type_save"
--
DROP PROCEDURE IF EXISTS armd_type_save$$

--
-- Удалить процедуру "armd_type_parent"
--
DROP PROCEDURE IF EXISTS armd_type_parent$$

--
-- Удалить процедуру "armd_type_logger"
--
DROP PROCEDURE IF EXISTS armd_type_logger$$

--
-- Удалить процедуру "armd_type_lock"
--
DROP PROCEDURE IF EXISTS armd_type_lock$$

--
-- Удалить процедуру "armd_type_islocked"
--
DROP PROCEDURE IF EXISTS armd_type_islocked$$

--
-- Удалить процедуру "armd_type_delete"
--
DROP PROCEDURE IF EXISTS armd_type_delete$$

--
-- Удалить процедуру "armd_type_copy"
--
DROP PROCEDURE IF EXISTS armd_type_copy$$

--
-- Удалить процедуру "armd_type_client_trigger"
--
DROP PROCEDURE IF EXISTS armd_type_client_trigger$$

--
-- Удалить процедуру "armd_type_brief"
--
DROP PROCEDURE IF EXISTS armd_type_brief$$

--
-- Удалить процедуру "armd_info_unlock"
--
DROP PROCEDURE IF EXISTS armd_info_unlock$$

--
-- Удалить процедуру "armd_info_save"
--
DROP PROCEDURE IF EXISTS armd_info_save$$

--
-- Удалить процедуру "armd_info_parent"
--
DROP PROCEDURE IF EXISTS armd_info_parent$$

--
-- Удалить процедуру "armd_info_logger"
--
DROP PROCEDURE IF EXISTS armd_info_logger$$

--
-- Удалить процедуру "armd_info_lock"
--
DROP PROCEDURE IF EXISTS armd_info_lock$$

--
-- Удалить процедуру "armd_info_islocked"
--
DROP PROCEDURE IF EXISTS armd_info_islocked$$

--
-- Удалить процедуру "armd_info_delete"
--
DROP PROCEDURE IF EXISTS armd_info_delete$$

--
-- Удалить процедуру "armd_info_copy"
--
DROP PROCEDURE IF EXISTS armd_info_copy$$

--
-- Удалить процедуру "armd_info_client_trigger"
--
DROP PROCEDURE IF EXISTS armd_info_client_trigger$$

--
-- Удалить процедуру "armd_info_brief"
--
DROP PROCEDURE IF EXISTS armd_info_brief$$

--
-- Удалить процедуру "armd_copy"
--
DROP PROCEDURE IF EXISTS armd_copy$$

--
-- Удалить процедуру "armd_chaneltype_unlock"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_unlock$$

--
-- Удалить процедуру "armd_chaneltype_save"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_save$$

--
-- Удалить процедуру "armd_chaneltype_parent"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_parent$$

--
-- Удалить процедуру "armd_chaneltype_logger"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_logger$$

--
-- Удалить процедуру "armd_chaneltype_lock"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_lock$$

--
-- Удалить процедуру "armd_chaneltype_islocked"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_islocked$$

--
-- Удалить процедуру "armd_chaneltype_delete"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_delete$$

--
-- Удалить процедуру "armd_chaneltype_copy"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_copy$$

--
-- Удалить процедуру "armd_chaneltype_client_trigger"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_client_trigger$$

--
-- Удалить процедуру "armd_chaneltype_brief"
--
DROP PROCEDURE IF EXISTS armd_chaneltype_brief$$

--
-- Удалить процедуру "arlog_data_unlock"
--
DROP PROCEDURE IF EXISTS arlog_data_unlock$$

--
-- Удалить процедуру "arlog_data_save"
--
DROP PROCEDURE IF EXISTS arlog_data_save$$

--
-- Удалить процедуру "arlog_data_parent"
--
DROP PROCEDURE IF EXISTS arlog_data_parent$$

--
-- Удалить процедуру "arlog_data_logger"
--
DROP PROCEDURE IF EXISTS arlog_data_logger$$

--
-- Удалить процедуру "arlog_data_lock"
--
DROP PROCEDURE IF EXISTS arlog_data_lock$$

--
-- Удалить процедуру "arlog_data_islocked"
--
DROP PROCEDURE IF EXISTS arlog_data_islocked$$

--
-- Удалить процедуру "arlog_data_delete"
--
DROP PROCEDURE IF EXISTS arlog_data_delete$$

--
-- Удалить процедуру "arlog_data_copy"
--
DROP PROCEDURE IF EXISTS arlog_data_copy$$

--
-- Удалить процедуру "arlog_data_client_trigger"
--
DROP PROCEDURE IF EXISTS arlog_data_client_trigger$$

--
-- Удалить процедуру "arlog_data_brief"
--
DROP PROCEDURE IF EXISTS arlog_data_brief$$

--
-- Удалить процедуру "arlog_copy"
--
DROP PROCEDURE IF EXISTS arlog_copy$$

--
-- Удалить процедуру "arc_md_unlock"
--
DROP PROCEDURE IF EXISTS arc_md_unlock$$

--
-- Удалить процедуру "arc_md_save"
--
DROP PROCEDURE IF EXISTS arc_md_save$$

--
-- Удалить процедуру "arc_md_parent"
--
DROP PROCEDURE IF EXISTS arc_md_parent$$

--
-- Удалить процедуру "arc_md_logger"
--
DROP PROCEDURE IF EXISTS arc_md_logger$$

--
-- Удалить процедуру "arc_md_lock"
--
DROP PROCEDURE IF EXISTS arc_md_lock$$

--
-- Удалить процедуру "arc_md_islocked"
--
DROP PROCEDURE IF EXISTS arc_md_islocked$$

--
-- Удалить процедуру "arc_md_delete"
--
DROP PROCEDURE IF EXISTS arc_md_delete$$

--
-- Удалить процедуру "arc_md_copy"
--
DROP PROCEDURE IF EXISTS arc_md_copy$$

--
-- Удалить процедуру "arc_md_client_trigger"
--
DROP PROCEDURE IF EXISTS arc_md_client_trigger$$

--
-- Удалить процедуру "arc_md_brief"
--
DROP PROCEDURE IF EXISTS arc_md_brief$$

--
-- Удалить процедуру "arc_initownership"
--
DROP PROCEDURE IF EXISTS arc_initownership$$

--
-- Удалить процедуру "arc_info_unlock"
--
DROP PROCEDURE IF EXISTS arc_info_unlock$$

--
-- Удалить процедуру "arc_info_save"
--
DROP PROCEDURE IF EXISTS arc_info_save$$

--
-- Удалить процедуру "arc_info_parent"
--
DROP PROCEDURE IF EXISTS arc_info_parent$$

--
-- Удалить процедуру "arc_info_logger"
--
DROP PROCEDURE IF EXISTS arc_info_logger$$

--
-- Удалить процедуру "arc_info_lock"
--
DROP PROCEDURE IF EXISTS arc_info_lock$$

--
-- Удалить процедуру "arc_info_islocked"
--
DROP PROCEDURE IF EXISTS arc_info_islocked$$

--
-- Удалить процедуру "arc_info_delete"
--
DROP PROCEDURE IF EXISTS arc_info_delete$$

--
-- Удалить процедуру "arc_info_copy"
--
DROP PROCEDURE IF EXISTS arc_info_copy$$

--
-- Удалить процедуру "arc_info_client_trigger"
--
DROP PROCEDURE IF EXISTS arc_info_client_trigger$$

--
-- Удалить процедуру "arc_info_brief"
--
DROP PROCEDURE IF EXISTS arc_info_brief$$

--
-- Удалить процедуру "arc_copy"
--
DROP PROCEDURE IF EXISTS arc_copy$$

--
-- Удалить процедуру "arc_chanel_unlock"
--
DROP PROCEDURE IF EXISTS arc_chanel_unlock$$

--
-- Удалить процедуру "arc_chanel_save"
--
DROP PROCEDURE IF EXISTS arc_chanel_save$$

--
-- Удалить процедуру "arc_chanel_parent"
--
DROP PROCEDURE IF EXISTS arc_chanel_parent$$

--
-- Удалить процедуру "arc_chanel_logger"
--
DROP PROCEDURE IF EXISTS arc_chanel_logger$$

--
-- Удалить процедуру "arc_chanel_lock"
--
DROP PROCEDURE IF EXISTS arc_chanel_lock$$

--
-- Удалить процедуру "arc_chanel_islocked"
--
DROP PROCEDURE IF EXISTS arc_chanel_islocked$$

--
-- Удалить процедуру "arc_chanel_delete"
--
DROP PROCEDURE IF EXISTS arc_chanel_delete$$

--
-- Удалить процедуру "arc_chanel_copy"
--
DROP PROCEDURE IF EXISTS arc_chanel_copy$$

--
-- Удалить процедуру "arc_chanel_client_trigger"
--
DROP PROCEDURE IF EXISTS arc_chanel_client_trigger$$

--
-- Удалить процедуру "arc_chanel_brief"
--
DROP PROCEDURE IF EXISTS arc_chanel_brief$$

DELIMITER ;

--
-- Удалить таблицу "fieldparammap"
--
DROP TABLE IF EXISTS fieldparammap;

--
-- Удалить таблицу "viewcolumn"
--
DROP TABLE IF EXISTS viewcolumn;

--
-- Удалить таблицу "partview_lnk"
--
DROP TABLE IF EXISTS partview_lnk;

--
-- Удалить таблицу "partparammap"
--
DROP TABLE IF EXISTS partparammap;

--
-- Удалить таблицу "fldextenders"
--
DROP TABLE IF EXISTS fldextenders;

--
-- Удалить таблицу "fieldvalidator"
--
DROP TABLE IF EXISTS fieldvalidator;

--
-- Удалить таблицу "fieldsrcdef"
--
DROP TABLE IF EXISTS fieldsrcdef;

--
-- Удалить таблицу "fieldmenu"
--
DROP TABLE IF EXISTS fieldmenu;

--
-- Удалить таблицу "fieldexpression"
--
DROP TABLE IF EXISTS fieldexpression;

--
-- Удалить таблицу "dinamicfilterscript"
--
DROP TABLE IF EXISTS dinamicfilterscript;

--
-- Удалить таблицу "constraintfield"
--
DROP TABLE IF EXISTS constraintfield;

--
-- Удалить таблицу "validator"
--
DROP TABLE IF EXISTS validator;

--
-- Удалить таблицу "uniqueconstraint"
--
DROP TABLE IF EXISTS uniqueconstraint;

--
-- Удалить таблицу "structrestriction"
--
DROP TABLE IF EXISTS structrestriction;

--
-- Удалить таблицу "partview"
--
DROP TABLE IF EXISTS partview;

--
-- Удалить таблицу "partmenu"
--
DROP TABLE IF EXISTS partmenu;

--
-- Удалить таблицу "parameters"
--
DROP TABLE IF EXISTS parameters;

--
-- Удалить таблицу "nextstate"
--
DROP TABLE IF EXISTS nextstate;

--
-- Удалить таблицу "methodrestriction"
--
DROP TABLE IF EXISTS methodrestriction;

--
-- Удалить таблицу "genreference"
--
DROP TABLE IF EXISTS genreference;

--
-- Удалить таблицу "genmanualcode"
--
DROP TABLE IF EXISTS genmanualcode;

--
-- Удалить таблицу "gencontrols"
--
DROP TABLE IF EXISTS gencontrols;

--
-- Удалить таблицу "fieldrestriction"
--
DROP TABLE IF EXISTS fieldrestriction;

--
-- Удалить таблицу "field"
--
DROP TABLE IF EXISTS field;

--
-- Удалить таблицу "extenderinterface"
--
DROP TABLE IF EXISTS extenderinterface;

--
-- Удалить таблицу "typemenu"
--
DROP TABLE IF EXISTS typemenu;

--
-- Удалить таблицу "script"
--
DROP TABLE IF EXISTS script;

--
-- Удалить таблицу "rptfields"
--
DROP TABLE IF EXISTS rptfields;

--
-- Удалить таблицу "part"
--
DROP TABLE IF EXISTS part;

--
-- Удалить таблицу "parentpackage"
--
DROP TABLE IF EXISTS parentpackage;

--
-- Удалить таблицу "objstatus"
--
DROP TABLE IF EXISTS objstatus;

--
-- Удалить таблицу "objectmode"
--
DROP TABLE IF EXISTS objectmode;

--
-- Удалить таблицу "num_values"
--
DROP TABLE IF EXISTS num_values;

--
-- Удалить таблицу "jcolumnsource"
--
DROP TABLE IF EXISTS jcolumnsource;

--
-- Удалить таблицу "iu_u_def_temp"
--
DROP TABLE IF EXISTS iu_u_def_temp;

--
-- Удалить таблицу "instancevalidator"
--
DROP TABLE IF EXISTS instancevalidator;

--
-- Удалить таблицу "groupuser"
--
DROP TABLE IF EXISTS groupuser;

--
-- Удалить таблицу "generator_target"
--
DROP TABLE IF EXISTS generator_target;

--
-- Удалить таблицу "fileterfield"
--
DROP TABLE IF EXISTS fileterfield;

--
-- Удалить таблицу "fieldtypemap"
--
DROP TABLE IF EXISTS fieldtypemap;

--
-- Удалить таблицу "epfilterlink"
--
DROP TABLE IF EXISTS epfilterlink;

--
-- Удалить таблицу "enumitem"
--
DROP TABLE IF EXISTS enumitem;

--
-- Удалить таблицу "armjrnlrun"
--
DROP TABLE IF EXISTS armjrnlrun;

--
-- Удалить таблицу "armjrnlrep"
--
DROP TABLE IF EXISTS armjrnlrep;

--
-- Удалить таблицу "armjrnladd"
--
DROP TABLE IF EXISTS armjrnladd;

--
-- Удалить таблицу "arc_chanel"
--
DROP TABLE IF EXISTS arc_chanel;

--
-- Удалить таблицу "workplace"
--
DROP TABLE IF EXISTS workplace;

--
-- Удалить таблицу "users"
--
DROP TABLE IF EXISTS users;

--
-- Удалить таблицу "the_session"
--
DROP TABLE IF EXISTS the_session;

--
-- Удалить таблицу "sysrefcache"
--
DROP TABLE IF EXISTS sysrefcache;

--
-- Удалить таблицу "syslog"
--
DROP TABLE IF EXISTS syslog;

--
-- Удалить таблицу "sharedmethod"
--
DROP TABLE IF EXISTS sharedmethod;

--
-- Удалить таблицу "rptstruct"
--
DROP TABLE IF EXISTS rptstruct;

--
-- Удалить таблицу "rptformula"
--
DROP TABLE IF EXISTS rptformula;

--
-- Удалить таблицу "reports"
--
DROP TABLE IF EXISTS reports;

--
-- Удалить таблицу "objecttype"
--
DROP TABLE IF EXISTS objecttype;

--
-- Удалить таблицу "num_zones"
--
DROP TABLE IF EXISTS num_zones;

--
-- Удалить таблицу "num_head"
--
DROP TABLE IF EXISTS num_head;

--
-- Удалить таблицу "mtzextrel"
--
DROP TABLE IF EXISTS mtzextrel;

--
-- Удалить таблицу "mtzext_def"
--
DROP TABLE IF EXISTS mtzext_def;

--
-- Удалить таблицу "mtzapp"
--
DROP TABLE IF EXISTS mtzapp;

--
-- Удалить таблицу "localizeinfo"
--
DROP TABLE IF EXISTS localizeinfo;

--
-- Удалить таблицу "journalsrc"
--
DROP TABLE IF EXISTS journalsrc;

--
-- Удалить таблицу "journalcolumn"
--
DROP TABLE IF EXISTS journalcolumn;

--
-- Удалить таблицу "journal"
--
DROP TABLE IF EXISTS journal;

--
-- Удалить таблицу "iu_u_def"
--
DROP TABLE IF EXISTS iu_u_def;

--
-- Удалить таблицу "iu_rcfg_mod"
--
DROP TABLE IF EXISTS iu_rcfg_mod;

--
-- Удалить таблицу "iu_rcfg_docmode"
--
DROP TABLE IF EXISTS iu_rcfg_docmode;

--
-- Удалить таблицу "iu_rcfg_def"
--
DROP TABLE IF EXISTS iu_rcfg_def;

--
-- Удалить таблицу "iu_int_modules"
--
DROP TABLE IF EXISTS iu_int_modules;

--
-- Удалить таблицу "iu_crole"
--
DROP TABLE IF EXISTS iu_crole;

--
-- Удалить таблицу "groups"
--
DROP TABLE IF EXISTS groups;

--
-- Удалить таблицу "genpackage"
--
DROP TABLE IF EXISTS genpackage;

--
-- Удалить таблицу "filters"
--
DROP TABLE IF EXISTS filters;

--
-- Удалить таблицу "filterfieldgroup"
--
DROP TABLE IF EXISTS filterfieldgroup;

--
-- Удалить таблицу "fieldtype"
--
DROP TABLE IF EXISTS fieldtype;

--
-- Удалить таблицу "entrypoints"
--
DROP TABLE IF EXISTS entrypoints;

--
-- Удалить таблицу "bpc_info"
--
DROP TABLE IF EXISTS bpc_info;

--
-- Удалить таблицу "arsms_data"
--
DROP TABLE IF EXISTS arsms_data;

--
-- Удалить таблицу "armtypes"
--
DROP TABLE IF EXISTS armtypes;

--
-- Удалить таблицу "armjournal"
--
DROP TABLE IF EXISTS armjournal;

--
-- Удалить таблицу "armd_type"
--
DROP TABLE IF EXISTS armd_type;

--
-- Удалить таблицу "armd_info"
--
DROP TABLE IF EXISTS armd_info;

--
-- Удалить таблицу "armd_chaneltype"
--
DROP TABLE IF EXISTS armd_chaneltype;

--
-- Удалить таблицу "arlog_data"
--
DROP TABLE IF EXISTS arlog_data;

--
-- Удалить таблицу "arc_md"
--
DROP TABLE IF EXISTS arc_md;

--
-- Удалить таблицу "arc_info"
--
DROP TABLE IF EXISTS arc_info;

--
-- Удалить таблицу "typelist"
--
DROP TABLE IF EXISTS typelist;

--
-- Удалить таблицу "sysoptions"
--
DROP TABLE IF EXISTS sysoptions;

--
-- Удалить таблицу "rpresult"
--
DROP TABLE IF EXISTS rpresult;

--
-- Удалить таблицу "queryresult"
--
DROP TABLE IF EXISTS queryresult;

--
-- Удалить таблицу "origname"
--
DROP TABLE IF EXISTS origname;

--
-- Удалить таблицу "instance"
--
DROP TABLE IF EXISTS instance;

--
-- Удалить таблицу "armodule_state"
--
DROP TABLE IF EXISTS armodule_state;

--
-- Установка базы данных по умолчанию
--
USE areal_cli;

--
-- Создать таблицу "armodule_state"
--
CREATE TABLE armodule_state (
  armdid binary(16) NOT NULL,
  pop_ok int(11) DEFAULT NULL,
  roof_open int(11) DEFAULT NULL,
  power_ok int(11) DEFAULT NULL,
  temperature int(11) DEFAULT NULL,
  PRIMARY KEY (armdid)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "instance"
--
CREATE TABLE instance (
  instanceid binary(16) NOT NULL,
  lockuserid binary(16) DEFAULT NULL,
  locksessionid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  changestamp date DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  objtype varchar(255) DEFAULT NULL,
  exportcounter int(11) DEFAULT NULL,
  ownerpartname varchar(255) DEFAULT NULL,
  ownerrowid binary(16) DEFAULT NULL,
  status binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  PRIMARY KEY (instanceid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 174
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "origname"
--
CREATE TABLE origname (
  filename varchar(255) NOT NULL,
  origname varchar(255) NOT NULL,
  PRIMARY KEY (filename)
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "queryresult"
--
CREATE TABLE queryresult (
  queryresultid binary(16) NOT NULL,
  result binary(16) DEFAULT NULL
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rpresult"
--
CREATE TABLE rpresult (
  rpresultid binary(16) NOT NULL,
  parentlevel int(11) NOT NULL,
  partname varchar(255) DEFAULT NULL,
  rowid binary(16) DEFAULT NULL
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sysoptions"
--
CREATE TABLE sysoptions (
  sysoptionsid binary(16) NOT NULL,
  name varchar(255) DEFAULT NULL,
  value varchar(255) DEFAULT NULL,
  optiontype varchar(255) DEFAULT NULL,
  PRIMARY KEY (sysoptionsid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 152
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "typelist"
--
CREATE TABLE typelist (
  typelistid binary(16) NOT NULL,
  name varchar(255) NOT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  registerproc varchar(255) DEFAULT NULL,
  deleteproc varchar(255) DEFAULT NULL,
  hclproc varchar(255) DEFAULT NULL,
  propagateproc varchar(255) DEFAULT NULL,
  PRIMARY KEY (typelistid)
)
ENGINE = INNODB
AVG_ROW_LENGTH = 399
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "arc_info"
--
CREATE TABLE arc_info (
  instanceid binary(16) DEFAULT NULL,
  arc_infoid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  family varchar(120) DEFAULT NULL,
  name varchar(120) DEFAULT NULL,
  org varchar(255) DEFAULT NULL,
  phone varchar(40) DEFAULT NULL,
  email varchar(255) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  isadmin int(11) DEFAULT NULL,
  PRIMARY KEY (arc_infoid),
  INDEX parent_arc_info (instanceid),
  CONSTRAINT fk_01ef7817788a444c86c0da720ffba8e0 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "arc_md"
--
CREATE TABLE arc_md (
  instanceid binary(16) DEFAULT NULL,
  arc_mdid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  mymodule binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  deivetype varchar(255) DEFAULT NULL,
  theaddress varchar(255) DEFAULT NULL,
  master_fio varchar(255) DEFAULT NULL,
  moduleserial varchar(20) DEFAULT NULL,
  roof_no int(11) DEFAULT NULL,
  pop_no int(11) DEFAULT NULL,
  power_no int(11) DEFAULT NULL,
  PRIMARY KEY (arc_mdid),
  INDEX parent_arc_md (instanceid),
  CONSTRAINT fk_d24c8b39c8644bdf8015f9973d34c20d FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "arlog_data"
--
CREATE TABLE arlog_data (
  instanceid binary(16) DEFAULT NULL,
  arlog_dataid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sms binary(16) DEFAULT NULL,
  chanel binary(16) DEFAULT NULL,
  sendtime datetime DEFAULT NULL,
  sendresult varchar(120) DEFAULT NULL,
  trynumber int(11) DEFAULT NULL,
  finished int(11) DEFAULT NULL,
  PRIMARY KEY (arlog_dataid),
  INDEX parent_arlog_data (instanceid),
  CONSTRAINT fk_4436bb3b7ee94926a7fd9d9b20bbf37a FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 187
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armd_chaneltype"
--
CREATE TABLE armd_chaneltype (
  instanceid binary(16) DEFAULT NULL,
  armd_chaneltypeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(32) DEFAULT NULL,
  PRIMARY KEY (armd_chaneltypeid),
  INDEX parent_armd_chaneltype (instanceid),
  CONSTRAINT fk_7dbee9ed317043ccbbc42fd6050b87f1 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armd_info"
--
CREATE TABLE armd_info (
  instanceid binary(16) DEFAULT NULL,
  armd_infoid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  moduletype binary(16) DEFAULT NULL,
  serialno varchar(20) DEFAULT NULL,
  makedate date DEFAULT NULL,
  phone varchar(64) DEFAULT NULL,
  roof_no int(11) DEFAULT NULL,
  pop_no int(11) DEFAULT NULL,
  power_no int(11) DEFAULT NULL,
  PRIMARY KEY (armd_infoid),
  INDEX parent_armd_info (instanceid),
  CONSTRAINT fk_f66745feef2e4515a397b52eb98f59bf FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armd_type"
--
CREATE TABLE armd_type (
  instanceid binary(16) DEFAULT NULL,
  armd_typeid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(32) DEFAULT NULL,
  PRIMARY KEY (armd_typeid),
  INDEX parent_armd_type (instanceid),
  CONSTRAINT fk_247e2cb26fe949bb9d4b021309a3f8f2 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjournal"
--
CREATE TABLE armjournal (
  instanceid binary(16) DEFAULT NULL,
  armjournalid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thejournal binary(16) DEFAULT NULL,
  PRIMARY KEY (armjournalid),
  INDEX parent_armjournal (instanceid),
  CONSTRAINT fk_c41c0e058cf34b439d6ec5fcd37beb47 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armtypes"
--
CREATE TABLE armtypes (
  instanceid binary(16) DEFAULT NULL,
  armtypesid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thedocumenttype binary(16) DEFAULT NULL,
  PRIMARY KEY (armtypesid),
  INDEX parent_armtypes (instanceid),
  CONSTRAINT fk_30f737ce1c814672b0f96e5bf4b15971 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "arsms_data"
--
CREATE TABLE arsms_data (
  instanceid binary(16) DEFAULT NULL,
  arsms_dataid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  smstime datetime DEFAULT NULL,
  phone varchar(64) DEFAULT NULL,
  serialno varchar(20) DEFAULT NULL,
  opercode varchar(100) DEFAULT NULL,
  controlcode varchar(64) DEFAULT NULL,
  temperature int(11) DEFAULT NULL,
  pop_ok int(11) DEFAULT NULL,
  roof_open int(11) DEFAULT NULL,
  power_ok int(11) DEFAULT NULL,
  PRIMARY KEY (arsms_dataid),
  INDEX parent_arsms_data (instanceid),
  CONSTRAINT fk_7314f3e646de4ab6a09d05f6b0a69004 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "bpc_info"
--
CREATE TABLE bpc_info (
  instanceid binary(16) DEFAULT NULL,
  bpc_infoid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  PRIMARY KEY (bpc_infoid),
  INDEX parent_bpc_info (instanceid),
  CONSTRAINT fk_f50248a1151e4d9c87d0906acfd35c9f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "entrypoints"
--
CREATE TABLE entrypoints (
  instanceid binary(16) DEFAULT NULL,
  entrypointsid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(38) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  astoolbaritem int(11) DEFAULT NULL,
  actiontype int(11) DEFAULT NULL,
  thefilter binary(16) DEFAULT NULL,
  journal binary(16) DEFAULT NULL,
  report binary(16) DEFAULT NULL,
  document binary(16) DEFAULT NULL,
  method binary(16) DEFAULT NULL,
  iconfile varchar(2000) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  arm binary(16) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  objecttype binary(16) DEFAULT NULL,
  journalfixedquery text DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowedit int(11) DEFAULT NULL,
  allowdel int(11) DEFAULT NULL,
  allowfilter int(11) DEFAULT NULL,
  allowprint int(11) DEFAULT NULL,
  PRIMARY KEY (entrypointsid),
  INDEX parent_entrypoints (instanceid),
  CONSTRAINT fk_ef4ede2c458b4eabafe366aa500081da FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldtype"
--
CREATE TABLE fieldtype (
  instanceid binary(16) DEFAULT NULL,
  fieldtypeid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  typestyle int(11) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  allowsize int(11) DEFAULT NULL,
  minimum varchar(64) DEFAULT NULL,
  maximum varchar(64) DEFAULT NULL,
  allowlikesearch int(11) DEFAULT NULL,
  gridsorttype int(11) DEFAULT NULL,
  delayedsave int(11) DEFAULT NULL,
  PRIMARY KEY (fieldtypeid),
  INDEX parent_fieldtype (instanceid),
  CONSTRAINT fk_0670efa5512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 218
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "filterfieldgroup"
--
CREATE TABLE filterfieldgroup (
  instanceid binary(16) DEFAULT NULL,
  filterfieldgroupid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  allowignore int(11) DEFAULT NULL,
  PRIMARY KEY (filterfieldgroupid),
  INDEX parent_filterfieldgroup (instanceid),
  CONSTRAINT fk_98c6d923b807418c91e7c351511b5eb1 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 606
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "filters"
--
CREATE TABLE filters (
  instanceid binary(16) DEFAULT NULL,
  filtersid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  thecaption varchar(80) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (filtersid),
  INDEX parent_filters (instanceid),
  CONSTRAINT fk_b75ad7246b6f45bdb0bbc75d17309dc9 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 606
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genpackage"
--
CREATE TABLE genpackage (
  instanceid binary(16) DEFAULT NULL,
  genpackageid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  PRIMARY KEY (genpackageid),
  INDEX parent_genpackage (instanceid),
  CONSTRAINT fk_4612c6057e7247d08a2852cc7bff4c7f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "groups"
--
CREATE TABLE groups (
  instanceid binary(16) DEFAULT NULL,
  groupsid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  adgroup varchar(255) DEFAULT NULL,
  PRIMARY KEY (groupsid),
  INDEX parent_groups (instanceid),
  CONSTRAINT fk_a40e6aee7b41476d923caca251c08e87 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_crole"
--
CREATE TABLE iu_crole (
  instanceid binary(16) DEFAULT NULL,
  iu_croleid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  name varchar(120) DEFAULT NULL,
  allowsetuser int(11) DEFAULT NULL,
  PRIMARY KEY (iu_croleid),
  INDEX parent_iu_crole (instanceid),
  CONSTRAINT fk_2ea051107dd64b91b774af6ecbc42108 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_int_modules"
--
CREATE TABLE iu_int_modules (
  instanceid binary(16) DEFAULT NULL,
  iu_int_modulesid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  theicon varchar(64) DEFAULT NULL,
  groupname varchar(60) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  visiblecontrol int(11) DEFAULT NULL,
  controldocmode varchar(10) DEFAULT NULL,
  otherdocmode varchar(10) DEFAULT NULL,
  mydocmode varchar(10) DEFAULT NULL,
  allobjects int(11) DEFAULT NULL,
  colegsobject int(11) DEFAULT NULL,
  substructobjects int(11) DEFAULT NULL,
  PRIMARY KEY (iu_int_modulesid),
  INDEX parent_iu_int_modules (instanceid),
  CONSTRAINT fk_dba8d884728647828b286af8916220b6 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_def"
--
CREATE TABLE iu_rcfg_def (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_defid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  archived int(11) DEFAULT 0,
  therole binary(16) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_defid),
  INDEX parent_iu_rcfg_def (instanceid),
  CONSTRAINT fk_10f3c6e757424731b94c647263e4e304 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_docmode"
--
CREATE TABLE iu_rcfg_docmode (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_docmodeid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  the_document binary(16) DEFAULT NULL,
  addmode varchar(4) DEFAULT NULL,
  editmode varchar(4) DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowdelete int(11) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_docmodeid),
  INDEX parent_iu_rcfg_docmode (instanceid),
  CONSTRAINT fk_cf7ed0a3642c4b10834721d86bfecbc4 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_rcfg_mod"
--
CREATE TABLE iu_rcfg_mod (
  instanceid binary(16) DEFAULT NULL,
  iu_rcfg_modid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  moduleaccessible int(11) DEFAULT NULL,
  theicon varchar(64) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  groupname varchar(60) DEFAULT NULL,
  allobjects int(11) DEFAULT NULL,
  colegsobject int(11) DEFAULT NULL,
  substructobjects int(11) DEFAULT NULL,
  mydocmode varchar(10) DEFAULT NULL,
  otherdocmode varchar(10) DEFAULT NULL,
  controldocmode varchar(10) DEFAULT NULL,
  visiblecontrol int(11) DEFAULT NULL,
  PRIMARY KEY (iu_rcfg_modid),
  INDEX parent_iu_rcfg_mod (instanceid),
  CONSTRAINT fk_fa0e39846b7c45c8aecfe2fc7ecb622b FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_u_def"
--
CREATE TABLE iu_u_def (
  instanceid binary(16) DEFAULT NULL,
  iu_u_defid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theclient binary(16) DEFAULT NULL,
  lastname varchar(120) DEFAULT NULL,
  name varchar(120) DEFAULT NULL,
  surname varchar(120) DEFAULT NULL,
  currole binary(16) DEFAULT NULL,
  sendtomail int(11) DEFAULT NULL,
  freelancer int(11) DEFAULT NULL,
  email varchar(60) DEFAULT NULL,
  thephone varchar(40) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  PRIMARY KEY (iu_u_defid),
  INDEX parent_iu_u_def (instanceid),
  CONSTRAINT fk_a63cbdcf3ddd4164949752fe925b2a13 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journal"
--
CREATE TABLE journal (
  instanceid binary(16) DEFAULT NULL,
  journalid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(32) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  jrnliconcls varchar(80) DEFAULT NULL,
  usefavorites int(11) DEFAULT NULL,
  PRIMARY KEY (journalid),
  INDEX parent_journal (instanceid),
  CONSTRAINT fk_34c46c6e921547468d9d4800b6549003 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 390
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journalcolumn"
--
CREATE TABLE journalcolumn (
  instanceid binary(16) DEFAULT NULL,
  journalcolumnid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  columnalignment int(11) DEFAULT NULL,
  colsort int(11) DEFAULT NULL,
  groupaggregation int(11) DEFAULT NULL,
  PRIMARY KEY (journalcolumnid),
  INDEX parent_journalcolumn (instanceid),
  CONSTRAINT fk_f8d77b31a757488cbb5822700737d4b8 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 260
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "journalsrc"
--
CREATE TABLE journalsrc (
  instanceid binary(16) DEFAULT NULL,
  journalsrcid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  partview binary(16) DEFAULT NULL,
  onrun int(11) DEFAULT NULL,
  openmode varchar(64) DEFAULT NULL,
  viewalias varchar(255) DEFAULT NULL,
  spartview varchar(38) DEFAULT NULL,
  PRIMARY KEY (journalsrcid),
  INDEX parent_journalsrc (instanceid),
  CONSTRAINT fk_dac3244d70d645a4885dd610f748ebfc FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 390
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "localizeinfo"
--
CREATE TABLE localizeinfo (
  instanceid binary(16) DEFAULT NULL,
  localizeinfoid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  langfull varchar(255) DEFAULT NULL,
  langshort varchar(255) DEFAULT NULL,
  PRIMARY KEY (localizeinfoid),
  INDEX parent_localizeinfo (instanceid),
  CONSTRAINT fk_a57d435a73b34107b22bc18782085c84 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzapp"
--
CREATE TABLE mtzapp (
  instanceid binary(16) DEFAULT NULL,
  mtzappid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  dbname varchar(64) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (mtzappid),
  INDEX parent_mtzapp (instanceid),
  CONSTRAINT fk_8cdbe0c259894210bdfb33c2c45f2509 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzext_def"
--
CREATE TABLE mtzext_def (
  instanceid binary(16) DEFAULT NULL,
  mtzext_defid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  exttype int(11) DEFAULT NULL,
  thedescription text DEFAULT NULL,
  PRIMARY KEY (mtzext_defid),
  INDEX parent_mtzext_def (instanceid),
  CONSTRAINT fk_7f62144a857648bcacba1f9dc4874459 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "mtzextrel"
--
CREATE TABLE mtzextrel (
  instanceid binary(16) DEFAULT NULL,
  mtzextrelid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theplatform int(11) DEFAULT NULL,
  theclassname varchar(255) DEFAULT NULL,
  thelibraryname varchar(255) DEFAULT NULL,
  PRIMARY KEY (mtzextrelid),
  INDEX parent_mtzextrel (instanceid),
  CONSTRAINT fk_e48fe6dd79f94d42bac3cb39f69171bc FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_head"
--
CREATE TABLE num_head (
  instanceid binary(16) DEFAULT NULL,
  num_headid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  shema int(11) DEFAULT NULL,
  PRIMARY KEY (num_headid),
  INDEX parent_num_head (instanceid),
  CONSTRAINT fk_c436bed9294e48a78c376d4cf32343be FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_zones"
--
CREATE TABLE num_zones (
  instanceid binary(16) DEFAULT NULL,
  num_zonesid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  zonemask varchar(255) DEFAULT NULL,
  PRIMARY KEY (num_zonesid),
  INDEX parent_num_zones (instanceid),
  CONSTRAINT fk_59512432e6df41f9a4366bf7db1800bb FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objecttype"
--
CREATE TABLE objecttype (
  instanceid binary(16) DEFAULT NULL,
  objecttypeid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  package binary(16) DEFAULT NULL,
  the_comment varchar(255) DEFAULT NULL,
  name varchar(14) DEFAULT NULL,
  issingleinstance int(11) DEFAULT NULL,
  chooseview binary(16) DEFAULT NULL,
  onrun binary(16) DEFAULT NULL,
  oncreate binary(16) DEFAULT NULL,
  ondelete binary(16) DEFAULT NULL,
  allowreftoobject int(11) DEFAULT NULL,
  allowsearch int(11) DEFAULT NULL,
  replicatype int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  useownership int(11) DEFAULT NULL,
  usearchiving int(11) DEFAULT NULL,
  commitfullobject int(11) DEFAULT NULL,
  objiconcls varchar(80) DEFAULT NULL,
  PRIMARY KEY (objecttypeid),
  INDEX parent_objecttype (instanceid),
  CONSTRAINT fk_0670efaf512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 399
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "reports"
--
CREATE TABLE reports (
  instanceid binary(16) DEFAULT NULL,
  reportsid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  reportfile_ext varchar(4) DEFAULT NULL,
  reportfile varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  preparemethod binary(16) DEFAULT NULL,
  reporttype int(11) DEFAULT NULL,
  thereportext binary(16) DEFAULT NULL,
  reportview varchar(255) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (reportsid),
  INDEX parent_reports (instanceid),
  CONSTRAINT fk_259b3dfab8ac417888fd4b715d372fc3 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptformula"
--
CREATE TABLE rptformula (
  instanceid binary(16) DEFAULT NULL,
  rptformulaid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  code text DEFAULT NULL,
  platform binary(16) DEFAULT NULL,
  PRIMARY KEY (rptformulaid),
  INDEX parent_rptformula (instanceid),
  CONSTRAINT fk_e422132e07f44c0f8246b0f16cd9186a FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptstruct"
--
CREATE TABLE rptstruct (
  instanceid binary(16) DEFAULT NULL,
  rptstructid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  PRIMARY KEY (rptstructid),
  INDEX parent_rptstruct (instanceid),
  CONSTRAINT fk_f5e8492a2224452f85ffa14882c6554f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sharedmethod"
--
CREATE TABLE sharedmethod (
  instanceid binary(16) DEFAULT NULL,
  sharedmethodid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  returntype binary(16) DEFAULT NULL,
  PRIMARY KEY (sharedmethodid),
  INDEX parent_sharedmethod (instanceid),
  CONSTRAINT fk_0670efad512711d58822204c4f4f5020 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 496
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "syslog"
--
CREATE TABLE syslog (
  instanceid binary(16) DEFAULT NULL,
  syslogid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thesession binary(16) DEFAULT NULL,
  the_resource varchar(255) DEFAULT NULL,
  logstructid varchar(255) DEFAULT NULL,
  verb varchar(80) DEFAULT NULL,
  loginstanceid binary(16) DEFAULT NULL,
  PRIMARY KEY (syslogid),
  INDEX parent_syslog (instanceid),
  CONSTRAINT fk_45eadae898374ee59a3107370302f20f FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "sysrefcache"
--
CREATE TABLE sysrefcache (
  instanceid binary(16) DEFAULT NULL,
  sysrefcacheid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  cachetype int(11) DEFAULT NULL,
  objectownerid binary(16) DEFAULT NULL,
  sessionid binary(16) DEFAULT NULL,
  modulename varchar(40) DEFAULT NULL,
  PRIMARY KEY (sysrefcacheid),
  INDEX parent_sysrefcache (instanceid),
  CONSTRAINT fk_35d224df283041549e80ff578aab323c FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "the_session"
--
CREATE TABLE the_session (
  instanceid binary(16) DEFAULT NULL,
  the_sessionid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  applicationid binary(16) DEFAULT NULL,
  userrole binary(16) DEFAULT NULL,
  closedat datetime DEFAULT NULL,
  closed int(11) DEFAULT NULL,
  usersid binary(16) DEFAULT NULL,
  lastaccess datetime DEFAULT NULL,
  startat datetime DEFAULT NULL,
  lang varchar(25) DEFAULT NULL,
  login varchar(255) DEFAULT NULL,
  PRIMARY KEY (the_sessionid),
  INDEX parent_the_session (instanceid),
  CONSTRAINT fk_78943ea279364f58b31676e4f968e3b4 FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2730
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "users"
--
CREATE TABLE users (
  instanceid binary(16) DEFAULT NULL,
  usersid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  family varchar(255) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  surname varchar(255) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  password varchar(80) DEFAULT NULL,
  domainame varchar(255) DEFAULT NULL,
  email varchar(255) DEFAULT NULL,
  phone varchar(20) DEFAULT NULL,
  localphone varchar(20) DEFAULT NULL,
  PRIMARY KEY (usersid),
  INDEX parent_users (instanceid),
  CONSTRAINT fk_148bb85509654e9ea3d648dcc8ce528b FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "workplace"
--
CREATE TABLE workplace (
  instanceid binary(16) DEFAULT NULL,
  workplaceid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  theversion varchar(30) DEFAULT NULL,
  theplatform int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (workplaceid),
  INDEX parent_workplace (instanceid),
  CONSTRAINT fk_973921c449264c9da7816062cf81b5ad FOREIGN KEY (instanceid)
  REFERENCES instance (instanceid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "arc_chanel"
--
CREATE TABLE arc_chanel (
  parentstructrowid binary(16) NOT NULL,
  arc_chanelid binary(16) NOT NULL,
  changestamp datetime DEFAULT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  ch_taype binary(16) DEFAULT NULL,
  ch_param varchar(255) DEFAULT NULL,
  ch_on int(11) DEFAULT NULL,
  msg_crash int(11) DEFAULT NULL,
  msg_current int(11) DEFAULT NULL,
  chanelname varchar(120) DEFAULT NULL,
  chanelcomment varchar(255) DEFAULT NULL,
  PRIMARY KEY (arc_chanelid),
  INDEX parent_arc_chanel (parentstructrowid),
  CONSTRAINT fk_1b84476c6c8440de92b517045d93c35a FOREIGN KEY (parentstructrowid)
  REFERENCES arc_md (arc_mdid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnladd"
--
CREATE TABLE armjrnladd (
  parentstructrowid binary(16) NOT NULL,
  armjrnladdid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnladdid),
  INDEX parent_armjrnladd (parentstructrowid),
  CONSTRAINT fk_f837abedcae9430a9dee519dbb1b79d5 FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnlrep"
--
CREATE TABLE armjrnlrep (
  parentstructrowid binary(16) NOT NULL,
  armjrnlrepid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  repname varchar(255) DEFAULT NULL,
  thereport binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnlrepid),
  INDEX parent_armjrnlrep (parentstructrowid),
  CONSTRAINT fk_c2763400be344033b4b5756cd5252cea FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "armjrnlrun"
--
CREATE TABLE armjrnlrun (
  parentstructrowid binary(16) NOT NULL,
  armjrnlrunid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  theextention binary(16) DEFAULT NULL,
  PRIMARY KEY (armjrnlrunid),
  INDEX parent_armjrnlrun (parentstructrowid),
  CONSTRAINT fk_4fe8318100a54b599413d06318a119d4 FOREIGN KEY (parentstructrowid)
  REFERENCES armjournal (armjournalid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "enumitem"
--
CREATE TABLE enumitem (
  parentstructrowid binary(16) NOT NULL,
  enumitemid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  namevalue int(11) DEFAULT NULL,
  nameincode varchar(100) DEFAULT NULL,
  PRIMARY KEY (enumitemid),
  INDEX parent_enumitem (parentstructrowid),
  CONSTRAINT fk_35f46d2361f8413b924f83792f76e698 FOREIGN KEY (parentstructrowid)
  REFERENCES fieldtype (fieldtypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 225
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "epfilterlink"
--
CREATE TABLE epfilterlink (
  parentstructrowid binary(16) NOT NULL,
  epfilterlinkid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  rowsource varchar(255) DEFAULT NULL,
  theexpression text DEFAULT NULL,
  filterfield varchar(255) DEFAULT NULL,
  PRIMARY KEY (epfilterlinkid),
  INDEX parent_epfilterlink (parentstructrowid),
  CONSTRAINT fk_d407359f220449699789956215e456e6 FOREIGN KEY (parentstructrowid)
  REFERENCES entrypoints (entrypointsid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldtypemap"
--
CREATE TABLE fieldtypemap (
  parentstructrowid binary(16) NOT NULL,
  fieldtypemapid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  stoagetype varchar(255) DEFAULT NULL,
  fixedsize int(11) DEFAULT NULL,
  PRIMARY KEY (fieldtypemapid),
  INDEX parent_fieldtypemap (parentstructrowid),
  CONSTRAINT fk_0670efa6512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES fieldtype (fieldtypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 143
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fileterfield"
--
CREATE TABLE fileterfield (
  parentstructrowid binary(16) NOT NULL,
  fileterfieldid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  fieldsize int(11) DEFAULT NULL,
  reftype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  valuearray int(11) DEFAULT NULL,
  PRIMARY KEY (fileterfieldid),
  INDEX parent_fileterfield (parentstructrowid),
  CONSTRAINT fk_f4b3740ce6764b6ea833ede44cb9fa63 FOREIGN KEY (parentstructrowid)
  REFERENCES filterfieldgroup (filterfieldgroupid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 329
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "generator_target"
--
CREATE TABLE generator_target (
  parentstructrowid binary(16) NOT NULL,
  generator_targetid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  targettype int(11) DEFAULT NULL,
  queuename varchar(255) DEFAULT NULL,
  generatorprogid varchar(255) DEFAULT NULL,
  generatorstyle int(11) DEFAULT NULL,
  thedevelopmentenv int(11) DEFAULT NULL,
  PRIMARY KEY (generator_targetid),
  INDEX parent_generator_target (parentstructrowid),
  CONSTRAINT fk_0670efb9512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES genpackage (genpackageid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "groupuser"
--
CREATE TABLE groupuser (
  parentstructrowid binary(16) NOT NULL,
  groupuserid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theuser binary(16) DEFAULT NULL,
  PRIMARY KEY (groupuserid),
  INDEX parent_groupuser (parentstructrowid),
  CONSTRAINT fk_fe2c9352e29a420b91343e3bdd832a6e FOREIGN KEY (parentstructrowid)
  REFERENCES groups (groupsid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "instancevalidator"
--
CREATE TABLE instancevalidator (
  parentstructrowid binary(16) NOT NULL,
  instancevalidatorid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (instancevalidatorid),
  INDEX parent_instancevalidator (parentstructrowid),
  CONSTRAINT fk_42515bade23340db8f9045dcfce01be6 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "iu_u_def_temp"
--
CREATE TABLE iu_u_def_temp (
  sessionid binary(16) NOT NULL DEFAULT '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0',
  instanceid binary(16) DEFAULT NULL,
  iu_u_defid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theclient binary(16) DEFAULT NULL,
  lastname varchar(120) DEFAULT NULL,
  name varchar(120) DEFAULT NULL,
  surname varchar(120) DEFAULT NULL,
  currole binary(16) DEFAULT NULL,
  sendtomail int(11) DEFAULT NULL,
  freelancer int(11) DEFAULT NULL,
  email varchar(60) DEFAULT NULL,
  thephone varchar(40) DEFAULT NULL,
  login varchar(64) DEFAULT NULL,
  PRIMARY KEY (sessionid, iu_u_defid),
  INDEX idx_session_iu_u_def_temp (sessionid),
  CONSTRAINT fk_a63cbdcf3ddd4164949752fe925b2a13_temp FOREIGN KEY (sessionid)
  REFERENCES the_session (the_sessionid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "jcolumnsource"
--
CREATE TABLE jcolumnsource (
  parentstructrowid binary(16) NOT NULL,
  jcolumnsourceid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  srcpartview binary(16) DEFAULT NULL,
  viewfield varchar(255) DEFAULT NULL,
  PRIMARY KEY (jcolumnsourceid),
  INDEX parent_jcolumnsource (parentstructrowid),
  CONSTRAINT fk_8d8c85ebd15e45d7b13b0b4001eb9ac2 FOREIGN KEY (parentstructrowid)
  REFERENCES journalcolumn (journalcolumnid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 260
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "num_values"
--
CREATE TABLE num_values (
  parentstructrowid binary(16) NOT NULL,
  num_valuesid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  the_value int(11) DEFAULT NULL,
  ownerpartname varchar(64) DEFAULT NULL,
  ownerrowid binary(16) DEFAULT NULL,
  PRIMARY KEY (num_valuesid),
  INDEX parent_num_values (parentstructrowid),
  CONSTRAINT fk_833dc00be8d74d9191032dd084befc1e FOREIGN KEY (parentstructrowid)
  REFERENCES num_zones (num_zonesid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objectmode"
--
CREATE TABLE objectmode (
  parentstructrowid binary(16) NOT NULL,
  objectmodeid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(5) DEFAULT NULL,
  defaultmode int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (objectmodeid),
  INDEX parent_objectmode (parentstructrowid),
  CONSTRAINT fk_1168296da01c45dbb67d76a07f3ff64c FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1024
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "objstatus"
--
CREATE TABLE objstatus (
  parentstructrowid binary(16) NOT NULL,
  objstatusid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  isstartup int(11) DEFAULT NULL,
  isarchive int(11) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  PRIMARY KEY (objstatusid),
  INDEX parent_objstatus (parentstructrowid),
  CONSTRAINT fk_df46c86638f84ef192e25f899d98bd16 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "parentpackage"
--
CREATE TABLE parentpackage (
  parentstructrowid binary(16) NOT NULL,
  parentpackageid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  package binary(16) DEFAULT NULL,
  PRIMARY KEY (parentpackageid),
  INDEX parent_parentpackage (parentstructrowid),
  CONSTRAINT fk_6ea00756b9804d23b209202389953a13 FOREIGN KEY (parentstructrowid)
  REFERENCES mtzapp (mtzappid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "part"
--
CREATE TABLE part (
  parentstructrowid binary(16) NOT NULL,
  partid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  parentrowid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  parttype int(11) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  name varchar(20) DEFAULT NULL,
  the_comment text DEFAULT NULL,
  nolog int(11) DEFAULT NULL,
  manualregister int(11) DEFAULT NULL,
  oncreate binary(16) DEFAULT NULL,
  onsave binary(16) DEFAULT NULL,
  onrun binary(16) DEFAULT NULL,
  ondelete binary(16) DEFAULT NULL,
  addbehaivor int(11) DEFAULT NULL,
  extenderobject binary(16) DEFAULT NULL,
  shablonbrief varchar(100) DEFAULT NULL,
  rulebrief varchar(500) DEFAULT NULL,
  isjormalchange int(11) DEFAULT NULL,
  usearchiving int(11) DEFAULT NULL,
  integerpkey int(11) DEFAULT NULL,
  particoncls varchar(80) DEFAULT NULL,
  PRIMARY KEY (partid),
  INDEX parent_part (parentstructrowid),
  CONSTRAINT fk_0670efb1512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 396
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "rptfields"
--
CREATE TABLE rptfields (
  parentstructrowid binary(16) NOT NULL,
  rptfieldsid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  fieldsize int(11) DEFAULT NULL,
  caption varchar(255) DEFAULT NULL,
  PRIMARY KEY (rptfieldsid),
  INDEX parent_rptfields (parentstructrowid),
  CONSTRAINT fk_0c77d0de559e43fcb181156e126543f1 FOREIGN KEY (parentstructrowid)
  REFERENCES rptstruct (rptstructid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "script"
--
CREATE TABLE script (
  parentstructrowid binary(16) NOT NULL,
  scriptid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (scriptid),
  INDEX parent_script (parentstructrowid),
  CONSTRAINT fk_0670efa3512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES sharedmethod (sharedmethodid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 1365
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "typemenu"
--
CREATE TABLE typemenu (
  parentstructrowid binary(16) NOT NULL,
  typemenuid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  the_action binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (typemenuid),
  INDEX parent_typemenu (parentstructrowid),
  CONSTRAINT fk_8776747a743d47b9af1cab00ff81154f FOREIGN KEY (parentstructrowid)
  REFERENCES objecttype (objecttypeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "extenderinterface"
--
CREATE TABLE extenderinterface (
  parentstructrowid binary(16) NOT NULL,
  extenderinterfaceid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thename varchar(255) DEFAULT NULL,
  targetplatform binary(16) DEFAULT NULL,
  theobject varchar(255) DEFAULT NULL,
  theconfig varchar(512) DEFAULT NULL,
  PRIMARY KEY (extenderinterfaceid),
  INDEX parent_extenderinterface (parentstructrowid),
  CONSTRAINT fk_0fefa9963bad4ebba9ad52ac582cd0a7 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "field"
--
CREATE TABLE field (
  parentstructrowid binary(16) NOT NULL,
  fieldid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  tabname varchar(60) DEFAULT NULL,
  fieldgroupbox varchar(60) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  fieldtype binary(16) DEFAULT NULL,
  isbrief int(11) DEFAULT NULL,
  istabbrief int(11) DEFAULT NULL,
  allownull int(11) DEFAULT NULL,
  datasize int(11) DEFAULT NULL,
  referencetype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  thestyle varchar(50) DEFAULT NULL,
  internalreference int(11) DEFAULT NULL,
  createrefonly int(11) DEFAULT NULL,
  isautonumber int(11) DEFAULT NULL,
  thenumerator binary(16) DEFAULT NULL,
  zonetemplate varchar(255) DEFAULT NULL,
  numberdatefield binary(16) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  shablonbrief varchar(100) DEFAULT NULL,
  thenameclass varchar(100) DEFAULT NULL,
  themask varchar(64) DEFAULT NULL,
  PRIMARY KEY (fieldid),
  INDEX parent_field (parentstructrowid),
  CONSTRAINT fk_0670efa4512711d58822204c4f4f5020 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 213
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldrestriction"
--
CREATE TABLE fieldrestriction (
  parentstructrowid binary(16) NOT NULL,
  fieldrestrictionid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thepart binary(16) DEFAULT NULL,
  thefield binary(16) DEFAULT NULL,
  allowread int(11) DEFAULT NULL,
  allowmodify int(11) DEFAULT NULL,
  mandatoryfield int(11) DEFAULT NULL,
  PRIMARY KEY (fieldrestrictionid),
  INDEX parent_fieldrestriction (parentstructrowid),
  CONSTRAINT fk_24c5119c5dc94aacbb01b8cf8eba998e FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 197
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "gencontrols"
--
CREATE TABLE gencontrols (
  parentstructrowid binary(16) NOT NULL,
  gencontrolsid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  controlprogid varchar(255) DEFAULT NULL,
  controlclassid varchar(40) DEFAULT NULL,
  versionmajor int(11) DEFAULT NULL,
  versionminor int(11) DEFAULT NULL,
  PRIMARY KEY (gencontrolsid),
  INDEX parent_gencontrols (parentstructrowid),
  CONSTRAINT fk_04b31cfb6525474a9f16999870d8eaaf FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 16384
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genmanualcode"
--
CREATE TABLE genmanualcode (
  parentstructrowid binary(16) NOT NULL,
  genmanualcodeid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(80) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (genmanualcodeid),
  INDEX parent_genmanualcode (parentstructrowid),
  CONSTRAINT fk_766993ca7de64ada82168bddf2b0588e FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 963
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "genreference"
--
CREATE TABLE genreference (
  parentstructrowid binary(16) NOT NULL,
  genreferenceid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  refclassid varchar(40) DEFAULT NULL,
  versionmajor int(11) DEFAULT NULL,
  versionminor int(11) DEFAULT NULL,
  PRIMARY KEY (genreferenceid),
  INDEX parent_genreference (parentstructrowid),
  CONSTRAINT fk_673e809bcff64309a52bfe2118ae508e FOREIGN KEY (parentstructrowid)
  REFERENCES generator_target (generator_targetid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 2340
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "methodrestriction"
--
CREATE TABLE methodrestriction (
  parentstructrowid binary(16) NOT NULL,
  methodrestrictionid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  part binary(16) DEFAULT NULL,
  method binary(16) DEFAULT NULL,
  isrestricted int(11) DEFAULT NULL,
  PRIMARY KEY (methodrestrictionid),
  INDEX parent_methodrestriction (parentstructrowid),
  CONSTRAINT fk_0f7b3070f7094e7d868ccc337e3075d1 FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "nextstate"
--
CREATE TABLE nextstate (
  parentstructrowid binary(16) NOT NULL,
  nextstateid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thestate binary(16) DEFAULT NULL,
  PRIMARY KEY (nextstateid),
  INDEX parent_nextstate (parentstructrowid),
  CONSTRAINT fk_11c1a17929b24ddcbdb71eb21d2ff878 FOREIGN KEY (parentstructrowid)
  REFERENCES objstatus (objstatusid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "parameters"
--
CREATE TABLE parameters (
  parentstructrowid binary(16) NOT NULL,
  parametersid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  typeofparm binary(16) DEFAULT NULL,
  datasize int(11) DEFAULT NULL,
  allownull int(11) DEFAULT NULL,
  outparam int(11) DEFAULT NULL,
  referencetype int(11) DEFAULT NULL,
  reftotype binary(16) DEFAULT NULL,
  reftopart binary(16) DEFAULT NULL,
  PRIMARY KEY (parametersid),
  INDEX parent_parameters (parentstructrowid),
  CONSTRAINT fk_e598e74ca9de404186fa972e95635600 FOREIGN KEY (parentstructrowid)
  REFERENCES script (scriptid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 338
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partmenu"
--
CREATE TABLE partmenu (
  parentstructrowid binary(16) NOT NULL,
  partmenuid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  the_action binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (partmenuid),
  INDEX parent_partmenu (parentstructrowid),
  CONSTRAINT fk_548e9e2e89f64822a312101ca4a9fe74 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partview"
--
CREATE TABLE partview (
  parentstructrowid binary(16) NOT NULL,
  partviewid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(64) DEFAULT NULL,
  forchoose int(11) DEFAULT NULL,
  filterfield0 varchar(255) DEFAULT NULL,
  filterfield1 varchar(255) DEFAULT NULL,
  filterfield2 varchar(255) DEFAULT NULL,
  filterfield3 varchar(255) DEFAULT NULL,
  PRIMARY KEY (partviewid),
  INDEX parent_partview (parentstructrowid),
  CONSTRAINT fk_d713b64d4ce8466dbe2b448874dc0469 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 396
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "structrestriction"
--
CREATE TABLE structrestriction (
  parentstructrowid binary(16) NOT NULL,
  structrestrictionid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  struct binary(16) DEFAULT NULL,
  allowread int(11) DEFAULT NULL,
  allowadd int(11) DEFAULT NULL,
  allowedit int(11) DEFAULT NULL,
  allowdelete int(11) DEFAULT NULL,
  PRIMARY KEY (structrestrictionid),
  INDEX parent_structrestriction (parentstructrowid),
  CONSTRAINT fk_f448ac333b13489993ee47d3d62962ec FOREIGN KEY (parentstructrowid)
  REFERENCES objectmode (objectmodeid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 682
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "uniqueconstraint"
--
CREATE TABLE uniqueconstraint (
  parentstructrowid binary(16) NOT NULL,
  uniqueconstraintid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(80) DEFAULT NULL,
  perparent int(11) DEFAULT NULL,
  thecomment text DEFAULT NULL,
  PRIMARY KEY (uniqueconstraintid),
  INDEX parent_uniqueconstraint (parentstructrowid),
  CONSTRAINT fk_9caa5c89f1cb4b62b1d0ff2d29a40057 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 606
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "validator"
--
CREATE TABLE validator (
  parentstructrowid binary(16) NOT NULL,
  validatorid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (validatorid),
  INDEX parent_validator (parentstructrowid),
  CONSTRAINT fk_7d323655bad74d12afc2e7ff3613b4a1 FOREIGN KEY (parentstructrowid)
  REFERENCES part (partid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "constraintfield"
--
CREATE TABLE constraintfield (
  parentstructrowid binary(16) NOT NULL,
  constraintfieldid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thefield binary(16) DEFAULT NULL,
  PRIMARY KEY (constraintfieldid),
  INDEX parent_constraintfield (parentstructrowid),
  CONSTRAINT fk_c70106b1aa9541738097614495d6ef28 FOREIGN KEY (parentstructrowid)
  REFERENCES uniqueconstraint (uniqueconstraintid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 606
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "dinamicfilterscript"
--
CREATE TABLE dinamicfilterscript (
  parentstructrowid binary(16) NOT NULL,
  dinamicfilterscriptid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (dinamicfilterscriptid),
  INDEX parent_dinamicfilterscript (parentstructrowid),
  CONSTRAINT fk_23e26182cc8442d6b7a2d8da0026ebee FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldexpression"
--
CREATE TABLE fieldexpression (
  parentstructrowid binary(16) NOT NULL,
  fieldexpressionid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (fieldexpressionid),
  INDEX parent_fieldexpression (parentstructrowid),
  CONSTRAINT fk_34b08ed0c4b54b9cba59870a4599f52a FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldmenu"
--
CREATE TABLE fieldmenu (
  parentstructrowid binary(16) NOT NULL,
  fieldmenuid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  name varchar(64) DEFAULT NULL,
  caption varchar(80) DEFAULT NULL,
  tooltip varchar(80) DEFAULT NULL,
  actionid binary(16) DEFAULT NULL,
  ismenuitem int(11) DEFAULT NULL,
  istoolbarbutton int(11) DEFAULT NULL,
  hotkey varchar(20) DEFAULT NULL,
  PRIMARY KEY (fieldmenuid),
  INDEX parent_fieldmenu (parentstructrowid),
  CONSTRAINT fk_4189c3e471c2423da56f4e71cb91b52d FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldsrcdef"
--
CREATE TABLE fieldsrcdef (
  parentstructrowid binary(16) NOT NULL,
  fieldsrcdefid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  provider varchar(128) DEFAULT NULL,
  connectionstring varchar(512) DEFAULT NULL,
  datasource varchar(512) DEFAULT NULL,
  idfield varchar(128) DEFAULT NULL,
  briefstring varchar(512) DEFAULT NULL,
  filterstring varchar(512) DEFAULT NULL,
  sortfield varchar(512) DEFAULT NULL,
  descriptionstring text DEFAULT NULL,
  dontshowdialog int(11) DEFAULT NULL,
  PRIMARY KEY (fieldsrcdefid),
  INDEX parent_fieldsrcdef (parentstructrowid),
  CONSTRAINT fk_d3f1af81912c4948a87ddf549ee796e2 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldvalidator"
--
CREATE TABLE fieldvalidator (
  parentstructrowid binary(16) NOT NULL,
  fieldvalidatorid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  target binary(16) DEFAULT NULL,
  code text DEFAULT NULL,
  PRIMARY KEY (fieldvalidatorid),
  INDEX parent_fieldvalidator (parentstructrowid),
  CONSTRAINT fk_b40bbed584c54b0b8679172aa1acdad9 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fldextenders"
--
CREATE TABLE fldextenders (
  parentstructrowid binary(16) NOT NULL,
  fldextendersid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  thename varchar(255) DEFAULT NULL,
  targetplatform binary(16) DEFAULT NULL,
  theobject varchar(255) DEFAULT NULL,
  theconfig varchar(512) DEFAULT NULL,
  PRIMARY KEY (fldextendersid),
  INDEX parent_fldextenders (parentstructrowid),
  CONSTRAINT fk_5d0b0e1a80364b12b08160139558b594 FOREIGN KEY (parentstructrowid)
  REFERENCES field (fieldid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partparammap"
--
CREATE TABLE partparammap (
  parentstructrowid binary(16) NOT NULL,
  partparammapid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  fieldname varchar(255) DEFAULT NULL,
  paramname varchar(80) DEFAULT NULL,
  noedit int(11) DEFAULT NULL,
  PRIMARY KEY (partparammapid),
  INDEX parent_partparammap (parentstructrowid),
  CONSTRAINT fk_f8be6fca595d4f46acdbfb5838a246ca FOREIGN KEY (parentstructrowid)
  REFERENCES partmenu (partmenuid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 5461
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "partview_lnk"
--
CREATE TABLE partview_lnk (
  parentstructrowid binary(16) NOT NULL,
  partview_lnkid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  theview binary(16) DEFAULT NULL,
  thejoinsource binary(16) DEFAULT NULL,
  reftype int(11) DEFAULT NULL,
  thejoindestination binary(16) DEFAULT NULL,
  handjoin varchar(255) DEFAULT NULL,
  seq int(11) DEFAULT NULL,
  PRIMARY KEY (partview_lnkid),
  INDEX parent_partview_lnk (parentstructrowid),
  CONSTRAINT fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61 FOREIGN KEY (parentstructrowid)
  REFERENCES partview (partviewid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "viewcolumn"
--
CREATE TABLE viewcolumn (
  parentstructrowid binary(16) NOT NULL,
  viewcolumnid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  sequence int(11) DEFAULT NULL,
  name varchar(255) DEFAULT NULL,
  the_alias varchar(64) DEFAULT NULL,
  frompart binary(16) DEFAULT NULL,
  field binary(16) DEFAULT NULL,
  aggregation int(11) DEFAULT NULL,
  expression text DEFAULT NULL,
  forcombo int(11) DEFAULT NULL,
  PRIMARY KEY (viewcolumnid),
  INDEX parent_viewcolumn (parentstructrowid),
  CONSTRAINT fk_3bf43d5e0eb54ddb8efa62df3261a272 FOREIGN KEY (parentstructrowid)
  REFERENCES partview (partviewid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
AVG_ROW_LENGTH = 240
CHARACTER SET utf8
COLLATE utf8_general_ci;

--
-- Создать таблицу "fieldparammap"
--
CREATE TABLE fieldparammap (
  parentstructrowid binary(16) NOT NULL,
  fieldparammapid binary(16) NOT NULL,
  changestamp datetime NOT NULL,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  locksessionid binary(16) DEFAULT NULL,
  lockuserid binary(16) DEFAULT NULL,
  securitystyleid binary(16) DEFAULT NULL,
  fieldname varchar(255) DEFAULT NULL,
  paramname varchar(80) DEFAULT NULL,
  noedit int(11) DEFAULT NULL,
  PRIMARY KEY (fieldparammapid),
  INDEX parent_fieldparammap (parentstructrowid),
  CONSTRAINT fk_54752ae806b04ec68daa692e52a0d36c FOREIGN KEY (parentstructrowid)
  REFERENCES fieldmenu (fieldmenuid) ON DELETE CASCADE ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Создать процедуру "arc_chanel_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_brief(
 acursession varchar(38),
 aarc_chanelid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarc_chanelid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from arc_chanel where arc_chanelid=g2b(aarc_chanelid);
 if  aec >0 then
   set abrief=arc_chanel_brief_f(g2b(aarc_chanelid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "arc_chanel_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_client_trigger(
 acursession varchar(38),
 aarc_chanelid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "arc_chanel_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into arc_chanel 
 ( arc_chanelid 
,parentstructrowid
,ch_taype

,ch_param

,ch_on

,msg_crash

,msg_current

,chanelname

,chanelcomment

 ) select 
copymap(acopyaction,b2g(arc_chanelid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,ch_taype

,ch_param

,ch_on

,msg_crash

,msg_current

,chanelname

,chanelcomment

 from arc_chanel
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "arc_chanel_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_delete(
 acursession varchar(38),
 aarc_chanelid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_chanel where arc_chanelid=g2b(aarc_chanelid);
if aec>0 then
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=arc_chanel' result;
    leave body;
  end if;
 call arc_chanel_logger(acursession,aarc_chanelid) ; 
  delete from  arc_chanel 
  where  arc_chanelid = g2b(aarc_chanelid) ;
  delete from num_values where ownerpartname='arc_chanel' and ownerrowid=g2b(aarc_chanelid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_chanel_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from arc_chanel where arc_chanelid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "arc_chanel_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call arc_chanel_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update arc_chanel set lockuserid =auserid ,locksessionid=null  where arc_chanelid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update arc_chanel set lockuserid=null ,locksessionid =acursession  where arc_chanelid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "arc_chanel_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_logger(
 acursession varchar(38),
 aarc_chanelid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "arc_chanel_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from arc_chanel where  arc_chanelid=arowid;
  set aparenttable = 'arc_md';
 end
$$

--
-- Создать процедуру "arc_chanel_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarc_chanelid varchar(38)
,ach_taype varchar(38)/* ??? ?????? *//* ??? ?????? */
,ach_param
 varchar (255)/* ????????? ?????? *//* ????????? ?????? */
,ach_on
 integer/* ????? ??????? *//* ????? ??????? */
,amsg_crash
 integer/* ?????? *//* ?????? */
,amsg_current
 integer/* ???????? *//* ???????? */
,achanelname
 varchar (120)/* ???????? *//* ???????? */
,achanelcomment
 varchar (255)/* ??????????? *//* ??????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_chanel where arc_chanelid=g2b(aarc_chanelid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=arc_chanel' result;
    leave body;
  end if;
 start transaction ; 
 call arc_chanel_logger(acursession,aarc_chanelid) ; 
 update  arc_chanel set changestamp=now() 
,
  ch_taype=g2b(ach_taype)
,
  ch_param=ach_param
,
  ch_on=ach_on
,
  msg_crash=amsg_crash
,
  msg_current=amsg_current
,
  chanelname=achanelname
,
  chanelcomment=achanelcomment
  where  arc_chanelid = g2b(aarc_chanelid) ;


call arc_chanel_client_trigger(acursession,aarc_chanelid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=arc_chanel' result;
    leave body;
  end if;
 start transaction;  
 insert into   arc_chanel
 (  changestamp,arc_chanelid 
,parentstructrowid
,ch_taype

,ch_param

,ch_on

,msg_crash

,msg_current

,chanelname

,chanelcomment

 ) values (now(), g2b(aarc_chanelid) 
,g2b(aparentstructrowid)
,g2b(ach_taype)

,ach_param

,ach_on

,amsg_crash

,amsg_current

,achanelname

,achanelcomment

 ) ;


call arc_chanel_client_trigger(acursession,aarc_chanelid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_chanel_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_chanel_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call arc_chanel_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update arc_chanel set lockuserid =null  where arc_chanelid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update arc_chanel set locksessionid =null  where arc_chanelid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "arc_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call arc_info_copy(acursession,aaction,ainstanceid);
call arc_md_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_info_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_brief(
 acursession varchar(38),
 aarc_infoid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarc_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from arc_info where arc_infoid=g2b(aarc_infoid);
 if  aec >0 then
   set abrief=arc_info_brief_f(g2b(aarc_infoid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "arc_info_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_client_trigger(
 acursession varchar(38),
 aarc_infoid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "arc_info_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into arc_info 
 ( arc_infoid 
,instanceid
,family

,name

,org

,phone

,email

,login

,isadmin

 ) select 
copymap(acopyaction,b2g(arc_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,family

,name

,org

,phone

,email

,login

,isadmin

 from arc_info
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "arc_info_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_delete(
 acursession varchar(38),
 aarc_infoid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_info where arc_infoid=g2b(aarc_infoid);
if aec>0 then
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=arc_info' result;
    leave body;
  end if;
 call arc_info_logger(acursession,aarc_infoid) ; 
  delete from  arc_info 
  where  arc_infoid = g2b(aarc_infoid) ;
  delete from num_values where ownerpartname='arc_info' and ownerrowid=g2b(aarc_infoid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_info_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from arc_info where arc_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "arc_info_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call arc_info_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update arc_info set lockuserid =auserid ,locksessionid=null  where arc_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update arc_info set lockuserid=null ,locksessionid =acursession  where arc_infoid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "arc_info_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_logger(
 acursession varchar(38),
 aarc_infoid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "arc_info_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from arc_info where  arc_infoid=arowid;
 end
$$

--
-- Создать процедуру "arc_info_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarc_infoid varchar(38)
,afamily
 varchar (120)/* ??????? *//* ??????? */
,aname
 varchar (120)/* ??? *//* ??? */
,aorg
 varchar (255)/* ??????????? *//* ??????????? */
,aphone
 varchar (40)/* ??????? *//* ??????? */
,aemail varchar(255)/* e-mail *//* e-mail */
,alogin
 varchar (64)/* ????? *//* ????? */
,aisadmin
 integer/* ????????????? *//* ????????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_info where arc_infoid=g2b(aarc_infoid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=arc_info' result;
    leave body;
  end if;
 start transaction ; 
 call arc_info_logger(acursession,aarc_infoid) ; 
 update  arc_info set changestamp=now() 
,
  family=afamily
,
  name=aname
,
  org=aorg
,
  phone=aphone
,
  email=aemail
,
  login=alogin
,
  isadmin=aisadmin
  where  arc_infoid = g2b(aarc_infoid) ;


call arc_info_client_trigger(acursession,aarc_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=arc_info' result;
    leave body;
  end if;
select count(*) into aec from arc_info where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <arc_info>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   arc_info
 (  changestamp,arc_infoid 
,instanceid
,family

,name

,org

,phone

,email

,login

,isadmin

 ) values (now(), g2b(aarc_infoid) 
,g2b(ainstanceid)
,afamily

,aname

,aorg

,aphone

,aemail

,alogin

,aisadmin

 ) ;


call arc_info_client_trigger(acursession,aarc_infoid);

 call arc_initownership( acursession,ainstanceid);
 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_info_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_info_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call arc_info_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update arc_info set lockuserid =null  where arc_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update arc_info set locksessionid =null  where arc_infoid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "arc_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_initownership(
 acursession varchar(38),
 ainstanceid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     leave body;
  end if;
end
$$

--
-- Создать процедуру "arc_md_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_brief(
 acursession varchar(38),
 aarc_mdid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarc_mdid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from arc_md where arc_mdid=g2b(aarc_mdid);
 if  aec >0 then
   set abrief=arc_md_brief_f(g2b(aarc_mdid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "arc_md_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_client_trigger(
 acursession varchar(38),
 aarc_mdid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "arc_md_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_arc_md cursor for
select arc_mdid from arc_md where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into arc_md 
 ( arc_mdid 
,instanceid
,mymodule

,moduleserial

,name

,deivetype

,theaddress

,master_fio

,roof_no

,pop_no

,power_no

 ) select 
copymap(acopyaction,b2g(arc_mdid)) 
,copymap(acopyaction,b2g(instanceid))
,mymodule

,moduleserial

,name

,deivetype

,theaddress

,master_fio

,roof_no

,pop_no

,power_no

 from arc_md
 where instanceid =g2b( ainstanceid); 
open copy_cursor_arc_md;
  set  fetch_done=false;
fetch copy_cursor_arc_md into aid;
while not fetch_done do 
    call arc_chanel_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_arc_md into aid;
end while;

close copy_cursor_arc_md;
 end
$$

--
-- Создать процедуру "arc_md_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_delete(
 acursession varchar(38),
 aarc_mdid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_md where arc_mdid=g2b(aarc_mdid);
if aec>0 then
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=arc_md' result;
    leave body;
  end if;
 call arc_md_logger(acursession,aarc_mdid) ; 
  delete from  arc_md 
  where  arc_mdid = g2b(aarc_mdid) ;
  delete from num_values where ownerpartname='arc_md' and ownerrowid=g2b(aarc_mdid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_md_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from arc_md where arc_mdid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "arc_md_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call arc_md_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update arc_md set lockuserid =auserid ,locksessionid=null  where arc_mdid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update arc_md set lockuserid=null ,locksessionid =acursession  where arc_mdid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "arc_md_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_logger(
 acursession varchar(38),
 aarc_mdid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "arc_md_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from arc_md where  arc_mdid=arowid;
 end
$$

--
-- Создать процедуру "arc_md_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarc_mdid varchar(38)
,amymodule varchar(38)/* ?????? *//* ?????? */
,amoduleserial
 varchar (20)/* ???????? ????? ?????? *//* ???????? ????? ?????? */
,aname
 varchar (255)/* ???????? *//* ???????? */
,adeivetype
 varchar (255)/* ??? ???????????? *//* ??? ???????????? */
,atheaddress
 varchar (255)/* ????? *//* ????? */
,amaster_fio
 varchar (255)/* ????????????? ???? *//* ????????????? ???? */
,aroof_no
 integer/* ?????? no *//* ?????? no */
,apop_no
 integer/* ???????? no *//* ???????? no */
,apower_no
 integer/* ??????? no *//* ??????? no */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arc_md where arc_mdid=g2b(aarc_mdid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=arc_md' result;
    leave body;
  end if;
 start transaction ; 
 call arc_md_logger(acursession,aarc_mdid) ; 
 update  arc_md set changestamp=now() 
,
  mymodule=g2b(amymodule)
,
  moduleserial=amoduleserial
,
  name=aname
,
  deivetype=adeivetype
,
  theaddress=atheaddress
,
  master_fio=amaster_fio
,
  roof_no=aroof_no
,
  pop_no=apop_no
,
  power_no=apower_no
  where  arc_mdid = g2b(aarc_mdid) ;


call arc_md_client_trigger(acursession,aarc_mdid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'arc.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=arc_md' result;
    leave body;
  end if;
 start transaction;  
 insert into   arc_md
 (  changestamp,arc_mdid 
,instanceid
,mymodule

,moduleserial

,name

,deivetype

,theaddress

,master_fio

,roof_no

,pop_no

,power_no

 ) values (now(), g2b(aarc_mdid) 
,g2b(ainstanceid)
,g2b(amymodule)

,amoduleserial

,aname

,adeivetype

,atheaddress

,amaster_fio

,aroof_no

,apop_no

,apower_no

 ) ;


call arc_md_client_trigger(acursession,aarc_mdid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "arc_md_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arc_md_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call arc_md_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update arc_md set lockuserid =null  where arc_mdid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update arc_md set locksessionid =null  where arc_mdid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "arlog_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call arlog_data_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "arlog_data_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_brief(
 acursession varchar(38),
 aarlog_dataid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarlog_dataid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from arlog_data where arlog_dataid=g2b(aarlog_dataid);
 if  aec >0 then
   set abrief=arlog_data_brief_f(g2b(aarlog_dataid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "arlog_data_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_client_trigger(
 acursession varchar(38),
 aarlog_dataid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "arlog_data_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into arlog_data 
 ( arlog_dataid 
,instanceid
,sms

,chanel

,sendtime

,sendresult

,trynumber

,finished

 ) select 
copymap(acopyaction,b2g(arlog_dataid)) 
,copymap(acopyaction,b2g(instanceid))
,sms

,chanel

,sendtime

,sendresult

,trynumber

,finished

 from arlog_data
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "arlog_data_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_delete(
 acursession varchar(38),
 aarlog_dataid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arlog_data where arlog_dataid=g2b(aarlog_dataid);
if aec>0 then
 select checkoperation( acursession ,'arlog.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=arlog_data' result;
    leave body;
  end if;
 call arlog_data_logger(acursession,aarlog_dataid) ; 
  delete from  arlog_data 
  where  arlog_dataid = g2b(aarlog_dataid) ;
  delete from num_values where ownerpartname='arlog_data' and ownerrowid=g2b(aarlog_dataid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "arlog_data_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from arlog_data where arlog_dataid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "arlog_data_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call arlog_data_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update arlog_data set lockuserid =auserid ,locksessionid=null  where arlog_dataid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update arlog_data set lockuserid=null ,locksessionid =acursession  where arlog_dataid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "arlog_data_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_logger(
 acursession varchar(38),
 aarlog_dataid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "arlog_data_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from arlog_data where  arlog_dataid=arowid;
 end
$$

--
-- Создать процедуру "arlog_data_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarlog_dataid varchar(38)
,asms varchar(38)/* ??? *//* ??? */
,achanel varchar(38)/* ????? *//* ????? */
,asendtime
 datetime/* ????? ??????? *//* ????? ??????? */
,asendresult
 varchar (120)/* ????????? *//* ????????? */
,atrynumber
 integer/* ????? ??????? *//* ????? ??????? */
,afinished
 integer/* ????????? *//* ????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arlog_data where arlog_dataid=g2b(aarlog_dataid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'arlog.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=arlog_data' result;
    leave body;
  end if;
 start transaction ; 
 call arlog_data_logger(acursession,aarlog_dataid) ; 
 update  arlog_data set changestamp=now() 
,
  sms=g2b(asms)
,
  chanel=g2b(achanel)
,
  sendtime=asendtime
,
  sendresult=asendresult
,
  trynumber=atrynumber
,
  finished=afinished
  where  arlog_dataid = g2b(aarlog_dataid) ;


call arlog_data_client_trigger(acursession,aarlog_dataid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'arlog.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=arlog_data' result;
    leave body;
  end if;
 start transaction;  
 insert into   arlog_data
 (  changestamp,arlog_dataid 
,instanceid
,sms

,chanel

,sendtime

,sendresult

,trynumber

,finished

 ) values (now(), g2b(aarlog_dataid) 
,g2b(ainstanceid)
,g2b(asms)

,g2b(achanel)

,asendtime

,asendresult

,atrynumber

,afinished

 ) ;


call arlog_data_client_trigger(acursession,aarlog_dataid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "arlog_data_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arlog_data_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call arlog_data_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update arlog_data set lockuserid =null  where arlog_dataid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update arlog_data set locksessionid =null  where arlog_dataid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_chaneltype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_brief(
 acursession varchar(38),
 aarmd_chaneltypeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmd_chaneltypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armd_chaneltype where armd_chaneltypeid=g2b(aarmd_chaneltypeid);
 if  aec >0 then
   set abrief=armd_chaneltype_brief_f(g2b(aarmd_chaneltypeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armd_chaneltype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_client_trigger(
 acursession varchar(38),
 aarmd_chaneltypeid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armd_chaneltype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armd_chaneltype 
 ( armd_chaneltypeid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(armd_chaneltypeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from armd_chaneltype
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "armd_chaneltype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_delete(
 acursession varchar(38),
 aarmd_chaneltypeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_chaneltype where armd_chaneltypeid=g2b(aarmd_chaneltypeid);
if aec>0 then
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armd_chaneltype' result;
    leave body;
  end if;
 call armd_chaneltype_logger(acursession,aarmd_chaneltypeid) ; 
  delete from  armd_chaneltype 
  where  armd_chaneltypeid = g2b(aarmd_chaneltypeid) ;
  delete from num_values where ownerpartname='armd_chaneltype' and ownerrowid=g2b(aarmd_chaneltypeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_chaneltype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armd_chaneltype where armd_chaneltypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armd_chaneltype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armd_chaneltype_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armd_chaneltype set lockuserid =auserid ,locksessionid=null  where armd_chaneltypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armd_chaneltype set lockuserid=null ,locksessionid =acursession  where armd_chaneltypeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_chaneltype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_logger(
 acursession varchar(38),
 aarmd_chaneltypeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armd_chaneltype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armd_chaneltype where  armd_chaneltypeid=arowid;
 end
$$

--
-- Создать процедуру "armd_chaneltype_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmd_chaneltypeid varchar(38)
,aname
 varchar (32)/* ???????? ?????? *//* ???????? ?????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_chaneltype where armd_chaneltypeid=g2b(aarmd_chaneltypeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armd_chaneltype' result;
    leave body;
  end if;
 start transaction ; 
 call armd_chaneltype_logger(acursession,aarmd_chaneltypeid) ; 
 update  armd_chaneltype set changestamp=now() 
,
  name=aname
  where  armd_chaneltypeid = g2b(aarmd_chaneltypeid) ;


call armd_chaneltype_client_trigger(acursession,aarmd_chaneltypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armd_chaneltype' result;
    leave body;
  end if;
 start transaction;  
 insert into   armd_chaneltype
 (  changestamp,armd_chaneltypeid 
,instanceid
,name

 ) values (now(), g2b(aarmd_chaneltypeid) 
,g2b(ainstanceid)
,aname

 ) ;


call armd_chaneltype_client_trigger(acursession,aarmd_chaneltypeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_chaneltype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_chaneltype_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armd_chaneltype_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armd_chaneltype set lockuserid =null  where armd_chaneltypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armd_chaneltype set locksessionid =null  where armd_chaneltypeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call armd_type_copy(acursession,aaction,ainstanceid);
call armd_chaneltype_copy(acursession,aaction,ainstanceid);
call armd_info_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_info_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_brief(
 acursession varchar(38),
 aarmd_infoid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmd_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armd_info where armd_infoid=g2b(aarmd_infoid);
 if  aec >0 then
   set abrief=armd_info_brief_f(g2b(aarmd_infoid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armd_info_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_client_trigger(
 acursession varchar(38),
 aarmd_infoid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armd_info_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armd_info 
 ( armd_infoid 
,instanceid
,moduletype

,serialno

,makedate

,phone

,roof_no

,pop_no

,power_no

 ) select 
copymap(acopyaction,b2g(armd_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,moduletype

,serialno

,makedate

,phone

,roof_no

,pop_no

,power_no

 from armd_info
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "armd_info_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_delete(
 acursession varchar(38),
 aarmd_infoid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_info where armd_infoid=g2b(aarmd_infoid);
if aec>0 then
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armd_info' result;
    leave body;
  end if;
 call armd_info_logger(acursession,aarmd_infoid) ; 
  delete from  armd_info 
  where  armd_infoid = g2b(aarmd_infoid) ;
  delete from num_values where ownerpartname='armd_info' and ownerrowid=g2b(aarmd_infoid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_info_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armd_info where armd_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armd_info_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armd_info_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armd_info set lockuserid =auserid ,locksessionid=null  where armd_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armd_info set lockuserid=null ,locksessionid =acursession  where armd_infoid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_info_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_logger(
 acursession varchar(38),
 aarmd_infoid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armd_info_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armd_info where  armd_infoid=arowid;
 end
$$

--
-- Создать процедуру "armd_info_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmd_infoid varchar(38)
,amoduletype varchar(38)/* ?????? *//* ?????? */
,aserialno
 varchar (20)/* ???????? ????? *//* ???????? ????? */
,amakedate
 date/* ???? ???????????? *//* ???? ???????????? */
,aphone
 varchar (64)/* ????? ???????? *//* ????? ???????? */
,aroof_no
 integer/* ?????? no *//* ?????? no */
,apop_no
 integer/* ???????? no *//* ???????? no */
,apower_no
 integer/* ??????? no *//* ??????? no */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_info where armd_infoid=g2b(aarmd_infoid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armd_info' result;
    leave body;
  end if;
 start transaction ; 
 call armd_info_logger(acursession,aarmd_infoid) ; 
 update  armd_info set changestamp=now() 
,
  moduletype=g2b(amoduletype)
,
  serialno=aserialno
,
  makedate=amakedate
,
  phone=aphone
,
  roof_no=aroof_no
,
  pop_no=apop_no
,
  power_no=apower_no
  where  armd_infoid = g2b(aarmd_infoid) ;


call armd_info_client_trigger(acursession,aarmd_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armd_info' result;
    leave body;
  end if;
 start transaction;  
 insert into   armd_info
 (  changestamp,armd_infoid 
,instanceid
,moduletype

,serialno

,makedate

,phone

,roof_no

,pop_no

,power_no

 ) values (now(), g2b(aarmd_infoid) 
,g2b(ainstanceid)
,g2b(amoduletype)

,aserialno

,amakedate

,aphone

,aroof_no

,apop_no

,apower_no

 ) ;


call armd_info_client_trigger(acursession,aarmd_infoid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_info_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_info_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armd_info_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armd_info set lockuserid =null  where armd_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armd_info set locksessionid =null  where armd_infoid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_type_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_brief(
 acursession varchar(38),
 aarmd_typeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmd_typeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armd_type where armd_typeid=g2b(aarmd_typeid);
 if  aec >0 then
   set abrief=armd_type_brief_f(g2b(aarmd_typeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armd_type_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_client_trigger(
 acursession varchar(38),
 aarmd_typeid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armd_type_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armd_type 
 ( armd_typeid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(armd_typeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from armd_type
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "armd_type_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_delete(
 acursession varchar(38),
 aarmd_typeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_type where armd_typeid=g2b(aarmd_typeid);
if aec>0 then
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armd_type' result;
    leave body;
  end if;
 call armd_type_logger(acursession,aarmd_typeid) ; 
  delete from  armd_type 
  where  armd_typeid = g2b(aarmd_typeid) ;
  delete from num_values where ownerpartname='armd_type' and ownerrowid=g2b(aarmd_typeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_type_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armd_type where armd_typeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armd_type_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armd_type_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armd_type set lockuserid =auserid ,locksessionid=null  where armd_typeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armd_type set lockuserid=null ,locksessionid =acursession  where armd_typeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armd_type_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_logger(
 acursession varchar(38),
 aarmd_typeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armd_type_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armd_type where  armd_typeid=arowid;
 end
$$

--
-- Создать процедуру "armd_type_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmd_typeid varchar(38)
,aname
 varchar (32)/* ????????  ???? *//* ????????  ???? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armd_type where armd_typeid=g2b(aarmd_typeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armd_type' result;
    leave body;
  end if;
 start transaction ; 
 call armd_type_logger(acursession,aarmd_typeid) ; 
 update  armd_type set changestamp=now() 
,
  name=aname
  where  armd_typeid = g2b(aarmd_typeid) ;


call armd_type_client_trigger(acursession,aarmd_typeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'armd.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armd_type' result;
    leave body;
  end if;
 start transaction;  
 insert into   armd_type
 (  changestamp,armd_typeid 
,instanceid
,name

 ) values (now(), g2b(aarmd_typeid) 
,g2b(ainstanceid)
,aname

 ) ;


call armd_type_client_trigger(acursession,aarmd_typeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armd_type_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armd_type_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armd_type_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armd_type set lockuserid =null  where armd_typeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armd_type set locksessionid =null  where armd_typeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjournal_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_brief(
 acursession varchar(38),
 aarmjournalid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjournalid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
 if  aec >0 then
   set abrief=armjournal_brief_f(g2b(aarmjournalid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armjournal_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_client_trigger(
 acursession varchar(38),
 aARMJournalid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armjournal_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_armjournal cursor for
select armjournalid from armjournal where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjournal 
 ( armjournalid 
,instanceid
,thejournal

 ) select 
copymap(acopyaction,b2g(armjournalid)) 
,copymap(acopyaction,b2g(instanceid))
,thejournal

 from armjournal
 where instanceid =g2b( ainstanceid); 
open copy_cursor_armjournal;
  set  fetch_done=false;
fetch copy_cursor_armjournal into aid;
while not fetch_done do 
    call armjrnlrep_copy(acursession,acopyaction,ainstanceid,aid);
    call armjrnlrun_copy(acursession,acopyaction,ainstanceid,aid);
    call armjrnladd_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_armjournal into aid;
end while;

close copy_cursor_armjournal;
 end
$$

--
-- Создать процедуру "armjournal_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_delete(
 acursession varchar(38),
 aarmjournalid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armjournal' result;
    leave body;
  end if;
 call armjournal_logger(acursession,aarmjournalid) ; 
  delete from  armjournal 
  where  armjournalid = g2b(aarmjournalid) ;
  delete from num_values where ownerpartname='armjournal' and ownerrowid=g2b(aarmjournalid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armjournal_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjournal where armjournalid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armjournal_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjournal_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjournal set lockuserid =auserid ,locksessionid=null  where armjournalid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjournal set lockuserid=null ,locksessionid =acursession  where armjournalid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjournal_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_logger(
 acursession varchar(38),
 aarmjournalid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armjournal_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armjournal where  armjournalid=arowid;
 end
$$

--
-- Создать процедуру "armjournal_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmjournalid varchar(38)
,athejournal varchar(38)/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjournal where armjournalid=g2b(aarmjournalid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armjournal' result;
    leave body;
  end if;
 start transaction ; 
 call armjournal_logger(acursession,aarmjournalid) ; 
 update  armjournal set changestamp=now() 
,
  thejournal=g2b(athejournal)
  where  armjournalid = g2b(aarmjournalid) ;


call armjournal_client_trigger(acursession,aarmjournalid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armjournal' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjournal
 (  changestamp,armjournalid 
,instanceid
,thejournal

 ) values (now(), g2b(aarmjournalid) 
,g2b(ainstanceid)
,g2b(athejournal)

 ) ;


call armjournal_client_trigger(acursession,aarmjournalid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armjournal_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjournal_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjournal_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjournal set lockuserid =null  where armjournalid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjournal set locksessionid =null  where armjournalid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnladd_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_brief(
 acursession varchar(38),
 aarmjrnladdid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnladdid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
 if  aec >0 then
   set abrief=armjrnladd_brief_f(g2b(aarmjrnladdid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armjrnladd_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_client_trigger(
 acursession varchar(38),
 aARMJRNLADDid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armjrnladd_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnladd 
 ( armjrnladdid 
,parentstructrowid
,name

,theextention

 ) select 
copymap(acopyaction,b2g(armjrnladdid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,theextention

 from armjrnladd
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "armjrnladd_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_delete(
 acursession varchar(38),
 aarmjrnladdid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armjrnladd' result;
    leave body;
  end if;
 call armjrnladd_logger(acursession,aarmjrnladdid) ; 
  delete from  armjrnladd 
  where  armjrnladdid = g2b(aarmjrnladdid) ;
  delete from num_values where ownerpartname='armjrnladd' and ownerrowid=g2b(aarmjrnladdid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnladd_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnladd where armjrnladdid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armjrnladd_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnladd_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnladd set lockuserid =auserid ,locksessionid=null  where armjrnladdid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnladd set lockuserid=null ,locksessionid =acursession  where armjrnladdid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnladd_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_logger(
 acursession varchar(38),
 aarmjrnladdid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armjrnladd_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnladd where  armjrnladdid=arowid;
  set aparenttable = 'armjournal';
 end
$$

--
-- Создать процедуру "armjrnladd_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnladdid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,atheextention varchar(38)/* ?????????? *//* ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnladd where armjrnladdid=g2b(aarmjrnladdid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armjrnladd' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnladd_logger(acursession,aarmjrnladdid) ; 
 update  armjrnladd set changestamp=now() 
,
  name=aname
,
  theextention=g2b(atheextention)
  where  armjrnladdid = g2b(aarmjrnladdid) ;


call armjrnladd_client_trigger(acursession,aarmjrnladdid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armjrnladd' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnladd
 (  changestamp,armjrnladdid 
,parentstructrowid
,name

,theextention

 ) values (now(), g2b(aarmjrnladdid) 
,g2b(aparentstructrowid)
,aname

,g2b(atheextention)

 ) ;


call armjrnladd_client_trigger(acursession,aarmjrnladdid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnladd_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnladd_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnladd_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnladd set lockuserid =null  where armjrnladdid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnladd set locksessionid =null  where armjrnladdid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnlrep_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_brief(
 acursession varchar(38),
 aarmjrnlrepid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnlrepid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
 if  aec >0 then
   set abrief=armjrnlrep_brief_f(g2b(aarmjrnlrepid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armjrnlrep_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_client_trigger(
 acursession varchar(38),
 aARMJRNLREPid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armjrnlrep_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnlrep 
 ( armjrnlrepid 
,parentstructrowid
,repname

,thereport

 ) select 
copymap(acopyaction,b2g(armjrnlrepid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,repname

,thereport

 from armjrnlrep
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "armjrnlrep_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_delete(
 acursession varchar(38),
 aarmjrnlrepid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armjrnlrep' result;
    leave body;
  end if;
 call armjrnlrep_logger(acursession,aarmjrnlrepid) ; 
  delete from  armjrnlrep 
  where  armjrnlrepid = g2b(aarmjrnlrepid) ;
  delete from num_values where ownerpartname='armjrnlrep' and ownerrowid=g2b(aarmjrnlrepid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnlrep_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnlrep where armjrnlrepid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armjrnlrep_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnlrep_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnlrep set lockuserid =auserid ,locksessionid=null  where armjrnlrepid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnlrep set lockuserid=null ,locksessionid =acursession  where armjrnlrepid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnlrep_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_logger(
 acursession varchar(38),
 aarmjrnlrepid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armjrnlrep_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnlrep where  armjrnlrepid=arowid;
  set aparenttable = 'armjournal';
 end
$$

--
-- Создать процедуру "armjrnlrep_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnlrepid varchar(38)
,arepname
 varchar (255)/* ???????? ?????? *//* ???????? ?????? */
,athereport varchar(38)/* ????? *//* ????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrep where armjrnlrepid=g2b(aarmjrnlrepid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armjrnlrep' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnlrep_logger(acursession,aarmjrnlrepid) ; 
 update  armjrnlrep set changestamp=now() 
,
  repname=arepname
,
  thereport=g2b(athereport)
  where  armjrnlrepid = g2b(aarmjrnlrepid) ;


call armjrnlrep_client_trigger(acursession,aarmjrnlrepid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armjrnlrep' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnlrep
 (  changestamp,armjrnlrepid 
,parentstructrowid
,repname

,thereport

 ) values (now(), g2b(aarmjrnlrepid) 
,g2b(aparentstructrowid)
,arepname

,g2b(athereport)

 ) ;


call armjrnlrep_client_trigger(acursession,aarmjrnlrepid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnlrep_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrep_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnlrep_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnlrep set lockuserid =null  where armjrnlrepid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnlrep set locksessionid =null  where armjrnlrepid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnlrun_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_brief(
 acursession varchar(38),
 aarmjrnlrunid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmjrnlrunid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
 if  aec >0 then
   set abrief=armjrnlrun_brief_f(g2b(aarmjrnlrunid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armjrnlrun_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_client_trigger(
 acursession varchar(38),
 aARMJRNLRUNid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armjrnlrun_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armjrnlrun 
 ( armjrnlrunid 
,parentstructrowid
,name

,theextention

 ) select 
copymap(acopyaction,b2g(armjrnlrunid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,theextention

 from armjrnlrun
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "armjrnlrun_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_delete(
 acursession varchar(38),
 aarmjrnlrunid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armjrnlrun' result;
    leave body;
  end if;
 call armjrnlrun_logger(acursession,aarmjrnlrunid) ; 
  delete from  armjrnlrun 
  where  armjrnlrunid = g2b(aarmjrnlrunid) ;
  delete from num_values where ownerpartname='armjrnlrun' and ownerrowid=g2b(aarmjrnlrunid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnlrun_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armjrnlrun where armjrnlrunid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armjrnlrun_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armjrnlrun_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armjrnlrun set lockuserid =auserid ,locksessionid=null  where armjrnlrunid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armjrnlrun set lockuserid=null ,locksessionid =acursession  where armjrnlrunid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armjrnlrun_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_logger(
 acursession varchar(38),
 aarmjrnlrunid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armjrnlrun_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from armjrnlrun where  armjrnlrunid=arowid;
  set aparenttable = 'armjournal';
 end
$$

--
-- Создать процедуру "armjrnlrun_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aarmjrnlrunid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,atheextention varchar(38)/* ?????????? *//* ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armjrnlrun where armjrnlrunid=g2b(aarmjrnlrunid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armjrnlrun' result;
    leave body;
  end if;
 start transaction ; 
 call armjrnlrun_logger(acursession,aarmjrnlrunid) ; 
 update  armjrnlrun set changestamp=now() 
,
  name=aname
,
  theextention=g2b(atheextention)
  where  armjrnlrunid = g2b(aarmjrnlrunid) ;


call armjrnlrun_client_trigger(acursession,aarmjrnlrunid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armjrnlrun' result;
    leave body;
  end if;
 start transaction;  
 insert into   armjrnlrun
 (  changestamp,armjrnlrunid 
,parentstructrowid
,name

,theextention

 ) values (now(), g2b(aarmjrnlrunid) 
,g2b(aparentstructrowid)
,aname

,g2b(atheextention)

 ) ;


call armjrnlrun_client_trigger(acursession,aarmjrnlrunid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armjrnlrun_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armjrnlrun_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armjrnlrun_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armjrnlrun set lockuserid =null  where armjrnlrunid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armjrnlrun set locksessionid =null  where armjrnlrunid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "armtypes_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_brief(
 acursession varchar(38),
 aarmtypesid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarmtypesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
 if  aec >0 then
   set abrief=armtypes_brief_f(g2b(aarmtypesid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "armtypes_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_client_trigger(
 acursession varchar(38),
 aARMTypesid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "armtypes_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into armtypes 
 ( armtypesid 
,instanceid
,thedocumenttype

 ) select 
copymap(acopyaction,b2g(armtypesid)) 
,copymap(acopyaction,b2g(instanceid))
,thedocumenttype

 from armtypes
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "armtypes_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_delete(
 acursession varchar(38),
 aarmtypesid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=armtypes' result;
    leave body;
  end if;
 call armtypes_logger(acursession,aarmtypesid) ; 
  delete from  armtypes 
  where  armtypesid = g2b(aarmtypesid) ;
  delete from num_values where ownerpartname='armtypes' and ownerrowid=g2b(aarmtypesid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "armtypes_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from armtypes where armtypesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "armtypes_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call armtypes_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update armtypes set lockuserid =auserid ,locksessionid=null  where armtypesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update armtypes set lockuserid=null ,locksessionid =acursession  where armtypesid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "armtypes_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_logger(
 acursession varchar(38),
 aarmtypesid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "armtypes_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from armtypes where  armtypesid=arowid;
 end
$$

--
-- Создать процедуру "armtypes_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarmtypesid varchar(38)
,athedocumenttype varchar(38)/* ??? ????????? *//* ??? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from armtypes where armtypesid=g2b(aarmtypesid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=armtypes' result;
    leave body;
  end if;
 start transaction ; 
 call armtypes_logger(acursession,aarmtypesid) ; 
 update  armtypes set changestamp=now() 
,
  thedocumenttype=g2b(athedocumenttype)
  where  armtypesid = g2b(aarmtypesid) ;


call armtypes_client_trigger(acursession,aarmtypesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=armtypes' result;
    leave body;
  end if;
 start transaction;  
 insert into   armtypes
 (  changestamp,armtypesid 
,instanceid
,thedocumenttype

 ) values (now(), g2b(aarmtypesid) 
,g2b(ainstanceid)
,g2b(athedocumenttype)

 ) ;


call armtypes_client_trigger(acursession,aarmtypesid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "armtypes_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE armtypes_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call armtypes_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update armtypes set lockuserid =null  where armtypesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update armtypes set locksessionid =null  where armtypesid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "arsms_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call arsms_data_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "arsms_data_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_brief(
 acursession varchar(38),
 aarsms_dataid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aarsms_dataid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from arsms_data where arsms_dataid=g2b(aarsms_dataid);
 if  aec >0 then
   set abrief=arsms_data_brief_f(g2b(aarsms_dataid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "arsms_data_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_client_trigger(
 acursession varchar(38),
 aarsms_dataid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "arsms_data_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into arsms_data 
 ( arsms_dataid 
,instanceid
,smstime

,phone

,serialno

,opercode

,controlcode

,temperature

,pop_ok

,roof_open

,power_ok

 ) select 
copymap(acopyaction,b2g(arsms_dataid)) 
,copymap(acopyaction,b2g(instanceid))
,smstime

,phone

,serialno

,opercode

,controlcode

,temperature

,pop_ok

,roof_open

,power_ok

 from arsms_data
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "arsms_data_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_delete(
 acursession varchar(38),
 aarsms_dataid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arsms_data where arsms_dataid=g2b(aarsms_dataid);
if aec>0 then
 select checkoperation( acursession ,'arsms.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=arsms_data' result;
    leave body;
  end if;
 call arsms_data_logger(acursession,aarsms_dataid) ; 
  delete from  arsms_data 
  where  arsms_dataid = g2b(aarsms_dataid) ;
  delete from num_values where ownerpartname='arsms_data' and ownerrowid=g2b(aarsms_dataid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "arsms_data_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from arsms_data where arsms_dataid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "arsms_data_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call arsms_data_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update arsms_data set lockuserid =auserid ,locksessionid=null  where arsms_dataid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update arsms_data set lockuserid=null ,locksessionid =acursession  where arsms_dataid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "arsms_data_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_logger(
 acursession varchar(38),
 aarsms_dataid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "arsms_data_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from arsms_data where  arsms_dataid=arowid;
 end
$$

--
-- Создать процедуру "arsms_data_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aarsms_dataid varchar(38)
,asmstime
 datetime/* ???? ? ????? ??? *//* ???? ? ????? ??? */
,aphone
 varchar (64)/* ??????? ??????????? *//* ??????? ??????????? */
,aserialno
 varchar (20)/* ???????? ????? *//* ???????? ????? */
,aopercode
 varchar (100)/* ??? ????????? *//* ??? ????????? */
,acontrolcode
 varchar (64)/* ??????????? ??? *//* ??????????? ??? */
,atemperature
 integer/* ??????????? *//* ??????????? */
,apop_ok
 integer/* ????????-????? *//* ????????-????? */
,aroof_open
 integer/* ?????? ??????? *//* ?????? ??????? */
,apower_ok
 integer/* ??????? ? ????? *//* ??????? ? ????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from arsms_data where arsms_dataid=g2b(aarsms_dataid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'arsms.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=arsms_data' result;
    leave body;
  end if;
 start transaction ; 
 call arsms_data_logger(acursession,aarsms_dataid) ; 
 update  arsms_data set changestamp=now() 
,
  smstime=asmstime
,
  phone=aphone
,
  serialno=aserialno
,
  opercode=aopercode
,
  controlcode=acontrolcode
,
  temperature=atemperature
,
  pop_ok=apop_ok
,
  roof_open=aroof_open
,
  power_ok=apower_ok
  where  arsms_dataid = g2b(aarsms_dataid) ;


call arsms_data_client_trigger(acursession,aarsms_dataid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'arsms.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=arsms_data' result;
    leave body;
  end if;
 start transaction;  
 insert into   arsms_data
 (  changestamp,arsms_dataid 
,instanceid
,smstime

,phone

,serialno

,opercode

,controlcode

,temperature

,pop_ok

,roof_open

,power_ok

 ) values (now(), g2b(aarsms_dataid) 
,g2b(ainstanceid)
,asmstime

,aphone

,aserialno

,aopercode

,acontrolcode

,atemperature

,apop_ok

,aroof_open

,apower_ok

 ) ;


call arsms_data_client_trigger(acursession,aarsms_dataid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "arsms_data_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_data_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call arsms_data_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update arsms_data set lockuserid =null  where arsms_dataid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update arsms_data set locksessionid =null  where arsms_dataid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "arsms_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE arsms_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "bpc_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call bpc_info_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpc_info_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_brief(
 acursession varchar(38),
 abpc_infoid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if abpc_infoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
 if  aec >0 then
   set abrief=bpc_info_brief_f(g2b(abpc_infoid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "bpc_info_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_client_trigger(
 acursession varchar(38),
 abpc_infoid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "bpc_info_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into bpc_info 
 ( bpc_infoid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(bpc_infoid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from bpc_info
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "bpc_info_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_delete(
 acursession varchar(38),
 abpc_infoid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
if aec>0 then
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=bpc_info' result;
    leave body;
  end if;
 call bpc_info_logger(acursession,abpc_infoid) ; 
  delete from  bpc_info 
  where  bpc_infoid = g2b(abpc_infoid) ;
  delete from num_values where ownerpartname='bpc_info' and ownerrowid=g2b(abpc_infoid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "bpc_info_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from bpc_info where bpc_infoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "bpc_info_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call bpc_info_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update bpc_info set lockuserid =auserid ,locksessionid=null  where bpc_infoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update bpc_info set lockuserid=null ,locksessionid =acursession  where bpc_infoid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "bpc_info_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_logger(
 acursession varchar(38),
 abpc_infoid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "bpc_info_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from bpc_info where  bpc_infoid=arowid;
 end
$$

--
-- Создать процедуру "bpc_info_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 abpc_infoid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from bpc_info where bpc_infoid=g2b(abpc_infoid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=bpc_info' result;
    leave body;
  end if;
 start transaction ; 
 call bpc_info_logger(acursession,abpc_infoid) ; 
 update  bpc_info set changestamp=now() 
,
  name=aname
  where  bpc_infoid = g2b(abpc_infoid) ;


call bpc_info_client_trigger(acursession,abpc_infoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpc.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=bpc_info' result;
    leave body;
  end if;
select count(*) into aec from bpc_info where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <bpc_info>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   bpc_info
 (  changestamp,bpc_infoid 
,instanceid
,name

 ) values (now(), g2b(abpc_infoid) 
,g2b(ainstanceid)
,aname

 ) ;


call bpc_info_client_trigger(acursession,abpc_infoid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpc_info_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpc_info_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call bpc_info_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update bpc_info set lockuserid =null  where bpc_infoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update bpc_info set locksessionid =null  where bpc_infoid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "bpdi_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpdi_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_int_modules_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpdr_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpdr_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_crole_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bprcfg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bprcfg_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_rcfg_mod_copy(acursession,aaction,ainstanceid);
call iu_rcfg_docmode_copy(acursession,aaction,ainstanceid);
call iu_rcfg_def_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpu_commitfromtemp"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpu_commitfromtemp(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
call iu_u_def_commitfromtemp(acursession,ainstanceid);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpu_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpu_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call iu_u_def_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpu_droptempdata"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpu_droptempdata(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
call iu_u_def_droptempdata(acursession,ainstanceid);
select 'ok' result;
 end
$$

--
-- Создать процедуру "bpu_gettotemp"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE bpu_gettotemp(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
call iu_u_def_gettotemp(acursession,ainstanceid);
select 'ok' result;
 end
$$

--
-- Создать процедуру "constraintfield_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_brief(
 acursession varchar(38),
 aconstraintfieldid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aconstraintfieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
 if  aec >0 then
   set abrief=constraintfield_brief_f(g2b(aconstraintfieldid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "constraintfield_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_client_trigger(
 acursession varchar(38),
 aCONSTRAINTFIELDid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "constraintfield_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into constraintfield 
 ( constraintfieldid 
,parentstructrowid
,thefield

 ) select 
copymap(acopyaction,b2g(constraintfieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thefield

 from constraintfield
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "constraintfield_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_delete(
 acursession varchar(38),
 aconstraintfieldid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=constraintfield' result;
    leave body;
  end if;
 call constraintfield_logger(acursession,aconstraintfieldid) ; 
  delete from  constraintfield 
  where  constraintfieldid = g2b(aconstraintfieldid) ;
  delete from num_values where ownerpartname='constraintfield' and ownerrowid=g2b(aconstraintfieldid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "constraintfield_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from constraintfield where constraintfieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "constraintfield_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call constraintfield_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update constraintfield set lockuserid =auserid ,locksessionid=null  where constraintfieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update constraintfield set lockuserid=null ,locksessionid =acursession  where constraintfieldid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "constraintfield_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_logger(
 acursession varchar(38),
 aconstraintfieldid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "constraintfield_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from constraintfield where  constraintfieldid=arowid;
  set aparenttable = 'uniqueconstraint';
 end
$$

--
-- Создать процедуру "constraintfield_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aconstraintfieldid varchar(38)
,athefield varchar(38)/* ???? *//* ???? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from constraintfield where constraintfieldid=g2b(aconstraintfieldid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=constraintfield' result;
    leave body;
  end if;
 start transaction ; 
 call constraintfield_logger(acursession,aconstraintfieldid) ; 
 update  constraintfield set changestamp=now() 
,
  thefield=g2b(athefield)
  where  constraintfieldid = g2b(aconstraintfieldid) ;


call constraintfield_client_trigger(acursession,aconstraintfieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=constraintfield' result;
    leave body;
  end if;
 start transaction;  
 insert into   constraintfield
 (  changestamp,constraintfieldid 
,parentstructrowid
,thefield

 ) values (now(), g2b(aconstraintfieldid) 
,g2b(aparentstructrowid)
,g2b(athefield)

 ) ;


call constraintfield_client_trigger(acursession,aconstraintfieldid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "constraintfield_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE constraintfield_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call constraintfield_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update constraintfield set lockuserid =null  where constraintfieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update constraintfield set locksessionid =null  where constraintfieldid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "dinamicfilterscript_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_brief(
 acursession varchar(38),
 adinamicfilterscriptid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if adinamicfilterscriptid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
 if  aec >0 then
   set abrief=dinamicfilterscript_brief_f(g2b(adinamicfilterscriptid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "dinamicfilterscript_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_client_trigger(
 acursession varchar(38),
 aDINAMICFILTERSCRIPTid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "dinamicfilterscript_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into dinamicfilterscript 
 ( dinamicfilterscriptid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(dinamicfilterscriptid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from dinamicfilterscript
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "dinamicfilterscript_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_delete(
 acursession varchar(38),
 adinamicfilterscriptid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=dinamicfilterscript' result;
    leave body;
  end if;
 call dinamicfilterscript_logger(acursession,adinamicfilterscriptid) ; 
  delete from  dinamicfilterscript 
  where  dinamicfilterscriptid = g2b(adinamicfilterscriptid) ;
  delete from num_values where ownerpartname='dinamicfilterscript' and ownerrowid=g2b(adinamicfilterscriptid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "dinamicfilterscript_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from dinamicfilterscript where dinamicfilterscriptid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "dinamicfilterscript_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call dinamicfilterscript_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update dinamicfilterscript set lockuserid =auserid ,locksessionid=null  where dinamicfilterscriptid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update dinamicfilterscript set lockuserid=null ,locksessionid =acursession  where dinamicfilterscriptid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "dinamicfilterscript_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_logger(
 acursession varchar(38),
 adinamicfilterscriptid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "dinamicfilterscript_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from dinamicfilterscript where  dinamicfilterscriptid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "dinamicfilterscript_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 adinamicfilterscriptid varchar(38)
,atarget varchar(38)/* ??????? ????????? *//* ??????? ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=g2b(adinamicfilterscriptid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=dinamicfilterscript' result;
    leave body;
  end if;
 start transaction ; 
 call dinamicfilterscript_logger(acursession,adinamicfilterscriptid) ; 
 update  dinamicfilterscript set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  dinamicfilterscriptid = g2b(adinamicfilterscriptid) ;


call dinamicfilterscript_client_trigger(acursession,adinamicfilterscriptid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=dinamicfilterscript' result;
    leave body;
  end if;
 start transaction;  
 insert into   dinamicfilterscript
 (  changestamp,dinamicfilterscriptid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(adinamicfilterscriptid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call dinamicfilterscript_client_trigger(acursession,adinamicfilterscriptid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "dinamicfilterscript_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE dinamicfilterscript_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call dinamicfilterscript_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update dinamicfilterscript set lockuserid =null  where dinamicfilterscriptid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update dinamicfilterscript set locksessionid =null  where dinamicfilterscriptid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "entrypoints_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_brief(
 acursession varchar(38),
 aentrypointsid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aentrypointsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
 if  aec >0 then
   set abrief=entrypoints_brief_f(g2b(aentrypointsid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "entrypoints_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_client_trigger(
 acursession varchar(38),
 aEntryPointsid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "entrypoints_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_entrypoints cursor for
select entrypointsid from entrypoints where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into entrypoints 
 ( entrypointsid 
,instanceid
,parentrowid
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 ) select 
copymap(acopyaction,b2g(entrypointsid)) 
,copymap(acopyaction,b2g(instanceid))
,copymap(acopyaction,b2g(parentrowid))
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 from entrypoints
 where instanceid =g2b( ainstanceid); 
open copy_cursor_entrypoints;
  set  fetch_done=false;
fetch copy_cursor_entrypoints into aid;
while not fetch_done do 
    call epfilterlink_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_entrypoints into aid;
end while;

close copy_cursor_entrypoints;
 end
$$

--
-- Создать процедуру "entrypoints_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_delete(
 acursession varchar(38),
 aentrypointsid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=entrypoints' result;
    leave body;
  end if;
 call entrypoints_logger(acursession,aentrypointsid) ; 
  delete from  entrypoints 
  where  entrypointsid = g2b(aentrypointsid) ;
  delete from num_values where ownerpartname='entrypoints' and ownerrowid=g2b(aentrypointsid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "entrypoints_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from entrypoints where entrypointsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "entrypoints_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call entrypoints_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update entrypoints set lockuserid =auserid ,locksessionid=null  where entrypointsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update entrypoints set lockuserid=null ,locksessionid =acursession  where entrypointsid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "entrypoints_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_logger(
 acursession varchar(38),
 aentrypointsid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "entrypoints_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from entrypoints where  entrypointsid=arowid;
 end
$$

--
-- Создать процедуру "entrypoints_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aentrypointsid varchar(38)
,aparentrowid varchar(38) 
,asequence
 integer/* ?????????????????? *//* ?????????????????? */
,aname
 varchar (38)/* ???????? *//* ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,aastoolbaritem
 integer/* ???????? ? ?????? *//* ???????? ? ?????? */
,aactiontype
 integer/* ??????? ???????? *//* ??????? ???????? */
,athefilter varchar(38)/* ?????? *//* ?????? */
,ajournal varchar(38)/* ?????? *//* ?????? */
,areport varchar(38)/* ????? *//* ????? */
,adocument varchar(38)/* ???????? *//* ???????? */
,amethod varchar(38)/* ????? *//* ????? */
,aiconfile
 varchar (2000)/* ???? ???????? *//* ???? ???????? */
,atheextention varchar(38)/* ?????????? *//* ?????????? */
,aarm varchar(38)/* ??? *//* ??? */
,athecomment
 text/* ?????????? *//* ?????????? */
,aobjecttype varchar(38)/* ??? ????????? *//* ??? ????????? */
,ajournalfixedquery
 text/* ??????????? ? ??????? *//* ??????????? ? ??????? */
,aallowadd
 integer/* ????????? ?????????? *//* ????????? ?????????? */
,aallowedit
 integer/* ????????? ?????????????? *//* ????????? ?????????????? */
,aallowdel
 integer/* ???????? ???????? *//* ???????? ???????? */
,aallowfilter
 integer/* ???????? ?????? *//* ???????? ?????? */
,aallowprint
 integer/* ????????? ?????? *//* ????????? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from entrypoints where entrypointsid=g2b(aentrypointsid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=entrypoints' result;
    leave body;
  end if;
 start transaction ; 
 call entrypoints_logger(acursession,aentrypointsid) ; 
 update  entrypoints set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  astoolbaritem=aastoolbaritem
,
  actiontype=aactiontype
,
  thefilter=g2b(athefilter)
,
  journal=g2b(ajournal)
,
  report=g2b(areport)
,
  document=g2b(adocument)
,
  method=g2b(amethod)
,
  iconfile=aiconfile
,
  theextention=g2b(atheextention)
,
  arm=g2b(aarm)
,
  thecomment=athecomment
,
  objecttype=g2b(aobjecttype)
,
  journalfixedquery=ajournalfixedquery
,
  allowadd=aallowadd
,
  allowedit=aallowedit
,
  allowdel=aallowdel
,
  allowfilter=aallowfilter
,
  allowprint=aallowprint
  where  entrypointsid = g2b(aentrypointsid) ;


call entrypoints_client_trigger(acursession,aentrypointsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=entrypoints' result;
    leave body;
  end if;
 start transaction;  
 insert into   entrypoints
 (  changestamp,entrypointsid 
,parentrowid
,instanceid
,sequence

,name

,caption

,astoolbaritem

,actiontype

,thefilter

,journal

,report

,document

,method

,iconfile

,theextention

,arm

,thecomment

,objecttype

,journalfixedquery

,allowadd

,allowedit

,allowdel

,allowfilter

,allowprint

 ) values (now(), g2b(aentrypointsid) 
,g2b(aparentrowid)
,g2b(ainstanceid)
,asequence

,aname

,acaption

,aastoolbaritem

,aactiontype

,g2b(athefilter)

,g2b(ajournal)

,g2b(areport)

,g2b(adocument)

,g2b(amethod)

,aiconfile

,g2b(atheextention)

,g2b(aarm)

,athecomment

,g2b(aobjecttype)

,ajournalfixedquery

,aallowadd

,aallowedit

,aallowdel

,aallowfilter

,aallowprint

 ) ;


call entrypoints_client_trigger(acursession,aentrypointsid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "entrypoints_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE entrypoints_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call entrypoints_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update entrypoints set lockuserid =null  where entrypointsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update entrypoints set locksessionid =null  where entrypointsid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "enumitem_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_brief(
 acursession varchar(38),
 aenumitemid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aenumitemid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
 if  aec >0 then
   set abrief=enumitem_brief_f(g2b(aenumitemid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "enumitem_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_client_trigger(
 acursession varchar(38),
 aENUMITEMid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "enumitem_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into enumitem 
 ( enumitemid 
,parentstructrowid
,name

,namevalue

,nameincode

 ) select 
copymap(acopyaction,b2g(enumitemid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,namevalue

,nameincode

 from enumitem
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "enumitem_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_delete(
 acursession varchar(38),
 aenumitemid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=enumitem' result;
    leave body;
  end if;
 call enumitem_logger(acursession,aenumitemid) ; 
  delete from  enumitem 
  where  enumitemid = g2b(aenumitemid) ;
  delete from num_values where ownerpartname='enumitem' and ownerrowid=g2b(aenumitemid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "enumitem_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from enumitem where enumitemid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "enumitem_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call enumitem_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update enumitem set lockuserid =auserid ,locksessionid=null  where enumitemid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update enumitem set lockuserid=null ,locksessionid =acursession  where enumitemid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "enumitem_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_logger(
 acursession varchar(38),
 aenumitemid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "enumitem_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from enumitem where  enumitemid=arowid;
  set aparenttable = 'fieldtype';
 end
$$

--
-- Создать процедуру "enumitem_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aenumitemid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,anamevalue
 integer/* ???????? *//* ???????? */
,anameincode
 varchar (100)/* ???????? ? ???? *//* ???????? ? ???? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from enumitem where enumitemid=g2b(aenumitemid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=enumitem' result;
    leave body;
  end if;
 start transaction ; 
 call enumitem_logger(acursession,aenumitemid) ; 
 update  enumitem set changestamp=now() 
,
  name=aname
,
  namevalue=anamevalue
,
  nameincode=anameincode
  where  enumitemid = g2b(aenumitemid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and namevalue=anamevalue;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=???????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call enumitem_client_trigger(acursession,aenumitemid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=enumitem' result;
    leave body;
  end if;
 start transaction;  
 insert into   enumitem
 (  changestamp,enumitemid 
,parentstructrowid
,name

,namevalue

,nameincode

 ) values (now(), g2b(aenumitemid) 
,g2b(aparentstructrowid)
,aname

,anamevalue

,anameincode

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and namevalue=anamevalue;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=???????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from enumitem where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call enumitem_client_trigger(acursession,aenumitemid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "enumitem_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE enumitem_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call enumitem_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update enumitem set lockuserid =null  where enumitemid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update enumitem set locksessionid =null  where enumitemid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "epfilterlink_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_brief(
 acursession varchar(38),
 aepfilterlinkid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aepfilterlinkid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
 if  aec >0 then
   set abrief=epfilterlink_brief_f(g2b(aepfilterlinkid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "epfilterlink_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_client_trigger(
 acursession varchar(38),
 aEPFilterLinkid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "epfilterlink_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into epfilterlink 
 ( epfilterlinkid 
,parentstructrowid
,rowsource

,theexpression

,filterfield

 ) select 
copymap(acopyaction,b2g(epfilterlinkid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,rowsource

,theexpression

,filterfield

 from epfilterlink
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "epfilterlink_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_delete(
 acursession varchar(38),
 aepfilterlinkid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=epfilterlink' result;
    leave body;
  end if;
 call epfilterlink_logger(acursession,aepfilterlinkid) ; 
  delete from  epfilterlink 
  where  epfilterlinkid = g2b(aepfilterlinkid) ;
  delete from num_values where ownerpartname='epfilterlink' and ownerrowid=g2b(aepfilterlinkid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "epfilterlink_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from epfilterlink where epfilterlinkid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "epfilterlink_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call epfilterlink_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update epfilterlink set lockuserid =auserid ,locksessionid=null  where epfilterlinkid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update epfilterlink set lockuserid=null ,locksessionid =acursession  where epfilterlinkid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "epfilterlink_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_logger(
 acursession varchar(38),
 aepfilterlinkid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "epfilterlink_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from epfilterlink where  epfilterlinkid=arowid;
  set aparenttable = 'entrypoints';
 end
$$

--
-- Создать процедуру "epfilterlink_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aepfilterlinkid varchar(38)
,arowsource
 varchar (255)/* ???????? *//* ???????? */
,atheexpression
 text/* ????????? *//* ????????? */
,afilterfield
 varchar (255)/* ???? ??????? *//* ???? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from epfilterlink where epfilterlinkid=g2b(aepfilterlinkid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=epfilterlink' result;
    leave body;
  end if;
 start transaction ; 
 call epfilterlink_logger(acursession,aepfilterlinkid) ; 
 update  epfilterlink set changestamp=now() 
,
  rowsource=arowsource
,
  theexpression=atheexpression
,
  filterfield=afilterfield
  where  epfilterlinkid = g2b(aepfilterlinkid) ;


call epfilterlink_client_trigger(acursession,aepfilterlinkid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=epfilterlink' result;
    leave body;
  end if;
 start transaction;  
 insert into   epfilterlink
 (  changestamp,epfilterlinkid 
,parentstructrowid
,rowsource

,theexpression

,filterfield

 ) values (now(), g2b(aepfilterlinkid) 
,g2b(aparentstructrowid)
,arowsource

,atheexpression

,afilterfield

 ) ;


call epfilterlink_client_trigger(acursession,aepfilterlinkid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "epfilterlink_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE epfilterlink_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call epfilterlink_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update epfilterlink set lockuserid =null  where epfilterlinkid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update epfilterlink set locksessionid =null  where epfilterlinkid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "extenderinterface_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_brief(
 acursession varchar(38),
 aextenderinterfaceid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aextenderinterfaceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
 if  aec >0 then
   set abrief=extenderinterface_brief_f(g2b(aextenderinterfaceid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "extenderinterface_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_client_trigger(
 acursession varchar(38),
 aExtenderInterfaceid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "extenderinterface_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into extenderinterface 
 ( extenderinterfaceid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) select 
copymap(acopyaction,b2g(extenderinterfaceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thename

,targetplatform

,theobject

,theconfig

 from extenderinterface
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "extenderinterface_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_delete(
 acursession varchar(38),
 aextenderinterfaceid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=extenderinterface' result;
    leave body;
  end if;
 call extenderinterface_logger(acursession,aextenderinterfaceid) ; 
  delete from  extenderinterface 
  where  extenderinterfaceid = g2b(aextenderinterfaceid) ;
  delete from num_values where ownerpartname='extenderinterface' and ownerrowid=g2b(aextenderinterfaceid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "extenderinterface_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from extenderinterface where extenderinterfaceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "extenderinterface_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call extenderinterface_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update extenderinterface set lockuserid =auserid ,locksessionid=null  where extenderinterfaceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update extenderinterface set lockuserid=null ,locksessionid =acursession  where extenderinterfaceid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "extenderinterface_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_logger(
 acursession varchar(38),
 aextenderinterfaceid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "extenderinterface_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from extenderinterface where  extenderinterfaceid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "extenderinterface_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aextenderinterfaceid varchar(38)
,athename
 varchar (255)/* ???????? *//* ???????? */
,atargetplatform varchar(38)/* ??????? ????????? *//* ??????? ????????? */
,atheobject
 varchar (255)/* ?????? *//* ?????? */
,atheconfig
 varchar (512)/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from extenderinterface where extenderinterfaceid=g2b(aextenderinterfaceid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=extenderinterface' result;
    leave body;
  end if;
 start transaction ; 
 call extenderinterface_logger(acursession,aextenderinterfaceid) ; 
 update  extenderinterface set changestamp=now() 
,
  thename=athename
,
  targetplatform=g2b(atargetplatform)
,
  theobject=atheobject
,
  theconfig=atheconfig
  where  extenderinterfaceid = g2b(aextenderinterfaceid) ;


call extenderinterface_client_trigger(acursession,aextenderinterfaceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=extenderinterface' result;
    leave body;
  end if;
 start transaction;  
 insert into   extenderinterface
 (  changestamp,extenderinterfaceid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) values (now(), g2b(aextenderinterfaceid) 
,g2b(aparentstructrowid)
,athename

,g2b(atargetplatform)

,atheobject

,atheconfig

 ) ;


call extenderinterface_client_trigger(acursession,aextenderinterfaceid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "extenderinterface_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE extenderinterface_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call extenderinterface_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update extenderinterface set lockuserid =null  where extenderinterfaceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update extenderinterface set locksessionid =null  where extenderinterfaceid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldexpression_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_brief(
 acursession varchar(38),
 afieldexpressionid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldexpressionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
 if  aec >0 then
   set abrief=fieldexpression_brief_f(g2b(afieldexpressionid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldexpression_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_client_trigger(
 acursession varchar(38),
 aFIELDEXPRESSIONid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldexpression_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldexpression 
 ( fieldexpressionid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(fieldexpressionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from fieldexpression
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldexpression_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_delete(
 acursession varchar(38),
 afieldexpressionid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldexpression' result;
    leave body;
  end if;
 call fieldexpression_logger(acursession,afieldexpressionid) ; 
  delete from  fieldexpression 
  where  fieldexpressionid = g2b(afieldexpressionid) ;
  delete from num_values where ownerpartname='fieldexpression' and ownerrowid=g2b(afieldexpressionid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldexpression_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldexpression where fieldexpressionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldexpression_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldexpression_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldexpression set lockuserid =auserid ,locksessionid=null  where fieldexpressionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldexpression set lockuserid=null ,locksessionid =acursession  where fieldexpressionid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldexpression_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_logger(
 acursession varchar(38),
 afieldexpressionid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldexpression_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldexpression where  fieldexpressionid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "fieldexpression_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldexpressionid varchar(38)
,atarget varchar(38)/* ????????? *//* ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldexpression where fieldexpressionid=g2b(afieldexpressionid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldexpression' result;
    leave body;
  end if;
 start transaction ; 
 call fieldexpression_logger(acursession,afieldexpressionid) ; 
 update  fieldexpression set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  fieldexpressionid = g2b(afieldexpressionid) ;


call fieldexpression_client_trigger(acursession,afieldexpressionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldexpression' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldexpression
 (  changestamp,fieldexpressionid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(afieldexpressionid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call fieldexpression_client_trigger(acursession,afieldexpressionid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldexpression_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldexpression_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldexpression_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldexpression set lockuserid =null  where fieldexpressionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldexpression set locksessionid =null  where fieldexpressionid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldmenu_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_brief(
 acursession varchar(38),
 afieldmenuid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldmenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
 if  aec >0 then
   set abrief=fieldmenu_brief_f(g2b(afieldmenuid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldmenu_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_client_trigger(
 acursession varchar(38),
 aFIELDMENUid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldmenu_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_fieldmenu cursor for
select fieldmenuid from fieldmenu where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldmenu 
 ( fieldmenuid 
,parentstructrowid
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(fieldmenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 from fieldmenu
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_fieldmenu;
  set  fetch_done=false;
fetch copy_cursor_fieldmenu into aid;
while not fetch_done do 
    call fieldparammap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_fieldmenu into aid;
end while;

close copy_cursor_fieldmenu;
 end
$$

--
-- Создать процедуру "fieldmenu_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_delete(
 acursession varchar(38),
 afieldmenuid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldmenu' result;
    leave body;
  end if;
 call fieldmenu_logger(acursession,afieldmenuid) ; 
  delete from  fieldmenu 
  where  fieldmenuid = g2b(afieldmenuid) ;
  delete from num_values where ownerpartname='fieldmenu' and ownerrowid=g2b(afieldmenuid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldmenu_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldmenu where fieldmenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldmenu_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldmenu_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldmenu set lockuserid =auserid ,locksessionid=null  where fieldmenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldmenu set lockuserid=null ,locksessionid =acursession  where fieldmenuid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldmenu_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_logger(
 acursession varchar(38),
 afieldmenuid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldmenu_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldmenu where  fieldmenuid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "fieldmenu_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldmenuid varchar(38)
,aname
 varchar (64)/* ???????? *//* ???????? */
,acaption
 varchar (80)/* ????????? *//* ????????? */
,atooltip
 varchar (80)/* ????????? *//* ????????? */
,aactionid varchar(38)/* ????????????? ??????????? ?????? *//* ????????????? ??????????? ?????? */
,aismenuitem
 integer/* ? ???? *//* ? ???? */
,aistoolbarbutton
 integer/* ? ?????? *//* ? ?????? */
,ahotkey
 varchar (20)/* ??????? ??????? *//* ??????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldmenu where fieldmenuid=g2b(afieldmenuid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldmenu' result;
    leave body;
  end if;
 start transaction ; 
 call fieldmenu_logger(acursession,afieldmenuid) ; 
 update  fieldmenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  actionid=g2b(aactionid)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  fieldmenuid = g2b(afieldmenuid) ;


call fieldmenu_client_trigger(acursession,afieldmenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldmenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldmenu
 (  changestamp,fieldmenuid 
,parentstructrowid
,name

,caption

,tooltip

,actionid

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(afieldmenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(aactionid)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call fieldmenu_client_trigger(acursession,afieldmenuid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldmenu_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldmenu_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldmenu_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldmenu set lockuserid =null  where fieldmenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldmenu set locksessionid =null  where fieldmenuid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldparammap_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_brief(
 acursession varchar(38),
 afieldparammapid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldparammapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
 if  aec >0 then
   set abrief=fieldparammap_brief_f(g2b(afieldparammapid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldparammap_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_client_trigger(
 acursession varchar(38),
 aFIELDPARAMMAPid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldparammap_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldparammap 
 ( fieldparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) select 
copymap(acopyaction,b2g(fieldparammapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,fieldname

,paramname

,noedit

 from fieldparammap
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldparammap_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_delete(
 acursession varchar(38),
 afieldparammapid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldparammap' result;
    leave body;
  end if;
 call fieldparammap_logger(acursession,afieldparammapid) ; 
  delete from  fieldparammap 
  where  fieldparammapid = g2b(afieldparammapid) ;
  delete from num_values where ownerpartname='fieldparammap' and ownerrowid=g2b(afieldparammapid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldparammap_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldparammap where fieldparammapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldparammap_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldparammap_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldparammap set lockuserid =auserid ,locksessionid=null  where fieldparammapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldparammap set lockuserid=null ,locksessionid =acursession  where fieldparammapid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldparammap_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_logger(
 acursession varchar(38),
 afieldparammapid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldparammap_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldparammap where  fieldparammapid=arowid;
  set aparenttable = 'fieldmenu';
 end
$$

--
-- Создать процедуру "fieldparammap_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldparammapid varchar(38)
,afieldname
 varchar (255)/* ???? (????????) *//* ???? (????????) */
,aparamname
 varchar (80)/* ???????? *//* ???????? */
,anoedit
 integer/* ????????????? ???????? ?????? *//* ????????????? ???????? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldparammap where fieldparammapid=g2b(afieldparammapid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldparammap' result;
    leave body;
  end if;
 start transaction ; 
 call fieldparammap_logger(acursession,afieldparammapid) ; 
 update  fieldparammap set changestamp=now() 
,
  fieldname=afieldname
,
  paramname=aparamname
,
  noedit=anoedit
  where  fieldparammapid = g2b(afieldparammapid) ;


call fieldparammap_client_trigger(acursession,afieldparammapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldparammap' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldparammap
 (  changestamp,fieldparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) values (now(), g2b(afieldparammapid) 
,g2b(aparentstructrowid)
,afieldname

,aparamname

,anoedit

 ) ;


call fieldparammap_client_trigger(acursession,afieldparammapid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldparammap_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldparammap_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldparammap_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldparammap set lockuserid =null  where fieldparammapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldparammap set locksessionid =null  where fieldparammapid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldrestriction_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_brief(
 acursession varchar(38),
 afieldrestrictionid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
 if  aec >0 then
   set abrief=fieldrestriction_brief_f(g2b(afieldrestrictionid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldrestriction_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_client_trigger(
 acursession varchar(38),
 aFIELDRESTRICTIONid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldrestriction_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldrestriction 
 ( fieldrestrictionid 
,parentstructrowid
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 ) select 
copymap(acopyaction,b2g(fieldrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 from fieldrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldrestriction_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_delete(
 acursession varchar(38),
 afieldrestrictionid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldrestriction' result;
    leave body;
  end if;
 call fieldrestriction_logger(acursession,afieldrestrictionid) ; 
  delete from  fieldrestriction 
  where  fieldrestrictionid = g2b(afieldrestrictionid) ;
  delete from num_values where ownerpartname='fieldrestriction' and ownerrowid=g2b(afieldrestrictionid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldrestriction_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldrestriction where fieldrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldrestriction_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldrestriction_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldrestriction set lockuserid =auserid ,locksessionid=null  where fieldrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldrestriction set lockuserid=null ,locksessionid =acursession  where fieldrestrictionid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldrestriction_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_logger(
 acursession varchar(38),
 afieldrestrictionid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldrestriction_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldrestriction where  fieldrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end
$$

--
-- Создать процедуру "fieldrestriction_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldrestrictionid varchar(38)
,athepart varchar(38)/* ?????????, ??????? ??????????? ???? *//* ?????????, ??????? ??????????? ???? */
,athefield varchar(38)/* ????, ?? ??????? ????????????? ??????????? *//* ????, ?? ??????? ????????????? ??????????? */
,aallowread
 integer/* ???????? ???????? *//* ???????? ???????? */
,aallowmodify
 integer/* ????????? ??????????? *//* ????????? ??????????? */
,amandatoryfield
 integer/* ???????????? ???? *//* ???????????? ???? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldrestriction where fieldrestrictionid=g2b(afieldrestrictionid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call fieldrestriction_logger(acursession,afieldrestrictionid) ; 
 update  fieldrestriction set changestamp=now() 
,
  thepart=g2b(athepart)
,
  thefield=g2b(athefield)
,
  allowread=aallowread
,
  allowmodify=aallowmodify
,
  mandatoryfield=amandatoryfield
  where  fieldrestrictionid = g2b(afieldrestrictionid) ;


call fieldrestriction_client_trigger(acursession,afieldrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldrestriction
 (  changestamp,fieldrestrictionid 
,parentstructrowid
,thepart

,thefield

,allowread

,allowmodify

,mandatoryfield

 ) values (now(), g2b(afieldrestrictionid) 
,g2b(aparentstructrowid)
,g2b(athepart)

,g2b(athefield)

,aallowread

,aallowmodify

,amandatoryfield

 ) ;


call fieldrestriction_client_trigger(acursession,afieldrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldrestriction_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldrestriction_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldrestriction_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldrestriction set lockuserid =null  where fieldrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldrestriction set locksessionid =null  where fieldrestrictionid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldsrcdef_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_brief(
 acursession varchar(38),
 afieldsrcdefid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldsrcdefid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
 if  aec >0 then
   set abrief=fieldsrcdef_brief_f(g2b(afieldsrcdefid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldsrcdef_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_client_trigger(
 acursession varchar(38),
 aFIELDSRCDEFid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldsrcdef_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldsrcdef 
 ( fieldsrcdefid 
,parentstructrowid
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 ) select 
copymap(acopyaction,b2g(fieldsrcdefid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 from fieldsrcdef
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldsrcdef_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_delete(
 acursession varchar(38),
 afieldsrcdefid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldsrcdef' result;
    leave body;
  end if;
 call fieldsrcdef_logger(acursession,afieldsrcdefid) ; 
  delete from  fieldsrcdef 
  where  fieldsrcdefid = g2b(afieldsrcdefid) ;
  delete from num_values where ownerpartname='fieldsrcdef' and ownerrowid=g2b(afieldsrcdefid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldsrcdef_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldsrcdef where fieldsrcdefid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldsrcdef_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldsrcdef_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldsrcdef set lockuserid =auserid ,locksessionid=null  where fieldsrcdefid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldsrcdef set lockuserid=null ,locksessionid =acursession  where fieldsrcdefid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldsrcdef_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_logger(
 acursession varchar(38),
 afieldsrcdefid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldsrcdef_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldsrcdef where  fieldsrcdefid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "fieldsrcdef_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldsrcdefid varchar(38)
,aprovider
 varchar (128)/* ????????? *//* ????????? */
,aconnectionstring
 varchar (512)/* ?????? ?????????? ? ?????????? *//* ?????? ?????????? ? ?????????? */
,adatasource
 varchar (512)/* ???????? ?????? *//* ???????? ?????? */
,aidfield
 varchar (128)/* id *//* id */
,abriefstring
 varchar (512)/* ???????? ??????? ?????????? *//* ???????? ??????? ?????????? */
,afilterstring
 varchar (512)/* ?????? ????????? ?????? *//* ?????? ????????? ?????? */
,asortfield
 varchar (512)/* ?????????? ????????? ?????? *//* ?????????? ????????? ?????? */
,adescriptionstring
 text/* ?????????? *//* ?????????? */
,adontshowdialog
 integer/* ?? ?????????? ????? ?????? *//* ?? ?????????? ????? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldsrcdef where fieldsrcdefid=g2b(afieldsrcdefid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldsrcdef' result;
    leave body;
  end if;
 start transaction ; 
 call fieldsrcdef_logger(acursession,afieldsrcdefid) ; 
 update  fieldsrcdef set changestamp=now() 
,
  provider=aprovider
,
  connectionstring=aconnectionstring
,
  datasource=adatasource
,
  idfield=aidfield
,
  briefstring=abriefstring
,
  filterstring=afilterstring
,
  sortfield=asortfield
,
  descriptionstring=adescriptionstring
,
  dontshowdialog=adontshowdialog
  where  fieldsrcdefid = g2b(afieldsrcdefid) ;


call fieldsrcdef_client_trigger(acursession,afieldsrcdefid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldsrcdef' result;
    leave body;
  end if;
select count(*) into aec from fieldsrcdef where 
parentstructrowid=g2b(aparentstructrowid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <fieldsrcdef>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   fieldsrcdef
 (  changestamp,fieldsrcdefid 
,parentstructrowid
,provider

,connectionstring

,datasource

,idfield

,briefstring

,filterstring

,sortfield

,descriptionstring

,dontshowdialog

 ) values (now(), g2b(afieldsrcdefid) 
,g2b(aparentstructrowid)
,aprovider

,aconnectionstring

,adatasource

,aidfield

,abriefstring

,afilterstring

,asortfield

,adescriptionstring

,adontshowdialog

 ) ;


call fieldsrcdef_client_trigger(acursession,afieldsrcdefid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldsrcdef_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldsrcdef_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldsrcdef_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldsrcdef set lockuserid =null  where fieldsrcdefid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldsrcdef set locksessionid =null  where fieldsrcdefid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldtypemap_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_brief(
 acursession varchar(38),
 afieldtypemapid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldtypemapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
 if  aec >0 then
   set abrief=fieldtypemap_brief_f(g2b(afieldtypemapid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldtypemap_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_client_trigger(
 acursession varchar(38),
 aFIELDTYPEMAPid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldtypemap_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldtypemap 
 ( fieldtypemapid 
,parentstructrowid
,target

,stoagetype

,fixedsize

 ) select 
copymap(acopyaction,b2g(fieldtypemapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,stoagetype

,fixedsize

 from fieldtypemap
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldtypemap_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_delete(
 acursession varchar(38),
 afieldtypemapid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldtypemap' result;
    leave body;
  end if;
 call fieldtypemap_logger(acursession,afieldtypemapid) ; 
  delete from  fieldtypemap 
  where  fieldtypemapid = g2b(afieldtypemapid) ;
  delete from num_values where ownerpartname='fieldtypemap' and ownerrowid=g2b(afieldtypemapid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldtypemap_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldtypemap where fieldtypemapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldtypemap_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldtypemap_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldtypemap set lockuserid =auserid ,locksessionid=null  where fieldtypemapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldtypemap set lockuserid=null ,locksessionid =acursession  where fieldtypemapid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldtypemap_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_logger(
 acursession varchar(38),
 afieldtypemapid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldtypemap_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldtypemap where  fieldtypemapid=arowid;
  set aparenttable = 'fieldtype';
 end
$$

--
-- Создать процедуру "fieldtypemap_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldtypemapid varchar(38)
,atarget varchar(38)/* ????????? *//* ????????? */
,astoagetype
 varchar (255)/* ??? ???????? *//* ??? ???????? */
,afixedsize
 integer/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtypemap where fieldtypemapid=g2b(afieldtypemapid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldtypemap' result;
    leave body;
  end if;
 start transaction ; 
 call fieldtypemap_logger(acursession,afieldtypemapid) ; 
 update  fieldtypemap set changestamp=now() 
,
  target=g2b(atarget)
,
  stoagetype=astoagetype
,
  fixedsize=afixedsize
  where  fieldtypemapid = g2b(afieldtypemapid) ;


call fieldtypemap_client_trigger(acursession,afieldtypemapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldtypemap' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldtypemap
 (  changestamp,fieldtypemapid 
,parentstructrowid
,target

,stoagetype

,fixedsize

 ) values (now(), g2b(afieldtypemapid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,astoagetype

,afixedsize

 ) ;


call fieldtypemap_client_trigger(acursession,afieldtypemapid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldtypemap_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtypemap_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldtypemap_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldtypemap set lockuserid =null  where fieldtypemapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldtypemap set locksessionid =null  where fieldtypemapid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldtype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_brief(
 acursession varchar(38),
 afieldtypeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldtypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
 if  aec >0 then
   set abrief=fieldtype_brief_f(g2b(afieldtypeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldtype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_client_trigger(
 acursession varchar(38),
 aFIELDTYPEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldtype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_fieldtype cursor for
select fieldtypeid from fieldtype where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldtype 
 ( fieldtypeid 
,instanceid
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 ) select 
copymap(acopyaction,b2g(fieldtypeid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 from fieldtype
 where instanceid =g2b( ainstanceid); 
open copy_cursor_fieldtype;
  set  fetch_done=false;
fetch copy_cursor_fieldtype into aid;
while not fetch_done do 
    call enumitem_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldtypemap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_fieldtype into aid;
end while;

close copy_cursor_fieldtype;
 end
$$

--
-- Создать процедуру "fieldtype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_delete(
 acursession varchar(38),
 afieldtypeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldtype' result;
    leave body;
  end if;
 call fieldtype_logger(acursession,afieldtypeid) ; 
  delete from  fieldtype 
  where  fieldtypeid = g2b(afieldtypeid) ;
  delete from num_values where ownerpartname='fieldtype' and ownerrowid=g2b(afieldtypeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldtype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldtype where fieldtypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldtype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldtype_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldtype set lockuserid =auserid ,locksessionid=null  where fieldtypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldtype set lockuserid=null ,locksessionid =acursession  where fieldtypeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldtype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_logger(
 acursession varchar(38),
 afieldtypeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldtype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from fieldtype where  fieldtypeid=arowid;
 end
$$

--
-- Создать процедуру "fieldtype_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 afieldtypeid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,atypestyle
 integer/* ????????? *//* ????????? */
,athe_comment
 text/* ???????? *//* ???????? */
,aallowsize
 integer/* ????? ?????? *//* ????? ?????? */
,aminimum
 varchar (64)/* ??????? *//* ??????? */
,amaximum
 varchar (64)/* ???????? *//* ???????? */
,aallowlikesearch
 integer/* ????? ?????? *//* ????? ?????? */
,agridsorttype
 integer/* ??????? ?????????? ? ????????? ????????????? *//* ??????? ?????????? ? ????????? ????????????? */
,adelayedsave
 integer/* ?????????? ?????????? *//* ?????????? ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldtype where fieldtypeid=g2b(afieldtypeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldtype' result;
    leave body;
  end if;
 start transaction ; 
 call fieldtype_logger(acursession,afieldtypeid) ; 
 update  fieldtype set changestamp=now() 
,
  name=aname
,
  typestyle=atypestyle
,
  the_comment=athe_comment
,
  allowsize=aallowsize
,
  minimum=aminimum
,
  maximum=amaximum
,
  allowlikesearch=aallowlikesearch
,
  gridsorttype=agridsorttype
,
  delayedsave=adelayedsave
  where  fieldtypeid = g2b(afieldtypeid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from fieldtype where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??? ????' result;
  rollback;
  leave body;
end if;
 -- end if;

call fieldtype_client_trigger(acursession,afieldtypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldtype' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldtype
 (  changestamp,fieldtypeid 
,instanceid
,name

,typestyle

,the_comment

,allowsize

,minimum

,maximum

,allowlikesearch

,gridsorttype

,delayedsave

 ) values (now(), g2b(afieldtypeid) 
,g2b(ainstanceid)
,aname

,atypestyle

,athe_comment

,aallowsize

,aminimum

,amaximum

,aallowlikesearch

,agridsorttype

,adelayedsave

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from fieldtype where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??? ????' result;
  rollback;
  leave body;
end if;
 -- end if;

call fieldtype_client_trigger(acursession,afieldtypeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldtype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldtype_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldtype_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldtype set lockuserid =null  where fieldtypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldtype set locksessionid =null  where fieldtypeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldvalidator_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_brief(
 acursession varchar(38),
 afieldvalidatorid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldvalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
 if  aec >0 then
   set abrief=fieldvalidator_brief_f(g2b(afieldvalidatorid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fieldvalidator_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_client_trigger(
 acursession varchar(38),
 aFIELDVALIDATORid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fieldvalidator_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fieldvalidator 
 ( fieldvalidatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(fieldvalidatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from fieldvalidator
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fieldvalidator_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_delete(
 acursession varchar(38),
 afieldvalidatorid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fieldvalidator' result;
    leave body;
  end if;
 call fieldvalidator_logger(acursession,afieldvalidatorid) ; 
  delete from  fieldvalidator 
  where  fieldvalidatorid = g2b(afieldvalidatorid) ;
  delete from num_values where ownerpartname='fieldvalidator' and ownerrowid=g2b(afieldvalidatorid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldvalidator_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fieldvalidator where fieldvalidatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fieldvalidator_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fieldvalidator_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fieldvalidator set lockuserid =auserid ,locksessionid=null  where fieldvalidatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fieldvalidator set lockuserid=null ,locksessionid =acursession  where fieldvalidatorid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fieldvalidator_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_logger(
 acursession varchar(38),
 afieldvalidatorid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fieldvalidator_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fieldvalidator where  fieldvalidatorid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "fieldvalidator_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldvalidatorid varchar(38)
,atarget varchar(38)/* ????????? *//* ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fieldvalidator where fieldvalidatorid=g2b(afieldvalidatorid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fieldvalidator' result;
    leave body;
  end if;
 start transaction ; 
 call fieldvalidator_logger(acursession,afieldvalidatorid) ; 
 update  fieldvalidator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  fieldvalidatorid = g2b(afieldvalidatorid) ;


call fieldvalidator_client_trigger(acursession,afieldvalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fieldvalidator' result;
    leave body;
  end if;
 start transaction;  
 insert into   fieldvalidator
 (  changestamp,fieldvalidatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(afieldvalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call fieldvalidator_client_trigger(acursession,afieldvalidatorid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fieldvalidator_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fieldvalidator_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fieldvalidator_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fieldvalidator set lockuserid =null  where fieldvalidatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fieldvalidator set locksessionid =null  where fieldvalidatorid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "field_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_brief(
 acursession varchar(38),
 afieldid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from field where fieldid=g2b(afieldid);
 if  aec >0 then
   set abrief=field_brief_f(g2b(afieldid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "field_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_client_trigger(
 acursession varchar(38),
 aFIELDid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "field_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_field cursor for
select fieldid from field where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into field 
 ( fieldid 
,parentstructrowid
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 ) select 
copymap(acopyaction,b2g(fieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 from field
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_field;
  set  fetch_done=false;
fetch copy_cursor_field into aid;
while not fetch_done do 
    call fldextenders_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldsrcdef_copy(acursession,acopyaction,ainstanceid,aid);
    call dinamicfilterscript_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldexpression_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldvalidator_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldmenu_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_field into aid;
end while;

close copy_cursor_field;
 end
$$

--
-- Создать процедуру "field_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_delete(
 acursession varchar(38),
 afieldid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from field where fieldid=g2b(afieldid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=field' result;
    leave body;
  end if;
 call field_logger(acursession,afieldid) ; 
  delete from  field 
  where  fieldid = g2b(afieldid) ;
  delete from num_values where ownerpartname='field' and ownerrowid=g2b(afieldid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "field_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from field where fieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "field_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call field_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update field set lockuserid =auserid ,locksessionid=null  where fieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update field set lockuserid=null ,locksessionid =acursession  where fieldid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "field_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_logger(
 acursession varchar(38),
 afieldid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "field_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from field where  fieldid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "field_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afieldid varchar(38)
,atabname
 varchar (60)/* ??? ??????? *//* ??? ??????? */
,afieldgroupbox
 varchar (60)/* ??? ?????? *//* ??? ?????? */
,asequence
 integer/* ? ?/? *//* ? ?/? */
,acaption
 varchar (80)/* ??????? *//* ??????? */
,aname
 varchar (64)/* ??? ???? *//* ??? ???? */
,afieldtype varchar(38)/* ??? ???? *//* ??? ???? */
,aisbrief
 integer/* ??????? ?????????? *//* ??????? ?????????? */
,aistabbrief
 integer/* ??? ??????????? ? ??????? *//* ??? ??????????? ? ??????? */
,aallownull
 integer/* ????? ???? ?????? *//* ????? ???? ?????? */
,adatasize
 integer/* ?????? ???? *//* ?????? ???? */
,areferencetype
 integer/* ??? ?????? *//* ??? ?????? */
,areftotype varchar(38)/* ?????? ?? ??? *//* ?????? ?? ??? */
,areftopart varchar(38)/* ?????? ?? ?????? *//* ?????? ?? ?????? */
,athestyle
 varchar (50)/* ????? *//* ????? */
,ainternalreference
 integer/* ?????? ? ???????? ??????? *//* ?????? ? ???????? ??????? */
,acreaterefonly
 integer/* ?????? ???????? ??????? *//* ?????? ???????? ??????? */
,aisautonumber
 integer/* ????????????? *//* ????????????? */
,athenumerator varchar(38)/* ????????? *//* ????????? */
,azonetemplate
 varchar (255)/* ?????? ???? ????????? *//* ?????? ???? ????????? */
,anumberdatefield varchar(38)/* ???? ??? ??????? ???? *//* ???? ??? ??????? ???? */
,athecomment
 text/* ???????? *//* ???????? */
,ashablonbrief
 varchar (100)/* ?????? ??? ???????? ??????????? *//* ?????? ??? ???????? ??????????? */
,athenameclass
 varchar (100)/* ??? ?????? ??? ??????? ????? *//* ??? ?????? ??? ??????? ????? */
,athemask
 varchar (64)/* ????? *//* ????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from field where fieldid=g2b(afieldid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=field' result;
    leave body;
  end if;
 start transaction ; 
 call field_logger(acursession,afieldid) ; 
 update  field set changestamp=now() 
,
  tabname=atabname
,
  fieldgroupbox=afieldgroupbox
,
  sequence=asequence
,
  caption=acaption
,
  name=aname
,
  fieldtype=g2b(afieldtype)
,
  isbrief=aisbrief
,
  istabbrief=aistabbrief
,
  allownull=aallownull
,
  datasize=adatasize
,
  referencetype=areferencetype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
,
  thestyle=athestyle
,
  internalreference=ainternalreference
,
  createrefonly=acreaterefonly
,
  isautonumber=aisautonumber
,
  thenumerator=g2b(athenumerator)
,
  zonetemplate=azonetemplate
,
  numberdatefield=g2b(anumberdatefield)
,
  thecomment=athecomment
,
  shablonbrief=ashablonbrief
,
  thenameclass=athenameclass
,
  themask=athemask
  where  fieldid = g2b(afieldid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
 -- end if;

call field_client_trigger(acursession,afieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=field' result;
    leave body;
  end if;
 start transaction;  
 insert into   field
 (  changestamp,fieldid 
,parentstructrowid
,tabname

,fieldgroupbox

,sequence

,caption

,name

,fieldtype

,isbrief

,istabbrief

,allownull

,datasize

,referencetype

,reftotype

,reftopart

,thestyle

,internalreference

,createrefonly

,isautonumber

,thenumerator

,zonetemplate

,numberdatefield

,thecomment

,shablonbrief

,thenameclass

,themask

 ) values (now(), g2b(afieldid) 
,g2b(aparentstructrowid)
,atabname

,afieldgroupbox

,asequence

,acaption

,aname

,g2b(afieldtype)

,aisbrief

,aistabbrief

,aallownull

,adatasize

,areferencetype

,g2b(areftotype)

,g2b(areftopart)

,athestyle

,ainternalreference

,acreaterefonly

,aisautonumber

,g2b(athenumerator)

,azonetemplate

,g2b(anumberdatefield)

,athecomment

,ashablonbrief

,athenameclass

,athemask

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from field where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
 -- end if;

call field_client_trigger(acursession,afieldid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "field_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE field_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call field_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update field set lockuserid =null  where fieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update field set locksessionid =null  where fieldid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fileterfield_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_brief(
 acursession varchar(38),
 afileterfieldid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afileterfieldid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
 if  aec >0 then
   set abrief=fileterfield_brief_f(g2b(afileterfieldid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fileterfield_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_client_trigger(
 acursession varchar(38),
 aFileterFieldid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fileterfield_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fileterfield 
 ( fileterfieldid 
,parentstructrowid
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 ) select 
copymap(acopyaction,b2g(fileterfieldid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 from fileterfield
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fileterfield_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_delete(
 acursession varchar(38),
 afileterfieldid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
if aec>0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fileterfield' result;
    leave body;
  end if;
 call fileterfield_logger(acursession,afileterfieldid) ; 
  delete from  fileterfield 
  where  fileterfieldid = g2b(afileterfieldid) ;
  delete from num_values where ownerpartname='fileterfield' and ownerrowid=g2b(afileterfieldid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fileterfield_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fileterfield where fileterfieldid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fileterfield_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fileterfield_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fileterfield set lockuserid =auserid ,locksessionid=null  where fileterfieldid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fileterfield set lockuserid=null ,locksessionid =acursession  where fileterfieldid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fileterfield_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_logger(
 acursession varchar(38),
 afileterfieldid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fileterfield_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fileterfield where  fileterfieldid=arowid;
  set aparenttable = 'filterfieldgroup';
 end
$$

--
-- Создать процедуру "fileterfield_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afileterfieldid varchar(38)
,asequence
 integer/* ?????????????????? *//* ?????????????????? */
,aname
 varchar (255)/* ???????? *//* ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,afieldtype varchar(38)/* ??? ???? *//* ??? ???? */
,afieldsize
 integer/* ?????? *//* ?????? */
,areftype
 integer/* ??? ?????? *//* ??? ?????? */
,areftotype varchar(38)/* ???, ???? ????????? *//* ???, ???? ????????? */
,areftopart varchar(38)/* ??????, ???? ????????? *//* ??????, ???? ????????? */
,avaluearray
 integer/* ?????? ???????? *//* ?????? ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fileterfield where fileterfieldid=g2b(afileterfieldid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fileterfield' result;
    leave body;
  end if;
 start transaction ; 
 call fileterfield_logger(acursession,afileterfieldid) ; 
 update  fileterfield set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  fieldtype=g2b(afieldtype)
,
  fieldsize=afieldsize
,
  reftype=areftype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
,
  valuearray=avaluearray
  where  fileterfieldid = g2b(afileterfieldid) ;


call fileterfield_client_trigger(acursession,afileterfieldid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fileterfield' result;
    leave body;
  end if;
 start transaction;  
 insert into   fileterfield
 (  changestamp,fileterfieldid 
,parentstructrowid
,sequence

,name

,caption

,fieldtype

,fieldsize

,reftype

,reftotype

,reftopart

,valuearray

 ) values (now(), g2b(afileterfieldid) 
,g2b(aparentstructrowid)
,asequence

,aname

,acaption

,g2b(afieldtype)

,afieldsize

,areftype

,g2b(areftotype)

,g2b(areftopart)

,avaluearray

 ) ;


call fileterfield_client_trigger(acursession,afileterfieldid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fileterfield_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fileterfield_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fileterfield_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fileterfield set lockuserid =null  where fileterfieldid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fileterfield set locksessionid =null  where fileterfieldid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "filterfieldgroup_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_brief(
 acursession varchar(38),
 afilterfieldgroupid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afilterfieldgroupid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
 if  aec >0 then
   set abrief=filterfieldgroup_brief_f(g2b(afilterfieldgroupid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "filterfieldgroup_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_client_trigger(
 acursession varchar(38),
 aFilterFieldGroupid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "filterfieldgroup_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_filterfieldgroup cursor for
select filterfieldgroupid from filterfieldgroup where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into filterfieldgroup 
 ( filterfieldgroupid 
,instanceid
,sequence

,name

,caption

,allowignore

 ) select 
copymap(acopyaction,b2g(filterfieldgroupid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,name

,caption

,allowignore

 from filterfieldgroup
 where instanceid =g2b( ainstanceid); 
open copy_cursor_filterfieldgroup;
  set  fetch_done=false;
fetch copy_cursor_filterfieldgroup into aid;
while not fetch_done do 
    call fileterfield_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_filterfieldgroup into aid;
end while;

close copy_cursor_filterfieldgroup;
 end
$$

--
-- Создать процедуру "filterfieldgroup_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_delete(
 acursession varchar(38),
 afilterfieldgroupid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
if aec>0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=filterfieldgroup' result;
    leave body;
  end if;
 call filterfieldgroup_logger(acursession,afilterfieldgroupid) ; 
  delete from  filterfieldgroup 
  where  filterfieldgroupid = g2b(afilterfieldgroupid) ;
  delete from num_values where ownerpartname='filterfieldgroup' and ownerrowid=g2b(afilterfieldgroupid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "filterfieldgroup_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from filterfieldgroup where filterfieldgroupid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "filterfieldgroup_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call filterfieldgroup_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update filterfieldgroup set lockuserid =auserid ,locksessionid=null  where filterfieldgroupid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update filterfieldgroup set lockuserid=null ,locksessionid =acursession  where filterfieldgroupid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "filterfieldgroup_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_logger(
 acursession varchar(38),
 afilterfieldgroupid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "filterfieldgroup_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from filterfieldgroup where  filterfieldgroupid=arowid;
 end
$$

--
-- Создать процедуру "filterfieldgroup_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 afilterfieldgroupid varchar(38)
,asequence
 integer/* ?????????????????? *//* ?????????????????? */
,aname
 varchar (64)/* ???????? *//* ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,aallowignore
 integer/* ????? ????????? *//* ????? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filterfieldgroup where filterfieldgroupid=g2b(afilterfieldgroupid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=filterfieldgroup' result;
    leave body;
  end if;
 start transaction ; 
 call filterfieldgroup_logger(acursession,afilterfieldgroupid) ; 
 update  filterfieldgroup set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  allowignore=aallowignore
  where  filterfieldgroupid = g2b(afilterfieldgroupid) ;


call filterfieldgroup_client_trigger(acursession,afilterfieldgroupid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=filterfieldgroup' result;
    leave body;
  end if;
 start transaction;  
 insert into   filterfieldgroup
 (  changestamp,filterfieldgroupid 
,instanceid
,sequence

,name

,caption

,allowignore

 ) values (now(), g2b(afilterfieldgroupid) 
,g2b(ainstanceid)
,asequence

,aname

,acaption

,aallowignore

 ) ;


call filterfieldgroup_client_trigger(acursession,afilterfieldgroupid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "filterfieldgroup_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filterfieldgroup_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call filterfieldgroup_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update filterfieldgroup set lockuserid =null  where filterfieldgroupid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update filterfieldgroup set locksessionid =null  where filterfieldgroupid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "filters_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_brief(
 acursession varchar(38),
 afiltersid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afiltersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from filters where filtersid=g2b(afiltersid);
 if  aec >0 then
   set abrief=filters_brief_f(g2b(afiltersid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "filters_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_client_trigger(
 acursession varchar(38),
 aFiltersid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "filters_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into filters 
 ( filtersid 
,instanceid
,name

,thecaption

,thecomment

 ) select 
copymap(acopyaction,b2g(filtersid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,thecaption

,thecomment

 from filters
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "filters_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_delete(
 acursession varchar(38),
 afiltersid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filters where filtersid=g2b(afiltersid);
if aec>0 then
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=filters' result;
    leave body;
  end if;
 call filters_logger(acursession,afiltersid) ; 
  delete from  filters 
  where  filtersid = g2b(afiltersid) ;
  delete from num_values where ownerpartname='filters' and ownerrowid=g2b(afiltersid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "filters_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from filters where filtersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "filters_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call filters_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update filters set lockuserid =auserid ,locksessionid=null  where filtersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update filters set lockuserid=null ,locksessionid =acursession  where filtersid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "filters_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_logger(
 acursession varchar(38),
 afiltersid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "filters_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from filters where  filtersid=arowid;
 end
$$

--
-- Создать процедуру "filters_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 afiltersid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,athecaption
 varchar (80)/* ????????? *//* ????????? */
,athecomment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from filters where filtersid=g2b(afiltersid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=filters' result;
    leave body;
  end if;
 start transaction ; 
 call filters_logger(acursession,afiltersid) ; 
 update  filters set changestamp=now() 
,
  name=aname
,
  thecaption=athecaption
,
  thecomment=athecomment
  where  filtersid = g2b(afiltersid) ;


call filters_client_trigger(acursession,afiltersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzfltr.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=filters' result;
    leave body;
  end if;
select count(*) into aec from filters where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <filters>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   filters
 (  changestamp,filtersid 
,instanceid
,name

,thecaption

,thecomment

 ) values (now(), g2b(afiltersid) 
,g2b(ainstanceid)
,aname

,athecaption

,athecomment

 ) ;


call filters_client_trigger(acursession,afiltersid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "filters_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE filters_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call filters_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update filters set lockuserid =null  where filtersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update filters set locksessionid =null  where filtersid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "fldextenders_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_brief(
 acursession varchar(38),
 afldextendersid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if afldextendersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
 if  aec >0 then
   set abrief=fldextenders_brief_f(g2b(afldextendersid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "fldextenders_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_client_trigger(
 acursession varchar(38),
 aFldExtendersid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "fldextenders_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into fldextenders 
 ( fldextendersid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) select 
copymap(acopyaction,b2g(fldextendersid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thename

,targetplatform

,theobject

,theconfig

 from fldextenders
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "fldextenders_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_delete(
 acursession varchar(38),
 afldextendersid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=fldextenders' result;
    leave body;
  end if;
 call fldextenders_logger(acursession,afldextendersid) ; 
  delete from  fldextenders 
  where  fldextendersid = g2b(afldextendersid) ;
  delete from num_values where ownerpartname='fldextenders' and ownerrowid=g2b(afldextendersid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "fldextenders_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from fldextenders where fldextendersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "fldextenders_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call fldextenders_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update fldextenders set lockuserid =auserid ,locksessionid=null  where fldextendersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update fldextenders set lockuserid=null ,locksessionid =acursession  where fldextendersid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "fldextenders_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_logger(
 acursession varchar(38),
 afldextendersid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "fldextenders_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from fldextenders where  fldextendersid=arowid;
  set aparenttable = 'field';
 end
$$

--
-- Создать процедуру "fldextenders_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 afldextendersid varchar(38)
,athename
 varchar (255)/* ???????? *//* ???????? */
,atargetplatform varchar(38)/* ??????? ????????? *//* ??????? ????????? */
,atheobject
 varchar (255)/* ?????? *//* ?????? */
,atheconfig
 varchar (512)/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from fldextenders where fldextendersid=g2b(afldextendersid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=fldextenders' result;
    leave body;
  end if;
 start transaction ; 
 call fldextenders_logger(acursession,afldextendersid) ; 
 update  fldextenders set changestamp=now() 
,
  thename=athename
,
  targetplatform=g2b(atargetplatform)
,
  theobject=atheobject
,
  theconfig=atheconfig
  where  fldextendersid = g2b(afldextendersid) ;


call fldextenders_client_trigger(acursession,afldextendersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=fldextenders' result;
    leave body;
  end if;
 start transaction;  
 insert into   fldextenders
 (  changestamp,fldextendersid 
,parentstructrowid
,thename

,targetplatform

,theobject

,theconfig

 ) values (now(), g2b(afldextendersid) 
,g2b(aparentstructrowid)
,athename

,g2b(atargetplatform)

,atheobject

,atheconfig

 ) ;


call fldextenders_client_trigger(acursession,afldextendersid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "fldextenders_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE fldextenders_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call fldextenders_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update fldextenders set lockuserid =null  where fldextendersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update fldextenders set locksessionid =null  where fldextendersid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "gencontrols_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_brief(
 acursession varchar(38),
 agencontrolsid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agencontrolsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
 if  aec >0 then
   set abrief=gencontrols_brief_f(g2b(agencontrolsid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "gencontrols_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_client_trigger(
 acursession varchar(38),
 aGENCONTROLSid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "gencontrols_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into gencontrols 
 ( gencontrolsid 
,parentstructrowid
,controlprogid

,controlclassid

,versionmajor

,versionminor

 ) select 
copymap(acopyaction,b2g(gencontrolsid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,controlprogid

,controlclassid

,versionmajor

,versionminor

 from gencontrols
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "gencontrols_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_delete(
 acursession varchar(38),
 agencontrolsid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=gencontrols' result;
    leave body;
  end if;
 call gencontrols_logger(acursession,agencontrolsid) ; 
  delete from  gencontrols 
  where  gencontrolsid = g2b(agencontrolsid) ;
  delete from num_values where ownerpartname='gencontrols' and ownerrowid=g2b(agencontrolsid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "gencontrols_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from gencontrols where gencontrolsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "gencontrols_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call gencontrols_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update gencontrols set lockuserid =auserid ,locksessionid=null  where gencontrolsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update gencontrols set lockuserid=null ,locksessionid =acursession  where gencontrolsid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "gencontrols_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_logger(
 acursession varchar(38),
 agencontrolsid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "gencontrols_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from gencontrols where  gencontrolsid=arowid;
  set aparenttable = 'generator_target';
 end
$$

--
-- Создать процедуру "gencontrols_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agencontrolsid varchar(38)
,acontrolprogid
 varchar (255)/* progid ???????????? ???????? *//* progid ???????????? ???????? */
,acontrolclassid
 varchar (40)/* ????? ???????????????????? *//* ????? ???????????????????? */
,aversionmajor
 integer/* ?????? *//* ?????? */
,aversionminor
 integer/* ????????? *//* ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from gencontrols where gencontrolsid=g2b(agencontrolsid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=gencontrols' result;
    leave body;
  end if;
 start transaction ; 
 call gencontrols_logger(acursession,agencontrolsid) ; 
 update  gencontrols set changestamp=now() 
,
  controlprogid=acontrolprogid
,
  controlclassid=acontrolclassid
,
  versionmajor=aversionmajor
,
  versionminor=aversionminor
  where  gencontrolsid = g2b(agencontrolsid) ;


call gencontrols_client_trigger(acursession,agencontrolsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=gencontrols' result;
    leave body;
  end if;
 start transaction;  
 insert into   gencontrols
 (  changestamp,gencontrolsid 
,parentstructrowid
,controlprogid

,controlclassid

,versionmajor

,versionminor

 ) values (now(), g2b(agencontrolsid) 
,g2b(aparentstructrowid)
,acontrolprogid

,acontrolclassid

,aversionmajor

,aversionminor

 ) ;


call gencontrols_client_trigger(acursession,agencontrolsid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "gencontrols_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE gencontrols_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call gencontrols_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update gencontrols set lockuserid =null  where gencontrolsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update gencontrols set locksessionid =null  where gencontrolsid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "generator_target_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_brief(
 acursession varchar(38),
 agenerator_targetid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenerator_targetid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
 if  aec >0 then
   set abrief=generator_target_brief_f(g2b(agenerator_targetid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "generator_target_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_client_trigger(
 acursession varchar(38),
 aGENERATOR_TARGETid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "generator_target_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_generator_target cursor for
select generator_targetid from generator_target where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into generator_target 
 ( generator_targetid 
,parentstructrowid
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 ) select 
copymap(acopyaction,b2g(generator_targetid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 from generator_target
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_generator_target;
  set  fetch_done=false;
fetch copy_cursor_generator_target into aid;
while not fetch_done do 
    call genreference_copy(acursession,acopyaction,ainstanceid,aid);
    call genmanualcode_copy(acursession,acopyaction,ainstanceid,aid);
    call gencontrols_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_generator_target into aid;
end while;

close copy_cursor_generator_target;
 end
$$

--
-- Создать процедуру "generator_target_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_delete(
 acursession varchar(38),
 agenerator_targetid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=generator_target' result;
    leave body;
  end if;
 call generator_target_logger(acursession,agenerator_targetid) ; 
  delete from  generator_target 
  where  generator_targetid = g2b(agenerator_targetid) ;
  delete from num_values where ownerpartname='generator_target' and ownerrowid=g2b(agenerator_targetid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "generator_target_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from generator_target where generator_targetid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "generator_target_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call generator_target_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update generator_target set lockuserid =auserid ,locksessionid=null  where generator_targetid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update generator_target set lockuserid=null ,locksessionid =acursession  where generator_targetid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "generator_target_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_logger(
 acursession varchar(38),
 agenerator_targetid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "generator_target_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from generator_target where  generator_targetid=arowid;
  set aparenttable = 'genpackage';
 end
$$

--
-- Создать процедуру "generator_target_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenerator_targetid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,atargettype
 integer/* ??? ????????? *//* ??? ????????? */
,aqueuename
 varchar (255)/* ??????? *//* ??????? */
,ageneratorprogid
 varchar (255)/* com ????? *//* com ????? */
,ageneratorstyle
 integer/* ??????? *//* ??????? */
,athedevelopmentenv
 integer/* ????? ?????????? *//* ????? ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from generator_target where generator_targetid=g2b(agenerator_targetid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=generator_target' result;
    leave body;
  end if;
 start transaction ; 
 call generator_target_logger(acursession,agenerator_targetid) ; 
 update  generator_target set changestamp=now() 
,
  name=aname
,
  targettype=atargettype
,
  queuename=aqueuename
,
  generatorprogid=ageneratorprogid
,
  generatorstyle=ageneratorstyle
,
  thedevelopmentenv=athedevelopmentenv
  where  generator_targetid = g2b(agenerator_targetid) ;


call generator_target_client_trigger(acursession,agenerator_targetid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=generator_target' result;
    leave body;
  end if;
 start transaction;  
 insert into   generator_target
 (  changestamp,generator_targetid 
,parentstructrowid
,name

,targettype

,queuename

,generatorprogid

,generatorstyle

,thedevelopmentenv

 ) values (now(), g2b(agenerator_targetid) 
,g2b(aparentstructrowid)
,aname

,atargettype

,aqueuename

,ageneratorprogid

,ageneratorstyle

,athedevelopmentenv

 ) ;


call generator_target_client_trigger(acursession,agenerator_targetid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "generator_target_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE generator_target_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call generator_target_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update generator_target set lockuserid =null  where generator_targetid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update generator_target set locksessionid =null  where generator_targetid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "genmanualcode_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_brief(
 acursession varchar(38),
 agenmanualcodeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenmanualcodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
 if  aec >0 then
   set abrief=genmanualcode_brief_f(g2b(agenmanualcodeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "genmanualcode_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_client_trigger(
 acursession varchar(38),
 aGENMANUALCODEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "genmanualcode_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genmanualcode 
 ( genmanualcodeid 
,parentstructrowid
,name

,the_alias

,code

 ) select 
copymap(acopyaction,b2g(genmanualcodeid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,the_alias

,code

 from genmanualcode
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "genmanualcode_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_delete(
 acursession varchar(38),
 agenmanualcodeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=genmanualcode' result;
    leave body;
  end if;
 call genmanualcode_logger(acursession,agenmanualcodeid) ; 
  delete from  genmanualcode 
  where  genmanualcodeid = g2b(agenmanualcodeid) ;
  delete from num_values where ownerpartname='genmanualcode' and ownerrowid=g2b(agenmanualcodeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "genmanualcode_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genmanualcode where genmanualcodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "genmanualcode_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genmanualcode_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genmanualcode set lockuserid =auserid ,locksessionid=null  where genmanualcodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genmanualcode set lockuserid=null ,locksessionid =acursession  where genmanualcodeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "genmanualcode_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_logger(
 acursession varchar(38),
 agenmanualcodeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "genmanualcode_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from genmanualcode where  genmanualcodeid=arowid;
  set aparenttable = 'generator_target';
 end
$$

--
-- Создать процедуру "genmanualcode_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenmanualcodeid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,athe_alias
 varchar (80)/* ????????? *//* ????????? */
,acode
 text/* ??? *//* ??? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genmanualcode where genmanualcodeid=g2b(agenmanualcodeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=genmanualcode' result;
    leave body;
  end if;
 start transaction ; 
 call genmanualcode_logger(acursession,agenmanualcodeid) ; 
 update  genmanualcode set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  code=acode
  where  genmanualcodeid = g2b(agenmanualcodeid) ;


call genmanualcode_client_trigger(acursession,agenmanualcodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=genmanualcode' result;
    leave body;
  end if;
 start transaction;  
 insert into   genmanualcode
 (  changestamp,genmanualcodeid 
,parentstructrowid
,name

,the_alias

,code

 ) values (now(), g2b(agenmanualcodeid) 
,g2b(aparentstructrowid)
,aname

,athe_alias

,acode

 ) ;


call genmanualcode_client_trigger(acursession,agenmanualcodeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "genmanualcode_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genmanualcode_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genmanualcode_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genmanualcode set lockuserid =null  where genmanualcodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genmanualcode set locksessionid =null  where genmanualcodeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "genpackage_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_brief(
 acursession varchar(38),
 agenpackageid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenpackageid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
 if  aec >0 then
   set abrief=genpackage_brief_f(g2b(agenpackageid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "genpackage_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_client_trigger(
 acursession varchar(38),
 aGENPACKAGEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "genpackage_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_genpackage cursor for
select genpackageid from genpackage where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genpackage 
 ( genpackageid 
,instanceid
,name

 ) select 
copymap(acopyaction,b2g(genpackageid)) 
,copymap(acopyaction,b2g(instanceid))
,name

 from genpackage
 where instanceid =g2b( ainstanceid); 
open copy_cursor_genpackage;
  set  fetch_done=false;
fetch copy_cursor_genpackage into aid;
while not fetch_done do 
    call generator_target_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_genpackage into aid;
end while;

close copy_cursor_genpackage;
 end
$$

--
-- Создать процедуру "genpackage_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_delete(
 acursession varchar(38),
 agenpackageid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=genpackage' result;
    leave body;
  end if;
 call genpackage_logger(acursession,agenpackageid) ; 
  delete from  genpackage 
  where  genpackageid = g2b(agenpackageid) ;
  delete from num_values where ownerpartname='genpackage' and ownerrowid=g2b(agenpackageid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "genpackage_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genpackage where genpackageid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "genpackage_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genpackage_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genpackage set lockuserid =auserid ,locksessionid=null  where genpackageid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genpackage set lockuserid=null ,locksessionid =acursession  where genpackageid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "genpackage_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_logger(
 acursession varchar(38),
 agenpackageid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "genpackage_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from genpackage where  genpackageid=arowid;
 end
$$

--
-- Создать процедуру "genpackage_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 agenpackageid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genpackage where genpackageid=g2b(agenpackageid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=genpackage' result;
    leave body;
  end if;
 start transaction ; 
 call genpackage_logger(acursession,agenpackageid) ; 
 update  genpackage set changestamp=now() 
,
  name=aname
  where  genpackageid = g2b(agenpackageid) ;


call genpackage_client_trigger(acursession,agenpackageid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=genpackage' result;
    leave body;
  end if;
 start transaction;  
 insert into   genpackage
 (  changestamp,genpackageid 
,instanceid
,name

 ) values (now(), g2b(agenpackageid) 
,g2b(ainstanceid)
,aname

 ) ;


call genpackage_client_trigger(acursession,agenpackageid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "genpackage_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genpackage_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genpackage_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genpackage set lockuserid =null  where genpackageid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genpackage set locksessionid =null  where genpackageid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "genreference_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_brief(
 acursession varchar(38),
 agenreferenceid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agenreferenceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
 if  aec >0 then
   set abrief=genreference_brief_f(g2b(agenreferenceid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "genreference_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_client_trigger(
 acursession varchar(38),
 aGENREFERENCEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "genreference_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into genreference 
 ( genreferenceid 
,parentstructrowid
,name

,refclassid

,versionmajor

,versionminor

 ) select 
copymap(acopyaction,b2g(genreferenceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,refclassid

,versionmajor

,versionminor

 from genreference
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "genreference_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_delete(
 acursession varchar(38),
 agenreferenceid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=genreference' result;
    leave body;
  end if;
 call genreference_logger(acursession,agenreferenceid) ; 
  delete from  genreference 
  where  genreferenceid = g2b(agenreferenceid) ;
  delete from num_values where ownerpartname='genreference' and ownerrowid=g2b(agenreferenceid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "genreference_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from genreference where genreferenceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "genreference_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call genreference_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update genreference set lockuserid =auserid ,locksessionid=null  where genreferenceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update genreference set lockuserid=null ,locksessionid =acursession  where genreferenceid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "genreference_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_logger(
 acursession varchar(38),
 agenreferenceid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "genreference_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from genreference where  genreferenceid=arowid;
  set aparenttable = 'generator_target';
 end
$$

--
-- Создать процедуру "genreference_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agenreferenceid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,arefclassid
 varchar (40)/* ????? ?????? *//* ????? ?????? */
,aversionmajor
 integer/* ????? ?????? *//* ????? ?????? */
,aversionminor
 integer/* ????????? *//* ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from genreference where genreferenceid=g2b(agenreferenceid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=genreference' result;
    leave body;
  end if;
 start transaction ; 
 call genreference_logger(acursession,agenreferenceid) ; 
 update  genreference set changestamp=now() 
,
  name=aname
,
  refclassid=arefclassid
,
  versionmajor=aversionmajor
,
  versionminor=aversionminor
  where  genreferenceid = g2b(agenreferenceid) ;


call genreference_client_trigger(acursession,agenreferenceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=genreference' result;
    leave body;
  end if;
 start transaction;  
 insert into   genreference
 (  changestamp,genreferenceid 
,parentstructrowid
,name

,refclassid

,versionmajor

,versionminor

 ) values (now(), g2b(agenreferenceid) 
,g2b(aparentstructrowid)
,aname

,arefclassid

,aversionmajor

,aversionminor

 ) ;


call genreference_client_trigger(acursession,agenreferenceid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "genreference_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genreference_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call genreference_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update genreference set lockuserid =null  where genreferenceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update genreference set locksessionid =null  where genreferenceid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "GetServerTime"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE GetServerTime( out aServerTime DATETIME/* ??????? ????? */

)
body:begin

set aServerTime=now();


end
$$

--
-- Создать процедуру "groups_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_brief(
 acursession varchar(38),
 agroupsid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agroupsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from groups where groupsid=g2b(agroupsid);
 if  aec >0 then
   set abrief=groups_brief_f(g2b(agroupsid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "groups_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_client_trigger(
 acursession varchar(38),
 aGroupsid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "groups_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_groups cursor for
select groupsid from groups where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into groups 
 ( groupsid 
,instanceid
,name

,adgroup

 ) select 
copymap(acopyaction,b2g(groupsid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,adgroup

 from groups
 where instanceid =g2b( ainstanceid); 
open copy_cursor_groups;
  set  fetch_done=false;
fetch copy_cursor_groups into aid;
while not fetch_done do 
    call groupuser_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_groups into aid;
end while;

close copy_cursor_groups;
 end
$$

--
-- Создать процедуру "groups_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_delete(
 acursession varchar(38),
 agroupsid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groups where groupsid=g2b(agroupsid);
if aec>0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=groups' result;
    leave body;
  end if;
 call groups_logger(acursession,agroupsid) ; 
  delete from  groups 
  where  groupsid = g2b(agroupsid) ;
  delete from num_values where ownerpartname='groups' and ownerrowid=g2b(agroupsid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "groups_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from groups where groupsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "groups_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call groups_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update groups set lockuserid =auserid ,locksessionid=null  where groupsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update groups set lockuserid=null ,locksessionid =acursession  where groupsid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "groups_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_logger(
 acursession varchar(38),
 agroupsid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "groups_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from groups where  groupsid=arowid;
 end
$$

--
-- Создать процедуру "groups_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 agroupsid varchar(38)
,aname
 varchar (80)/* ???????? *//* ???????? */
,aadgroup
 varchar (255)/* ?????? ad *//* ?????? ad */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groups where groupsid=g2b(agroupsid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=groups' result;
    leave body;
  end if;
 start transaction ; 
 call groups_logger(acursession,agroupsid) ; 
 update  groups set changestamp=now() 
,
  name=aname
,
  adgroup=aadgroup
  where  groupsid = g2b(agroupsid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from groups where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call groups_client_trigger(acursession,agroupsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=groups' result;
    leave body;
  end if;
 start transaction;  
 insert into   groups
 (  changestamp,groupsid 
,instanceid
,name

,adgroup

 ) values (now(), g2b(agroupsid) 
,g2b(ainstanceid)
,aname

,aadgroup

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from groups where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call groups_client_trigger(acursession,agroupsid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "groups_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groups_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call groups_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update groups set lockuserid =null  where groupsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update groups set locksessionid =null  where groupsid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "groupuser_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_brief(
 acursession varchar(38),
 agroupuserid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if agroupuserid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
 if  aec >0 then
   set abrief=groupuser_brief_f(g2b(agroupuserid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "groupuser_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_client_trigger(
 acursession varchar(38),
 aGroupUserid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "groupuser_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into groupuser 
 ( groupuserid 
,parentstructrowid
,theuser

 ) select 
copymap(acopyaction,b2g(groupuserid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,theuser

 from groupuser
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "groupuser_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_delete(
 acursession varchar(38),
 agroupuserid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
if aec>0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=groupuser' result;
    leave body;
  end if;
 call groupuser_logger(acursession,agroupuserid) ; 
  delete from  groupuser 
  where  groupuserid = g2b(agroupuserid) ;
  delete from num_values where ownerpartname='groupuser' and ownerrowid=g2b(agroupuserid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "groupuser_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from groupuser where groupuserid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "groupuser_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call groupuser_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update groupuser set lockuserid =auserid ,locksessionid=null  where groupuserid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update groupuser set lockuserid=null ,locksessionid =acursession  where groupuserid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "groupuser_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_logger(
 acursession varchar(38),
 agroupuserid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "groupuser_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from groupuser where  groupuserid=arowid;
  set aparenttable = 'groups';
 end
$$

--
-- Создать процедуру "groupuser_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 agroupuserid varchar(38)
,atheuser varchar(38)/* ???????????? *//* ???????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from groupuser where groupuserid=g2b(agroupuserid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=groupuser' result;
    leave body;
  end if;
 start transaction ; 
 call groupuser_logger(acursession,agroupuserid) ; 
 update  groupuser set changestamp=now() 
,
  theuser=g2b(atheuser)
  where  groupuserid = g2b(agroupuserid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from groupuser where  parentstructrowid=g2b(aparentstructrowid) 
 and theuser=g2b(atheuser);
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call groupuser_client_trigger(acursession,agroupuserid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=groupuser' result;
    leave body;
  end if;
 start transaction;  
 insert into   groupuser
 (  changestamp,groupuserid 
,parentstructrowid
,theuser

 ) values (now(), g2b(agroupuserid) 
,g2b(aparentstructrowid)
,g2b(atheuser)

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from groupuser where  parentstructrowid=g2b(aparentstructrowid) 
 and theuser=g2b(atheuser);
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call groupuser_client_trigger(acursession,agroupuserid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "groupuser_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE groupuser_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call groupuser_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update groupuser set lockuserid =null  where groupuserid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update groupuser set locksessionid =null  where groupuserid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "init"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE init()
begin
declare aid binary(16);
declare ainstid binary(16);
declare auid binary(16);
declare asession varchar(38);
declare acid binary(16);
declare asecid binary(16);
declare ahid binary(16);
declare atmpstr varchar(255);
declare aec int;
select count(*) into aec from instance where objtype='mtzsystem';
if aec=0 then
    set ainstid = g2b('ee28f9e4-afe3-44e9-8fef-411e81913423');
    insert into instance(instanceid,objtype,name,changestamp) values(ainstid, 'mtzsystem','????????? ??????????',now());
else
    select instanceid into ainstid from instance where objtype='mtzsystem';
end if;
set auid = g2b('38def86a-191e-49a8-963b-63e0c94f4f99'); 
set asecid = g2b('993daafd-589e-480d-97ff-1f9ab0568800'); 
set ahid = g2b('27f56741-4140-4c9c-909b-446eca089409'); 
select count(*) into aec from users where usersid=auid;
if aec=0 then
insert into users(usersid,instanceid,login,password,changestamp) values(auid,null,'init','init',now());
end if;
select count(*) into aec from typelist where name='bpu';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpu', 'bpu_register', 'bpu_delete', 'bpu_hcl', 'bpu_propagate');
end if;
select count(*) into aec from typelist where name='mtzmetamodel';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzmetamodel', 'mtzmetamodel_register', 'mtzmetamodel_delete', 'mtzmetamodel_hcl', 'mtzmetamodel_propagate');
end if;
select count(*) into aec from typelist where name='mtzjrnl';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzjrnl', 'mtzjrnl_register', 'mtzjrnl_delete', 'mtzjrnl_hcl', 'mtzjrnl_propagate');
end if;
select count(*) into aec from typelist where name='bpc';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpc', 'bpc_register', 'bpc_delete', 'bpc_hcl', 'bpc_propagate');
end if;
select count(*) into aec from typelist where name='mtzsystem';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzsystem', 'mtzsystem_register', 'mtzsystem_delete', 'mtzsystem_hcl', 'mtzsystem_propagate');
end if;
select count(*) into aec from typelist where name='mtzwp';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzwp', 'mtzwp_register', 'mtzwp_delete', 'mtzwp_hcl', 'mtzwp_propagate');
end if;
select count(*) into aec from typelist where name='bpdr';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpdr', 'bpdr_register', 'bpdr_delete', 'bpdr_hcl', 'bpdr_propagate');
end if;
select count(*) into aec from typelist where name='arlog';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'arlog', 'arlog_register', 'arlog_delete', 'arlog_hcl', 'arlog_propagate');
end if;
select count(*) into aec from typelist where name='mtzusers';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzusers', 'mtzusers_register', 'mtzusers_delete', 'mtzusers_hcl', 'mtzusers_propagate');
end if;
select count(*) into aec from typelist where name='stdnumerator';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'stdnumerator', 'stdnumerator_register', 'stdnumerator_delete', 'stdnumerator_hcl', 'stdnumerator_propagate');
end if;
select count(*) into aec from typelist where name='mtzext';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzext', 'mtzext_register', 'mtzext_delete', 'mtzext_hcl', 'mtzext_propagate');
end if;
select count(*) into aec from typelist where name='bprcfg';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bprcfg', 'bprcfg_register', 'bprcfg_delete', 'bprcfg_hcl', 'bprcfg_propagate');
end if;
select count(*) into aec from typelist where name='arc';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'arc', 'arc_register', 'arc_delete', 'arc_hcl', 'arc_propagate');
end if;
select count(*) into aec from typelist where name='mtzfltr';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzfltr', 'mtzfltr_register', 'mtzfltr_delete', 'mtzfltr_hcl', 'mtzfltr_propagate');
end if;
select count(*) into aec from typelist where name='bpdi';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'bpdi', 'bpdi_register', 'bpdi_delete', 'bpdi_hcl', 'bpdi_propagate');
end if;
select count(*) into aec from typelist where name='armd';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'armd', 'armd_register', 'armd_delete', 'armd_hcl', 'armd_propagate');
end if;
select count(*) into aec from typelist where name='mtzrprt';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'mtzrprt', 'mtzrprt_register', 'mtzrprt_delete', 'mtzrprt_hcl', 'mtzrprt_propagate');
end if;
select count(*) into aec from typelist where name='arsms';
if aec=0 then
insert into typelist(typelistid, name,registerproc,deleteproc, hclproc, propagateproc) values(g2b(uuid()),'arsms', 'arsms_register', 'arsms_delete', 'arsms_hcl', 'arsms_propagate');
end if;

set aid = g2b('6988c503-7e5a-40a7-81e4-2aa55196d29a');
call sysoptions_save ( b2g(aid), 'iu_u_def', 'bpu', 'struct_type');

set aid = g2b('5a6d1ae9-dfd7-4023-bbb3-3bf183add956');
call sysoptions_save ( b2g(aid), 'iu_u_def', 'autoiu_u_def', 'defview');

set aid = g2b('a9d13db7-f13b-4c78-8790-d263d5a970ed');
call sysoptions_save ( b2g(aid), 'genpackage', 'mtzmetamodel', 'struct_type');

set aid = g2b('d81baef1-b6a2-4441-a861-a9f66293163d');
call sysoptions_save ( b2g(aid), 'generator_target', 'mtzmetamodel', 'struct_type');
set aid = g2b('69c879e6-5803-4f66-b9b0-ae4347c53ce1');
call sysoptions_save(  b2g(aid), 'generator_target', 'genpackage', 'parent');

set aid = g2b('def245da-30ae-4a76-b58d-32c8d11b60d7');
call sysoptions_save ( b2g(aid), 'genreference', 'mtzmetamodel', 'struct_type');
set aid = g2b('2d00c138-719a-47de-b7a0-69689e240659');
call sysoptions_save(  b2g(aid), 'genreference', 'generator_target', 'parent');

set aid = g2b('ece9f87c-b4f5-44dd-b5e3-159089332d53');
call sysoptions_save ( b2g(aid), 'genmanualcode', 'mtzmetamodel', 'struct_type');
set aid = g2b('23b0c317-14da-473d-b1ad-99efc84cd196');
call sysoptions_save(  b2g(aid), 'genmanualcode', 'generator_target', 'parent');

set aid = g2b('a7e7647c-4b0b-4952-acfe-251f6d2b1604');
call sysoptions_save ( b2g(aid), 'gencontrols', 'mtzmetamodel', 'struct_type');
set aid = g2b('ff8de6ad-1024-4884-9ef3-d0c7a32ead1b');
call sysoptions_save(  b2g(aid), 'gencontrols', 'generator_target', 'parent');

set aid = g2b('5426f592-e8d2-44c1-8cef-f6fecc621fda');
call sysoptions_save ( b2g(aid), 'genpackage', 'autogenpackage', 'defview');

set aid = g2b('3a47de37-b043-4277-a9b3-6d7ae228b78d');
call sysoptions_save ( b2g(aid), 'generator_target', 'autogenerator_target', 'defview');

set aid = g2b('8a630815-287f-4ebb-8574-2398f019013d');
call sysoptions_save ( b2g(aid), 'genreference', 'autogenreference', 'defview');

set aid = g2b('63df4844-e5fd-4f87-9476-fe864fce7848');
call sysoptions_save ( b2g(aid), 'genmanualcode', 'autogenmanualcode', 'defview');

set aid = g2b('bfb66cb3-20a0-439a-a5da-d78c5e6d123d');
call sysoptions_save ( b2g(aid), 'gencontrols', 'autogencontrols', 'defview');

set aid = g2b('878da760-09be-40a7-b2cb-cb14224edf20');
call sysoptions_save ( b2g(aid), 'localizeinfo', 'mtzmetamodel', 'struct_type');

set aid = g2b('7f65d271-5e3a-4be8-92d2-d26c56e35f94');
call sysoptions_save ( b2g(aid), 'localizeinfo', 'autolocalizeinfo', 'defview');

set aid = g2b('5db0073f-4a8d-478c-9df2-4acf5f17d89a');
call sysoptions_save ( b2g(aid), 'fieldtype', 'mtzmetamodel', 'struct_type');

set aid = g2b('0bc965e3-9af9-4dd6-ae61-0419d2816cd8');
call sysoptions_save ( b2g(aid), 'enumitem', 'mtzmetamodel', 'struct_type');
set aid = g2b('64bc9ddd-a6eb-44b1-8196-f4756b5e64ad');
call sysoptions_save(  b2g(aid), 'enumitem', 'fieldtype', 'parent');

set aid = g2b('c22b384b-3a33-4b0d-9875-6e073676323f');
call sysoptions_save ( b2g(aid), 'fieldtypemap', 'mtzmetamodel', 'struct_type');
set aid = g2b('03651b0f-a732-419a-b858-87cf253946ed');
call sysoptions_save(  b2g(aid), 'fieldtypemap', 'fieldtype', 'parent');

set aid = g2b('4751f190-6b1d-48e2-8b7f-b50adc81dbd3');
call sysoptions_save ( b2g(aid), 'fieldtype', 'autofieldtype', 'defview');

set aid = g2b('2737248f-3e88-4602-990d-a345b3145bd0');
call sysoptions_save ( b2g(aid), 'enumitem', 'autoenumitem', 'defview');

set aid = g2b('2f8f5b56-77f4-45c3-9c5c-991677bf009c');
call sysoptions_save ( b2g(aid), 'fieldtypemap', 'autofieldtypemap', 'defview');

set aid = g2b('a68bfc42-ba0b-4e9f-b43c-c22f6a887134');
call sysoptions_save ( b2g(aid), 'sharedmethod', 'mtzmetamodel', 'struct_type');

set aid = g2b('521a778c-1d02-411a-8af5-8971def082a7');
call sysoptions_save ( b2g(aid), 'script', 'mtzmetamodel', 'struct_type');
set aid = g2b('cff65a38-fcca-4f0b-a660-33d4a6388405');
call sysoptions_save(  b2g(aid), 'script', 'sharedmethod', 'parent');

set aid = g2b('ccb0fd7f-fb1d-4c6a-99c7-1a8565abf123');
call sysoptions_save ( b2g(aid), 'parameters', 'mtzmetamodel', 'struct_type');
set aid = g2b('b9a1b232-bb94-462c-a984-dfd0c9c19fae');
call sysoptions_save(  b2g(aid), 'parameters', 'script', 'parent');

set aid = g2b('48e60a2a-0d9c-4807-90a5-7093e6975c04');
call sysoptions_save ( b2g(aid), 'sharedmethod', 'autosharedmethod', 'defview');

set aid = g2b('bcef53f0-9bea-49fe-82c5-aec66abfe6a2');
call sysoptions_save ( b2g(aid), 'script', 'autoscript', 'defview');

set aid = g2b('1fa48bcd-3fbc-4760-9156-9fbb1678babf');
call sysoptions_save ( b2g(aid), 'parameters', 'autoparameters', 'defview');

set aid = g2b('f581813e-cd46-4c2f-9827-cb5e6b76c7ca');
call sysoptions_save ( b2g(aid), 'objecttype', 'mtzmetamodel', 'struct_type');

set aid = g2b('4fabfe2f-72a8-469f-ac56-d48b4a1522cc');
call sysoptions_save ( b2g(aid), 'objstatus', 'mtzmetamodel', 'struct_type');
set aid = g2b('d023571a-a8e7-4b20-a590-6c358a4bcfb1');
call sysoptions_save(  b2g(aid), 'objstatus', 'objecttype', 'parent');

set aid = g2b('15c360e1-62b0-40b0-8af9-2888713fb658');
call sysoptions_save ( b2g(aid), 'nextstate', 'mtzmetamodel', 'struct_type');
set aid = g2b('11b239c9-da07-4438-9bfd-7b47cc9e6d66');
call sysoptions_save(  b2g(aid), 'nextstate', 'objstatus', 'parent');

set aid = g2b('faccc759-7c6a-4a3a-a5b2-c9ce835e1c0a');
call sysoptions_save ( b2g(aid), 'objectmode', 'mtzmetamodel', 'struct_type');
set aid = g2b('18fff991-ebb3-4b80-8514-53146d46f1d6');
call sysoptions_save(  b2g(aid), 'objectmode', 'objecttype', 'parent');

set aid = g2b('f436fd5f-8c76-4c7f-9a94-50536a58e3a4');
call sysoptions_save ( b2g(aid), 'structrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('4fcfbe5b-a3c5-4799-86b5-cfdd78580a9a');
call sysoptions_save(  b2g(aid), 'structrestriction', 'objectmode', 'parent');

set aid = g2b('93c1b60f-1731-40f3-b88e-9f138e0ddde8');
call sysoptions_save ( b2g(aid), 'methodrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('bfb11f0e-a953-48fb-9c18-60acaa0a43ea');
call sysoptions_save(  b2g(aid), 'methodrestriction', 'objectmode', 'parent');

set aid = g2b('12c3c0dc-294d-405f-9e19-9c4f59729084');
call sysoptions_save ( b2g(aid), 'fieldrestriction', 'mtzmetamodel', 'struct_type');
set aid = g2b('1c3cab54-dd31-4c54-ba2f-6ff5e3439a42');
call sysoptions_save(  b2g(aid), 'fieldrestriction', 'objectmode', 'parent');

set aid = g2b('a49b593b-11c2-4acf-87cf-9c1141ca4fd8');
call sysoptions_save ( b2g(aid), 'typemenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('28093c41-690e-4755-b538-654b7806899d');
call sysoptions_save(  b2g(aid), 'typemenu', 'objecttype', 'parent');

set aid = g2b('f456edef-d69c-40eb-8902-c49b68855731');
call sysoptions_save ( b2g(aid), 'instancevalidator', 'mtzmetamodel', 'struct_type');
set aid = g2b('de53e14c-deb4-4ea0-8589-01ac3fc4016f');
call sysoptions_save(  b2g(aid), 'instancevalidator', 'objecttype', 'parent');

set aid = g2b('bd4cad32-72d4-40a6-b8bf-e163e2dbd948');
call sysoptions_save ( b2g(aid), 'part', 'mtzmetamodel', 'struct_type');
set aid = g2b('3bdeb3ad-05e8-4dc1-8bed-8aeaecbf3360');
call sysoptions_save(  b2g(aid), 'part', 'objecttype', 'parent');

set aid = g2b('84c2925d-b29f-4479-8778-9a32ab18ce55');
call sysoptions_save ( b2g(aid), 'partmenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('4561bd06-62d6-42f6-87d6-42045dd04bc3');
call sysoptions_save(  b2g(aid), 'partmenu', 'part', 'parent');

set aid = g2b('f80cdf54-74d5-4178-bd81-16ed99eb01cc');
call sysoptions_save ( b2g(aid), 'partparammap', 'mtzmetamodel', 'struct_type');
set aid = g2b('03bb5cbb-b464-45ad-a371-48cd9dc8db8c');
call sysoptions_save(  b2g(aid), 'partparammap', 'partmenu', 'parent');

set aid = g2b('9a50c6fe-1548-4de7-9ed8-ddc673b6c22c');
call sysoptions_save ( b2g(aid), 'partview', 'mtzmetamodel', 'struct_type');
set aid = g2b('7158eda6-983d-4c44-810f-215384920d5e');
call sysoptions_save(  b2g(aid), 'partview', 'part', 'parent');

set aid = g2b('2b9a3aed-3b2c-4c48-8c15-954fd5996112');
call sysoptions_save ( b2g(aid), 'viewcolumn', 'mtzmetamodel', 'struct_type');
set aid = g2b('3097d9ed-29b8-4cc9-b414-62312d302a8e');
call sysoptions_save(  b2g(aid), 'viewcolumn', 'partview', 'parent');

set aid = g2b('1b0bac13-ff9e-45b2-a7ee-e09c695157b2');
call sysoptions_save ( b2g(aid), 'partview_lnk', 'mtzmetamodel', 'struct_type');
set aid = g2b('6d11a5b8-8103-4e6d-b9ab-e3d47cb362c5');
call sysoptions_save(  b2g(aid), 'partview_lnk', 'partview', 'parent');

set aid = g2b('ff882c2f-13df-4b54-a96d-1ccb78f75a04');
call sysoptions_save ( b2g(aid), 'validator', 'mtzmetamodel', 'struct_type');
set aid = g2b('c906f847-6565-4078-bb5d-5e2679c670ee');
call sysoptions_save(  b2g(aid), 'validator', 'part', 'parent');

set aid = g2b('4e2d1673-a72a-4729-9688-a21b075ead28');
call sysoptions_save ( b2g(aid), 'uniqueconstraint', 'mtzmetamodel', 'struct_type');
set aid = g2b('285bcc5d-dad1-472a-8aa6-faf06c684063');
call sysoptions_save(  b2g(aid), 'uniqueconstraint', 'part', 'parent');

set aid = g2b('1dca18b0-78d0-4af1-a8cc-e53846afba59');
call sysoptions_save ( b2g(aid), 'constraintfield', 'mtzmetamodel', 'struct_type');
set aid = g2b('203f5750-0e5d-4e2e-b74b-30c866a75e1f');
call sysoptions_save(  b2g(aid), 'constraintfield', 'uniqueconstraint', 'parent');

set aid = g2b('c63426e6-121c-41ab-b771-67ad3bc6d535');
call sysoptions_save ( b2g(aid), 'extenderinterface', 'mtzmetamodel', 'struct_type');
set aid = g2b('c8acc0a9-ebbf-4d3c-90bd-8b2aff66af1e');
call sysoptions_save(  b2g(aid), 'extenderinterface', 'part', 'parent');

set aid = g2b('c3ba4b0f-9dd3-40b3-80a3-b2e3846c70d5');
call sysoptions_save ( b2g(aid), 'field', 'mtzmetamodel', 'struct_type');
set aid = g2b('44642d93-5c69-4a02-bc7b-cadfc586d4b8');
call sysoptions_save(  b2g(aid), 'field', 'part', 'parent');

set aid = g2b('d86634db-ab9f-4789-876d-9fbcef1e274e');
call sysoptions_save ( b2g(aid), 'fldextenders', 'mtzmetamodel', 'struct_type');
set aid = g2b('a343b47e-d7e5-4217-a73c-2ffa67bb0879');
call sysoptions_save(  b2g(aid), 'fldextenders', 'field', 'parent');

set aid = g2b('ff000879-3651-4c4c-8f43-ca89812bb074');
call sysoptions_save ( b2g(aid), 'fieldsrcdef', 'mtzmetamodel', 'struct_type');
set aid = g2b('d24e7acd-dcf9-45b0-bda9-157b5638cb56');
call sysoptions_save(  b2g(aid), 'fieldsrcdef', 'field', 'parent');

set aid = g2b('b6173f3e-82d2-4e54-b7ac-d1d07d7ae9b6');
call sysoptions_save ( b2g(aid), 'dinamicfilterscript', 'mtzmetamodel', 'struct_type');
set aid = g2b('10a530ec-7bfd-48d9-a5b7-0e93ac164d45');
call sysoptions_save(  b2g(aid), 'dinamicfilterscript', 'field', 'parent');

set aid = g2b('34ae8b58-5bb7-44e3-a6c5-735223814596');
call sysoptions_save ( b2g(aid), 'fieldexpression', 'mtzmetamodel', 'struct_type');
set aid = g2b('f95f1793-10a2-4c09-8384-ffe09844b2e5');
call sysoptions_save(  b2g(aid), 'fieldexpression', 'field', 'parent');

set aid = g2b('0754f72e-fe37-4d2d-bfef-7a760821751e');
call sysoptions_save ( b2g(aid), 'fieldvalidator', 'mtzmetamodel', 'struct_type');
set aid = g2b('91e1fb7f-24a2-4587-9ff3-a6f306b104fe');
call sysoptions_save(  b2g(aid), 'fieldvalidator', 'field', 'parent');

set aid = g2b('f094185d-07e6-4433-927c-e8161d4c42c5');
call sysoptions_save ( b2g(aid), 'fieldmenu', 'mtzmetamodel', 'struct_type');
set aid = g2b('78de4f4b-992f-472b-96ca-2cc506b8736d');
call sysoptions_save(  b2g(aid), 'fieldmenu', 'field', 'parent');

set aid = g2b('9dc705c9-3630-4121-aa63-e5c2abba055b');
call sysoptions_save ( b2g(aid), 'fieldparammap', 'mtzmetamodel', 'struct_type');
set aid = g2b('be04baae-fdaa-4101-acfb-203c213487a6');
call sysoptions_save(  b2g(aid), 'fieldparammap', 'fieldmenu', 'parent');

set aid = g2b('e34bc24d-e567-4776-a46c-f597ba854a43');
call sysoptions_save ( b2g(aid), 'objecttype', 'autoobjecttype', 'defview');

set aid = g2b('c4acc1ee-088a-4bbc-b31f-daeab956fd45');
call sysoptions_save ( b2g(aid), 'objstatus', 'autoobjstatus', 'defview');

set aid = g2b('1db30afb-201b-46ac-b989-65639140295e');
call sysoptions_save ( b2g(aid), 'nextstate', 'autonextstate', 'defview');

set aid = g2b('073ec315-0a87-4fb7-9842-ce60ee5b34f5');
call sysoptions_save ( b2g(aid), 'objectmode', 'autoobjectmode', 'defview');

set aid = g2b('a7a75dce-6eaf-4464-bb5f-65e9d604c8a4');
call sysoptions_save ( b2g(aid), 'structrestriction', 'autostructrestriction', 'defview');

set aid = g2b('ef96f476-604e-4b0b-b5f9-aec7ebfaf5d5');
call sysoptions_save ( b2g(aid), 'methodrestriction', 'automethodrestriction', 'defview');

set aid = g2b('6298a72b-243b-433e-9851-20430408cc60');
call sysoptions_save ( b2g(aid), 'fieldrestriction', 'autofieldrestriction', 'defview');

set aid = g2b('48cec391-5707-4a4a-a567-3db25e66a9fe');
call sysoptions_save ( b2g(aid), 'typemenu', 'autotypemenu', 'defview');

set aid = g2b('7c3060dd-0785-4329-801e-0fe211da8744');
call sysoptions_save ( b2g(aid), 'instancevalidator', 'autoinstancevalidator', 'defview');


set aid = g2b('4f8b2f6c-1be5-4aaa-9d61-5cd444bd2453');
call sysoptions_save ( b2g(aid), 'partmenu', 'autopartmenu', 'defview');

set aid = g2b('f7c0caa7-e6f6-4a1a-a5d0-20dec6d849e0');
call sysoptions_save ( b2g(aid), 'partparammap', 'autopartparammap', 'defview');

set aid = g2b('5ec07ec3-7e3d-42e6-a488-ee26af3feaba');
call sysoptions_save ( b2g(aid), 'partview', 'autopartview', 'defview');

set aid = g2b('30e939d1-f2c6-4f22-911d-3bf182749ba2');
call sysoptions_save ( b2g(aid), 'viewcolumn', 'autoviewcolumn', 'defview');

set aid = g2b('3024745e-9cb6-400a-8645-ca1a7aa188bc');
call sysoptions_save ( b2g(aid), 'partview_lnk', 'autopartview_lnk', 'defview');

set aid = g2b('dfd78e23-86d9-4155-861a-47547eee75c1');
call sysoptions_save ( b2g(aid), 'validator', 'autovalidator', 'defview');

set aid = g2b('b26f45fd-af87-4c2d-a495-5e67b6af0539');
call sysoptions_save ( b2g(aid), 'uniqueconstraint', 'autouniqueconstraint', 'defview');

set aid = g2b('93436f0f-74f5-4bfd-a0b5-726fa9c38785');
call sysoptions_save ( b2g(aid), 'constraintfield', 'autoconstraintfield', 'defview');

set aid = g2b('1aa6b319-2047-4c06-a794-7ac792b7f351');
call sysoptions_save ( b2g(aid), 'extenderinterface', 'autoextenderinterface', 'defview');

set aid = g2b('403870fe-c67b-4b80-a41b-9fa2d90ec81a');
call sysoptions_save ( b2g(aid), 'field', 'autofield', 'defview');

set aid = g2b('1628a775-a12f-4bc2-a777-d4688fa7d6bc');
call sysoptions_save ( b2g(aid), 'fldextenders', 'autofldextenders', 'defview');

set aid = g2b('37fbf961-d6d1-4012-b458-4dc7c27ee021');
call sysoptions_save ( b2g(aid), 'fieldsrcdef', 'autofieldsrcdef', 'defview');

set aid = g2b('66014338-36cd-485c-a8b9-01c2220e51e4');
call sysoptions_save ( b2g(aid), 'dinamicfilterscript', 'autodinamicfilterscript', 'defview');

set aid = g2b('ec4cdb72-fb5f-48d8-b98d-d28e9200633e');
call sysoptions_save ( b2g(aid), 'fieldexpression', 'autofieldexpression', 'defview');

set aid = g2b('c02baf6f-6238-414d-b527-5a7387772bdc');
call sysoptions_save ( b2g(aid), 'fieldvalidator', 'autofieldvalidator', 'defview');

set aid = g2b('54a54e33-31d3-46e1-bc4e-9ae9b60b6661');
call sysoptions_save ( b2g(aid), 'fieldmenu', 'autofieldmenu', 'defview');

set aid = g2b('a55e875a-6c71-4d07-afb9-3580ec643380');
call sysoptions_save ( b2g(aid), 'fieldparammap', 'autofieldparammap', 'defview');

set aid = g2b('2c3bba40-47ca-4377-84ec-d17262021159');
call sysoptions_save ( b2g(aid), 'mtzapp', 'mtzmetamodel', 'struct_type');

set aid = g2b('620bafac-5825-4b38-8697-57374889b729');
call sysoptions_save ( b2g(aid), 'parentpackage', 'mtzmetamodel', 'struct_type');
set aid = g2b('45543174-af32-48c8-8bd9-3d59ba0d04cd');
call sysoptions_save(  b2g(aid), 'parentpackage', 'mtzapp', 'parent');

set aid = g2b('fb62e1a3-7b4f-4a3c-9aca-cc1f92bdf540');
call sysoptions_save ( b2g(aid), 'mtzapp', 'automtzapp', 'defview');

set aid = g2b('f6be89bd-0d15-455c-ad1b-708f0f942f39');
call sysoptions_save ( b2g(aid), 'parentpackage', 'autoparentpackage', 'defview');

set aid = g2b('7c845ce4-6b84-4664-ab30-1472bd5ff0f7');
call sysoptions_save ( b2g(aid), 'journalcolumn', 'mtzjrnl', 'struct_type');

set aid = g2b('fbb263a6-43e7-45d5-a484-76d05f2b8c99');
call sysoptions_save ( b2g(aid), 'jcolumnsource', 'mtzjrnl', 'struct_type');
set aid = g2b('180dbcce-2730-42ff-b058-49271d147789');
call sysoptions_save(  b2g(aid), 'jcolumnsource', 'journalcolumn', 'parent');

set aid = g2b('bd57a1f5-a8c6-410e-8e41-bae7cb35d007');
call sysoptions_save ( b2g(aid), 'journalcolumn', 'autojournalcolumn', 'defview');

set aid = g2b('92778e38-054c-465f-bed7-237654942da9');
call sysoptions_save ( b2g(aid), 'jcolumnsource', 'autojcolumnsource', 'defview');

set aid = g2b('4be6cfcb-ce9a-497f-8ce7-7ca155584d08');
call sysoptions_save ( b2g(aid), 'journalsrc', 'mtzjrnl', 'struct_type');

set aid = g2b('55ae0d69-6bb4-4f56-86b4-3e6833b0379f');
call sysoptions_save ( b2g(aid), 'journalsrc', 'autojournalsrc', 'defview');

set aid = g2b('ab57a1df-91b6-4f49-9312-ff7c70eb8297');
call sysoptions_save ( b2g(aid), 'journal', 'mtzjrnl', 'struct_type');

set aid = g2b('32ba14df-0464-4d77-88ac-5c6055a35c99');
call sysoptions_save ( b2g(aid), 'journal', 'autojournal', 'defview');

set aid = g2b('366356ca-dc65-4eb9-b620-d692f8f4c380');
call sysoptions_save ( b2g(aid), 'bpc_info', 'bpc', 'struct_type');

set aid = g2b('87a302f0-b7c4-4a7f-ac66-12c0f0bd7cc1');
call sysoptions_save ( b2g(aid), 'bpc_info', 'autobpc_info', 'defview');

set aid = g2b('b2fc3435-1965-420c-a428-2929308447ac');
call sysoptions_save ( b2g(aid), 'the_session', 'mtzsystem', 'struct_type');

set aid = g2b('d2b45e08-4d04-4285-970a-123d3ac6c9d6');
call sysoptions_save ( b2g(aid), 'the_session', 'autothe_session', 'defview');

set aid = g2b('c2913043-21d1-472a-ad50-02d5fc03afe7');
call sysoptions_save ( b2g(aid), 'sysrefcache', 'mtzsystem', 'struct_type');

set aid = g2b('4fc37f53-3d12-4d75-9e20-2efad88bd726');
call sysoptions_save ( b2g(aid), 'sysrefcache', 'autosysrefcache', 'defview');

set aid = g2b('d848f6d2-2959-43ce-8f64-7155ae119a05');
call sysoptions_save ( b2g(aid), 'syslog', 'mtzsystem', 'struct_type');

set aid = g2b('0e1b575e-2c5f-43e6-a601-eea8ae0bdb84');
call sysoptions_save ( b2g(aid), 'syslog', 'autosyslog', 'defview');

set aid = g2b('194db352-47c6-46b4-9605-42ea3807ee16');
call sysoptions_save ( b2g(aid), 'armjournal', 'mtzwp', 'struct_type');

set aid = g2b('fe4b2823-20f3-4af3-beb9-b1290971c284');
call sysoptions_save ( b2g(aid), 'armjrnlrep', 'mtzwp', 'struct_type');
set aid = g2b('f3dcf7bb-b9d8-421e-9399-5e77bff2678a');
call sysoptions_save(  b2g(aid), 'armjrnlrep', 'armjournal', 'parent');

set aid = g2b('118bfa22-6d43-4e12-b596-f7117ec035e5');
call sysoptions_save ( b2g(aid), 'armjrnlrun', 'mtzwp', 'struct_type');
set aid = g2b('8b8391e4-837c-4a3d-9547-838d115d13aa');
call sysoptions_save(  b2g(aid), 'armjrnlrun', 'armjournal', 'parent');

set aid = g2b('2f39b9c7-3510-4682-89da-749056aa2688');
call sysoptions_save ( b2g(aid), 'armjrnladd', 'mtzwp', 'struct_type');
set aid = g2b('6d00c414-7c25-4cf7-9208-c2d0d601cf23');
call sysoptions_save(  b2g(aid), 'armjrnladd', 'armjournal', 'parent');

set aid = g2b('7bd62cdb-f734-4f2c-a2a6-72a30cde9d47');
call sysoptions_save ( b2g(aid), 'armjournal', 'autoarmjournal', 'defview');

set aid = g2b('80199746-6c06-4674-847c-6828f00652ec');
call sysoptions_save ( b2g(aid), 'armjrnlrep', 'autoarmjrnlrep', 'defview');

set aid = g2b('fa1808f4-6f2e-40b5-bfd0-bad6a1520c84');
call sysoptions_save ( b2g(aid), 'armjrnlrun', 'autoarmjrnlrun', 'defview');

set aid = g2b('6fc80045-40f9-40aa-a95e-f6227c63d3ee');
call sysoptions_save ( b2g(aid), 'armjrnladd', 'autoarmjrnladd', 'defview');

set aid = g2b('0adf47a1-6f9f-4e86-983f-20046c09a8de');
call sysoptions_save ( b2g(aid), 'entrypoints', 'mtzwp', 'struct_type');

set aid = g2b('230baa26-a354-4a3c-b07d-fbf422ad4f16');
call sysoptions_save ( b2g(aid), 'epfilterlink', 'mtzwp', 'struct_type');
set aid = g2b('6e717f09-9bc8-46ee-a656-6581a8b3b353');
call sysoptions_save(  b2g(aid), 'epfilterlink', 'entrypoints', 'parent');


set aid = g2b('d17b23aa-ff06-4cd6-bf68-523814df248c');
call sysoptions_save ( b2g(aid), 'epfilterlink', 'autoepfilterlink', 'defview');

set aid = g2b('4bec1f9b-89fc-41d8-88cb-a953fa4e706c');
call sysoptions_save ( b2g(aid), 'workplace', 'mtzwp', 'struct_type');

set aid = g2b('0a1581d2-8c2d-4e9b-81e5-cf432e28f4aa');
call sysoptions_save ( b2g(aid), 'workplace', 'autoworkplace', 'defview');

set aid = g2b('b84fa687-1ae4-4cc6-8157-1d259fe9d894');
call sysoptions_save ( b2g(aid), 'armtypes', 'mtzwp', 'struct_type');

set aid = g2b('7e1f6af9-eee2-41e0-9d88-7e973c0f447a');
call sysoptions_save ( b2g(aid), 'armtypes', 'autoarmtypes', 'defview');

set aid = g2b('46d48d4e-2b6f-4896-b7c5-364f99ed481a');
call sysoptions_save ( b2g(aid), 'iu_crole', 'bpdr', 'struct_type');

set aid = g2b('bda0a536-6149-4796-836b-a8b3d4ff8051');
call sysoptions_save ( b2g(aid), 'iu_crole', 'autoiu_crole', 'defview');

set aid = g2b('f72007b5-92d0-485a-bad8-57c87f22c1e2');
call sysoptions_save ( b2g(aid), 'arlog_data', 'arlog', 'struct_type');

set aid = g2b('4f8bfaf6-edde-4cb2-a6b1-3430549380c0');
call sysoptions_save ( b2g(aid), 'arlog_data', 'autoarlog_data', 'defview');

set aid = g2b('b813870d-7d14-44c1-a423-7021580b7927');
call sysoptions_save ( b2g(aid), 'users', 'mtzusers', 'struct_type');

set aid = g2b('8d8a1043-79f0-42bd-8206-44cad39c4b6e');
call sysoptions_save ( b2g(aid), 'users', 'autousers', 'defview');

set aid = g2b('837223ee-b845-4ace-8b5f-91171ac54113');
call sysoptions_save ( b2g(aid), 'groups', 'mtzusers', 'struct_type');

set aid = g2b('6646062b-f137-4bbb-b687-43cd0aa269bc');
call sysoptions_save ( b2g(aid), 'groupuser', 'mtzusers', 'struct_type');
set aid = g2b('2c2cbb19-fe63-4fd5-b063-c72a374cb948');
call sysoptions_save(  b2g(aid), 'groupuser', 'groups', 'parent');

set aid = g2b('5a0212c9-2d5c-43d9-a89b-38733fd2767d');
call sysoptions_save ( b2g(aid), 'groups', 'autogroups', 'defview');

set aid = g2b('e1b16a7a-8e64-4df6-9376-b17cfa9f1fd9');
call sysoptions_save ( b2g(aid), 'groupuser', 'autogroupuser', 'defview');

set aid = g2b('ff6d2a9d-2bc7-4409-a249-86a512cfba7a');
call sysoptions_save ( b2g(aid), 'num_zones', 'stdnumerator', 'struct_type');

set aid = g2b('e75ae0f3-aba1-45fc-936a-ab4c66d7b9b0');
call sysoptions_save ( b2g(aid), 'num_values', 'stdnumerator', 'struct_type');
set aid = g2b('e035d06e-d06a-4de3-b5fd-e2bebf878c0a');
call sysoptions_save(  b2g(aid), 'num_values', 'num_zones', 'parent');

set aid = g2b('9c136f5f-b507-4e71-9df0-f461ad10106c');
call sysoptions_save ( b2g(aid), 'num_zones', 'autonum_zones', 'defview');

set aid = g2b('a73165f9-9c5c-4083-8c98-5db7ccc3096e');
call sysoptions_save ( b2g(aid), 'num_values', 'autonum_values', 'defview');

set aid = g2b('a7864253-a03f-416f-8605-e1fafd21df50');
call sysoptions_save ( b2g(aid), 'num_head', 'stdnumerator', 'struct_type');

set aid = g2b('544d77c6-484c-4e55-9ddd-7462cbcaddc2');
call sysoptions_save ( b2g(aid), 'num_head', 'autonum_head', 'defview');

set aid = g2b('446693cd-a19c-4dd8-8eec-618d08363868');
call sysoptions_save ( b2g(aid), 'mtzext_def', 'mtzext', 'struct_type');

set aid = g2b('9d311dc7-0791-4c4e-b13f-6c26ecc9a605');
call sysoptions_save ( b2g(aid), 'mtzext_def', 'automtzext_def', 'defview');

set aid = g2b('b832cbc5-39ea-4b38-9e81-61afa71196ec');
call sysoptions_save ( b2g(aid), 'mtzextrel', 'mtzext', 'struct_type');

set aid = g2b('8be77482-d5c2-4b71-b32e-5279e431ea06');
call sysoptions_save ( b2g(aid), 'mtzextrel', 'automtzextrel', 'defview');

set aid = g2b('4c5c5553-8b81-4b87-b63a-0ae9d1d93761');
call sysoptions_save ( b2g(aid), 'iu_rcfg_mod', 'bprcfg', 'struct_type');

set aid = g2b('01132f86-0169-49e9-ac24-83aa43601d71');
call sysoptions_save ( b2g(aid), 'iu_rcfg_mod', 'autoiu_rcfg_mod', 'defview');

set aid = g2b('f1a41f74-d89f-4426-86b2-c126ba8c6e50');
call sysoptions_save ( b2g(aid), 'iu_rcfg_docmode', 'bprcfg', 'struct_type');

set aid = g2b('02975b0a-0efb-4310-802c-76aa5f1ba5e9');
call sysoptions_save ( b2g(aid), 'iu_rcfg_docmode', 'autoiu_rcfg_docmode', 'defview');

set aid = g2b('871e37de-342e-4f1d-9900-9485950e2b09');
call sysoptions_save ( b2g(aid), 'iu_rcfg_def', 'bprcfg', 'struct_type');

set aid = g2b('b421ad23-23a7-4b76-8b53-505df49ea5d0');
call sysoptions_save ( b2g(aid), 'iu_rcfg_def', 'autoiu_rcfg_def', 'defview');

set aid = g2b('bd84d2c7-1044-431f-bbea-7318e9feffb3');
call sysoptions_save ( b2g(aid), 'arc_info', 'arc', 'struct_type');

set aid = g2b('6f966d25-80ab-4780-a6b6-095e37c6ec82');
call sysoptions_save ( b2g(aid), 'arc_info', 'autoarc_info', 'defview');

set aid = g2b('eb549567-e228-40f1-b55c-7f75e09eb2fa');
call sysoptions_save ( b2g(aid), 'arc_md', 'arc', 'struct_type');

set aid = g2b('a7682d90-9f81-422a-9d2c-4fffa57daf55');
call sysoptions_save ( b2g(aid), 'arc_chanel', 'arc', 'struct_type');
set aid = g2b('57b9cad6-45d8-4e7f-91cd-78b7cd944054');
call sysoptions_save(  b2g(aid), 'arc_chanel', 'arc_md', 'parent');

set aid = g2b('bbfff6c9-36ca-45d0-bb25-f062b731ad32');
call sysoptions_save ( b2g(aid), 'arc_md', 'autoarc_md', 'defview');

set aid = g2b('77c4b31d-9696-4e7c-a290-fa97281b93f4');
call sysoptions_save ( b2g(aid), 'arc_chanel', 'autoarc_chanel', 'defview');

set aid = g2b('1ce557be-079f-45f3-b396-15cfeadf301b');
call sysoptions_save ( b2g(aid), 'filterfieldgroup', 'mtzfltr', 'struct_type');

set aid = g2b('983b20b6-6434-4210-a6cd-7f295015d8e6');
call sysoptions_save ( b2g(aid), 'fileterfield', 'mtzfltr', 'struct_type');
set aid = g2b('d1a118c8-8ba1-45f2-9bc7-c4c3c4bf1a1e');
call sysoptions_save(  b2g(aid), 'fileterfield', 'filterfieldgroup', 'parent');

set aid = g2b('1a679aba-25c4-4d43-977d-d3b66afbfaba');
call sysoptions_save ( b2g(aid), 'filterfieldgroup', 'autofilterfieldgroup', 'defview');

set aid = g2b('ed5ddf5d-3468-49fd-9a9f-6bc231a24a42');
call sysoptions_save ( b2g(aid), 'fileterfield', 'autofileterfield', 'defview');

set aid = g2b('f2b0f140-0a02-4af3-8f28-f58618c97903');
call sysoptions_save ( b2g(aid), 'filters', 'mtzfltr', 'struct_type');

set aid = g2b('52431265-ecfd-4aef-9448-61a1bfcc8785');
call sysoptions_save ( b2g(aid), 'filters', 'autofilters', 'defview');

set aid = g2b('a0b767bc-c2de-4fec-8100-040fced983e3');
call sysoptions_save ( b2g(aid), 'iu_int_modules', 'bpdi', 'struct_type');

set aid = g2b('46c17297-0779-46d9-986c-28f0efeb1102');
call sysoptions_save ( b2g(aid), 'iu_int_modules', 'autoiu_int_modules', 'defview');

set aid = g2b('f5dd112f-6a5f-49a8-9409-b789d1d2d9af');
call sysoptions_save ( b2g(aid), 'armd_type', 'armd', 'struct_type');

set aid = g2b('af27aaa2-52e5-4088-835d-6af1bc6ec098');
call sysoptions_save ( b2g(aid), 'armd_type', 'autoarmd_type', 'defview');

set aid = g2b('896c7f68-de8a-4935-834a-44f35068d57c');
call sysoptions_save ( b2g(aid), 'armd_chaneltype', 'armd', 'struct_type');

set aid = g2b('97710002-3ce1-42b4-a763-e302840ad183');
call sysoptions_save ( b2g(aid), 'armd_chaneltype', 'autoarmd_chaneltype', 'defview');

set aid = g2b('91691e3c-fced-44e3-ad05-1269e5a04ba4');
call sysoptions_save ( b2g(aid), 'armd_info', 'armd', 'struct_type');

set aid = g2b('70c2b405-f699-411e-9659-8da365c7518b');
call sysoptions_save ( b2g(aid), 'armd_info', 'autoarmd_info', 'defview');

set aid = g2b('59bcf26d-e936-43be-99d2-43661adea40c');
call sysoptions_save ( b2g(aid), 'rptstruct', 'mtzrprt', 'struct_type');

set aid = g2b('0a85b079-9344-4fbd-9e0c-b39b73d3491c');
call sysoptions_save ( b2g(aid), 'rptfields', 'mtzrprt', 'struct_type');
set aid = g2b('7f6e5609-1c3c-48e9-b918-1b73cbe83ddd');
call sysoptions_save(  b2g(aid), 'rptfields', 'rptstruct', 'parent');


set aid = g2b('74f86fd3-293c-4fec-9067-56efa66b3b54');
call sysoptions_save ( b2g(aid), 'rptfields', 'autorptfields', 'defview');

set aid = g2b('cb37665a-7455-4c13-9eb1-6ca15db04d22');
call sysoptions_save ( b2g(aid), 'rptformula', 'mtzrprt', 'struct_type');

set aid = g2b('b4d571d2-7cc7-4be7-8178-2a8b747a329e');
call sysoptions_save ( b2g(aid), 'rptformula', 'autorptformula', 'defview');

set aid = g2b('fb4b9f13-86f2-48b4-acb0-4a07dd045342');
call sysoptions_save ( b2g(aid), 'reports', 'mtzrprt', 'struct_type');

set aid = g2b('c44a43f2-e5a7-47aa-bf8f-30c74f0d284c');
call sysoptions_save ( b2g(aid), 'reports', 'autoreports', 'defview');

set aid = g2b('45d02204-d8d5-4e10-823b-0f4c0f0874b6');
call sysoptions_save ( b2g(aid), 'arsms_data', 'arsms', 'struct_type');

set aid = g2b('71dfea13-2bb3-4420-a4b1-84684314deaa');
call sysoptions_save ( b2g(aid), 'arsms_data', 'autoarsms_data', 'defview');
set aid = g2b('539637c3-d2d1-4865-b1ad-794a7e151b2c');
call sysoptions_save(b2g(aid),'9181af0d-f0d0-4539-8cdb-67cdb500c41e','getfreenumber', 'methodname');
set aid = g2b('e3fe5890-3545-490c-b1fc-418bd2b92ea9');
call sysoptions_save(b2g(aid),'2bb30818-90ed-4627-8abb-85b3fba46750','vbnewpayout', 'methodname');
set aid = g2b('e7cec5c9-5192-4fb3-80c7-374eb7ec81fe');
call sysoptions_save(b2g(aid),'4fb59d1a-0123-47d3-9f4f-e12085c5d074','vbupdateitemname', 'methodname');
set aid = g2b('57023316-b568-437e-946d-4ce073a6d8ff');
call sysoptions_save(b2g(aid),'477b8d25-4ff7-491a-a0b0-d3437ec16957','makenewfolderec', 'methodname');
set aid = g2b('7dfde093-f450-4715-967a-f2ba9e9aedc3');
call sysoptions_save(b2g(aid),'42a1a436-8aa2-4f1f-999b-6680dff514de','vbsavehistory', 'methodname');
set aid = g2b('0ad1c5e6-b6a5-4394-aeb6-a6f014c52907');
call sysoptions_save(b2g(aid),'6fb1873a-45a9-420f-90ce-cde34b5aee19','autoclosesession', 'methodname');
set aid = g2b('0899adbb-c6db-496d-913c-33d31fdf1d1c');
call sysoptions_save(b2g(aid),'61393545-abf7-46f7-82f3-9b7e610dd9c0','vbupdateobjname', 'methodname');
set aid = g2b('c7316abc-87f0-440a-be14-bc5800e9ca83');
call sysoptions_save(b2g(aid),'897d3b55-6599-42db-aa1c-54bab3d2f597','getnewnumber', 'methodname');
set aid = g2b('24b0741e-8433-4c43-af17-ae1da675fe8d');
call sysoptions_save(b2g(aid),'2b0cee5c-7ffa-490d-9f5a-b5e8692551dd','erasenumber', 'methodname');
set aid = g2b('5a77793b-21d6-4830-9311-eedb61476b95');
call sysoptions_save(b2g(aid),'73be205e-f7ea-4a5a-a41f-85e25ca6511e','sessioncheckpoint', 'methodname');
set aid = g2b('805584b4-71fc-46f3-bf43-46bcba8f0398');
call sysoptions_save(b2g(aid),'a87a3a65-ecd1-414f-8fdf-91e53aced1ba','rowstoinstances', 'methodname');
set aid = g2b('ea50a102-e7e5-494e-b10c-fccd5ad6eee0');
call sysoptions_save(b2g(aid),'a282dd68-9188-4c40-b0f2-be69caee3dea','checkverbright', 'methodname');
set aid = g2b('1be6d1f0-73bf-40c7-adc6-d0103e148238');
call sysoptions_save(b2g(aid),'68bd7f75-ad54-4837-a6a7-a8dde3b2992a','mtzlogin', 'methodname');
set aid = g2b('213ab545-4c74-46af-9a55-b2e227517cfb');
call sysoptions_save(b2g(aid),'a2eee876-54d8-4aed-b124-775f5da2d911','vbaddobjbyref', 'methodname');
set aid = g2b('90e06cb3-8c51-4601-b737-2b7ccbafe161');
call sysoptions_save(b2g(aid),'73e7cf77-e6ba-42b4-a03b-4f67eedef4f1','adminunlockall', 'methodname');
set aid = g2b('9a8960ad-3661-4e12-b070-cf86416d1273');
call sysoptions_save(b2g(aid),'8d492a94-7078-4b7d-9847-aefc27b4855d','rowtoinstance', 'methodname');
set aid = g2b('98a3368c-1756-45b8-9e3b-26535557518b');
call sysoptions_save(b2g(aid),'7929d795-41c5-4a5c-bff2-a4e677a62143','sessiontouch', 'methodname');
set aid = g2b('f278c815-fe38-4247-a36d-e537850813f5');
call sysoptions_save(b2g(aid),'6c6e6daa-5cd2-48c3-a2aa-a24539b45a49','getservertime', 'methodname');
set aid = g2b('9b051e18-b9d8-441c-80a9-cf19bee9218c');
call sysoptions_save(b2g(aid),'0c9985af-27ee-4ad5-a564-635e0bffc9d5','testnumber', 'methodname');
set aid = g2b('f7798bbc-0bf3-4d0f-aa7e-a89dadc64370');
call sysoptions_save(b2g(aid),'8d3b38b4-c4f9-45ac-8ece-bf3be39d8100','logout', 'methodname');
set aid = g2b('19f3107b-7e6f-432a-b13f-e56b5282a943');
call sysoptions_save(b2g(aid),'d8914fb4-6b5d-491a-a72f-985617727583','wffuncname', 'methodname');
set aid = g2b('32e13266-9877-444c-9dfb-993836f87f5c');
call sysoptions_save(b2g(aid),'074e33b9-1ec9-4aa1-8300-e98c73d55fe2','login', 'methodname');
set aid = g2b('54d9eb25-c688-43f0-88fd-a57a943377fe');
call sysoptions_save(b2g(aid),'d49a40b9-6174-4946-a81d-b7fe105c3546','adminunlock', 'methodname');
set aid = g2b('eae0ab6f-62e4-4445-aa63-826efa5ae219');
call sysoptions_save(b2g(aid),'5b8fb7b9-d8b1-4ca0-90af-55f83d1a6e5d','vbmakereport', 'methodname');
set aid = g2b('d3cc9ce8-febb-4f24-9687-c578ada0fc4d');
call sysoptions_save(b2g(aid),'94e8f6db-106a-44dc-9483-86c801798ff0','vbopenref', 'methodname');
set aid = g2b('336eac4a-b37e-4e40-ba4c-79e3fb7ed53e');
call sysoptions_save(b2g(aid),'069956dc-3305-45ef-9331-91ce323b5942','wfdefname', 'methodname');
set aid = g2b('6b900fdf-afe6-4453-af47-541f49808c02');
call sysoptions_save(b2g(aid),'aa4085e6-745b-4a37-8ec4-65d99a653966','vbremovesymmetricobjref', 'methodname');
set aid = g2b('6cbb6348-f835-4257-98cb-829b1493e6d3');
call sysoptions_save(b2g(aid),'49a49ae8-db4b-4329-80fb-801a24c9d7af','clearnumerators', 'methodname');
set aid = g2b('a13b6fcf-5574-4b4f-9e28-c4eb6f066373');
call sysoptions_save(b2g(aid),'79e6bdeb-91d5-4b2e-81f7-3e091fb65e3a','vbcheckdescrs', 'methodname');
set aid = g2b('9f93ce56-5898-4780-b760-fdca4ed2dab4');
call sysoptions_save(b2g(aid),'0454d6f0-8624-4887-94b0-64fbc74775e6','sessionverify', 'methodname');
set aid = g2b('d6337625-bc19-4696-b801-ac3c33c07535');
call sysoptions_save(b2g(aid),'5b376af5-339b-4365-ba80-785e28bcf4da','vbupdatesymmetricobjref', 'methodname');
set aid = g2b('c0fe1466-419c-49a0-9f8e-427edca46e48');
call sysoptions_save(b2g(aid),'31ec6cf7-8dbd-4efe-bf12-4d168f653d34','vbapplysecurity', 'methodname');
set aid = g2b('3ef02c5e-8a51-4a43-9d0c-8e75e00d2f79');
call sysoptions_save(b2g(aid),'79ded4fd-045c-45f8-ac79-2e5a3d956d97','vbmigrateright', 'methodname');
call login( asession  , 'init', 'init');
select count(*) into aec from instance where objtype='mtzusers';
if aec=0 then
   set asecid=g2b('4e15269e-a33c-4222-82ca-59723d82b056');
   insert into instance(instanceid,objtype,name) values(asecid, 'mtzusers','???????????? ? ??????');
else
   select instanceid into asecid from instance where objtype='mtzusers';
end if;
delete from users where login = 'supervisor';
set auid=g2b('76cf54c1-4bf0-4f1e-ae49-035c433782d7');
insert into users(usersid,instanceid,password,login,name,changestamp) values(auid, asecid,  
 'bami',  'supervisor', '?????????????',now());
call logout(asession);
delete from users where login = 'init';
end
$$

--
-- Создать процедуру "instancevalidator_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_brief(
 acursession varchar(38),
 ainstancevalidatorid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ainstancevalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
 if  aec >0 then
   set abrief=instancevalidator_brief_f(g2b(ainstancevalidatorid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "instancevalidator_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_client_trigger(
 acursession varchar(38),
 aINSTANCEVALIDATORid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "instancevalidator_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into instancevalidator 
 ( instancevalidatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(instancevalidatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from instancevalidator
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "instancevalidator_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_delete(
 acursession varchar(38),
 ainstancevalidatorid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=instancevalidator' result;
    leave body;
  end if;
 call instancevalidator_logger(acursession,ainstancevalidatorid) ; 
  delete from  instancevalidator 
  where  instancevalidatorid = g2b(ainstancevalidatorid) ;
  delete from num_values where ownerpartname='instancevalidator' and ownerrowid=g2b(ainstancevalidatorid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "instancevalidator_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from instancevalidator where instancevalidatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "instancevalidator_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call instancevalidator_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update instancevalidator set lockuserid =auserid ,locksessionid=null  where instancevalidatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update instancevalidator set lockuserid=null ,locksessionid =acursession  where instancevalidatorid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "instancevalidator_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_logger(
 acursession varchar(38),
 ainstancevalidatorid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "instancevalidator_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from instancevalidator where  instancevalidatorid=arowid;
  set aparenttable = 'objecttype';
 end
$$

--
-- Создать процедуру "instancevalidator_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ainstancevalidatorid varchar(38)
,atarget varchar(38)/* ????????? *//* ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from instancevalidator where instancevalidatorid=g2b(ainstancevalidatorid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=instancevalidator' result;
    leave body;
  end if;
 start transaction ; 
 call instancevalidator_logger(acursession,ainstancevalidatorid) ; 
 update  instancevalidator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  instancevalidatorid = g2b(ainstancevalidatorid) ;


call instancevalidator_client_trigger(acursession,ainstancevalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=instancevalidator' result;
    leave body;
  end if;
 start transaction;  
 insert into   instancevalidator
 (  changestamp,instancevalidatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(ainstancevalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call instancevalidator_client_trigger(acursession,ainstancevalidatorid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "instancevalidator_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instancevalidator_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call instancevalidator_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update instancevalidator set lockuserid =null  where instancevalidatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update instancevalidator set locksessionid =null  where instancevalidatorid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "instance_archive"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_archive(
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec>0 then
         update instance set archived=1 where instanceid=g2b(ainstanceid);
    end if;
end
$$

--
-- Создать процедуру "instance_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_brief(
 acursession varchar(38),
 ainstanceid varchar(38),
 out abrief varchar(255)
)
body:begin
 declare atmpstr varchar(255);
 declare aaccess int;
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 if ainstanceid is null then set abrief=''; leave body; end if;
 select count(*) into aec from instance where instanceid=g2b(ainstanceid);
 if aec>0 then
   select concat(ifnull(name,''),'; ',ifnull(objtype,'')) into abrief 
   from instance  where  instanceid = g2b(ainstanceid);
 else 
   set abrief= '???????? ?????????????';
end if;
end
$$

--
-- Создать процедуру "instance_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_delete(
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec>0 then
         delete from instance where instanceid=g2b(ainstanceid);
        end if;
end
$$

--
-- Создать процедуру "instance_hcl"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_hcl(
acursession varchar(38),
arowid varchar(38),
out aislocked int
)
body:begin
declare atmpstr varchar(255);
declare aobjtype varchar(255);
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec>0 then
    set aislocked=0;
    end if;
end
$$

--
-- Создать процедуру "instance_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_islocked(
 acursession varchar(38),
 arowid varchar(38) ,
 out aislocked integer 
)
body:begin
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
   declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(arowid);
   if aec>0 then
        select auserid = usersid  from the_session where the_sessionid=g2b(acursession);
        select alockuserid = lockuserid,alocksessionid = locksessionid from instance where instanceid=g2b(arowid);
        /* verify this row */
   if not alockuserid is null then
    if  alockuserid <> auserid then
      set aislocked = 4; /* checkout by another user */
      leave body;
    else
     set aislocked = 2; /* checkout by caller */
     leave body;
    end if;
   end if;
   if not alocksessionid is null then
        if  alocksessionid <> acursession then
            set aislocked = 3; /* lockes by another user */
            leave body;
        else
            set aislocked = 1; /* locked by caller */
            leave body;
        end if;
   end if;
  end if;
 end
$$

--
-- Создать процедуру "instance_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_lock(
 acursession varchar(38),
 arowid varchar(38) ,
 alockmode integer
)
body:begin

 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 select count(*) into aec from instance where instanceid=g2b(arowid);
 if aec>0 then
  select auserid = usersid  from the_session where the_sessionid=g2b(acursession);
  call instance_islocked( acursession,arowid,aislocked);
  if aislocked >=3 then
    leave body;
  end if;
   if  alockmode =2 then
    update instance  set lockuserid =g2b(auserid ),locksessionid=null  where instanceid=g2b(arowid);
     leave body;
   end if;
   if  alockmode =1 then
    update instance  set lockuserid=null ,locksessionid =g2b(acursession)  where instanceid=g2b(arowid);
     leave body;
   end if;
end if;
 end
$$

--
-- Создать процедуру "instance_owner"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_owner(  acursession varchar(38) ,ainstanceid varchar(38), aownerpartname varchar(255), aownerrowid varchar(38))
body:begin
declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
select count(*) into aec from instance where instanceid=g2b(ainstanceid);
if aec>0 then
  if aownerpartname is null or aownerrowid is null then
     update instance set ownerpartname=null, ownerrowid = null where instanceid=g2b(ainstanceid);
  else
     update instance set ownerpartname=aownerpartname, ownerrowid = g2b(aownerrowid) where instanceid=g2b(ainstanceid);
  end if;
end if;
end
$$

--
-- Создать процедуру "instance_rearchive"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_rearchive(
acursession varchar(38),
ainstanceid varchar(38)
)
body:begin
   declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
   select count(*) into aec from instance where instanceid=g2b(ainstanceid);
    if aec>0 then
         update instance set archived=0 where instanceid=g2b(ainstanceid);
    end if;
end
$$

--
-- Создать процедуру "instance_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_save(
acursession varchar(38),
ainstanceid varchar(38),
aobjtype varchar(255),
aname varchar(255)
)
body:begin
 declare atmpstr varchar(255);
 declare assid binary(16);
 declare atmpid binary(16);
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare astatusid binary(16);
declare aec  int;
select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
end if;
select count(*) into aec from instance where instanceid=g2b(ainstanceid);
if aec>0 then
   update instance set name = aname,changestamp=now() where  instanceid=g2b(ainstanceid);
else
    select count(*) into aec from typelist where name = aobjtype;
    if aec then
      start transaction;
      set astatusid=null;
      select objstatusid into astatusid from objstatus join objecttype on
      objecttype.objecttypeid=objstatus.parentstructrowid and objecttype.name=aobjtype and isstartup<>0;
      if not astatusid is null then
        insert into instance(instanceid,name,objtype,status,changestamp) values(g2b(ainstanceid),aname,aobjtype,g2b(astatusid),now());
      else 
        insert into instance(instanceid,name,objtype,changestamp) values(g2b(ainstanceid),aname,aobjtype,now());
      end if; 
      commit;
    end if;
end if;
select 'ok' result;
end
$$

--
-- Создать процедуру "instance_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE instance_unlock(
 acursession varchar(38),
 arowid varchar(38)
)
body:begin
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked int;
 declare aparenttable varchar(255);
 declare aec  int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
 end if;
 select count(*) into aec from instance where instanceid=g2b(arowid);
 if aec>0 then
 call instance_islocked( acursession,arowid,aislocked );
 if aislocked >=3 then
    leave body;
  end if;
   if  aislocked =2 then
    update instance set lockuserid=null   where instanceid=g2b(arowid);
     leave body;
   end if;
   if  aislocked =1 then
    update instance set locksessionid=null   where instanceid=g2b(arowid);
     leave body;
   end if;
end if;
 end
$$

--
-- Создать процедуру "iu_crole_archive"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_archive(
 acursession varchar(38),
 aiu_croleid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare atmpid binary(16);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec>0 then
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_crole' result;
    leave body;
  end if;
 call iu_crole_logger(acursession,aiu_croleid) ; 
  update   iu_crole set archived = 1 
  where  iu_croleid = g2b(aiu_croleid) ;
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_crole_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_brief(
 acursession varchar(38),
 aiu_croleid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_croleid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
 if  aec >0 then
   set abrief=iu_crole_brief_f(g2b(aiu_croleid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_crole_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_client_trigger(
 acursession varchar(38),
 aiu_croleid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_crole_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_crole 
 ( iu_croleid 
,instanceid
,archived
,name

,allowsetuser

 ) select 
copymap(acopyaction,b2g(iu_croleid)) 
,copymap(acopyaction,b2g(instanceid))
,archived
,name

,allowsetuser

 from iu_crole
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_crole_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_delete(
 acursession varchar(38),
 aiu_croleid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec>0 then
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_crole' result;
    leave body;
  end if;
 call iu_crole_logger(acursession,aiu_croleid) ; 
  delete from  iu_crole 
  where  iu_croleid = g2b(aiu_croleid) ;
  delete from num_values where ownerpartname='iu_crole' and ownerrowid=g2b(aiu_croleid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_crole_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_crole where iu_croleid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_crole_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_crole_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_crole set lockuserid =auserid ,locksessionid=null  where iu_croleid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_crole set lockuserid=null ,locksessionid =acursession  where iu_croleid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_crole_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_logger(
 acursession varchar(38),
 aiu_croleid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_crole_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_crole where  iu_croleid=arowid;
 end
$$

--
-- Создать процедуру "iu_crole_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_croleid varchar(38)
,aname
 varchar (120)/* ???????? *//* ???????? */
,aallowsetuser
 integer/* ??????? ?????? ?????????? *//* ??????? ?????? ?????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_crole where iu_croleid=g2b(aiu_croleid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_crole' result;
    leave body;
  end if;
 start transaction ; 
 call iu_crole_logger(acursession,aiu_croleid) ; 
 update  iu_crole set changestamp=now() 
,
  name=aname
,
  allowsetuser=aallowsetuser
  where  iu_croleid = g2b(aiu_croleid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from iu_crole where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=???? ???????=(???????????? ??? ????.????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_crole_client_trigger(acursession,aiu_croleid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpdr.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_crole' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_crole
 (  changestamp,iu_croleid 
,instanceid
,name

,allowsetuser

 ) values (now(), g2b(aiu_croleid) 
,g2b(ainstanceid)
,aname

,aallowsetuser

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from iu_crole where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=???? ???????=(???????????? ??? ????.????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_crole_client_trigger(acursession,aiu_croleid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_crole_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_crole_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_crole_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_crole set lockuserid =null  where iu_croleid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_crole set locksessionid =null  where iu_croleid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_int_modules_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_brief(
 acursession varchar(38),
 aiu_int_modulesid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_int_modulesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
 if  aec >0 then
   set abrief=iu_int_modules_brief_f(g2b(aiu_int_modulesid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_int_modules_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_client_trigger(
 acursession varchar(38),
 aiu_int_modulesid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_int_modules_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_int_modules 
 ( iu_int_modulesid 
,instanceid
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 ) select 
copymap(acopyaction,b2g(iu_int_modulesid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 from iu_int_modules
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_int_modules_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_delete(
 acursession varchar(38),
 aiu_int_modulesid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
if aec>0 then
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_int_modules' result;
    leave body;
  end if;
 call iu_int_modules_logger(acursession,aiu_int_modulesid) ; 
  delete from  iu_int_modules 
  where  iu_int_modulesid = g2b(aiu_int_modulesid) ;
  delete from num_values where ownerpartname='iu_int_modules' and ownerrowid=g2b(aiu_int_modulesid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_int_modules_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_int_modules where iu_int_modulesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_int_modules_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_int_modules_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_int_modules set lockuserid =auserid ,locksessionid=null  where iu_int_modulesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_int_modules set lockuserid=null ,locksessionid =acursession  where iu_int_modulesid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_int_modules_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_logger(
 acursession varchar(38),
 aiu_int_modulesid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_int_modules_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_int_modules where  iu_int_modulesid=arowid;
 end
$$

--
-- Создать процедуру "iu_int_modules_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_int_modulesid varchar(38)
,asequence
 integer/* ? ?/? *//* ? ?/? */
,atheicon
 varchar (64)/* ?????? *//* ?????? */
,agroupname
 varchar (60)/* ???? ???????? ??????? *//* ???? ???????? ??????? */
,aname
 varchar (255)/* ???????? ???? *//* ???????? ???? */
,acaption
 varchar (80)/* ??????? *//* ??????? */
,avisiblecontrol
 integer/* ?????????? ?????????? *//* ?????????? ?????????? */
,acontroldocmode
 varchar (10)/* ????????? ?? ???????? *//* ????????? ?? ???????? */
,aotherdocmode
 varchar (10)/* ????? ????????? *//* ????? ????????? */
,amydocmode
 varchar (10)/* ??? ????????? *//* ??? ????????? */
,aallobjects
 integer/* ??? ????? *//* ??? ????? */
,acolegsobject
 integer/* ??????? ?????? *//* ??????? ?????? */
,asubstructobjects
 integer/* ??????????? ????????????? *//* ??????????? ????????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_int_modules where iu_int_modulesid=g2b(aiu_int_modulesid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_int_modules' result;
    leave body;
  end if;
 start transaction ; 
 call iu_int_modules_logger(acursession,aiu_int_modulesid) ; 
 update  iu_int_modules set changestamp=now() 
,
  sequence=asequence
,
  theicon=atheicon
,
  groupname=agroupname
,
  name=aname
,
  caption=acaption
,
  visiblecontrol=avisiblecontrol
,
  controldocmode=acontroldocmode
,
  otherdocmode=aotherdocmode
,
  mydocmode=amydocmode
,
  allobjects=aallobjects
,
  colegsobject=acolegsobject
,
  substructobjects=asubstructobjects
  where  iu_int_modulesid = g2b(aiu_int_modulesid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_int_modules where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(?????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_int_modules_client_trigger(acursession,aiu_int_modulesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpdi.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_int_modules' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_int_modules
 (  changestamp,iu_int_modulesid 
,instanceid
,sequence

,theicon

,groupname

,name

,caption

,visiblecontrol

,controldocmode

,otherdocmode

,mydocmode

,allobjects

,colegsobject

,substructobjects

 ) values (now(), g2b(aiu_int_modulesid) 
,g2b(ainstanceid)
,asequence

,atheicon

,agroupname

,aname

,acaption

,avisiblecontrol

,acontroldocmode

,aotherdocmode

,amydocmode

,aallobjects

,acolegsobject

,asubstructobjects

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_int_modules where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(?????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_int_modules_client_trigger(acursession,aiu_int_modulesid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_int_modules_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_int_modules_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_int_modules_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_int_modules set lockuserid =null  where iu_int_modulesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_int_modules set locksessionid =null  where iu_int_modulesid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_archive"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_archive(
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare atmpid binary(16);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec>0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_rcfg_def' result;
    leave body;
  end if;
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
  update   iu_rcfg_def set archived = 1 
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_brief(
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
 if  aec >0 then
   set abrief=iu_rcfg_def_brief_f(g2b(aiu_rcfg_defid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_rcfg_def_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_client_trigger(
 acursession varchar(38),
 aiu_rcfg_defid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_rcfg_def_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_def 
 ( iu_rcfg_defid 
,instanceid
,archived
,therole

 ) select 
copymap(acopyaction,b2g(iu_rcfg_defid)) 
,copymap(acopyaction,b2g(instanceid))
,archived
,therole

 from iu_rcfg_def
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_rcfg_def_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_delete(
 acursession varchar(38),
 aiu_rcfg_defid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec>0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_rcfg_def' result;
    leave body;
  end if;
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
  delete from  iu_rcfg_def 
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
  delete from num_values where ownerpartname='iu_rcfg_def' and ownerrowid=g2b(aiu_rcfg_defid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_def where iu_rcfg_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_rcfg_def_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_def_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_def set lockuserid =auserid ,locksessionid=null  where iu_rcfg_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_def set lockuserid=null ,locksessionid =acursession  where iu_rcfg_defid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_logger(
 acursession varchar(38),
 aiu_rcfg_defid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_def where  iu_rcfg_defid=arowid;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_defid varchar(38)
,atherole varchar(38)/* ???? *//* ???? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_def where iu_rcfg_defid=g2b(aiu_rcfg_defid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_rcfg_def' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_def_logger(acursession,aiu_rcfg_defid) ; 
 update  iu_rcfg_def set changestamp=now() 
,
  therole=g2b(atherole)
  where  iu_rcfg_defid = g2b(aiu_rcfg_defid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from iu_rcfg_def where 1=1  
 and therole=g2b(atherole);
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=???? ???????=(???? ?????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_def_client_trigger(acursession,aiu_rcfg_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_rcfg_def' result;
    leave body;
  end if;
select count(*) into aec from iu_rcfg_def where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <iu_rcfg_def>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   iu_rcfg_def
 (  changestamp,iu_rcfg_defid 
,instanceid
,therole

 ) values (now(), g2b(aiu_rcfg_defid) 
,g2b(ainstanceid)
,g2b(atherole)

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from iu_rcfg_def where 1=1  
 and therole=g2b(atherole);
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=???? ???????=(???? ?????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_def_client_trigger(acursession,aiu_rcfg_defid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_def_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_def_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_def_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_def set lockuserid =null  where iu_rcfg_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_def set locksessionid =null  where iu_rcfg_defid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_brief(
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_docmodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
 if  aec >0 then
   set abrief=iu_rcfg_docmode_brief_f(g2b(aiu_rcfg_docmodeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_rcfg_docmode_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_client_trigger(
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_rcfg_docmode_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_docmode 
 ( iu_rcfg_docmodeid 
,instanceid
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 ) select 
copymap(acopyaction,b2g(iu_rcfg_docmodeid)) 
,copymap(acopyaction,b2g(instanceid))
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 from iu_rcfg_docmode
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_delete(
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
if aec>0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_rcfg_docmode' result;
    leave body;
  end if;
 call iu_rcfg_docmode_logger(acursession,aiu_rcfg_docmodeid) ; 
  delete from  iu_rcfg_docmode 
  where  iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid) ;
  delete from num_values where ownerpartname='iu_rcfg_docmode' and ownerrowid=g2b(aiu_rcfg_docmodeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_docmode where iu_rcfg_docmodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_docmode_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_docmode set lockuserid =auserid ,locksessionid=null  where iu_rcfg_docmodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_docmode set lockuserid=null ,locksessionid =acursession  where iu_rcfg_docmodeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_logger(
 acursession varchar(38),
 aiu_rcfg_docmodeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_docmode where  iu_rcfg_docmodeid=arowid;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_docmodeid varchar(38)
,athe_document varchar(38)/* ??? ????????? *//* ??? ????????? */
,aaddmode
 varchar (4)/* ????? ???  ???????? *//* ????? ???  ???????? */
,aeditmode
 varchar (4)/* ????? ??? ?????????????? *//* ????? ??? ?????????????? */
,aallowadd
 integer/* ????? ????????? *//* ????? ????????? */
,aallowdelete
 integer/* ????? ??????? *//* ????? ??????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=g2b(aiu_rcfg_docmodeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_rcfg_docmode' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_docmode_logger(acursession,aiu_rcfg_docmodeid) ; 
 update  iu_rcfg_docmode set changestamp=now() 
,
  the_document=g2b(athe_document)
,
  addmode=aaddmode
,
  editmode=aeditmode
,
  allowadd=aallowadd
,
  allowdelete=aallowdelete
  where  iu_rcfg_docmodeid = g2b(aiu_rcfg_docmodeid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_docmode where  instanceid=g2b(ainstanceid) 
 and the_document=g2b(athe_document);
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=????? ????????? ???????=(??? ????????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_docmode_client_trigger(acursession,aiu_rcfg_docmodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_rcfg_docmode' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_rcfg_docmode
 (  changestamp,iu_rcfg_docmodeid 
,instanceid
,the_document

,addmode

,editmode

,allowadd

,allowdelete

 ) values (now(), g2b(aiu_rcfg_docmodeid) 
,g2b(ainstanceid)
,g2b(athe_document)

,aaddmode

,aeditmode

,aallowadd

,aallowdelete

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_docmode where  instanceid=g2b(ainstanceid) 
 and the_document=g2b(athe_document);
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=????? ????????? ???????=(??? ????????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_docmode_client_trigger(acursession,aiu_rcfg_docmodeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_docmode_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_docmode_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_docmode_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_docmode set lockuserid =null  where iu_rcfg_docmodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_docmode set locksessionid =null  where iu_rcfg_docmodeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_brief(
 acursession varchar(38),
 aiu_rcfg_modid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_rcfg_modid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
 if  aec >0 then
   set abrief=iu_rcfg_mod_brief_f(g2b(aiu_rcfg_modid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_rcfg_mod_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_client_trigger(
 acursession varchar(38),
 aiu_rcfg_modid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_rcfg_mod_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_rcfg_mod 
 ( iu_rcfg_modid 
,instanceid
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 ) select 
copymap(acopyaction,b2g(iu_rcfg_modid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 from iu_rcfg_mod
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_delete(
 acursession varchar(38),
 aiu_rcfg_modid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
if aec>0 then
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_rcfg_mod' result;
    leave body;
  end if;
 call iu_rcfg_mod_logger(acursession,aiu_rcfg_modid) ; 
  delete from  iu_rcfg_mod 
  where  iu_rcfg_modid = g2b(aiu_rcfg_modid) ;
  delete from num_values where ownerpartname='iu_rcfg_mod' and ownerrowid=g2b(aiu_rcfg_modid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_rcfg_mod where iu_rcfg_modid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_rcfg_mod_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_rcfg_mod set lockuserid =auserid ,locksessionid=null  where iu_rcfg_modid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_rcfg_mod set lockuserid=null ,locksessionid =acursession  where iu_rcfg_modid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_logger(
 acursession varchar(38),
 aiu_rcfg_modid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_rcfg_mod where  iu_rcfg_modid=arowid;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_rcfg_modid varchar(38)
,asequence
 integer/* ? ?/? *//* ? ?/? */
,acaption
 varchar (80)/* ??????? *//* ??????? */
,amoduleaccessible
 integer/* ???????? *//* ???????? */
,atheicon
 varchar (64)/* ?????? *//* ?????? */
,aname
 varchar (255)/* ???????? ???? *//* ???????? ???? */
,agroupname
 varchar (60)/* ???? ???????? ??????? *//* ???? ???????? ??????? */
,aallobjects
 integer/* ??? ????? *//* ??? ????? */
,acolegsobject
 integer/* ??????? ?????? *//* ??????? ?????? */
,asubstructobjects
 integer/* ??????????? ????????????? *//* ??????????? ????????????? */
,amydocmode
 varchar (10)/* ??? ????????? *//* ??? ????????? */
,aotherdocmode
 varchar (10)/* ????? ????????? *//* ????? ????????? */
,acontroldocmode
 varchar (10)/* ????????? ?? ???????? *//* ????????? ?? ???????? */
,avisiblecontrol
 integer/* ?????????? ?????????? *//* ?????????? ?????????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=g2b(aiu_rcfg_modid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_rcfg_mod' result;
    leave body;
  end if;
 start transaction ; 
 call iu_rcfg_mod_logger(acursession,aiu_rcfg_modid) ; 
 update  iu_rcfg_mod set changestamp=now() 
,
  sequence=asequence
,
  caption=acaption
,
  moduleaccessible=amoduleaccessible
,
  theicon=atheicon
,
  name=aname
,
  groupname=agroupname
,
  allobjects=aallobjects
,
  colegsobject=acolegsobject
,
  substructobjects=asubstructobjects
,
  mydocmode=amydocmode
,
  otherdocmode=aotherdocmode
,
  controldocmode=acontroldocmode
,
  visiblecontrol=avisiblecontrol
  where  iu_rcfg_modid = g2b(aiu_rcfg_modid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_mod where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(?????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_mod_client_trigger(acursession,aiu_rcfg_modid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bprcfg.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_rcfg_mod' result;
    leave body;
  end if;
 start transaction;  
 insert into   iu_rcfg_mod
 (  changestamp,iu_rcfg_modid 
,instanceid
,sequence

,caption

,moduleaccessible

,theicon

,name

,groupname

,allobjects

,colegsobject

,substructobjects

,mydocmode

,otherdocmode

,controldocmode

,visiblecontrol

 ) values (now(), g2b(aiu_rcfg_modid) 
,g2b(ainstanceid)
,asequence

,acaption

,amoduleaccessible

,atheicon

,aname

,agroupname

,aallobjects

,acolegsobject

,asubstructobjects

,amydocmode

,aotherdocmode

,acontroldocmode

,avisiblecontrol

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from iu_rcfg_mod where  instanceid=g2b(ainstanceid) 
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(?????? ????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call iu_rcfg_mod_client_trigger(acursession,aiu_rcfg_modid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_rcfg_mod_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_rcfg_mod_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_rcfg_mod_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_rcfg_mod set lockuserid =null  where iu_rcfg_modid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_rcfg_mod set locksessionid =null  where iu_rcfg_modid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_u_def_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_brief(
 acursession varchar(38),
 aiu_u_defid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aiu_u_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from iu_u_def where iu_u_defid=g2b(aiu_u_defid);
 if  aec >0 then
   set abrief=iu_u_def_brief_f(g2b(aiu_u_defid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "iu_u_def_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_client_trigger(
 acursession varchar(38),
 aiu_u_defid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "iu_u_def_commitfromtemp"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_commitfromtemp(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def
 where   instanceid =g2b(ainstanceid); 
 insert into iu_u_def 
 (timestamp, changestamp,iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
timestamp, changestamp,iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_u_def_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into iu_u_def 
 ( iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
copymap(acopyaction,b2g(iu_u_defid)) 
,copymap(acopyaction,b2g(instanceid))
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_u_def_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_delete(
 acursession varchar(38),
 aiu_u_defid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare asyslogid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_u_def_temp  where sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;
if aec>0 then
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=iu_u_def' result;
    leave body;
  end if;
 call iu_u_def_logger(acursession,aiu_u_defid) ; 
  delete from  iu_u_def_temp 
  where sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;
  delete from num_values where ownerpartname='iu_u_def' and ownerrowid=g2b(aiu_u_defid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_u_def_droptempdata"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_droptempdata(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_u_def_gettotemp"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_gettotemp(
 acursession varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
delete from iu_u_def_temp
 where  sessionid=g2b(acursession) and instanceid =g2b(ainstanceid); 
 insert into iu_u_def_temp 
 (timestamp,changestamp,sessionid, iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) select 
timestamp,changestamp,g2b(acursession),iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 from iu_u_def
 where instanceid =g2b(ainstanceid); 
 end
$$

--
-- Создать процедуру "iu_u_def_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from iu_u_def where iu_u_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "iu_u_def_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call iu_u_def_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update iu_u_def set lockuserid =auserid ,locksessionid=null  where iu_u_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update iu_u_def set lockuserid=null ,locksessionid =acursession  where iu_u_defid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "iu_u_def_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_logger(
 acursession varchar(38),
 aiu_u_defid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "iu_u_def_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from iu_u_def where  iu_u_defid=arowid;
 end
$$

--
-- Создать процедуру "iu_u_def_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aiu_u_defid varchar(38)
,atheclient varchar(38)/* ?????? *//* ?????? */
,alastname
 varchar (120)/* ??????? *//* ??????? */
,aname
 varchar (120)/* ??? *//* ??? */
,asurname
 varchar (120)/* ???????? *//* ???????? */
,acurrole varchar(38)/* ???? ? ???????????? *//* ???? ? ???????????? */
,asendtomail
 integer/* ????????? ?? ????? *//* ????????? ?? ????? */
,afreelancer
 integer/* ????????? ?????? *//* ????????? ?????? */
,aemail
 varchar (60)/* e-mail *//* e-mail */
,athephone
 varchar (40)/* ??????? *//* ??????? */
,alogin
 varchar (64)/* ??? ??? ????? *//* ??? ??? ????? */
)
body: begin  
declare asyslogid binary(16);
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from iu_u_def_temp where sessionid=g2b(acursession) and iu_u_defid=g2b(aiu_u_defid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=iu_u_def' result;
    leave body;
  end if;
 start transaction ; 
 call iu_u_def_logger(acursession,aiu_u_defid) ; 
 update  iu_u_def_temp set changestamp=now() 
,
  theclient=g2b(atheclient)
,
  lastname=alastname
,
  name=aname
,
  surname=asurname
,
  currole=g2b(acurrole)
,
  sendtomail=asendtomail
,
  freelancer=afreelancer
,
  email=aemail
,
  thephone=athephone
,
  login=alogin
  where  sessionid=g2b(acursession) and iu_u_defid = g2b(aiu_u_defid) ;


call iu_u_def_client_trigger(acursession,aiu_u_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'bpu.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=iu_u_def' result;
    leave body;
  end if;
select count(*) into aec from iu_u_def_temp where  sessionid=g2b(acursession) and 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <iu_u_def>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   iu_u_def_temp
 ( changestamp,sessionid, iu_u_defid 
,instanceid
,theclient

,lastname

,name

,surname

,currole

,sendtomail

,freelancer

,email

,thephone

,login

 ) values (now(), g2b(acursession), g2b(aiu_u_defid) 
,g2b(ainstanceid)
,g2b(atheclient)

,alastname

,aname

,asurname

,g2b(acurrole)

,asendtomail

,afreelancer

,aemail

,athephone

,alogin

 ) ;


call iu_u_def_client_trigger(acursession,aiu_u_defid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "iu_u_def_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE iu_u_def_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call iu_u_def_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update iu_u_def set lockuserid =null  where iu_u_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update iu_u_def set locksessionid =null  where iu_u_defid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "jcolumnsource_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_brief(
 acursession varchar(38),
 ajcolumnsourceid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajcolumnsourceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
 if  aec >0 then
   set abrief=jcolumnsource_brief_f(g2b(ajcolumnsourceid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "jcolumnsource_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_client_trigger(
 acursession varchar(38),
 aJColumnSourceid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "jcolumnsource_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into jcolumnsource 
 ( jcolumnsourceid 
,parentstructrowid
,srcpartview

,viewfield

 ) select 
copymap(acopyaction,b2g(jcolumnsourceid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,srcpartview

,viewfield

 from jcolumnsource
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "jcolumnsource_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_delete(
 acursession varchar(38),
 ajcolumnsourceid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
if aec>0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=jcolumnsource' result;
    leave body;
  end if;
 call jcolumnsource_logger(acursession,ajcolumnsourceid) ; 
  delete from  jcolumnsource 
  where  jcolumnsourceid = g2b(ajcolumnsourceid) ;
  delete from num_values where ownerpartname='jcolumnsource' and ownerrowid=g2b(ajcolumnsourceid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "jcolumnsource_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from jcolumnsource where jcolumnsourceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "jcolumnsource_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call jcolumnsource_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update jcolumnsource set lockuserid =auserid ,locksessionid=null  where jcolumnsourceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update jcolumnsource set lockuserid=null ,locksessionid =acursession  where jcolumnsourceid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "jcolumnsource_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_logger(
 acursession varchar(38),
 ajcolumnsourceid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "jcolumnsource_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from jcolumnsource where  jcolumnsourceid=arowid;
  set aparenttable = 'journalcolumn';
 end
$$

--
-- Создать процедуру "jcolumnsource_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ajcolumnsourceid varchar(38)
,asrcpartview varchar(38)/* ????????????? *//* ????????????? */
,aviewfield
 varchar (255)/* ???? ????????????? *//* ???? ????????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from jcolumnsource where jcolumnsourceid=g2b(ajcolumnsourceid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=jcolumnsource' result;
    leave body;
  end if;
 start transaction ; 
 call jcolumnsource_logger(acursession,ajcolumnsourceid) ; 
 update  jcolumnsource set changestamp=now() 
,
  srcpartview=g2b(asrcpartview)
,
  viewfield=aviewfield
  where  jcolumnsourceid = g2b(ajcolumnsourceid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from jcolumnsource where  parentstructrowid=g2b(aparentstructrowid) 
 and srcpartview=g2b(asrcpartview);
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call jcolumnsource_client_trigger(acursession,ajcolumnsourceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=jcolumnsource' result;
    leave body;
  end if;
 start transaction;  
 insert into   jcolumnsource
 (  changestamp,jcolumnsourceid 
,parentstructrowid
,srcpartview

,viewfield

 ) values (now(), g2b(ajcolumnsourceid) 
,g2b(aparentstructrowid)
,g2b(asrcpartview)

,aviewfield

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from jcolumnsource where  parentstructrowid=g2b(aparentstructrowid) 
 and srcpartview=g2b(asrcpartview);
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call jcolumnsource_client_trigger(acursession,ajcolumnsourceid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "jcolumnsource_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE jcolumnsource_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call jcolumnsource_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update jcolumnsource set lockuserid =null  where jcolumnsourceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update jcolumnsource set locksessionid =null  where jcolumnsourceid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "journalcolumn_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_brief(
 acursession varchar(38),
 ajournalcolumnid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalcolumnid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
 if  aec >0 then
   set abrief=journalcolumn_brief_f(g2b(ajournalcolumnid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "journalcolumn_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_client_trigger(
 acursession varchar(38),
 aJournalColumnid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "journalcolumn_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_journalcolumn cursor for
select journalcolumnid from journalcolumn where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journalcolumn 
 ( journalcolumnid 
,instanceid
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 ) select 
copymap(acopyaction,b2g(journalcolumnid)) 
,copymap(acopyaction,b2g(instanceid))
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 from journalcolumn
 where instanceid =g2b( ainstanceid); 
open copy_cursor_journalcolumn;
  set  fetch_done=false;
fetch copy_cursor_journalcolumn into aid;
while not fetch_done do 
    call jcolumnsource_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_journalcolumn into aid;
end while;

close copy_cursor_journalcolumn;
 end
$$

--
-- Создать процедуру "journalcolumn_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_delete(
 acursession varchar(38),
 ajournalcolumnid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
if aec>0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=journalcolumn' result;
    leave body;
  end if;
 call journalcolumn_logger(acursession,ajournalcolumnid) ; 
  delete from  journalcolumn 
  where  journalcolumnid = g2b(ajournalcolumnid) ;
  delete from num_values where ownerpartname='journalcolumn' and ownerrowid=g2b(ajournalcolumnid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "journalcolumn_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journalcolumn where journalcolumnid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "journalcolumn_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journalcolumn_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journalcolumn set lockuserid =auserid ,locksessionid=null  where journalcolumnid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journalcolumn set lockuserid=null ,locksessionid =acursession  where journalcolumnid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "journalcolumn_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_logger(
 acursession varchar(38),
 ajournalcolumnid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "journalcolumn_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journalcolumn where  journalcolumnid=arowid;
 end
$$

--
-- Создать процедуру "journalcolumn_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalcolumnid varchar(38)
,asequence
 integer/* ?????????????????? *//* ?????????????????? */
,aname
 varchar (255)/* ???????? *//* ???????? */
,acolumnalignment
 integer/* ???????????? *//* ???????????? */
,acolsort
 integer/* ?????????? ??????? *//* ?????????? ??????? */
,agroupaggregation
 integer/* ?????????? ??? ??????????? *//* ?????????? ??? ??????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalcolumn where journalcolumnid=g2b(ajournalcolumnid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=journalcolumn' result;
    leave body;
  end if;
 start transaction ; 
 call journalcolumn_logger(acursession,ajournalcolumnid) ; 
 update  journalcolumn set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  columnalignment=acolumnalignment
,
  colsort=acolsort
,
  groupaggregation=agroupaggregation
  where  journalcolumnid = g2b(ajournalcolumnid) ;


call journalcolumn_client_trigger(acursession,ajournalcolumnid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=journalcolumn' result;
    leave body;
  end if;
 start transaction;  
 insert into   journalcolumn
 (  changestamp,journalcolumnid 
,instanceid
,sequence

,name

,columnalignment

,colsort

,groupaggregation

 ) values (now(), g2b(ajournalcolumnid) 
,g2b(ainstanceid)
,asequence

,aname

,acolumnalignment

,acolsort

,agroupaggregation

 ) ;


call journalcolumn_client_trigger(acursession,ajournalcolumnid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "journalcolumn_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalcolumn_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journalcolumn_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journalcolumn set lockuserid =null  where journalcolumnid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journalcolumn set locksessionid =null  where journalcolumnid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "journalsrc_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_brief(
 acursession varchar(38),
 ajournalsrcid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalsrcid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
 if  aec >0 then
   set abrief=journalsrc_brief_f(g2b(ajournalsrcid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "journalsrc_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_client_trigger(
 acursession varchar(38),
 aJournalSrcid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "journalsrc_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journalsrc 
 ( journalsrcid 
,instanceid
,spartview

,onrun

,openmode

,viewalias

 ) select 
copymap(acopyaction,b2g(journalsrcid)) 
,copymap(acopyaction,b2g(instanceid))
,spartview

,onrun

,openmode

,viewalias

 from journalsrc
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "journalsrc_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_delete(
 acursession varchar(38),
 ajournalsrcid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
if aec>0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=journalsrc' result;
    leave body;
  end if;
 call journalsrc_logger(acursession,ajournalsrcid) ; 
  delete from  journalsrc 
  where  journalsrcid = g2b(ajournalsrcid) ;
  delete from num_values where ownerpartname='journalsrc' and ownerrowid=g2b(ajournalsrcid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "journalsrc_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journalsrc where journalsrcid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "journalsrc_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journalsrc_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journalsrc set lockuserid =auserid ,locksessionid=null  where journalsrcid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journalsrc set lockuserid=null ,locksessionid =acursession  where journalsrcid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "journalsrc_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_logger(
 acursession varchar(38),
 ajournalsrcid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "journalsrc_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journalsrc where  journalsrcid=arowid;
 end
$$

--
-- Создать процедуру "journalsrc_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalsrcid varchar(38)
,aspartview
 varchar (38)/* ????????????? *//* ????????????? */
,aonrun
 integer/* ??? ???????? *//* ??? ???????? */
,aopenmode
 varchar (64)/* ????? ???????? *//* ????? ???????? */
,aviewalias
 varchar (255)/* ????????? ????????????? *//* ????????? ????????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journalsrc where journalsrcid=g2b(ajournalsrcid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=journalsrc' result;
    leave body;
  end if;
 start transaction ; 
 call journalsrc_logger(acursession,ajournalsrcid) ; 
 update  journalsrc set changestamp=now() 
,
  spartview=aspartview
,
  onrun=aonrun
,
  openmode=aopenmode
,
  viewalias=aviewalias
  where  journalsrcid = g2b(ajournalsrcid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from journalsrc where  instanceid=g2b(ainstanceid) ;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????????? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call journalsrc_client_trigger(acursession,ajournalsrcid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=journalsrc' result;
    leave body;
  end if;
 start transaction;  
 insert into   journalsrc
 (  changestamp,journalsrcid 
,instanceid
,spartview

,onrun

,openmode

,viewalias

 ) values (now(), g2b(ajournalsrcid) 
,g2b(ainstanceid)
,aspartview

,aonrun

,aopenmode

,aviewalias

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from journalsrc where  instanceid=g2b(ainstanceid) ;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????????? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call journalsrc_client_trigger(acursession,ajournalsrcid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "journalsrc_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journalsrc_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journalsrc_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journalsrc set lockuserid =null  where journalsrcid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journalsrc set locksessionid =null  where journalsrcid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "journal_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_brief(
 acursession varchar(38),
 ajournalid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ajournalid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from journal where journalid=g2b(ajournalid);
 if  aec >0 then
   set abrief=journal_brief_f(g2b(ajournalid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "journal_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_client_trigger(
 acursession varchar(38),
 aJournalid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "journal_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into journal 
 ( journalid 
,instanceid
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 ) select 
copymap(acopyaction,b2g(journalid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 from journal
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "journal_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_delete(
 acursession varchar(38),
 ajournalid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journal where journalid=g2b(ajournalid);
if aec>0 then
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=journal' result;
    leave body;
  end if;
 call journal_logger(acursession,ajournalid) ; 
  delete from  journal 
  where  journalid = g2b(ajournalid) ;
  delete from num_values where ownerpartname='journal' and ownerrowid=g2b(ajournalid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "journal_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from journal where journalid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "journal_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call journal_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update journal set lockuserid =auserid ,locksessionid=null  where journalid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update journal set lockuserid=null ,locksessionid =acursession  where journalid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "journal_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_logger(
 acursession varchar(38),
 ajournalid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "journal_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from journal where  journalid=arowid;
 end
$$

--
-- Создать процедуру "journal_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 ajournalid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,athe_alias
 varchar (32)/* ????????? *//* ????????? */
,athecomment
 text/* ???????? *//* ???????? */
,ajrnliconcls
 varchar (80)/* ?????? ??????? *//* ?????? ??????? */
,ausefavorites
 integer/* ???????? ????????? *//* ???????? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from journal where journalid=g2b(ajournalid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=journal' result;
    leave body;
  end if;
 start transaction ; 
 call journal_logger(acursession,ajournalid) ; 
 update  journal set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  thecomment=athecomment
,
  jrnliconcls=ajrnliconcls
,
  usefavorites=ausefavorites
  where  journalid = g2b(ajournalid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(???????????? ??? ??????.????????)'  result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and the_alias=athe_alias;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call journal_client_trigger(acursession,ajournalid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzjrnl.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=journal' result;
    leave body;
  end if;
select count(*) into aec from journal where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <journal>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   journal
 (  changestamp,journalid 
,instanceid
,name

,the_alias

,thecomment

,jrnliconcls

,usefavorites

 ) values (now(), g2b(ajournalid) 
,g2b(ainstanceid)
,aname

,athe_alias

,athecomment

,ajrnliconcls

,ausefavorites

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=?????? ???????=(???????????? ??? ??????.????????)'  result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from journal where 1=1  
 and the_alias=athe_alias;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call journal_client_trigger(acursession,ajournalid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "journal_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE journal_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call journal_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update journal set lockuserid =null  where journalid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update journal set locksessionid =null  where journalid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "localizeinfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_brief(
 acursession varchar(38),
 alocalizeinfoid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if alocalizeinfoid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
 if  aec >0 then
   set abrief=localizeinfo_brief_f(g2b(alocalizeinfoid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "localizeinfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_client_trigger(
 acursession varchar(38),
 aLocalizeInfoid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "localizeinfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into localizeinfo 
 ( localizeinfoid 
,instanceid
,langfull

,langshort

 ) select 
copymap(acopyaction,b2g(localizeinfoid)) 
,copymap(acopyaction,b2g(instanceid))
,langfull

,langshort

 from localizeinfo
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "localizeinfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_delete(
 acursession varchar(38),
 alocalizeinfoid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=localizeinfo' result;
    leave body;
  end if;
 call localizeinfo_logger(acursession,alocalizeinfoid) ; 
  delete from  localizeinfo 
  where  localizeinfoid = g2b(alocalizeinfoid) ;
  delete from num_values where ownerpartname='localizeinfo' and ownerrowid=g2b(alocalizeinfoid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "localizeinfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from localizeinfo where localizeinfoid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "localizeinfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call localizeinfo_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update localizeinfo set lockuserid =auserid ,locksessionid=null  where localizeinfoid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update localizeinfo set lockuserid=null ,locksessionid =acursession  where localizeinfoid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "localizeinfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_logger(
 acursession varchar(38),
 alocalizeinfoid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "localizeinfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from localizeinfo where  localizeinfoid=arowid;
 end
$$

--
-- Создать процедуру "localizeinfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 alocalizeinfoid varchar(38)
,alangfull
 varchar (255)/* ???? - ???????? *//* ???? - ???????? */
,alangshort
 varchar (255)/* ??? ????? *//* ??? ????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from localizeinfo where localizeinfoid=g2b(alocalizeinfoid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=localizeinfo' result;
    leave body;
  end if;
 start transaction ; 
 call localizeinfo_logger(acursession,alocalizeinfoid) ; 
 update  localizeinfo set changestamp=now() 
,
  langfull=alangfull
,
  langshort=alangshort
  where  localizeinfoid = g2b(alocalizeinfoid) ;


call localizeinfo_client_trigger(acursession,alocalizeinfoid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=localizeinfo' result;
    leave body;
  end if;
 start transaction;  
 insert into   localizeinfo
 (  changestamp,localizeinfoid 
,instanceid
,langfull

,langshort

 ) values (now(), g2b(alocalizeinfoid) 
,g2b(ainstanceid)
,alangfull

,alangshort

 ) ;


call localizeinfo_client_trigger(acursession,alocalizeinfoid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "localizeinfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE localizeinfo_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call localizeinfo_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update localizeinfo set lockuserid =null  where localizeinfoid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update localizeinfo set locksessionid =null  where localizeinfoid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "Login"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Login( out aTHE_SESSION varchar(38)/* Идентификатор новой сессии */

,aPWD VARCHAR(80)/* Пароль */

,aUSR VARCHAR (64)/* Имя пользователя */

)
body:
  BEGIN
 declare aID binary(16); 
    declare aUSERSID binary(16); 
    declare asysid binary(16); 
    declare existsCnt int;  
    declare aStatus varchar(38);

set asysid = null; 

select instanceid into asysid from instance where objtype = 'MTZSYSTEM'; 

set athe_session=null  ; 
set aUSERSID=null;

 if aPWD is null then 
    set athe_session=null  ; 
 
else 
  
	 select USERSID into ausersid from users where Login=ausr and Password =MD5(aPWD); 
	 set  aID=G2B(UUID())  ; 
	 if not aUSERSID  is null then
		 if asysid is null then 
				insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt,changestamp) 
				values(aid,sysdate,ausersid,0,now(),now()); 
		else 
				insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt,changestamp) 
				values(asysid,aid,now(),ausersid,0,now(),now()); 
		end if; 

		set athe_session=b2g(aid); 
	end if;
	-- call build_usercache(b2g(aid));
		
end if;

end
$$

--
-- Создать процедуру "Logout"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE Logout(aCURSESSION varchar(38))
body:
BEGIN
declare
existsCnt integer;
select count(*) into existsCnt from the_session where the_sessionid=g2b(acursession) and closed=0;
if existsCnt >0 then
    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;
    update the_session set closed=1,closedAt=now(), changeStamp=now() where     
    the_sessionid=g2b(acursession);
     delete from SysRefCache where sessionid= g2b(acursession);
 End if;
end
$$

--
-- Создать процедуру "methodrestriction_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_brief(
 acursession varchar(38),
 amethodrestrictionid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amethodrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
 if  aec >0 then
   set abrief=methodrestriction_brief_f(g2b(amethodrestrictionid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "methodrestriction_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_client_trigger(
 acursession varchar(38),
 aMETHODRESTRICTIONid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "methodrestriction_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into methodrestriction 
 ( methodrestrictionid 
,parentstructrowid
,part

,method

,isrestricted

 ) select 
copymap(acopyaction,b2g(methodrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,part

,method

,isrestricted

 from methodrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "methodrestriction_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_delete(
 acursession varchar(38),
 amethodrestrictionid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=methodrestriction' result;
    leave body;
  end if;
 call methodrestriction_logger(acursession,amethodrestrictionid) ; 
  delete from  methodrestriction 
  where  methodrestrictionid = g2b(amethodrestrictionid) ;
  delete from num_values where ownerpartname='methodrestriction' and ownerrowid=g2b(amethodrestrictionid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "methodrestriction_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from methodrestriction where methodrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "methodrestriction_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call methodrestriction_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update methodrestriction set lockuserid =auserid ,locksessionid=null  where methodrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update methodrestriction set lockuserid=null ,locksessionid =acursession  where methodrestrictionid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "methodrestriction_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_logger(
 acursession varchar(38),
 amethodrestrictionid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "methodrestriction_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from methodrestriction where  methodrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end
$$

--
-- Создать процедуру "methodrestriction_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 amethodrestrictionid varchar(38)
,apart varchar(38)/* ?????????, ??????? ??????????? ????? *//* ?????????, ??????? ??????????? ????? */
,amethod varchar(38)/* ????? *//* ????? */
,aisrestricted
 integer/* ????????? ???????????? *//* ????????? ???????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from methodrestriction where methodrestrictionid=g2b(amethodrestrictionid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=methodrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call methodrestriction_logger(acursession,amethodrestrictionid) ; 
 update  methodrestriction set changestamp=now() 
,
  part=g2b(apart)
,
  method=g2b(amethod)
,
  isrestricted=aisrestricted
  where  methodrestrictionid = g2b(amethodrestrictionid) ;


call methodrestriction_client_trigger(acursession,amethodrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=methodrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   methodrestriction
 (  changestamp,methodrestrictionid 
,parentstructrowid
,part

,method

,isrestricted

 ) values (now(), g2b(amethodrestrictionid) 
,g2b(aparentstructrowid)
,g2b(apart)

,g2b(amethod)

,aisrestricted

 ) ;


call methodrestriction_client_trigger(acursession,amethodrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "methodrestriction_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE methodrestriction_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call methodrestriction_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update methodrestriction set lockuserid =null  where methodrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update methodrestriction set locksessionid =null  where methodrestrictionid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtz2job_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtz2job_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "mtzapp_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_brief(
 acursession varchar(38),
 amtzappid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzappid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
 if  aec >0 then
   set abrief=mtzapp_brief_f(g2b(amtzappid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "mtzapp_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_client_trigger(
 acursession varchar(38),
 aMTZAPPid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "mtzapp_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_mtzapp cursor for
select mtzappid from mtzapp where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzapp 
 ( mtzappid 
,instanceid
,name

,dbname

,thecomment

 ) select 
copymap(acopyaction,b2g(mtzappid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,dbname

,thecomment

 from mtzapp
 where instanceid =g2b( ainstanceid); 
open copy_cursor_mtzapp;
  set  fetch_done=false;
fetch copy_cursor_mtzapp into aid;
while not fetch_done do 
    call parentpackage_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_mtzapp into aid;
end while;

close copy_cursor_mtzapp;
 end
$$

--
-- Создать процедуру "mtzapp_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_delete(
 acursession varchar(38),
 amtzappid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=mtzapp' result;
    leave body;
  end if;
 call mtzapp_logger(acursession,amtzappid) ; 
  delete from  mtzapp 
  where  mtzappid = g2b(amtzappid) ;
  delete from num_values where ownerpartname='mtzapp' and ownerrowid=g2b(amtzappid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzapp_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzapp where mtzappid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "mtzapp_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzapp_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzapp set lockuserid =auserid ,locksessionid=null  where mtzappid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzapp set lockuserid=null ,locksessionid =acursession  where mtzappid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzapp_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_logger(
 acursession varchar(38),
 amtzappid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "mtzapp_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzapp where  mtzappid=arowid;
 end
$$

--
-- Создать процедуру "mtzapp_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzappid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,adbname
 varchar (64)/* ???? ?????? *//* ???? ?????? */
,athecomment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzapp where mtzappid=g2b(amtzappid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=mtzapp' result;
    leave body;
  end if;
 start transaction ; 
 call mtzapp_logger(acursession,amtzappid) ; 
 update  mtzapp set changestamp=now() 
,
  name=aname
,
  dbname=adbname
,
  thecomment=athecomment
  where  mtzappid = g2b(amtzappid) ;


call mtzapp_client_trigger(acursession,amtzappid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=mtzapp' result;
    leave body;
  end if;
 start transaction;  
 insert into   mtzapp
 (  changestamp,mtzappid 
,instanceid
,name

,dbname

,thecomment

 ) values (now(), g2b(amtzappid) 
,g2b(ainstanceid)
,aname

,adbname

,athecomment

 ) ;


call mtzapp_client_trigger(acursession,amtzappid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzapp_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzapp_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzapp_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzapp set lockuserid =null  where mtzappid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzapp set locksessionid =null  where mtzappid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzextrel_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_brief(
 acursession varchar(38),
 amtzextrelid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzextrelid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
 if  aec >0 then
   set abrief=mtzextrel_brief_f(g2b(amtzextrelid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "mtzextrel_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_client_trigger(
 acursession varchar(38),
 aMTZExtRelid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "mtzextrel_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzextrel 
 ( mtzextrelid 
,instanceid
,theplatform

,theclassname

,thelibraryname

 ) select 
copymap(acopyaction,b2g(mtzextrelid)) 
,copymap(acopyaction,b2g(instanceid))
,theplatform

,theclassname

,thelibraryname

 from mtzextrel
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "mtzextrel_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_delete(
 acursession varchar(38),
 amtzextrelid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
if aec>0 then
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=mtzextrel' result;
    leave body;
  end if;
 call mtzextrel_logger(acursession,amtzextrelid) ; 
  delete from  mtzextrel 
  where  mtzextrelid = g2b(amtzextrelid) ;
  delete from num_values where ownerpartname='mtzextrel' and ownerrowid=g2b(amtzextrelid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzextrel_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzextrel where mtzextrelid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "mtzextrel_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzextrel_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzextrel set lockuserid =auserid ,locksessionid=null  where mtzextrelid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzextrel set lockuserid=null ,locksessionid =acursession  where mtzextrelid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzextrel_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_logger(
 acursession varchar(38),
 amtzextrelid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "mtzextrel_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzextrel where  mtzextrelid=arowid;
 end
$$

--
-- Создать процедуру "mtzextrel_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzextrelid varchar(38)
,atheplatform
 integer/* ?????????? *//* ?????????? */
,atheclassname
 varchar (255)/* ???????? ?????? *//* ???????? ?????? */
,athelibraryname
 varchar (255)/* ???????? ?????????? *//* ???????? ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzextrel where mtzextrelid=g2b(amtzextrelid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=mtzextrel' result;
    leave body;
  end if;
 start transaction ; 
 call mtzextrel_logger(acursession,amtzextrelid) ; 
 update  mtzextrel set changestamp=now() 
,
  theplatform=atheplatform
,
  theclassname=atheclassname
,
  thelibraryname=athelibraryname
  where  mtzextrelid = g2b(amtzextrelid) ;


call mtzextrel_client_trigger(acursession,amtzextrelid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=mtzextrel' result;
    leave body;
  end if;
 start transaction;  
 insert into   mtzextrel
 (  changestamp,mtzextrelid 
,instanceid
,theplatform

,theclassname

,thelibraryname

 ) values (now(), g2b(amtzextrelid) 
,g2b(ainstanceid)
,atheplatform

,atheclassname

,athelibraryname

 ) ;


call mtzextrel_client_trigger(acursession,amtzextrelid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzextrel_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzextrel_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzextrel_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzextrel set lockuserid =null  where mtzextrelid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzextrel set locksessionid =null  where mtzextrelid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzext_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call mtzext_def_copy(acursession,aaction,ainstanceid);
call mtzextrel_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzext_def_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_brief(
 acursession varchar(38),
 amtzext_defid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if amtzext_defid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
 if  aec >0 then
   set abrief=mtzext_def_brief_f(g2b(amtzext_defid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "mtzext_def_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_client_trigger(
 acursession varchar(38),
 aMTZExt_defid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "mtzext_def_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into mtzext_def 
 ( mtzext_defid 
,instanceid
,name

,exttype

,thedescription

 ) select 
copymap(acopyaction,b2g(mtzext_defid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,exttype

,thedescription

 from mtzext_def
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "mtzext_def_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_delete(
 acursession varchar(38),
 amtzext_defid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
if aec>0 then
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=mtzext_def' result;
    leave body;
  end if;
 call mtzext_def_logger(acursession,amtzext_defid) ; 
  delete from  mtzext_def 
  where  mtzext_defid = g2b(amtzext_defid) ;
  delete from num_values where ownerpartname='mtzext_def' and ownerrowid=g2b(amtzext_defid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzext_def_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from mtzext_def where mtzext_defid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "mtzext_def_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call mtzext_def_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update mtzext_def set lockuserid =auserid ,locksessionid=null  where mtzext_defid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update mtzext_def set lockuserid=null ,locksessionid =acursession  where mtzext_defid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzext_def_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_logger(
 acursession varchar(38),
 amtzext_defid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "mtzext_def_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from mtzext_def where  mtzext_defid=arowid;
 end
$$

--
-- Создать процедуру "mtzext_def_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 amtzext_defid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,aexttype
 integer/* ??? ?????????? *//* ??? ?????????? */
,athedescription
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from mtzext_def where mtzext_defid=g2b(amtzext_defid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=mtzext_def' result;
    leave body;
  end if;
 start transaction ; 
 call mtzext_def_logger(acursession,amtzext_defid) ; 
 update  mtzext_def set changestamp=now() 
,
  name=aname
,
  exttype=aexttype
,
  thedescription=athedescription
  where  mtzext_defid = g2b(amtzext_defid) ;


call mtzext_def_client_trigger(acursession,amtzext_defid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzext.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=mtzext_def' result;
    leave body;
  end if;
select count(*) into aec from mtzext_def where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <mtzext_def>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   mtzext_def
 (  changestamp,mtzext_defid 
,instanceid
,name

,exttype

,thedescription

 ) values (now(), g2b(amtzext_defid) 
,g2b(ainstanceid)
,aname

,aexttype

,athedescription

 ) ;


call mtzext_def_client_trigger(acursession,amtzext_defid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzext_def_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzext_def_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call mtzext_def_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update mtzext_def set lockuserid =null  where mtzext_defid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update mtzext_def set locksessionid =null  where mtzext_defid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "mtzfltr_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzfltr_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call filterfieldgroup_copy(acursession,aaction,ainstanceid);
call filters_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzjrnl_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzjrnl_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call journalcolumn_copy(acursession,aaction,ainstanceid);
call journalsrc_copy(acursession,aaction,ainstanceid);
call journal_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzmetamodel_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzmetamodel_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call genpackage_copy(acursession,aaction,ainstanceid);
call localizeinfo_copy(acursession,aaction,ainstanceid);
call fieldtype_copy(acursession,aaction,ainstanceid);
call sharedmethod_copy(acursession,aaction,ainstanceid);
call objecttype_copy(acursession,aaction,ainstanceid);
call mtzapp_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzrprt_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzrprt_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call rptstruct_copy(acursession,aaction,ainstanceid);
call rptformula_copy(acursession,aaction,ainstanceid);
call reports_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzsystem_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzsystem_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call the_session_copy(acursession,aaction,ainstanceid);
call sysrefcache_copy(acursession,aaction,ainstanceid);
call syslog_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzusers_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzusers_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call users_copy(acursession,aaction,ainstanceid);
call groups_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "mtzwp_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE mtzwp_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call armjournal_copy(acursession,aaction,ainstanceid);
call entrypoints_copy(acursession,aaction,ainstanceid);
call workplace_copy(acursession,aaction,ainstanceid);
call armtypes_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "nextstate_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_brief(
 acursession varchar(38),
 anextstateid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anextstateid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
 if  aec >0 then
   set abrief=nextstate_brief_f(g2b(anextstateid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "nextstate_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_client_trigger(
 acursession varchar(38),
 aNEXTSTATEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "nextstate_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into nextstate 
 ( nextstateid 
,parentstructrowid
,thestate

 ) select 
copymap(acopyaction,b2g(nextstateid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,thestate

 from nextstate
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "nextstate_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_delete(
 acursession varchar(38),
 anextstateid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=nextstate' result;
    leave body;
  end if;
 call nextstate_logger(acursession,anextstateid) ; 
  delete from  nextstate 
  where  nextstateid = g2b(anextstateid) ;
  delete from num_values where ownerpartname='nextstate' and ownerrowid=g2b(anextstateid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "nextstate_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from nextstate where nextstateid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "nextstate_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call nextstate_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update nextstate set lockuserid =auserid ,locksessionid=null  where nextstateid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update nextstate set lockuserid=null ,locksessionid =acursession  where nextstateid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "nextstate_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_logger(
 acursession varchar(38),
 anextstateid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "nextstate_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from nextstate where  nextstateid=arowid;
  set aparenttable = 'objstatus';
 end
$$

--
-- Создать процедуру "nextstate_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 anextstateid varchar(38)
,athestate varchar(38)/* ??????????? ????????? *//* ??????????? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from nextstate where nextstateid=g2b(anextstateid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=nextstate' result;
    leave body;
  end if;
 start transaction ; 
 call nextstate_logger(acursession,anextstateid) ; 
 update  nextstate set changestamp=now() 
,
  thestate=g2b(athestate)
  where  nextstateid = g2b(anextstateid) ;


call nextstate_client_trigger(acursession,anextstateid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=nextstate' result;
    leave body;
  end if;
 start transaction;  
 insert into   nextstate
 (  changestamp,nextstateid 
,parentstructrowid
,thestate

 ) values (now(), g2b(anextstateid) 
,g2b(aparentstructrowid)
,g2b(athestate)

 ) ;


call nextstate_client_trigger(acursession,anextstateid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "nextstate_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE nextstate_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call nextstate_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update nextstate set lockuserid =null  where nextstateid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update nextstate set locksessionid =null  where nextstateid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_head_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_brief(
 acursession varchar(38),
 anum_headid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_headid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
 if  aec >0 then
   set abrief=num_head_brief_f(g2b(anum_headid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "num_head_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_client_trigger(
 acursession varchar(38),
 aNum_headid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "num_head_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_head 
 ( num_headid 
,instanceid
,name

,shema

 ) select 
copymap(acopyaction,b2g(num_headid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,shema

 from num_head
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "num_head_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_delete(
 acursession varchar(38),
 anum_headid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
if aec>0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=num_head' result;
    leave body;
  end if;
 call num_head_logger(acursession,anum_headid) ; 
  delete from  num_head 
  where  num_headid = g2b(anum_headid) ;
  delete from num_values where ownerpartname='num_head' and ownerrowid=g2b(anum_headid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "num_head_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_head where num_headid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "num_head_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_head_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_head set lockuserid =auserid ,locksessionid=null  where num_headid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_head set lockuserid=null ,locksessionid =acursession  where num_headid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_head_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_logger(
 acursession varchar(38),
 anum_headid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "num_head_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from num_head where  num_headid=arowid;
 end
$$

--
-- Создать процедуру "num_head_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 anum_headid varchar(38)
,aname
 varchar (80)/* ???????? *//* ???????? */
,ashema
 integer/* ????? ????????? *//* ????? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_head where num_headid=g2b(anum_headid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=num_head' result;
    leave body;
  end if;
 start transaction ; 
 call num_head_logger(acursession,anum_headid) ; 
 update  num_head set changestamp=now() 
,
  name=aname
,
  shema=ashema
  where  num_headid = g2b(anum_headid) ;


call num_head_client_trigger(acursession,anum_headid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=num_head' result;
    leave body;
  end if;
select count(*) into aec from num_head where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <num_head>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   num_head
 (  changestamp,num_headid 
,instanceid
,name

,shema

 ) values (now(), g2b(anum_headid) 
,g2b(ainstanceid)
,aname

,ashema

 ) ;


call num_head_client_trigger(acursession,anum_headid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "num_head_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_head_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_head_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_head set lockuserid =null  where num_headid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_head set locksessionid =null  where num_headid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_values_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_brief(
 acursession varchar(38),
 anum_valuesid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_valuesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
 if  aec >0 then
   set abrief=num_values_brief_f(g2b(anum_valuesid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "num_values_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_client_trigger(
 acursession varchar(38),
 aNum_Valuesid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "num_values_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_values 
 ( num_valuesid 
,parentstructrowid
,the_value

,ownerpartname

,ownerrowid

 ) select 
copymap(acopyaction,b2g(num_valuesid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,the_value

,ownerpartname

,ownerrowid

 from num_values
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "num_values_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_delete(
 acursession varchar(38),
 anum_valuesid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
if aec>0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=num_values' result;
    leave body;
  end if;
 call num_values_logger(acursession,anum_valuesid) ; 
  delete from  num_values 
  where  num_valuesid = g2b(anum_valuesid) ;
  delete from num_values where ownerpartname='num_values' and ownerrowid=g2b(anum_valuesid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "num_values_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_values where num_valuesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "num_values_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_values_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_values set lockuserid =auserid ,locksessionid=null  where num_valuesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_values set lockuserid=null ,locksessionid =acursession  where num_valuesid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_values_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_logger(
 acursession varchar(38),
 anum_valuesid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "num_values_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from num_values where  num_valuesid=arowid;
  set aparenttable = 'num_zones';
 end
$$

--
-- Создать процедуру "num_values_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 anum_valuesid varchar(38)
,athe_value
 integer/* ???????? *//* ???????? */
,aownerpartname
 varchar (64)/* ?????? *//* ?????? */
,aownerrowid binary(16)/* ????????????? ?????? *//* ????????????? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_values where num_valuesid=g2b(anum_valuesid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=num_values' result;
    leave body;
  end if;
 start transaction ; 
 call num_values_logger(acursession,anum_valuesid) ; 
 update  num_values set changestamp=now() 
,
  the_value=athe_value
,
  ownerpartname=aownerpartname
,
  ownerrowid=aownerrowid
  where  num_valuesid = g2b(anum_valuesid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from num_values where  parentstructrowid=g2b(aparentstructrowid) 
 and the_value=athe_value;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_values_client_trigger(acursession,anum_valuesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=num_values' result;
    leave body;
  end if;
 start transaction;  
 insert into   num_values
 (  changestamp,num_valuesid 
,parentstructrowid
,the_value

,ownerpartname

,ownerrowid

 ) values (now(), g2b(anum_valuesid) 
,g2b(aparentstructrowid)
,athe_value

,aownerpartname

,aownerrowid

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from num_values where  parentstructrowid=g2b(aparentstructrowid) 
 and the_value=athe_value;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_values_client_trigger(acursession,anum_valuesid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "num_values_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_values_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_values_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_values set lockuserid =null  where num_valuesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_values set locksessionid =null  where num_valuesid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_zones_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_brief(
 acursession varchar(38),
 anum_zonesid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if anum_zonesid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
 if  aec >0 then
   set abrief=num_zones_brief_f(g2b(anum_zonesid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "num_zones_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_client_trigger(
 acursession varchar(38),
 aNum_zonesid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "num_zones_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_num_zones cursor for
select num_zonesid from num_zones where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into num_zones 
 ( num_zonesid 
,instanceid
,zonemask

 ) select 
copymap(acopyaction,b2g(num_zonesid)) 
,copymap(acopyaction,b2g(instanceid))
,zonemask

 from num_zones
 where instanceid =g2b( ainstanceid); 
open copy_cursor_num_zones;
  set  fetch_done=false;
fetch copy_cursor_num_zones into aid;
while not fetch_done do 
    call num_values_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_num_zones into aid;
end while;

close copy_cursor_num_zones;
 end
$$

--
-- Создать процедуру "num_zones_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_delete(
 acursession varchar(38),
 anum_zonesid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
if aec>0 then
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=num_zones' result;
    leave body;
  end if;
 call num_zones_logger(acursession,anum_zonesid) ; 
  delete from  num_zones 
  where  num_zonesid = g2b(anum_zonesid) ;
  delete from num_values where ownerpartname='num_zones' and ownerrowid=g2b(anum_zonesid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "num_zones_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from num_zones where num_zonesid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "num_zones_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call num_zones_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update num_zones set lockuserid =auserid ,locksessionid=null  where num_zonesid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update num_zones set lockuserid=null ,locksessionid =acursession  where num_zonesid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "num_zones_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_logger(
 acursession varchar(38),
 anum_zonesid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "num_zones_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from num_zones where  num_zonesid=arowid;
 end
$$

--
-- Создать процедуру "num_zones_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 anum_zonesid varchar(38)
,azonemask
 varchar (255)/* ????? ???? *//* ????? ???? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from num_zones where num_zonesid=g2b(anum_zonesid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=num_zones' result;
    leave body;
  end if;
 start transaction ; 
 call num_zones_logger(acursession,anum_zonesid) ; 
 update  num_zones set changestamp=now() 
,
  zonemask=azonemask
  where  num_zonesid = g2b(anum_zonesid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from num_zones where  instanceid=g2b(ainstanceid) 
 and zonemask=azonemask;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_zones_client_trigger(acursession,anum_zonesid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'stdnumerator.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=num_zones' result;
    leave body;
  end if;
 start transaction;  
 insert into   num_zones
 (  changestamp,num_zonesid 
,instanceid
,zonemask

 ) values (now(), g2b(anum_zonesid) 
,g2b(ainstanceid)
,azonemask

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from num_zones where  instanceid=g2b(ainstanceid) 
 and zonemask=azonemask;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=????' result;
  rollback;
  leave body;
end if;
 -- end if;

call num_zones_client_trigger(acursession,anum_zonesid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "num_zones_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE num_zones_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call num_zones_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update num_zones set lockuserid =null  where num_zonesid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update num_zones set locksessionid =null  where num_zonesid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "objectmode_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_brief(
 acursession varchar(38),
 aobjectmodeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjectmodeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
 if  aec >0 then
   set abrief=objectmode_brief_f(g2b(aobjectmodeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "objectmode_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_client_trigger(
 acursession varchar(38),
 aOBJECTMODEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "objectmode_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objectmode cursor for
select objectmodeid from objectmode where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objectmode 
 ( objectmodeid 
,parentstructrowid
,name

,defaultmode

,thecomment

 ) select 
copymap(acopyaction,b2g(objectmodeid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,defaultmode

,thecomment

 from objectmode
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_objectmode;
  set  fetch_done=false;
fetch copy_cursor_objectmode into aid;
while not fetch_done do 
    call structrestriction_copy(acursession,acopyaction,ainstanceid,aid);
    call methodrestriction_copy(acursession,acopyaction,ainstanceid,aid);
    call fieldrestriction_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objectmode into aid;
end while;

close copy_cursor_objectmode;
 end
$$

--
-- Создать процедуру "objectmode_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_delete(
 acursession varchar(38),
 aobjectmodeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=objectmode' result;
    leave body;
  end if;
 call objectmode_logger(acursession,aobjectmodeid) ; 
  delete from  objectmode 
  where  objectmodeid = g2b(aobjectmodeid) ;
  delete from num_values where ownerpartname='objectmode' and ownerrowid=g2b(aobjectmodeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "objectmode_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objectmode where objectmodeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "objectmode_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objectmode_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objectmode set lockuserid =auserid ,locksessionid=null  where objectmodeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objectmode set lockuserid=null ,locksessionid =acursession  where objectmodeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "objectmode_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_logger(
 acursession varchar(38),
 aobjectmodeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "objectmode_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from objectmode where  objectmodeid=arowid;
  set aparenttable = 'objecttype';
 end
$$

--
-- Создать процедуру "objectmode_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aobjectmodeid varchar(38)
,aname
 varchar (5)/* ???????? ?????? *//* ???????? ?????? */
,adefaultmode
 integer/* ???? ????? ???????? ???????? ??????? ?????? ??????? *//* ???? ????? ???????? ???????? ??????? ?????? ??????? */
,athecomment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objectmode where objectmodeid=g2b(aobjectmodeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=objectmode' result;
    leave body;
  end if;
 start transaction ; 
 call objectmode_logger(acursession,aobjectmodeid) ; 
 update  objectmode set changestamp=now() 
,
  name=aname
,
  defaultmode=adefaultmode
,
  thecomment=athecomment
  where  objectmodeid = g2b(aobjectmodeid) ;


call objectmode_client_trigger(acursession,aobjectmodeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=objectmode' result;
    leave body;
  end if;
 start transaction;  
 insert into   objectmode
 (  changestamp,objectmodeid 
,parentstructrowid
,name

,defaultmode

,thecomment

 ) values (now(), g2b(aobjectmodeid) 
,g2b(aparentstructrowid)
,aname

,adefaultmode

,athecomment

 ) ;


call objectmode_client_trigger(acursession,aobjectmodeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "objectmode_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objectmode_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objectmode_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objectmode set lockuserid =null  where objectmodeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objectmode set locksessionid =null  where objectmodeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "objecttype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_brief(
 acursession varchar(38),
 aobjecttypeid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjecttypeid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
 if  aec >0 then
   set abrief=objecttype_brief_f(g2b(aobjecttypeid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "objecttype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_client_trigger(
 acursession varchar(38),
 aOBJECTTYPEid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "objecttype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objecttype cursor for
select objecttypeid from objecttype where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objecttype 
 ( objecttypeid 
,instanceid
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 ) select 
copymap(acopyaction,b2g(objecttypeid)) 
,copymap(acopyaction,b2g(instanceid))
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 from objecttype
 where instanceid =g2b( ainstanceid); 
open copy_cursor_objecttype;
  set  fetch_done=false;
fetch copy_cursor_objecttype into aid;
while not fetch_done do 
    call objstatus_copy(acursession,acopyaction,ainstanceid,aid);
    call objectmode_copy(acursession,acopyaction,ainstanceid,aid);
    call typemenu_copy(acursession,acopyaction,ainstanceid,aid);
    call instancevalidator_copy(acursession,acopyaction,ainstanceid,aid);
    call part_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objecttype into aid;
end while;

close copy_cursor_objecttype;
 end
$$

--
-- Создать процедуру "objecttype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_delete(
 acursession varchar(38),
 aobjecttypeid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=objecttype' result;
    leave body;
  end if;
 call objecttype_logger(acursession,aobjecttypeid) ; 
  delete from  objecttype 
  where  objecttypeid = g2b(aobjecttypeid) ;
  delete from num_values where ownerpartname='objecttype' and ownerrowid=g2b(aobjecttypeid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "objecttype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objecttype where objecttypeid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "objecttype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objecttype_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objecttype set lockuserid =auserid ,locksessionid=null  where objecttypeid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objecttype set lockuserid=null ,locksessionid =acursession  where objecttypeid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "objecttype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_logger(
 acursession varchar(38),
 aobjecttypeid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "objecttype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from objecttype where  objecttypeid=arowid;
 end
$$

--
-- Создать процедуру "objecttype_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aobjecttypeid varchar(38)
,apackage varchar(38)/* ?????????? *//* ?????????? */
,athe_comment
 varchar (255)/* ???????? *//* ???????? */
,aname
 varchar (14)/* ??? *//* ??? */
,aissingleinstance
 integer/* ??????????? ?????? ???? ?????? *//* ??????????? ?????? ???? ?????? */
,achooseview varchar(38)/* ????????????? ??? ?????? *//* ????????????? ??? ?????? */
,aonrun varchar(38)/* ??? ??????? *//* ??? ??????? */
,aoncreate varchar(38)/* ??? ???????? *//* ??? ???????? */
,aondelete varchar(38)/* ??? ???????? *//* ??? ???????? */
,aallowreftoobject
 integer/* ?????????? ??? ?????? ?????? *//* ?????????? ??? ?????? ?????? */
,aallowsearch
 integer/* ?????????? ??? ?????? *//* ?????????? ??? ?????? */
,areplicatype
 integer/* ??? ?????????? *//* ??? ?????????? */
,athecomment
 text/* ???????? *//* ???????? */
,auseownership
 integer/* ???????? ??????? ?? ???????????? *//* ???????? ??????? ?? ???????????? */
,ausearchiving
 integer/* ???????????? ?????? ???????? *//* ???????????? ?????? ???????? */
,acommitfullobject
 integer/* ????????? ?????? ??????? *//* ????????? ?????? ??????? */
,aobjiconcls
 varchar (80)/* ?????? ??????? *//* ?????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objecttype where objecttypeid=g2b(aobjecttypeid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=objecttype' result;
    leave body;
  end if;
 start transaction ; 
 call objecttype_logger(acursession,aobjecttypeid) ; 
 update  objecttype set changestamp=now() 
,
  package=g2b(apackage)
,
  the_comment=athe_comment
,
  name=aname
,
  issingleinstance=aissingleinstance
,
  chooseview=g2b(achooseview)
,
  onrun=g2b(aonrun)
,
  oncreate=g2b(aoncreate)
,
  ondelete=g2b(aondelete)
,
  allowreftoobject=aallowreftoobject
,
  allowsearch=aallowsearch
,
  replicatype=areplicatype
,
  thecomment=athecomment
,
  useownership=auseownership
,
  usearchiving=ausearchiving
,
  commitfullobject=acommitfullobject
,
  objiconcls=aobjiconcls
  where  objecttypeid = g2b(aobjecttypeid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from objecttype where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call objecttype_client_trigger(acursession,aobjecttypeid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=objecttype' result;
    leave body;
  end if;
 start transaction;  
 insert into   objecttype
 (  changestamp,objecttypeid 
,instanceid
,package

,the_comment

,name

,issingleinstance

,chooseview

,onrun

,oncreate

,ondelete

,allowreftoobject

,allowsearch

,replicatype

,thecomment

,useownership

,usearchiving

,commitfullobject

,objiconcls

 ) values (now(), g2b(aobjecttypeid) 
,g2b(ainstanceid)
,g2b(apackage)

,athe_comment

,aname

,aissingleinstance

,g2b(achooseview)

,g2b(aonrun)

,g2b(aoncreate)

,g2b(aondelete)

,aallowreftoobject

,aallowsearch

,areplicatype

,athecomment

,auseownership

,ausearchiving

,acommitfullobject

,aobjiconcls

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from objecttype where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??? ???????' result;
  rollback;
  leave body;
end if;
 -- end if;

call objecttype_client_trigger(acursession,aobjecttypeid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "objecttype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objecttype_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objecttype_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objecttype set lockuserid =null  where objecttypeid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objecttype set locksessionid =null  where objecttypeid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "objstatus_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_brief(
 acursession varchar(38),
 aobjstatusid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aobjstatusid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
 if  aec >0 then
   set abrief=objstatus_brief_f(g2b(aobjstatusid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "objstatus_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_client_trigger(
 acursession varchar(38),
 aOBJSTATUSid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "objstatus_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_objstatus cursor for
select objstatusid from objstatus where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into objstatus 
 ( objstatusid 
,parentstructrowid
,name

,isstartup

,isarchive

,the_comment

 ) select 
copymap(acopyaction,b2g(objstatusid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,isstartup

,isarchive

,the_comment

 from objstatus
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_objstatus;
  set  fetch_done=false;
fetch copy_cursor_objstatus into aid;
while not fetch_done do 
    call nextstate_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_objstatus into aid;
end while;

close copy_cursor_objstatus;
 end
$$

--
-- Создать процедуру "objstatus_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_delete(
 acursession varchar(38),
 aobjstatusid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=objstatus' result;
    leave body;
  end if;
 call objstatus_logger(acursession,aobjstatusid) ; 
  delete from  objstatus 
  where  objstatusid = g2b(aobjstatusid) ;
  delete from num_values where ownerpartname='objstatus' and ownerrowid=g2b(aobjstatusid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "objstatus_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from objstatus where objstatusid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "objstatus_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call objstatus_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update objstatus set lockuserid =auserid ,locksessionid=null  where objstatusid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update objstatus set lockuserid=null ,locksessionid =acursession  where objstatusid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "objstatus_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_logger(
 acursession varchar(38),
 aobjstatusid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "objstatus_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from objstatus where  objstatusid=arowid;
  set aparenttable = 'objecttype';
 end
$$

--
-- Создать процедуру "objstatus_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aobjstatusid varchar(38)
,aname
 varchar (80)/* ???????? *//* ???????? */
,aisstartup
 integer/* ????????? *//* ????????? */
,aisarchive
 integer/* ???????? *//* ???????? */
,athe_comment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from objstatus where objstatusid=g2b(aobjstatusid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=objstatus' result;
    leave body;
  end if;
 start transaction ; 
 call objstatus_logger(acursession,aobjstatusid) ; 
 update  objstatus set changestamp=now() 
,
  name=aname
,
  isstartup=aisstartup
,
  isarchive=aisarchive
,
  the_comment=athe_comment
  where  objstatusid = g2b(aobjstatusid) ;


call objstatus_client_trigger(acursession,aobjstatusid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=objstatus' result;
    leave body;
  end if;
 start transaction;  
 insert into   objstatus
 (  changestamp,objstatusid 
,parentstructrowid
,name

,isstartup

,isarchive

,the_comment

 ) values (now(), g2b(aobjstatusid) 
,g2b(aparentstructrowid)
,aname

,aisstartup

,aisarchive

,athe_comment

 ) ;


call objstatus_client_trigger(acursession,aobjstatusid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "objstatus_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE objstatus_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call objstatus_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update objstatus set lockuserid =null  where objstatusid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update objstatus set locksessionid =null  where objstatusid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "origname_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE origname_save(f varchar(255), o varchar(255))
BEGIN

  INSERT INTO origname (filename, origname)
    VALUES (f, o);
END
$$

--
-- Создать процедуру "parameters_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_brief(
 acursession varchar(38),
 aparametersid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aparametersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
 if  aec >0 then
   set abrief=parameters_brief_f(g2b(aparametersid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "parameters_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_client_trigger(
 acursession varchar(38),
 aPARAMETERSid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "parameters_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into parameters 
 ( parametersid 
,parentstructrowid
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 ) select 
copymap(acopyaction,b2g(parametersid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 from parameters
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "parameters_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_delete(
 acursession varchar(38),
 aparametersid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=parameters' result;
    leave body;
  end if;
 call parameters_logger(acursession,aparametersid) ; 
  delete from  parameters 
  where  parametersid = g2b(aparametersid) ;
  delete from num_values where ownerpartname='parameters' and ownerrowid=g2b(aparametersid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "parameters_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from parameters where parametersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "parameters_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call parameters_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update parameters set lockuserid =auserid ,locksessionid=null  where parametersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update parameters set lockuserid=null ,locksessionid =acursession  where parametersid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "parameters_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_logger(
 acursession varchar(38),
 aparametersid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "parameters_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from parameters where  parametersid=arowid;
  set aparenttable = 'script';
 end
$$

--
-- Создать процедуру "parameters_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aparametersid varchar(38)
,asequence
 integer/* ?????????????????? *//* ?????????????????? */
,aname
 varchar (80)/* ??? *//* ??? */
,acaption
 varchar (80)/* ????????? *//* ????????? */
,atypeofparm varchar(38)/* ??? ?????? *//* ??? ?????? */
,adatasize
 integer/* ?????? *//* ?????? */
,aallownull
 integer/* ????? ?? ???????? *//* ????? ?? ???????? */
,aoutparam
 integer/* ?????????? ???????? *//* ?????????? ???????? */
,areferencetype
 integer/* ??? ?????? *//* ??? ?????? */
,areftotype varchar(38)/* ?????? ?? ??? *//* ?????? ?? ??? */
,areftopart varchar(38)/* ?????? ?? ?????? *//* ?????? ?? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parameters where parametersid=g2b(aparametersid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=parameters' result;
    leave body;
  end if;
 start transaction ; 
 call parameters_logger(acursession,aparametersid) ; 
 update  parameters set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  caption=acaption
,
  typeofparm=g2b(atypeofparm)
,
  datasize=adatasize
,
  allownull=aallownull
,
  outparam=aoutparam
,
  referencetype=areferencetype
,
  reftotype=g2b(areftotype)
,
  reftopart=g2b(areftopart)
  where  parametersid = g2b(aparametersid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????????' result;
  rollback;
  leave body;
end if;
 -- end if;

call parameters_client_trigger(acursession,aparametersid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=parameters' result;
    leave body;
  end if;
 start transaction;  
 insert into   parameters
 (  changestamp,parametersid 
,parentstructrowid
,sequence

,name

,caption

,typeofparm

,datasize

,allownull

,outparam

,referencetype

,reftotype

,reftopart

 ) values (now(), g2b(aparametersid) 
,g2b(aparentstructrowid)
,asequence

,aname

,acaption

,g2b(atypeofparm)

,adatasize

,aallownull

,aoutparam

,areferencetype

,g2b(areftotype)

,g2b(areftopart)

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and sequence=asequence;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from parameters where  parentstructrowid=g2b(aparentstructrowid) 
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????????' result;
  rollback;
  leave body;
end if;
 -- end if;

call parameters_client_trigger(acursession,aparametersid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "parameters_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parameters_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call parameters_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update parameters set lockuserid =null  where parametersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update parameters set locksessionid =null  where parametersid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "parentpackage_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_brief(
 acursession varchar(38),
 aparentpackageid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aparentpackageid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
 if  aec >0 then
   set abrief=parentpackage_brief_f(g2b(aparentpackageid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "parentpackage_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_client_trigger(
 acursession varchar(38),
 aParentPackageid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "parentpackage_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into parentpackage 
 ( parentpackageid 
,parentstructrowid
,package

 ) select 
copymap(acopyaction,b2g(parentpackageid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,package

 from parentpackage
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "parentpackage_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_delete(
 acursession varchar(38),
 aparentpackageid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=parentpackage' result;
    leave body;
  end if;
 call parentpackage_logger(acursession,aparentpackageid) ; 
  delete from  parentpackage 
  where  parentpackageid = g2b(aparentpackageid) ;
  delete from num_values where ownerpartname='parentpackage' and ownerrowid=g2b(aparentpackageid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "parentpackage_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from parentpackage where parentpackageid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "parentpackage_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call parentpackage_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update parentpackage set lockuserid =auserid ,locksessionid=null  where parentpackageid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update parentpackage set lockuserid=null ,locksessionid =acursession  where parentpackageid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "parentpackage_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_logger(
 acursession varchar(38),
 aparentpackageid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "parentpackage_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from parentpackage where  parentpackageid=arowid;
  set aparenttable = 'mtzapp';
 end
$$

--
-- Создать процедуру "parentpackage_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aparentpackageid varchar(38)
,apackage varchar(38)/* ?????????? *//* ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from parentpackage where parentpackageid=g2b(aparentpackageid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=parentpackage' result;
    leave body;
  end if;
 start transaction ; 
 call parentpackage_logger(acursession,aparentpackageid) ; 
 update  parentpackage set changestamp=now() 
,
  package=g2b(apackage)
  where  parentpackageid = g2b(aparentpackageid) ;


call parentpackage_client_trigger(acursession,aparentpackageid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=parentpackage' result;
    leave body;
  end if;
 start transaction;  
 insert into   parentpackage
 (  changestamp,parentpackageid 
,parentstructrowid
,package

 ) values (now(), g2b(aparentpackageid) 
,g2b(aparentstructrowid)
,g2b(apackage)

 ) ;


call parentpackage_client_trigger(acursession,aparentpackageid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "parentpackage_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE parentpackage_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call parentpackage_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update parentpackage set lockuserid =null  where parentpackageid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update parentpackage set locksessionid =null  where parentpackageid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "partmenu_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_brief(
 acursession varchar(38),
 apartmenuid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartmenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
 if  aec >0 then
   set abrief=partmenu_brief_f(g2b(apartmenuid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "partmenu_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_client_trigger(
 acursession varchar(38),
 aPARTMENUid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "partmenu_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_partmenu cursor for
select partmenuid from partmenu where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partmenu 
 ( partmenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(partmenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 from partmenu
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_partmenu;
  set  fetch_done=false;
fetch copy_cursor_partmenu into aid;
while not fetch_done do 
    call partparammap_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_partmenu into aid;
end while;

close copy_cursor_partmenu;
 end
$$

--
-- Создать процедуру "partmenu_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_delete(
 acursession varchar(38),
 apartmenuid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=partmenu' result;
    leave body;
  end if;
 call partmenu_logger(acursession,apartmenuid) ; 
  delete from  partmenu 
  where  partmenuid = g2b(apartmenuid) ;
  delete from num_values where ownerpartname='partmenu' and ownerrowid=g2b(apartmenuid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "partmenu_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partmenu where partmenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "partmenu_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partmenu_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partmenu set lockuserid =auserid ,locksessionid=null  where partmenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partmenu set lockuserid=null ,locksessionid =acursession  where partmenuid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "partmenu_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_logger(
 acursession varchar(38),
 apartmenuid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "partmenu_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partmenu where  partmenuid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "partmenu_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartmenuid varchar(38)
,aname
 varchar (64)/* ???????? *//* ???????? */
,acaption
 varchar (80)/* ????????? *//* ????????? */
,atooltip
 varchar (80)/* ????????? *//* ????????? */
,athe_action varchar(38)/* ????? *//* ????? */
,aismenuitem
 integer/* ???????? ? ???? *//* ???????? ? ???? */
,aistoolbarbutton
 integer/* ? ?????? *//* ? ?????? */
,ahotkey
 varchar (20)/* ??????? ??????? *//* ??????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partmenu where partmenuid=g2b(apartmenuid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=partmenu' result;
    leave body;
  end if;
 start transaction ; 
 call partmenu_logger(acursession,apartmenuid) ; 
 update  partmenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  the_action=g2b(athe_action)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  partmenuid = g2b(apartmenuid) ;


call partmenu_client_trigger(acursession,apartmenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=partmenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   partmenu
 (  changestamp,partmenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(apartmenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(athe_action)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call partmenu_client_trigger(acursession,apartmenuid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "partmenu_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partmenu_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partmenu_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partmenu set lockuserid =null  where partmenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partmenu set locksessionid =null  where partmenuid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "partparammap_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_brief(
 acursession varchar(38),
 apartparammapid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartparammapid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
 if  aec >0 then
   set abrief=partparammap_brief_f(g2b(apartparammapid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "partparammap_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_client_trigger(
 acursession varchar(38),
 aPARTPARAMMAPid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "partparammap_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partparammap 
 ( partparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) select 
copymap(acopyaction,b2g(partparammapid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,fieldname

,paramname

,noedit

 from partparammap
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "partparammap_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_delete(
 acursession varchar(38),
 apartparammapid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=partparammap' result;
    leave body;
  end if;
 call partparammap_logger(acursession,apartparammapid) ; 
  delete from  partparammap 
  where  partparammapid = g2b(apartparammapid) ;
  delete from num_values where ownerpartname='partparammap' and ownerrowid=g2b(apartparammapid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "partparammap_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partparammap where partparammapid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "partparammap_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partparammap_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partparammap set lockuserid =auserid ,locksessionid=null  where partparammapid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partparammap set lockuserid=null ,locksessionid =acursession  where partparammapid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "partparammap_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_logger(
 acursession varchar(38),
 apartparammapid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "partparammap_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partparammap where  partparammapid=arowid;
  set aparenttable = 'partmenu';
 end
$$

--
-- Создать процедуру "partparammap_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartparammapid varchar(38)
,afieldname
 varchar (255)/* ???? (????????) *//* ???? (????????) */
,aparamname
 varchar (80)/* ???????? *//* ???????? */
,anoedit
 integer/* ????????????? ???????? ?????? *//* ????????????? ???????? ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partparammap where partparammapid=g2b(apartparammapid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=partparammap' result;
    leave body;
  end if;
 start transaction ; 
 call partparammap_logger(acursession,apartparammapid) ; 
 update  partparammap set changestamp=now() 
,
  fieldname=afieldname
,
  paramname=aparamname
,
  noedit=anoedit
  where  partparammapid = g2b(apartparammapid) ;


call partparammap_client_trigger(acursession,apartparammapid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=partparammap' result;
    leave body;
  end if;
 start transaction;  
 insert into   partparammap
 (  changestamp,partparammapid 
,parentstructrowid
,fieldname

,paramname

,noedit

 ) values (now(), g2b(apartparammapid) 
,g2b(aparentstructrowid)
,afieldname

,aparamname

,anoedit

 ) ;


call partparammap_client_trigger(acursession,apartparammapid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "partparammap_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partparammap_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partparammap_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partparammap set lockuserid =null  where partparammapid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partparammap set locksessionid =null  where partparammapid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "partview_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_brief(
 acursession varchar(38),
 apartviewid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartviewid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partview where partviewid=g2b(apartviewid);
 if  aec >0 then
   set abrief=partview_brief_f(g2b(apartviewid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "partview_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_client_trigger(
 acursession varchar(38),
 aPARTVIEWid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "partview_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_partview cursor for
select partviewid from partview where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partview 
 ( partviewid 
,parentstructrowid
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 ) select 
copymap(acopyaction,b2g(partviewid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 from partview
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_partview;
  set  fetch_done=false;
fetch copy_cursor_partview into aid;
while not fetch_done do 
    call viewcolumn_copy(acursession,acopyaction,ainstanceid,aid);
    call partview_lnk_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_partview into aid;
end while;

close copy_cursor_partview;
 end
$$

--
-- Создать процедуру "partview_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_delete(
 acursession varchar(38),
 apartviewid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview where partviewid=g2b(apartviewid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=partview' result;
    leave body;
  end if;
 call partview_logger(acursession,apartviewid) ; 
  delete from  partview 
  where  partviewid = g2b(apartviewid) ;
  delete from num_values where ownerpartname='partview' and ownerrowid=g2b(apartviewid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "partview_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partview where partviewid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "partview_lnk_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_brief(
 acursession varchar(38),
 apartview_lnkid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartview_lnkid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
 if  aec >0 then
   set abrief=partview_lnk_brief_f(g2b(apartview_lnkid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "partview_lnk_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_client_trigger(
 acursession varchar(38),
 aPARTVIEW_LNKid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "partview_lnk_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into partview_lnk 
 ( partview_lnkid 
,parentstructrowid
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 ) select 
copymap(acopyaction,b2g(partview_lnkid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 from partview_lnk
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "partview_lnk_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_delete(
 acursession varchar(38),
 apartview_lnkid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=partview_lnk' result;
    leave body;
  end if;
 call partview_lnk_logger(acursession,apartview_lnkid) ; 
  delete from  partview_lnk 
  where  partview_lnkid = g2b(apartview_lnkid) ;
  delete from num_values where ownerpartname='partview_lnk' and ownerrowid=g2b(apartview_lnkid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "partview_lnk_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from partview_lnk where partview_lnkid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "partview_lnk_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partview_lnk_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partview_lnk set lockuserid =auserid ,locksessionid=null  where partview_lnkid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partview_lnk set lockuserid=null ,locksessionid =acursession  where partview_lnkid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "partview_lnk_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_logger(
 acursession varchar(38),
 apartview_lnkid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "partview_lnk_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partview_lnk where  partview_lnkid=arowid;
  set aparenttable = 'partview';
 end
$$

--
-- Создать процедуру "partview_lnk_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartview_lnkid varchar(38)
,atheview varchar(38)/* ????????????? *//* ????????????? */
,athejoinsource varchar(38)/* ?????: ???? ??? join ???????? *//* ?????: ???? ??? join ???????? */
,areftype
 integer/* ????????? ??? *//* ????????? ??? */
,athejoindestination varchar(38)/* ?????: ???? ??? join ???????? *//* ?????: ???? ??? join ???????? */
,ahandjoin
 varchar (255)/* ?????? join *//* ?????? join */
,aseq
 integer/* ??????? *//* ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview_lnk where partview_lnkid=g2b(apartview_lnkid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=partview_lnk' result;
    leave body;
  end if;
 start transaction ; 
 call partview_lnk_logger(acursession,apartview_lnkid) ; 
 update  partview_lnk set changestamp=now() 
,
  theview=g2b(atheview)
,
  thejoinsource=g2b(athejoinsource)
,
  reftype=areftype
,
  thejoindestination=g2b(athejoindestination)
,
  handjoin=ahandjoin
,
  seq=aseq
  where  partview_lnkid = g2b(apartview_lnkid) ;


call partview_lnk_client_trigger(acursession,apartview_lnkid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=partview_lnk' result;
    leave body;
  end if;
 start transaction;  
 insert into   partview_lnk
 (  changestamp,partview_lnkid 
,parentstructrowid
,theview

,thejoinsource

,reftype

,thejoindestination

,handjoin

,seq

 ) values (now(), g2b(apartview_lnkid) 
,g2b(aparentstructrowid)
,g2b(atheview)

,g2b(athejoinsource)

,areftype

,g2b(athejoindestination)

,ahandjoin

,aseq

 ) ;


call partview_lnk_client_trigger(acursession,apartview_lnkid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "partview_lnk_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lnk_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partview_lnk_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partview_lnk set lockuserid =null  where partview_lnkid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partview_lnk set locksessionid =null  where partview_lnkid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "partview_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call partview_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update partview set lockuserid =auserid ,locksessionid=null  where partviewid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update partview set lockuserid=null ,locksessionid =acursession  where partviewid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "partview_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_logger(
 acursession varchar(38),
 apartviewid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "partview_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from partview where  partviewid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "partview_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartviewid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,athe_alias
 varchar (64)/* ????????? *//* ????????? */
,aforchoose
 integer/* ??? ?????? *//* ??? ?????? */
,afilterfield0
 varchar (255)/* ???? - ?????? 0 *//* ???? - ?????? 0 */
,afilterfield1
 varchar (255)/* ???? - ?????? 1 *//* ???? - ?????? 1 */
,afilterfield2
 varchar (255)/* ???? - ?????? 2 *//* ???? - ?????? 2 */
,afilterfield3
 varchar (255)/* ???? - ?????? 3 *//* ???? - ?????? 3 */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from partview where partviewid=g2b(apartviewid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=partview' result;
    leave body;
  end if;
 start transaction ; 
 call partview_logger(acursession,apartviewid) ; 
 update  partview set changestamp=now() 
,
  name=aname
,
  the_alias=athe_alias
,
  forchoose=aforchoose
,
  filterfield0=afilterfield0
,
  filterfield1=afilterfield1
,
  filterfield2=afilterfield2
,
  filterfield3=afilterfield3
  where  partviewid = g2b(apartviewid) ;


call partview_client_trigger(acursession,apartviewid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=partview' result;
    leave body;
  end if;
 start transaction;  
 insert into   partview
 (  changestamp,partviewid 
,parentstructrowid
,name

,the_alias

,forchoose

,filterfield0

,filterfield1

,filterfield2

,filterfield3

 ) values (now(), g2b(apartviewid) 
,g2b(aparentstructrowid)
,aname

,athe_alias

,aforchoose

,afilterfield0

,afilterfield1

,afilterfield2

,afilterfield3

 ) ;


call partview_client_trigger(acursession,apartviewid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "partview_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE partview_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call partview_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update partview set lockuserid =null  where partviewid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update partview set locksessionid =null  where partviewid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "part_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_brief(
 acursession varchar(38),
 apartid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if apartid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from part where partid=g2b(apartid);
 if  aec >0 then
   set abrief=part_brief_f(g2b(apartid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "part_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_client_trigger(
 acursession varchar(38),
 aPARTid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "part_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_part cursor for
select partid from part where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into part 
 ( partid 
,parentstructrowid
,parentrowid
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 ) select 
copymap(acopyaction,b2g(partid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,copymap(acopyaction,b2g(parentrowid))
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 from part
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_part;
  set  fetch_done=false;
fetch copy_cursor_part into aid;
while not fetch_done do 
    call partmenu_copy(acursession,acopyaction,ainstanceid,aid);
    call partview_copy(acursession,acopyaction,ainstanceid,aid);
    call validator_copy(acursession,acopyaction,ainstanceid,aid);
    call uniqueconstraint_copy(acursession,acopyaction,ainstanceid,aid);
    call extenderinterface_copy(acursession,acopyaction,ainstanceid,aid);
    call field_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_part into aid;
end while;

close copy_cursor_part;
 end
$$

--
-- Создать процедуру "part_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_delete(
 acursession varchar(38),
 apartid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from part where partid=g2b(apartid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=part' result;
    leave body;
  end if;
 call part_logger(acursession,apartid) ; 
  delete from  part 
  where  partid = g2b(apartid) ;
  delete from num_values where ownerpartname='part' and ownerrowid=g2b(apartid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "part_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from part where partid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "part_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call part_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update part set lockuserid =auserid ,locksessionid=null  where partid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update part set lockuserid=null ,locksessionid =acursession  where partid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "part_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_logger(
 acursession varchar(38),
 apartid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "part_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from part where  partid=arowid;
  set aparenttable = 'objecttype';
 end
$$

--
-- Создать процедуру "part_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 apartid varchar(38)
,aparentrowid varchar(38) 
,asequence
 integer/* ? ?/? *//* ? ?/? */
,aparttype
 integer/* ??? ???????? *//* ??? ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,aname
 varchar (20)/* ???????? *//* ???????? */
,athe_comment
 text/* ???????? *//* ???????? */
,anolog
 integer/* ?? ?????????? ? ?????? *//* ?? ?????????? ? ?????? */
,amanualregister
 integer/* ????????? ?? ?????????????? *//* ????????? ?? ?????????????? */
,aoncreate varchar(38)/* ??? ???????? *//* ??? ???????? */
,aonsave varchar(38)/* ??? ?????????? *//* ??? ?????????? */
,aonrun varchar(38)/* ??? ???????? *//* ??? ???????? */
,aondelete varchar(38)/* ??? ???????? *//* ??? ???????? */
,aaddbehaivor
 integer/* ????????? ??? ?????????? *//* ????????? ??? ?????????? */
,aextenderobject varchar(38)/* ?????? ?????????? *//* ?????? ?????????? */
,ashablonbrief
 varchar (100)/* ?????? ??? ???????? ??????????? *//* ?????? ??? ???????? ??????????? */
,arulebrief
 varchar (500)/* ??????? ??????????? brief ???? *//* ??????? ??????????? brief ???? */
,aisjormalchange
 integer/* ????? ?????? ????????? *//* ????? ?????? ????????? */
,ausearchiving
 integer/* ???????????? ?????? ???????? *//* ???????????? ?????? ???????? */
,aintegerpkey
 integer/* ????????????? ???? *//* ????????????? ???? */
,aparticoncls
 varchar (80)/* ?????? ??????? *//* ?????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from part where partid=g2b(apartid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=part' result;
    leave body;
  end if;
 start transaction ; 
 call part_logger(acursession,apartid) ; 
 update  part set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  sequence=asequence
,
  parttype=aparttype
,
  caption=acaption
,
  name=aname
,
  the_comment=athe_comment
,
  nolog=anolog
,
  manualregister=amanualregister
,
  oncreate=g2b(aoncreate)
,
  onsave=g2b(aonsave)
,
  onrun=g2b(aonrun)
,
  ondelete=g2b(aondelete)
,
  addbehaivor=aaddbehaivor
,
  extenderobject=g2b(aextenderobject)
,
  shablonbrief=ashablonbrief
,
  rulebrief=arulebrief
,
  isjormalchange=aisjormalchange
,
  usearchiving=ausearchiving
,
  integerpkey=aintegerpkey
,
  particoncls=aparticoncls
  where  partid = g2b(apartid) ;
-- if asessuserlogin<>'replicator'  then
 if aparentrowid is null then
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid is null 
 and sequence=asequence;
 else 
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid =g2b(aparentrowid) 
 and sequence=asequence;
 end if;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from part where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call part_client_trigger(acursession,apartid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=part' result;
    leave body;
  end if;
 start transaction;  
 insert into   part
 (  changestamp,partid 
,parentrowid
,parentstructrowid
,sequence

,parttype

,caption

,name

,the_comment

,nolog

,manualregister

,oncreate

,onsave

,onrun

,ondelete

,addbehaivor

,extenderobject

,shablonbrief

,rulebrief

,isjormalchange

,usearchiving

,integerpkey

,particoncls

 ) values (now(), g2b(apartid) 
,g2b(aparentrowid)
,g2b(aparentstructrowid)
,asequence

,aparttype

,acaption

,aname

,athe_comment

,anolog

,amanualregister

,g2b(aoncreate)

,g2b(aonsave)

,g2b(aonrun)

,g2b(aondelete)

,aaddbehaivor

,g2b(aextenderobject)

,ashablonbrief

,arulebrief

,aisjormalchange

,ausearchiving

,aintegerpkey

,aparticoncls

 ) ;
-- if asessuserlogin<>'replicator'  then
 if aparentrowid is null then
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid is null 
 and sequence=asequence;
 else 
   select count(*) into  auniquerowcount from part where  parentstructrowid=g2b(aparentstructrowid) and parentrowid =g2b(aparentrowid) 
 and sequence=asequence;
 end if;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
select count(*) into  auniquerowcount from part where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=??????' result;
  rollback;
  leave body;
end if;
 -- end if;

call part_client_trigger(acursession,apartid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "part_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE part_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call part_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update part set lockuserid =null  where partid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update part set locksessionid =null  where partid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "qr_or_qr"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE qr_or_qr( aid1 varchar(38), aid2 varchar(38),aidout varchar(38),out acnt integer )
body:begin
delete from queryresult where queryresultid=g2b(aidout);
insert into queryresult(queryresultid,result)
select distinct aidout, result from queryresult where queryresultid in (aid1,aid2);
select acnt=count(*) from queryresult where queryresultid=g2b(aidout);
end
$$

--
-- Создать процедуру "reports_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_brief(
 acursession varchar(38),
 areportsid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if areportsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from reports where reportsid=g2b(areportsid);
 if  aec >0 then
   set abrief=reports_brief_f(g2b(areportsid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "reports_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_client_trigger(
 acursession varchar(38),
 aReportsid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "reports_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into reports 
 ( reportsid 
,instanceid
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 ) select 
copymap(acopyaction,b2g(reportsid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 from reports
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "reports_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_delete(
 acursession varchar(38),
 areportsid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from reports where reportsid=g2b(areportsid);
if aec>0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=reports' result;
    leave body;
  end if;
 call reports_logger(acursession,areportsid) ; 
  delete from  reports 
  where  reportsid = g2b(areportsid) ;
  delete from num_values where ownerpartname='reports' and ownerrowid=g2b(areportsid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "reports_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from reports where reportsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "reports_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call reports_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update reports set lockuserid =auserid ,locksessionid=null  where reportsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update reports set lockuserid=null ,locksessionid =acursession  where reportsid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "reports_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_logger(
 acursession varchar(38),
 areportsid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "reports_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from reports where  reportsid=arowid;
 end
$$

--
-- Создать процедуру "reports_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 areportsid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,areportfile varchar(255)/* ???? ?????? */
,areportfile_ext varchar(4) /* ???? ?????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,apreparemethod varchar(38)/* ????? ??? ???????????? *//* ????? ??? ???????????? */
,areporttype
 integer/* ??? ?????? *//* ??? ?????? */
,athereportext varchar(38)/* ?????????? ??? ???????? ?????? *//* ?????????? ??? ???????? ?????? */
,areportview
 varchar (255)/* ??????? ?????? *//* ??????? ?????? */
,athecomment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from reports where reportsid=g2b(areportsid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=reports' result;
    leave body;
  end if;
 start transaction ; 
 call reports_logger(acursession,areportsid) ; 
 update  reports set changestamp=now() 
,
  name=aname
,
  reportfile=areportfile
,reportfile_ext=
areportfile_ext 
,
  caption=acaption
,
  preparemethod=g2b(apreparemethod)
,
  reporttype=areporttype
,
  thereportext=g2b(athereportext)
,
  reportview=areportview
,
  thecomment=athecomment
  where  reportsid = g2b(areportsid) ;


call reports_client_trigger(acursession,areportsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=reports' result;
    leave body;
  end if;
select count(*) into aec from reports where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <reports>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   reports
 (  changestamp,reportsid 
,instanceid
,name

,reportfile

,reportfile_ext
,caption

,preparemethod

,reporttype

,thereportext

,reportview

,thecomment

 ) values (now(), g2b(areportsid) 
,g2b(ainstanceid)
,aname

,areportfile

,areportfile_ext
,acaption

,g2b(apreparemethod)

,areporttype

,g2b(athereportext)

,areportview

,athecomment

 ) ;


call reports_client_trigger(acursession,areportsid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "reports_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE reports_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call reports_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update reports set lockuserid =null  where reportsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update reports set locksessionid =null  where reportsid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "roles_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE roles_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "RowParents"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE RowParents(aQueryID varchar(38)
        ,aRowID varchar(38)
        ,aTable VARCHAR (255)
        ,aCURSESSION varchar(38)
        )
body:
  BEGIN
        
declare aplevel integer;
declare aparent varchar(255);
declare aprev varchar(255);
declare aec int;

 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0  then
    leave body;
  end if;
  
  
set aparent =atable;
set @tmpID = g2b(aROWID);
set aplevel =0;
delete from RPRESULT where RPRESULTID  =g2b(aQUERYID);
insert into RPRESULT(RPRESULTID,PARENTLEVEL,PARTNAME,ROWID)values(g2b(aQUERYID),aPLEVEL,atable,g2b(aRowID));

again:
loop
set aplevel =aplevel + 1;
set aprev = aparent;
set aparent = null;
select value into aparent from sysoptions where optiontype ='parent' and  name=aprev;

 if aparent is null then

    set @ss = concat('select InstanceID into @tmpRowID from ' , aprev , ' where ' ,aprev ,'id=?');
    PREPARE stmt FROM @ss;
    EXECUTE stmt USING @tmpid;
    DEALLOCATE PREPARE stmt;

   insert into RPRESULT(RPRESULTID,PARENTLEVEL,PARTNAME,ROWID)values(g2b(aQUERYID),aPLEVEL,'INSTANCE',@tmpRowID);
   leave again;

 Else

    set @ss = concat('select ParentStructRowID  into @tmpRowID from ' , aprev , ' where ' ,aprev ,'id=?');
    PREPARE stmt FROM @ss;
    EXECUTE stmt USING @tmpid;
    DEALLOCATE PREPARE stmt;
    set @tmpID = @tmpROWID;
   insert into RPRESULT(RPRESULTID,PARENTLEVEL,PARTNAME,ROWID)
   values(g2b(aQUERYID),aPLEVEL,aparent,@tmpRowID);
    
 End if;
End loop again;
end
$$

--
-- Создать процедуру "rptfields_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_brief(
 acursession varchar(38),
 arptfieldsid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptfieldsid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
 if  aec >0 then
   set abrief=rptfields_brief_f(g2b(arptfieldsid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "rptfields_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_client_trigger(
 acursession varchar(38),
 aRPTFieldsid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "rptfields_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptfields 
 ( rptfieldsid 
,parentstructrowid
,name

,fieldtype

,fieldsize

,caption

 ) select 
copymap(acopyaction,b2g(rptfieldsid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,fieldtype

,fieldsize

,caption

 from rptfields
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "rptfields_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_delete(
 acursession varchar(38),
 arptfieldsid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
if aec>0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=rptfields' result;
    leave body;
  end if;
 call rptfields_logger(acursession,arptfieldsid) ; 
  delete from  rptfields 
  where  rptfieldsid = g2b(arptfieldsid) ;
  delete from num_values where ownerpartname='rptfields' and ownerrowid=g2b(arptfieldsid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "rptfields_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptfields where rptfieldsid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "rptfields_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptfields_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptfields set lockuserid =auserid ,locksessionid=null  where rptfieldsid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptfields set lockuserid=null ,locksessionid =acursession  where rptfieldsid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "rptfields_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_logger(
 acursession varchar(38),
 arptfieldsid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "rptfields_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from rptfields where  rptfieldsid=arowid;
  set aparenttable = 'rptstruct';
 end
$$

--
-- Создать процедуру "rptfields_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 arptfieldsid varchar(38)
,aname
 varchar (64)/* ???????? *//* ???????? */
,afieldtype varchar(38)/* ??? ???? *//* ??? ???? */
,afieldsize
 integer/* ?????? *//* ?????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptfields where rptfieldsid=g2b(arptfieldsid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=rptfields' result;
    leave body;
  end if;
 start transaction ; 
 call rptfields_logger(acursession,arptfieldsid) ; 
 update  rptfields set changestamp=now() 
,
  name=aname
,
  fieldtype=g2b(afieldtype)
,
  fieldsize=afieldsize
,
  caption=acaption
  where  rptfieldsid = g2b(arptfieldsid) ;


call rptfields_client_trigger(acursession,arptfieldsid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=rptfields' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptfields
 (  changestamp,rptfieldsid 
,parentstructrowid
,name

,fieldtype

,fieldsize

,caption

 ) values (now(), g2b(arptfieldsid) 
,g2b(aparentstructrowid)
,aname

,g2b(afieldtype)

,afieldsize

,acaption

 ) ;


call rptfields_client_trigger(acursession,arptfieldsid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "rptfields_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptfields_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptfields_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptfields set lockuserid =null  where rptfieldsid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptfields set locksessionid =null  where rptfieldsid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "rptformula_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_brief(
 acursession varchar(38),
 arptformulaid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptformulaid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
 if  aec >0 then
   set abrief=rptformula_brief_f(g2b(arptformulaid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "rptformula_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_client_trigger(
 acursession varchar(38),
 aRPTFormulaid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "rptformula_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptformula 
 ( rptformulaid 
,instanceid
,name

,code

,platform

 ) select 
copymap(acopyaction,b2g(rptformulaid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,code

,platform

 from rptformula
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "rptformula_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_delete(
 acursession varchar(38),
 arptformulaid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
if aec>0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=rptformula' result;
    leave body;
  end if;
 call rptformula_logger(acursession,arptformulaid) ; 
  delete from  rptformula 
  where  rptformulaid = g2b(arptformulaid) ;
  delete from num_values where ownerpartname='rptformula' and ownerrowid=g2b(arptformulaid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "rptformula_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptformula where rptformulaid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "rptformula_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptformula_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptformula set lockuserid =auserid ,locksessionid=null  where rptformulaid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptformula set lockuserid=null ,locksessionid =acursession  where rptformulaid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "rptformula_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_logger(
 acursession varchar(38),
 arptformulaid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "rptformula_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from rptformula where  rptformulaid=arowid;
 end
$$

--
-- Создать процедуру "rptformula_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 arptformulaid varchar(38)
,aname
 varchar (64)/* ???????? *//* ???????? */
,acode
 text/* ????????? *//* ????????? */
,aplatform varchar(38)/* ????????? *//* ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptformula where rptformulaid=g2b(arptformulaid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=rptformula' result;
    leave body;
  end if;
 start transaction ; 
 call rptformula_logger(acursession,arptformulaid) ; 
 update  rptformula set changestamp=now() 
,
  name=aname
,
  code=acode
,
  platform=g2b(aplatform)
  where  rptformulaid = g2b(arptformulaid) ;


call rptformula_client_trigger(acursession,arptformulaid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=rptformula' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptformula
 (  changestamp,rptformulaid 
,instanceid
,name

,code

,platform

 ) values (now(), g2b(arptformulaid) 
,g2b(ainstanceid)
,aname

,acode

,g2b(aplatform)

 ) ;


call rptformula_client_trigger(acursession,arptformulaid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "rptformula_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptformula_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptformula_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptformula set lockuserid =null  where rptformulaid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptformula set locksessionid =null  where rptformulaid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "rptstruct_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_brief(
 acursession varchar(38),
 arptstructid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if arptstructid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
 if  aec >0 then
   set abrief=rptstruct_brief_f(g2b(arptstructid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "rptstruct_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_client_trigger(
 acursession varchar(38),
 aRPTStructid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "rptstruct_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_rptstruct cursor for
select rptstructid from rptstruct where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into rptstruct 
 ( rptstructid 
,instanceid
,parentrowid
,name

,caption

 ) select 
copymap(acopyaction,b2g(rptstructid)) 
,copymap(acopyaction,b2g(instanceid))
,copymap(acopyaction,b2g(parentrowid))
,name

,caption

 from rptstruct
 where instanceid =g2b( ainstanceid); 
open copy_cursor_rptstruct;
  set  fetch_done=false;
fetch copy_cursor_rptstruct into aid;
while not fetch_done do 
    call rptfields_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_rptstruct into aid;
end while;

close copy_cursor_rptstruct;
 end
$$

--
-- Создать процедуру "rptstruct_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_delete(
 acursession varchar(38),
 arptstructid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
if aec>0 then
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=rptstruct' result;
    leave body;
  end if;
 call rptstruct_logger(acursession,arptstructid) ; 
  delete from  rptstruct 
  where  rptstructid = g2b(arptstructid) ;
  delete from num_values where ownerpartname='rptstruct' and ownerrowid=g2b(arptstructid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "rptstruct_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from rptstruct where rptstructid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "rptstruct_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call rptstruct_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update rptstruct set lockuserid =auserid ,locksessionid=null  where rptstructid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update rptstruct set lockuserid=null ,locksessionid =acursession  where rptstructid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "rptstruct_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_logger(
 acursession varchar(38),
 arptstructid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "rptstruct_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from rptstruct where  rptstructid=arowid;
 end
$$

--
-- Создать процедуру "rptstruct_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 arptstructid varchar(38)
,aparentrowid varchar(38) 
,aname
 varchar (64)/* ???????? *//* ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from rptstruct where rptstructid=g2b(arptstructid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=rptstruct' result;
    leave body;
  end if;
 start transaction ; 
 call rptstruct_logger(acursession,arptstructid) ; 
 update  rptstruct set changestamp=now() 
,parentrowid= g2b(aparentrowid)
,
  name=aname
,
  caption=acaption
  where  rptstructid = g2b(arptstructid) ;


call rptstruct_client_trigger(acursession,arptstructid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzrprt.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=rptstruct' result;
    leave body;
  end if;
 start transaction;  
 insert into   rptstruct
 (  changestamp,rptstructid 
,parentrowid
,instanceid
,name

,caption

 ) values (now(), g2b(arptstructid) 
,g2b(aparentrowid)
,g2b(ainstanceid)
,aname

,acaption

 ) ;


call rptstruct_client_trigger(acursession,arptstructid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "rptstruct_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE rptstruct_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call rptstruct_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update rptstruct set lockuserid =null  where rptstructid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update rptstruct set locksessionid =null  where rptstructid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "script_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_brief(
 acursession varchar(38),
 ascriptid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ascriptid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from script where scriptid=g2b(ascriptid);
 if  aec >0 then
   set abrief=script_brief_f(g2b(ascriptid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "script_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_client_trigger(
 acursession varchar(38),
 aSCRIPTid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "script_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_script cursor for
select scriptid from script where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into script 
 ( scriptid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(scriptid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from script
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_script;
  set  fetch_done=false;
fetch copy_cursor_script into aid;
while not fetch_done do 
    call parameters_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_script into aid;
end while;

close copy_cursor_script;
 end
$$

--
-- Создать процедуру "script_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_delete(
 acursession varchar(38),
 ascriptid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from script where scriptid=g2b(ascriptid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=script' result;
    leave body;
  end if;
 call script_logger(acursession,ascriptid) ; 
  delete from  script 
  where  scriptid = g2b(ascriptid) ;
  delete from num_values where ownerpartname='script' and ownerrowid=g2b(ascriptid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "script_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from script where scriptid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "script_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call script_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update script set lockuserid =auserid ,locksessionid=null  where scriptid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update script set lockuserid=null ,locksessionid =acursession  where scriptid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "script_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_logger(
 acursession varchar(38),
 ascriptid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "script_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from script where  scriptid=arowid;
  set aparenttable = 'sharedmethod';
 end
$$

--
-- Создать процедуру "script_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 ascriptid varchar(38)
,atarget varchar(38)/* ??????? ????????? *//* ??????? ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from script where scriptid=g2b(ascriptid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=script' result;
    leave body;
  end if;
 start transaction ; 
 call script_logger(acursession,ascriptid) ; 
 update  script set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  scriptid = g2b(ascriptid) ;


call script_client_trigger(acursession,ascriptid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=script' result;
    leave body;
  end if;
 start transaction;  
 insert into   script
 (  changestamp,scriptid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(ascriptid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call script_client_trigger(acursession,ascriptid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "script_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE script_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call script_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update script set lockuserid =null  where scriptid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update script set locksessionid =null  where scriptid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "SessionTouch"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE SessionTouch(aCURSESSION BINARY(16)/* ????????????? ?????? */

)
body:begin

update the_session set lastaccess=now() where the_sessionid=acursession and closed=0;



end
$$

--
-- Создать процедуру "setmypassword_wiz"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE setmypassword_wiz( acursessionid varchar(38), aoldpassword varchar(80), anewpassword varchar(80), acomppassword varchar(80))
body: begin  
     declare ausersid  binary(16);  
	 declare apass  varchar(80);  

	 
     declare IsOK int;
     select 0 into IsOK;
     
      select 1 into IsOK from    the_Session 
        where  ( closed=1) and the_Session.the_Sessionid=g2b(acursessionid) ;
     if IsOK<>0 then
       select 'Session closed'  result;
       leave body;
     end if;

	 if anewpassword<>acomppassword then
		select 'пароли не совпадают'  result;
        leave body;
	 end if;
	
    select users.usersid,users.password into ausersid,apass from  the_Session
    join users on   the_session.usersid = users.usersid
    where the_Session.the_Sessionid=g2b(acursessionid);
	if apass<>md5(aoldpassword) then
		select 'неверный старый пароль' result;
	else
	 update users set password=md5(anewpassword) where usersid=ausersid;
		select 'OK'  result;
	end if;
    
   
    end
$$

--
-- Создать процедуру "setpassword_wiz"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE setpassword_wiz(
    acursessionid varchar(38), 
	ainstanceid varchar(38),
    anewpassword varchar(80), 
	acomppassword varchar(80)
    )
body: begin
  
     declare ausersid  binary(16);
  
	 declare apass  varchar(80);
  

	 
     declare IsOK int;
SELECT
  0 INTO IsOK;

SELECT
  1 INTO IsOK
FROM the_Session
WHERE (closed = 1)
AND the_Session.the_Sessionid = g2b(acursessionid);
     if IsOK<>0 then
SELECT
  'Session closed' result;
       leave body;
     end if;

	 if anewpassword<>acomppassword then
SELECT
  'пароли не совпадают' result;
        leave body;
	 end if;

SELECT
  users.usersid INTO ausersid
FROM arc_info
  JOIN users
    ON arc_info.login = users.login
WHERE arc_info.instanceid = g2b(ainstanceid);


UPDATE users
SET password = MD5(anewpassword)
WHERE usersid = ausersid;
SELECT
  'OK' result;
END
$$

--
-- Создать процедуру "sharedmethod_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_brief(
 acursession varchar(38),
 asharedmethodid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asharedmethodid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
 if  aec >0 then
   set abrief=sharedmethod_brief_f(g2b(asharedmethodid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "sharedmethod_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_client_trigger(
 acursession varchar(38),
 aSHAREDMETHODid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "sharedmethod_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_sharedmethod cursor for
select sharedmethodid from sharedmethod where 
instanceid =ainstanceid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into sharedmethod 
 ( sharedmethodid 
,instanceid
,name

,the_comment

,returntype

 ) select 
copymap(acopyaction,b2g(sharedmethodid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,the_comment

,returntype

 from sharedmethod
 where instanceid =g2b( ainstanceid); 
open copy_cursor_sharedmethod;
  set  fetch_done=false;
fetch copy_cursor_sharedmethod into aid;
while not fetch_done do 
    call script_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_sharedmethod into aid;
end while;

close copy_cursor_sharedmethod;
 end
$$

--
-- Создать процедуру "sharedmethod_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_delete(
 acursession varchar(38),
 asharedmethodid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=sharedmethod' result;
    leave body;
  end if;
 call sharedmethod_logger(acursession,asharedmethodid) ; 
  delete from  sharedmethod 
  where  sharedmethodid = g2b(asharedmethodid) ;
  delete from num_values where ownerpartname='sharedmethod' and ownerrowid=g2b(asharedmethodid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "sharedmethod_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from sharedmethod where sharedmethodid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "sharedmethod_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call sharedmethod_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update sharedmethod set lockuserid =auserid ,locksessionid=null  where sharedmethodid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update sharedmethod set lockuserid=null ,locksessionid =acursession  where sharedmethodid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "sharedmethod_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_logger(
 acursession varchar(38),
 asharedmethodid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "sharedmethod_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from sharedmethod where  sharedmethodid=arowid;
 end
$$

--
-- Создать процедуру "sharedmethod_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 asharedmethodid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,athe_comment
 text/* ???????? ?????? *//* ???????? ?????? */
,areturntype varchar(38)/* ???????????? ??? *//* ???????????? ??? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sharedmethod where sharedmethodid=g2b(asharedmethodid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=sharedmethod' result;
    leave body;
  end if;
 start transaction ; 
 call sharedmethod_logger(acursession,asharedmethodid) ; 
 update  sharedmethod set changestamp=now() 
,
  name=aname
,
  the_comment=athe_comment
,
  returntype=g2b(areturntype)
  where  sharedmethodid = g2b(asharedmethodid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from sharedmethod where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ? ?????????' result;
  rollback;
  leave body;
end if;
 -- end if;

call sharedmethod_client_trigger(acursession,asharedmethodid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=sharedmethod' result;
    leave body;
  end if;
 start transaction;  
 insert into   sharedmethod
 (  changestamp,sharedmethodid 
,instanceid
,name

,the_comment

,returntype

 ) values (now(), g2b(asharedmethodid) 
,g2b(ainstanceid)
,aname

,athe_comment

,g2b(areturntype)

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from sharedmethod where 1=1  
 and name=aname;
if auniquerowcount>=2 then
 select '????????? ???????????? ????????? ?????. ??????=?????? ? ?????????' result;
  rollback;
  leave body;
end if;
 -- end if;

call sharedmethod_client_trigger(acursession,asharedmethodid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "sharedmethod_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sharedmethod_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call sharedmethod_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update sharedmethod set lockuserid =null  where sharedmethodid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update sharedmethod set locksessionid =null  where sharedmethodid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "stdinfostore_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE stdinfostore_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "stdnumerator_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE stdnumerator_copy(
 acursession varchar(38),
 ainstanceid varchar(38), 
 anewinstanceid varchar(38) 
)
body: begin  
declare aaction varchar(38);
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    select '?????? ??? ?????????.' result;
    leave body;
 end if;
select uuid() into aaction;
insert into copymapdata(actionid,inpid,outid) values(g2b(aaction),g2b(ainstanceid),g2b(anewinstanceid));
insert into instance(instanceid,name,objtype,status,archived)  select g2b(anewinstanceid),name,objtype,status,archived from instance where instanceid=g2b(ainstanceid); 
call num_zones_copy(acursession,aaction,ainstanceid);
call num_head_copy(acursession,aaction,ainstanceid);
delete from copymapdata where actionid=g2b(aaction);
select 'ok' result;
 end
$$

--
-- Создать процедуру "structrestriction_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_brief(
 acursession varchar(38),
 astructrestrictionid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if astructrestrictionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
 if  aec >0 then
   set abrief=structrestriction_brief_f(g2b(astructrestrictionid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "structrestriction_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_client_trigger(
 acursession varchar(38),
 aSTRUCTRESTRICTIONid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "structrestriction_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into structrestriction 
 ( structrestrictionid 
,parentstructrowid
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 ) select 
copymap(acopyaction,b2g(structrestrictionid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 from structrestriction
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "structrestriction_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_delete(
 acursession varchar(38),
 astructrestrictionid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=structrestriction' result;
    leave body;
  end if;
 call structrestriction_logger(acursession,astructrestrictionid) ; 
  delete from  structrestriction 
  where  structrestrictionid = g2b(astructrestrictionid) ;
  delete from num_values where ownerpartname='structrestriction' and ownerrowid=g2b(astructrestrictionid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "structrestriction_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from structrestriction where structrestrictionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "structrestriction_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call structrestriction_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update structrestriction set lockuserid =auserid ,locksessionid=null  where structrestrictionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update structrestriction set lockuserid=null ,locksessionid =acursession  where structrestrictionid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "structrestriction_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_logger(
 acursession varchar(38),
 astructrestrictionid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "structrestriction_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from structrestriction where  structrestrictionid=arowid;
  set aparenttable = 'objectmode';
 end
$$

--
-- Создать процедуру "structrestriction_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 astructrestrictionid varchar(38)
,astruct varchar(38)/* ?????????, ?????? ? ??????? ????????? *//* ?????????, ?????? ? ??????? ????????? */
,aallowread
 integer/* ???????? ???????? *//* ???????? ???????? */
,aallowadd
 integer/* ????????? ????????? *//* ????????? ????????? */
,aallowedit
 integer/* ????????? ???????? *//* ????????? ???????? */
,aallowdelete
 integer/* ????????? ??????? *//* ????????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from structrestriction where structrestrictionid=g2b(astructrestrictionid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=structrestriction' result;
    leave body;
  end if;
 start transaction ; 
 call structrestriction_logger(acursession,astructrestrictionid) ; 
 update  structrestriction set changestamp=now() 
,
  struct=g2b(astruct)
,
  allowread=aallowread
,
  allowadd=aallowadd
,
  allowedit=aallowedit
,
  allowdelete=aallowdelete
  where  structrestrictionid = g2b(astructrestrictionid) ;


call structrestriction_client_trigger(acursession,astructrestrictionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=structrestriction' result;
    leave body;
  end if;
 start transaction;  
 insert into   structrestriction
 (  changestamp,structrestrictionid 
,parentstructrowid
,struct

,allowread

,allowadd

,allowedit

,allowdelete

 ) values (now(), g2b(astructrestrictionid) 
,g2b(aparentstructrowid)
,g2b(astruct)

,aallowread

,aallowadd

,aallowedit

,aallowdelete

 ) ;


call structrestriction_client_trigger(acursession,astructrestrictionid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "structrestriction_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE structrestriction_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call structrestriction_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update structrestriction set lockuserid =null  where structrestrictionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update structrestriction set locksessionid =null  where structrestrictionid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "syslog_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_brief(
 acursession varchar(38),
 asyslogid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asyslogid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
 if  aec >0 then
   set abrief=syslog_brief_f(g2b(asyslogid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "syslog_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_client_trigger(
 acursession varchar(38),
 aSysLogid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "syslog_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into syslog 
 ( syslogid 
,instanceid
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 ) select 
copymap(acopyaction,b2g(syslogid)) 
,copymap(acopyaction,b2g(instanceid))
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 from syslog
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "syslog_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_delete(
 acursession varchar(38),
 asyslogid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
if aec>0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=syslog' result;
    leave body;
  end if;
 call syslog_logger(acursession,asyslogid) ; 
  delete from  syslog 
  where  syslogid = g2b(asyslogid) ;
  delete from num_values where ownerpartname='syslog' and ownerrowid=g2b(asyslogid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "syslog_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from syslog where syslogid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "syslog_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call syslog_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update syslog set lockuserid =auserid ,locksessionid=null  where syslogid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update syslog set lockuserid=null ,locksessionid =acursession  where syslogid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "syslog_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_logger(
 acursession varchar(38),
 asyslogid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "syslog_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from syslog where  syslogid=arowid;
 end
$$

--
-- Создать процедуру "syslog_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 asyslogid varchar(38)
,athesession varchar(38)/* ?????? *//* ?????? */
,athe_resource
 varchar (255)/* ?????? *//* ?????? */
,alogstructid
 varchar (255)/* ?????? ? ??????? ????????? ???????? *//* ?????? ? ??????? ????????? ???????? */
,averb
 varchar (80)/* ???????? *//* ???????? */
,aloginstanceid binary(16)/* ????????????? ????????? *//* ????????????? ????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from syslog where syslogid=g2b(asyslogid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=syslog' result;
    leave body;
  end if;
 start transaction ; 
 call syslog_logger(acursession,asyslogid) ; 
 update  syslog set changestamp=now() 
,
  thesession=g2b(athesession)
,
  the_resource=athe_resource
,
  logstructid=alogstructid
,
  verb=averb
,
  loginstanceid=aloginstanceid
  where  syslogid = g2b(asyslogid) ;


call syslog_client_trigger(acursession,asyslogid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=syslog' result;
    leave body;
  end if;
 start transaction;  
 insert into   syslog
 (  changestamp,syslogid 
,instanceid
,thesession

,the_resource

,logstructid

,verb

,loginstanceid

 ) values (now(), g2b(asyslogid) 
,g2b(ainstanceid)
,g2b(athesession)

,athe_resource

,alogstructid

,averb

,aloginstanceid

 ) ;


call syslog_client_trigger(acursession,asyslogid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "syslog_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE syslog_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call syslog_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update syslog set lockuserid =null  where syslogid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update syslog set locksessionid =null  where syslogid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "sysoptions_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysoptions_save( asysoptionsid varchar(38), aname varchar(255),avalue varchar (255), aoptiontype varchar(255))
begin
declare aec  int;
select count(*) into aec from sysoptions where sysoptionsid=g2b(asysoptionsid);
if aec>0 then
  update sysoptions set name=aname, value=avalue, optiontype=aoptiontype where sysoptionsid=g2b(asysoptionsid);
else
  insert into sysoptions (sysoptionsid, name, value, optiontype)values(g2b(asysoptionsid),aname,avalue,aoptiontype);
end if;
end
$$

--
-- Создать процедуру "sysrefcache_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_brief(
 acursession varchar(38),
 asysrefcacheid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if asysrefcacheid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
 if  aec >0 then
   set abrief=sysrefcache_brief_f(g2b(asysrefcacheid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "sysrefcache_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_client_trigger(
 acursession varchar(38),
 aSysRefCacheid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "sysrefcache_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into sysrefcache 
 ( sysrefcacheid 
,instanceid
,cachetype

,objectownerid

,sessionid

,modulename

 ) select 
copymap(acopyaction,b2g(sysrefcacheid)) 
,copymap(acopyaction,b2g(instanceid))
,cachetype

,objectownerid

,sessionid

,modulename

 from sysrefcache
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "sysrefcache_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_delete(
 acursession varchar(38),
 asysrefcacheid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
if aec>0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=sysrefcache' result;
    leave body;
  end if;
 call sysrefcache_logger(acursession,asysrefcacheid) ; 
  delete from  sysrefcache 
  where  sysrefcacheid = g2b(asysrefcacheid) ;
  delete from num_values where ownerpartname='sysrefcache' and ownerrowid=g2b(asysrefcacheid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "sysrefcache_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from sysrefcache where sysrefcacheid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "sysrefcache_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call sysrefcache_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update sysrefcache set lockuserid =auserid ,locksessionid=null  where sysrefcacheid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update sysrefcache set lockuserid=null ,locksessionid =acursession  where sysrefcacheid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "sysrefcache_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_logger(
 acursession varchar(38),
 asysrefcacheid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "sysrefcache_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from sysrefcache where  sysrefcacheid=arowid;
 end
$$

--
-- Создать процедуру "sysrefcache_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 asysrefcacheid varchar(38)
,acachetype
 integer/* ??? ??????????? *//* ??? ??????????? */
,aobjectownerid binary(16)/* ????????????? ????????? *//* ????????????? ????????? */
,asessionid varchar(38)/* ?????? *//* ?????? */
,amodulename
 varchar (40)/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from sysrefcache where sysrefcacheid=g2b(asysrefcacheid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=sysrefcache' result;
    leave body;
  end if;
 start transaction ; 
 call sysrefcache_logger(acursession,asysrefcacheid) ; 
 update  sysrefcache set changestamp=now() 
,
  cachetype=acachetype
,
  objectownerid=aobjectownerid
,
  sessionid=g2b(asessionid)
,
  modulename=amodulename
  where  sysrefcacheid = g2b(asysrefcacheid) ;


call sysrefcache_client_trigger(acursession,asysrefcacheid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=sysrefcache' result;
    leave body;
  end if;
 start transaction;  
 insert into   sysrefcache
 (  changestamp,sysrefcacheid 
,instanceid
,cachetype

,objectownerid

,sessionid

,modulename

 ) values (now(), g2b(asysrefcacheid) 
,g2b(ainstanceid)
,acachetype

,aobjectownerid

,g2b(asessionid)

,amodulename

 ) ;


call sysrefcache_client_trigger(acursession,asysrefcacheid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "sysrefcache_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sysrefcache_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call sysrefcache_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update sysrefcache set lockuserid =null  where sysrefcacheid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update sysrefcache set locksessionid =null  where sysrefcacheid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "the_session_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_brief(
 acursession varchar(38),
 athe_sessionid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if athe_sessionid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
 if  aec >0 then
   set abrief=the_session_brief_f(g2b(athe_sessionid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "the_session_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_client_trigger(
 acursession varchar(38),
 athe_Sessionid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "the_session_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into the_session 
 ( the_sessionid 
,instanceid
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 ) select 
copymap(acopyaction,b2g(the_sessionid)) 
,copymap(acopyaction,b2g(instanceid))
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 from the_session
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "the_session_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_delete(
 acursession varchar(38),
 athe_sessionid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
if aec>0 then
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=the_session' result;
    leave body;
  end if;
 call the_session_logger(acursession,athe_sessionid) ; 
  delete from  the_session 
  where  the_sessionid = g2b(athe_sessionid) ;
  delete from num_values where ownerpartname='the_session' and ownerrowid=g2b(athe_sessionid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "the_session_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from the_session where the_sessionid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "the_session_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call the_session_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update the_session set lockuserid =auserid ,locksessionid=null  where the_sessionid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update the_session set lockuserid=null ,locksessionid =acursession  where the_sessionid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "the_session_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_logger(
 acursession varchar(38),
 athe_sessionid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "the_session_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from the_session where  the_sessionid=arowid;
 end
$$

--
-- Создать процедуру "the_session_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 athe_sessionid varchar(38)
,aapplicationid varchar(38)/* ?????????? *//* ?????????? */
,auserrole varchar(38)/* ??????? ???? ???????????? *//* ??????? ???? ???????????? */
,aclosedat
 datetime/* ?????? ???????? *//* ?????? ???????? */
,aclosed
 integer/* ??????? *//* ??????? */
,ausersid varchar(38)/* ???????????? *//* ???????????? */
,alastaccess
 datetime/* ????????? ????????????? *//* ????????? ????????????? */
,astartat
 datetime/* ?????? ???????? *//* ?????? ???????? */
,alang
 varchar (25)/* ??????????? *//* ??????????? */
,alogin
 varchar (255)/* login *//* login */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from the_session where the_sessionid=g2b(athe_sessionid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=the_session' result;
    leave body;
  end if;
 start transaction ; 
 call the_session_logger(acursession,athe_sessionid) ; 
 update  the_session set changestamp=now() 
,
  applicationid=g2b(aapplicationid)
,
  userrole=g2b(auserrole)
,
  closedat=aclosedat
,
  closed=aclosed
,
  usersid=g2b(ausersid)
,
  lastaccess=alastaccess
,
  startat=astartat
,
  lang=alang
,
  login=alogin
  where  the_sessionid = g2b(athe_sessionid) ;


call the_session_client_trigger(acursession,athe_sessionid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzsystem.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=the_session' result;
    leave body;
  end if;
 start transaction;  
 insert into   the_session
 (  changestamp,the_sessionid 
,instanceid
,applicationid

,userrole

,closedat

,closed

,usersid

,lastaccess

,startat

,lang

,login

 ) values (now(), g2b(athe_sessionid) 
,g2b(ainstanceid)
,g2b(aapplicationid)

,g2b(auserrole)

,aclosedat

,aclosed

,g2b(ausersid)

,alastaccess

,astartat

,alang

,alogin

 ) ;


call the_session_client_trigger(acursession,athe_sessionid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "the_session_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE the_session_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call the_session_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update the_session set lockuserid =null  where the_sessionid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update the_session set locksessionid =null  where the_sessionid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "tocard_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tocard_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_bug_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_brief(acursession varchar(38),
atod_bugid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_bugid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_bug
    WHERE tod_bugid = g2b(atod_bugid);
    IF aec > 0 THEN
      SET abrief = tod_bug_brief_f(g2b(atod_bugid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_bug_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_client_trigger(acursession varchar(38),
atod_bugid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_bug_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_bug (tod_bugid
    , instanceid
    , the_system

    , name

    , the_comment)
      SELECT
        copymap(acopyaction, b2g(tod_bugid)),
        copymap(acopyaction, b2g(instanceid)),
        the_system,
        name,
        the_comment

      FROM tod_bug
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_bug_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_delete(acursession varchar(38),
atod_bugid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_bug
    WHERE tod_bugid = g2b(atod_bugid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_bug' result;
        LEAVE body;
      END IF;
      CALL tod_bug_logger(acursession, atod_bugid);
      DELETE
        FROM tod_bug
      WHERE tod_bugid = g2b(atod_bugid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_bug'
        AND ownerrowid = g2b(atod_bugid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_bug_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_bug
    WHERE tod_bugid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_bug_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_bug_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_bug
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_bugid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_bug
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_bugid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_bug_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_logger(acursession varchar(38),
atod_bugid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_bug_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_bug
    WHERE tod_bugid = arowid;
  END
$$

--
-- Создать процедуру "tod_bug_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_bug_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_bug_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_bug
      SET lockuserid = NULL
      WHERE tod_bugid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_bug
      SET locksessionid = NULL
      WHERE tod_bugid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_building_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_brief(acursession varchar(38),
atod_buildingid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_buildingid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_building
    WHERE tod_buildingid = g2b(atod_buildingid);
    IF aec > 0 THEN
      SET abrief = tod_building_brief_f(g2b(atod_buildingid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_building_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_client_trigger(acursession varchar(38),
atod_buildingid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_building_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_building (tod_buildingid
    , instanceid
    , thefactory

    , name)
      SELECT
        copymap(acopyaction, b2g(tod_buildingid)),
        copymap(acopyaction, b2g(instanceid)),
        thefactory,
        name

      FROM tod_building
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_building_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_delete(acursession varchar(38),
atod_buildingid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_building
    WHERE tod_buildingid = g2b(atod_buildingid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_building' result;
        LEAVE body;
      END IF;
      CALL tod_building_logger(acursession, atod_buildingid);
      DELETE
        FROM tod_building
      WHERE tod_buildingid = g2b(atod_buildingid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_building'
        AND ownerrowid = g2b(atod_buildingid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_building_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_building
    WHERE tod_buildingid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_building_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_building_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_building
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_buildingid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_building
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_buildingid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_building_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_logger(acursession varchar(38),
atod_buildingid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_building_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_building
    WHERE tod_buildingid = arowid;
  END
$$

--
-- Создать процедуру "tod_building_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_building_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_building_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_building
      SET lockuserid = NULL
      WHERE tod_buildingid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_building
      SET locksessionid = NULL
      WHERE tod_buildingid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL tod_factory_copy(acursession, aaction, ainstanceid);
    CALL tod_bug_copy(acursession, aaction, ainstanceid);
    CALL tod_building_copy(acursession, aaction, ainstanceid);
    CALL tod_valtype_copy(acursession, aaction, ainstanceid);
    CALL tod_model_copy(acursession, aaction, ainstanceid);
    CALL tod_system_copy(acursession, aaction, ainstanceid);
    CALL tod_oprole_copy(acursession, aaction, ainstanceid);
    CALL tod_trand_copy(acursession, aaction, ainstanceid);
    CALL tod_st_copy(acursession, aaction, ainstanceid);
    CALL tod_material_copy(acursession, aaction, ainstanceid);
    CALL tod_edizm_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_edizm_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_brief(acursession varchar(38),
atod_edizmid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_edizmid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_edizm
    WHERE tod_edizmid = g2b(atod_edizmid);
    IF aec > 0 THEN
      SET abrief = tod_edizm_brief_f(g2b(atod_edizmid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_edizm_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_client_trigger(acursession varchar(38),
atod_edizmid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_edizm_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_edizm (tod_edizmid
    , instanceid)
      SELECT
        copymap(acopyaction, b2g(tod_edizmid)),
        copymap(acopyaction, b2g(instanceid))
      FROM tod_edizm
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_edizm_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_delete(acursession varchar(38),
atod_edizmid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_edizm
    WHERE tod_edizmid = g2b(atod_edizmid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_edizm' result;
        LEAVE body;
      END IF;
      CALL tod_edizm_logger(acursession, atod_edizmid);
      DELETE
        FROM tod_edizm
      WHERE tod_edizmid = g2b(atod_edizmid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_edizm'
        AND ownerrowid = g2b(atod_edizmid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_edizm_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_edizm
    WHERE tod_edizmid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_edizm_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_edizm_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_edizm
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_edizmid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_edizm
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_edizmid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_edizm_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_logger(acursession varchar(38),
atod_edizmid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_edizm_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_edizm
    WHERE tod_edizmid = arowid;
  END
$$

--
-- Создать процедуру "tod_edizm_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_save(acursession varchar(38),
ainstanceid varchar(38),
atod_edizmid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_edizm
    WHERE tod_edizmid = g2b(atod_edizmid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=tod_edizm' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL tod_edizm_logger(acursession, atod_edizmid);
        UPDATE tod_edizm
        SET changestamp = now()
        WHERE tod_edizmid = g2b(atod_edizmid);


        CALL tod_edizm_client_trigger(acursession, atod_edizmid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'tod.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=tod_edizm' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO tod_edizm (changestamp, tod_edizmid
          , instanceid)
            VALUES (now(), g2b(atod_edizmid), g2b(ainstanceid));


          CALL tod_edizm_client_trigger(acursession, atod_edizmid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "tod_edizm_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_edizm_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_edizm_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_edizm
      SET lockuserid = NULL
      WHERE tod_edizmid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_edizm
      SET locksessionid = NULL
      WHERE tod_edizmid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_factory_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_brief(acursession varchar(38),
atod_factoryid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_factoryid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_factory
    WHERE tod_factoryid = g2b(atod_factoryid);
    IF aec > 0 THEN
      SET abrief = tod_factory_brief_f(g2b(atod_factoryid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_factory_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_client_trigger(acursession varchar(38),
atod_factoryid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_factory_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_factory (tod_factoryid
    , instanceid
    , name)
      SELECT
        copymap(acopyaction, b2g(tod_factoryid)),
        copymap(acopyaction, b2g(instanceid)),
        name

      FROM tod_factory
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_factory_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_delete(acursession varchar(38),
atod_factoryid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_factory
    WHERE tod_factoryid = g2b(atod_factoryid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_factory' result;
        LEAVE body;
      END IF;
      CALL tod_factory_logger(acursession, atod_factoryid);
      DELETE
        FROM tod_factory
      WHERE tod_factoryid = g2b(atod_factoryid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_factory'
        AND ownerrowid = g2b(atod_factoryid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_factory_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_factory
    WHERE tod_factoryid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_factory_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_factory_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_factory
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_factoryid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_factory
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_factoryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_factory_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_logger(acursession varchar(38),
atod_factoryid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_factory_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_factory
    WHERE tod_factoryid = arowid;
  END
$$

--
-- Создать процедуру "tod_factory_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_factory_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_factory_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_factory
      SET lockuserid = NULL
      WHERE tod_factoryid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_factory
      SET locksessionid = NULL
      WHERE tod_factoryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_material_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_brief(acursession varchar(38),
atod_materialid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_materialid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_material
    WHERE tod_materialid = g2b(atod_materialid);
    IF aec > 0 THEN
      SET abrief = tod_material_brief_f(g2b(atod_materialid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_material_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_client_trigger(acursession varchar(38),
atod_materialid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_material_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_material (tod_materialid
    , instanceid)
      SELECT
        copymap(acopyaction, b2g(tod_materialid)),
        copymap(acopyaction, b2g(instanceid))
      FROM tod_material
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_material_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_delete(acursession varchar(38),
atod_materialid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_material
    WHERE tod_materialid = g2b(atod_materialid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_material' result;
        LEAVE body;
      END IF;
      CALL tod_material_logger(acursession, atod_materialid);
      DELETE
        FROM tod_material
      WHERE tod_materialid = g2b(atod_materialid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_material'
        AND ownerrowid = g2b(atod_materialid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_material_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_material
    WHERE tod_materialid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_material_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_material_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_material
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_materialid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_material
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_materialid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_material_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_logger(acursession varchar(38),
atod_materialid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_material_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_material
    WHERE tod_materialid = arowid;
  END
$$

--
-- Создать процедуру "tod_material_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_save(acursession varchar(38),
ainstanceid varchar(38),
atod_materialid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_material
    WHERE tod_materialid = g2b(atod_materialid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=tod_material' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL tod_material_logger(acursession, atod_materialid);
        UPDATE tod_material
        SET changestamp = now()
        WHERE tod_materialid = g2b(atod_materialid);


        CALL tod_material_client_trigger(acursession, atod_materialid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'tod.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=tod_material' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO tod_material (changestamp, tod_materialid
          , instanceid)
            VALUES (now(), g2b(atod_materialid), g2b(ainstanceid));


          CALL tod_material_client_trigger(acursession, atod_materialid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "tod_material_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_material_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_material_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_material
      SET lockuserid = NULL
      WHERE tod_materialid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_material
      SET locksessionid = NULL
      WHERE tod_materialid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_model_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_brief(acursession varchar(38),
atod_modelid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_modelid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_model
    WHERE tod_modelid = g2b(atod_modelid);
    IF aec > 0 THEN
      SET abrief = tod_model_brief_f(g2b(atod_modelid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_model_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_client_trigger(acursession varchar(38),
atod_modelid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_model_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_model (tod_modelid
    , instanceid
    , name)
      SELECT
        copymap(acopyaction, b2g(tod_modelid)),
        copymap(acopyaction, b2g(instanceid)),
        name

      FROM tod_model
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_model_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_delete(acursession varchar(38),
atod_modelid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_model
    WHERE tod_modelid = g2b(atod_modelid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_model' result;
        LEAVE body;
      END IF;
      CALL tod_model_logger(acursession, atod_modelid);
      DELETE
        FROM tod_model
      WHERE tod_modelid = g2b(atod_modelid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_model'
        AND ownerrowid = g2b(atod_modelid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_model_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_model
    WHERE tod_modelid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_model_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_model_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_model
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_modelid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_model
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_modelid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_model_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_logger(acursession varchar(38),
atod_modelid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_model_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_model
    WHERE tod_modelid = arowid;
  END
$$

--
-- Создать процедуру "tod_model_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_model_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_model_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_model
      SET lockuserid = NULL
      WHERE tod_modelid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_model
      SET locksessionid = NULL
      WHERE tod_modelid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_oprole_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_brief(acursession varchar(38),
atod_oproleid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_oproleid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_oprole
    WHERE tod_oproleid = g2b(atod_oproleid);
    IF aec > 0 THEN
      SET abrief = tod_oprole_brief_f(g2b(atod_oproleid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_oprole_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_client_trigger(acursession varchar(38),
atod_oproleid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_oprole_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_oprole (tod_oproleid
    , instanceid
    , name

    , docmode)
      SELECT
        copymap(acopyaction, b2g(tod_oproleid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        docmode

      FROM tod_oprole
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_oprole_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_delete(acursession varchar(38),
atod_oproleid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_oprole
    WHERE tod_oproleid = g2b(atod_oproleid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_oprole' result;
        LEAVE body;
      END IF;
      CALL tod_oprole_logger(acursession, atod_oproleid);
      DELETE
        FROM tod_oprole
      WHERE tod_oproleid = g2b(atod_oproleid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_oprole'
        AND ownerrowid = g2b(atod_oproleid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_oprole_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_oprole
    WHERE tod_oproleid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_oprole_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_oprole_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_oprole
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_oproleid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_oprole
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_oproleid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_oprole_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_logger(acursession varchar(38),
atod_oproleid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_oprole_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_oprole
    WHERE tod_oproleid = arowid;
  END
$$

--
-- Создать процедуру "tod_oprole_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_oprole_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_oprole_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_oprole
      SET lockuserid = NULL
      WHERE tod_oproleid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_oprole
      SET locksessionid = NULL
      WHERE tod_oproleid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_st_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_brief(acursession varchar(38),
atod_stid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_stid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_st
    WHERE tod_stid = g2b(atod_stid);
    IF aec > 0 THEN
      SET abrief = tod_st_brief_f(g2b(atod_stid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_st_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_client_trigger(acursession varchar(38),
atod_stid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_st_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_st (tod_stid
    , instanceid)
      SELECT
        copymap(acopyaction, b2g(tod_stid)),
        copymap(acopyaction, b2g(instanceid))
      FROM tod_st
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_st_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_delete(acursession varchar(38),
atod_stid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_st
    WHERE tod_stid = g2b(atod_stid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_st' result;
        LEAVE body;
      END IF;
      CALL tod_st_logger(acursession, atod_stid);
      DELETE
        FROM tod_st
      WHERE tod_stid = g2b(atod_stid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_st'
        AND ownerrowid = g2b(atod_stid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_st_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_st
    WHERE tod_stid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_st_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_st_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_st
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_stid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_st
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_stid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_st_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_logger(acursession varchar(38),
atod_stid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_st_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_st
    WHERE tod_stid = arowid;
  END
$$

--
-- Создать процедуру "tod_st_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_save(acursession varchar(38),
ainstanceid varchar(38),
atod_stid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_st
    WHERE tod_stid = g2b(atod_stid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=tod_st' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL tod_st_logger(acursession, atod_stid);
        UPDATE tod_st
        SET changestamp = now()
        WHERE tod_stid = g2b(atod_stid);


        CALL tod_st_client_trigger(acursession, atod_stid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'tod.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=tod_st' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO tod_st (changestamp, tod_stid
          , instanceid)
            VALUES (now(), g2b(atod_stid), g2b(ainstanceid));


          CALL tod_st_client_trigger(acursession, atod_stid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "tod_st_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_st_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_st_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_st
      SET lockuserid = NULL
      WHERE tod_stid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_st
      SET locksessionid = NULL
      WHERE tod_stid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_system_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_brief(acursession varchar(38),
atod_systemid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_systemid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_system
    WHERE tod_systemid = g2b(atod_systemid);
    IF aec > 0 THEN
      SET abrief = tod_system_brief_f(g2b(atod_systemid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_system_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_client_trigger(acursession varchar(38),
atod_systemid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_system_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_system (tod_systemid
    , instanceid
    , name)
      SELECT
        copymap(acopyaction, b2g(tod_systemid)),
        copymap(acopyaction, b2g(instanceid)),
        name

      FROM tod_system
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_system_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_delete(acursession varchar(38),
atod_systemid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_system
    WHERE tod_systemid = g2b(atod_systemid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_system' result;
        LEAVE body;
      END IF;
      CALL tod_system_logger(acursession, atod_systemid);
      DELETE
        FROM tod_system
      WHERE tod_systemid = g2b(atod_systemid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_system'
        AND ownerrowid = g2b(atod_systemid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_system_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_system
    WHERE tod_systemid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_system_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_system_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_system
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_systemid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_system
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_systemid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_system_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_logger(acursession varchar(38),
atod_systemid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_system_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_system
    WHERE tod_systemid = arowid;
  END
$$

--
-- Создать процедуру "tod_system_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_system_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_system_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_system
      SET lockuserid = NULL
      WHERE tod_systemid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_system
      SET locksessionid = NULL
      WHERE tod_systemid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_trand_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_brief(acursession varchar(38),
atod_trandid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_trandid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_trand
    WHERE tod_trandid = g2b(atod_trandid);
    IF aec > 0 THEN
      SET abrief = tod_trand_brief_f(g2b(atod_trandid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_trand_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_client_trigger(acursession varchar(38),
atod_trandid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_trand_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_trand (tod_trandid
    , instanceid)
      SELECT
        copymap(acopyaction, b2g(tod_trandid)),
        copymap(acopyaction, b2g(instanceid))
      FROM tod_trand
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_trand_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_delete(acursession varchar(38),
atod_trandid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_trand
    WHERE tod_trandid = g2b(atod_trandid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_trand' result;
        LEAVE body;
      END IF;
      CALL tod_trand_logger(acursession, atod_trandid);
      DELETE
        FROM tod_trand
      WHERE tod_trandid = g2b(atod_trandid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_trand'
        AND ownerrowid = g2b(atod_trandid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_trand_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_trand
    WHERE tod_trandid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_trand_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_trand_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_trand
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_trandid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_trand
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_trandid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_trand_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_logger(acursession varchar(38),
atod_trandid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_trand_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_trand
    WHERE tod_trandid = arowid;
  END
$$

--
-- Создать процедуру "tod_trand_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_save(acursession varchar(38),
ainstanceid varchar(38),
atod_trandid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_trand
    WHERE tod_trandid = g2b(atod_trandid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=tod_trand' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL tod_trand_logger(acursession, atod_trandid);
        UPDATE tod_trand
        SET changestamp = now()
        WHERE tod_trandid = g2b(atod_trandid);


        CALL tod_trand_client_trigger(acursession, atod_trandid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'tod.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=tod_trand' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO tod_trand (changestamp, tod_trandid
          , instanceid)
            VALUES (now(), g2b(atod_trandid), g2b(ainstanceid));


          CALL tod_trand_client_trigger(acursession, atod_trandid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "tod_trand_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_trand_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_trand_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_trand
      SET lockuserid = NULL
      WHERE tod_trandid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_trand
      SET locksessionid = NULL
      WHERE tod_trandid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_valtype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_brief(acursession varchar(38),
atod_valtypeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF atod_valtypeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM tod_valtype
    WHERE tod_valtypeid = g2b(atod_valtypeid);
    IF aec > 0 THEN
      SET abrief = tod_valtype_brief_f(g2b(atod_valtypeid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "tod_valtype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_client_trigger(acursession varchar(38),
atod_valtypeid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "tod_valtype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO tod_valtype (tod_valtypeid
    , instanceid
    , name

    , edizm

    , fieldtype)
      SELECT
        copymap(acopyaction, b2g(tod_valtypeid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        edizm,
        fieldtype

      FROM tod_valtype
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "tod_valtype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_delete(acursession varchar(38),
atod_valtypeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM tod_valtype
    WHERE tod_valtypeid = g2b(atod_valtypeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'tod.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=tod_valtype' result;
        LEAVE body;
      END IF;
      CALL tod_valtype_logger(acursession, atod_valtypeid);
      DELETE
        FROM tod_valtype
      WHERE tod_valtypeid = g2b(atod_valtypeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'tod_valtype'
        AND ownerrowid = g2b(atod_valtypeid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tod_valtype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM tod_valtype
    WHERE tod_valtypeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "tod_valtype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_valtype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE tod_valtype
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE tod_valtypeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE tod_valtype
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE tod_valtypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_valtype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_logger(acursession varchar(38),
atod_valtypeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "tod_valtype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM tod_valtype
    WHERE tod_valtypeid = arowid;
  END
$$

--
-- Создать процедуру "tod_valtype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tod_valtype_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL tod_valtype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE tod_valtype
      SET lockuserid = NULL
      WHERE tod_valtypeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE tod_valtype
      SET locksessionid = NULL
      WHERE tod_valtypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "toimg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE toimg_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "toop_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE toop_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tor_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tor_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "tosched_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE tosched_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "totask_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE totask_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "totrn_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE totrn_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "typemenu_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_brief(
 acursession varchar(38),
 atypemenuid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if atypemenuid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
 if  aec >0 then
   set abrief=typemenu_brief_f(g2b(atypemenuid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "typemenu_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_client_trigger(
 acursession varchar(38),
 aTYPEMENUid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "typemenu_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into typemenu 
 ( typemenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) select 
copymap(acopyaction,b2g(typemenuid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 from typemenu
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "typemenu_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_delete(
 acursession varchar(38),
 atypemenuid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=typemenu' result;
    leave body;
  end if;
 call typemenu_logger(acursession,atypemenuid) ; 
  delete from  typemenu 
  where  typemenuid = g2b(atypemenuid) ;
  delete from num_values where ownerpartname='typemenu' and ownerrowid=g2b(atypemenuid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "typemenu_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from typemenu where typemenuid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "typemenu_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call typemenu_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update typemenu set lockuserid =auserid ,locksessionid=null  where typemenuid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update typemenu set lockuserid=null ,locksessionid =acursession  where typemenuid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "typemenu_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_logger(
 acursession varchar(38),
 atypemenuid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "typemenu_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from typemenu where  typemenuid=arowid;
  set aparenttable = 'objecttype';
 end
$$

--
-- Создать процедуру "typemenu_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 atypemenuid varchar(38)
,aname
 varchar (64)/* ???????? *//* ???????? */
,acaption
 varchar (80)/* ????????? *//* ????????? */
,atooltip
 varchar (80)/* ????????? *//* ????????? */
,athe_action varchar(38)/* ????? *//* ????? */
,aismenuitem
 integer/* ???????? ? ???? *//* ???????? ? ???? */
,aistoolbarbutton
 integer/* ???????? ? ?????? *//* ???????? ? ?????? */
,ahotkey
 varchar (20)/* ??????? ??????? *//* ??????? ??????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from typemenu where typemenuid=g2b(atypemenuid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=typemenu' result;
    leave body;
  end if;
 start transaction ; 
 call typemenu_logger(acursession,atypemenuid) ; 
 update  typemenu set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  tooltip=atooltip
,
  the_action=g2b(athe_action)
,
  ismenuitem=aismenuitem
,
  istoolbarbutton=aistoolbarbutton
,
  hotkey=ahotkey
  where  typemenuid = g2b(atypemenuid) ;


call typemenu_client_trigger(acursession,atypemenuid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=typemenu' result;
    leave body;
  end if;
 start transaction;  
 insert into   typemenu
 (  changestamp,typemenuid 
,parentstructrowid
,name

,caption

,tooltip

,the_action

,ismenuitem

,istoolbarbutton

,hotkey

 ) values (now(), g2b(atypemenuid) 
,g2b(aparentstructrowid)
,aname

,acaption

,atooltip

,g2b(athe_action)

,aismenuitem

,aistoolbarbutton

,ahotkey

 ) ;


call typemenu_client_trigger(acursession,atypemenuid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "typemenu_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE typemenu_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call typemenu_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update typemenu set lockuserid =null  where typemenuid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update typemenu set locksessionid =null  where typemenuid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "uniqueconstraint_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_brief(
 acursession varchar(38),
 auniqueconstraintid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if auniqueconstraintid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
 if  aec >0 then
   set abrief=uniqueconstraint_brief_f(g2b(auniqueconstraintid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "uniqueconstraint_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_client_trigger(
 acursession varchar(38),
 aUNIQUECONSTRAINTid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "uniqueconstraint_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
declare aid binary(16);
declare fetch_done int default false;
declare copy_cursor_uniqueconstraint cursor for
select uniqueconstraintid from uniqueconstraint where 
parentstructrowid=aparentstructrowid;
 declare continue handler for not found set fetch_done = true;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into uniqueconstraint 
 ( uniqueconstraintid 
,parentstructrowid
,name

,perparent

,thecomment

 ) select 
copymap(acopyaction,b2g(uniqueconstraintid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,name

,perparent

,thecomment

 from uniqueconstraint
 where parentstructrowid =g2b(aparentstructrowid); 
open copy_cursor_uniqueconstraint;
  set  fetch_done=false;
fetch copy_cursor_uniqueconstraint into aid;
while not fetch_done do 
    call constraintfield_copy(acursession,acopyaction,ainstanceid,aid);
  set  fetch_done=false;
    fetch copy_cursor_uniqueconstraint into aid;
end while;

close copy_cursor_uniqueconstraint;
 end
$$

--
-- Создать процедуру "uniqueconstraint_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_delete(
 acursession varchar(38),
 auniqueconstraintid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=uniqueconstraint' result;
    leave body;
  end if;
 call uniqueconstraint_logger(acursession,auniqueconstraintid) ; 
  delete from  uniqueconstraint 
  where  uniqueconstraintid = g2b(auniqueconstraintid) ;
  delete from num_values where ownerpartname='uniqueconstraint' and ownerrowid=g2b(auniqueconstraintid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "uniqueconstraint_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from uniqueconstraint where uniqueconstraintid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "uniqueconstraint_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call uniqueconstraint_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update uniqueconstraint set lockuserid =auserid ,locksessionid=null  where uniqueconstraintid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update uniqueconstraint set lockuserid=null ,locksessionid =acursession  where uniqueconstraintid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "uniqueconstraint_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_logger(
 acursession varchar(38),
 auniqueconstraintid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "uniqueconstraint_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from uniqueconstraint where  uniqueconstraintid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "uniqueconstraint_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 auniqueconstraintid varchar(38)
,aname
 varchar (80)/* ???????? *//* ???????? */
,aperparent
 integer/* ?? ???????? *//* ?? ???????? */
,athecomment
 text/* ???????? *//* ???????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from uniqueconstraint where uniqueconstraintid=g2b(auniqueconstraintid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=uniqueconstraint' result;
    leave body;
  end if;
 start transaction ; 
 call uniqueconstraint_logger(acursession,auniqueconstraintid) ; 
 update  uniqueconstraint set changestamp=now() 
,
  name=aname
,
  perparent=aperparent
,
  thecomment=athecomment
  where  uniqueconstraintid = g2b(auniqueconstraintid) ;


call uniqueconstraint_client_trigger(acursession,auniqueconstraintid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=uniqueconstraint' result;
    leave body;
  end if;
 start transaction;  
 insert into   uniqueconstraint
 (  changestamp,uniqueconstraintid 
,parentstructrowid
,name

,perparent

,thecomment

 ) values (now(), g2b(auniqueconstraintid) 
,g2b(aparentstructrowid)
,aname

,aperparent

,athecomment

 ) ;


call uniqueconstraint_client_trigger(acursession,auniqueconstraintid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "uniqueconstraint_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE uniqueconstraint_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call uniqueconstraint_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update uniqueconstraint set lockuserid =null  where uniqueconstraintid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update uniqueconstraint set locksessionid =null  where uniqueconstraintid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "users_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_brief(
 acursession varchar(38),
 ausersid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if ausersid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from users where usersid=g2b(ausersid);
 if  aec >0 then
   set abrief=users_brief_f(g2b(ausersid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "users_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_client_trigger(
 acursession varchar(38),
 aUsersid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "users_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into users 
 ( usersid 
,instanceid
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 ) select 
copymap(acopyaction,b2g(usersid)) 
,copymap(acopyaction,b2g(instanceid))
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 from users
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "users_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_delete(
 acursession varchar(38),
 ausersid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from users where usersid=g2b(ausersid);
if aec>0 then
 select checkoperation( acursession ,'mtzusers.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=users' result;
    leave body;
  end if;
 call users_logger(acursession,ausersid) ; 
  delete from  users 
  where  usersid = g2b(ausersid) ;
  delete from num_values where ownerpartname='users' and ownerrowid=g2b(ausersid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "users_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from users where usersid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "users_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call users_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update users set lockuserid =auserid ,locksessionid=null  where usersid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update users set lockuserid=null ,locksessionid =acursession  where usersid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "users_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_logger(
 acursession varchar(38),
 ausersid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "users_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from users where  usersid=arowid;
 end
$$

--
-- Создать процедуру "users_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 ausersid varchar(38)
,afamily
 varchar (255)/* фамилия *//* фамилия */
,aname
 varchar (64)/* имя *//* имя */
,asurname
 varchar (255)/* отчество *//* отчество */
,alogin
 varchar (64)/* имя для входа *//* имя для входа */
,apassword varchar(80)/* пароль *//* пароль */
,adomainame
 varchar (255)/* доменное имя *//* доменное имя */
,aemail varchar(255)/* e-mail *//* e-mail */
,aphone
 varchar (20)/* телефон *//* телефон */
,alocalphone
 varchar (20)/* местный телефон *//* местный телефон */
)
body: BEGIN  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 declare asessuserid binary(16);
 declare amlf_partid binary(16);
 declare asessuserlogin varchar(40);
 declare aec int;
 select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
 select login into asessuserlogin from users where usersid=g2b(asessuserid);
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select 'сессия уже завершена.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from users where usersid=g2b(ausersid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'users.edit') into aaccess;
 if aaccess=0  then
    select 'изменение строк не разрешено. раздел=users' result;
    leave body;
  end if;
 start transaction ; 
 update  users set changestamp=now()
,
  family=afamily
,
  name=aname
,
  surname=asurname
,
  login=alogin
,
  domainame=adomainame
,
  email=aemail
,
  phone=aphone
,
  localphone=alocalphone
  where  usersid = g2b(ausersid) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from users where instanceid=g2b(ainstanceid) 
 and login=alogin;
if auniquerowcount>=2 then
 select 'нарущение уникальности сочетания полей. раздел=пользователи' result;
  rollback;
  leave body;
end if;
 -- end if;

call users_client_trigger(acursession,ausersid);

  	select count(*) into aec from users where password=apassword and usersid = g2b(ausersid) ;
	if aec=0  then
    if apassword is null then
        update users set password=md5(alogin) where usersid = g2b(ausersid);
    else
        update users set password=md5(apassword) where usersid = g2b(ausersid);
    end if;
		
	end if;

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'users.add') into aaccess;
 if aaccess=0  then
    select 'добавление строк не разрешено. раздел=users' result;
    leave body;
  end if;
  

  
  
 start transaction;  
 insert into   users
 (  usersid 
,instanceid
,family

,name

,surname

,login

,password

,domainame

,email

,phone

,localphone

 ) values ( g2b(ausersid) 
,g2b(ainstanceid)
,afamily

,aname

,asurname

,alogin

,md5(apassword)

,adomainame

,aemail

,aphone

,alocalphone

 ) ;
-- if asessuserlogin<>'replicator'  then
 select count(*) into  auniquerowcount from users where instanceid=g2b(ainstanceid) 
 and login=alogin;
if auniquerowcount>=2 then
 select 'нарущение уникальности сочетания полей. раздел=пользователи' result;
  rollback;
  leave body;
end if;
 -- end if;

call users_client_trigger(acursession,ausersid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "users_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE users_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call users_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update users set lockuserid =null  where usersid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update users set locksessionid =null  where usersid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "user_register"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE user_register( alogin varchar(64), apass varchar(80), afirst varchar(80), alast varchar(80) ,aphone varchar(20), aemail varchar(128))
body: begin  
     declare ausersid  binary(16);  
     declare ID  binary(16);

	 
     declare IsOK int;
     select 0 into IsOK;
     
      select 1 into IsOK from    users 
        where  login=alogin  ;
       if IsOK<>0 then
         select concat('????????,?????:', alogin,' ??? ?????')  result;
         leave body;
       end if;

 
    select instanceid into id from instance where objtype='MTZUsers';
    
    SELECT g2b(uuid()) INTO ausersid;
  	 insert into users
							 (changestamp,instanceid,usersid,family,name,surname, login,password) 
							 values 
							 (sysdate(),id, ausersid, alast, afirst,' ',alogin,md5(apass));

    select g2b(uuid()) into id ;
    insert INTO instance (instanceid,objtype,name,changestamp) VALUES(id, 'arc',concat(afirst,' ',alast),sysdate());


	 INSERT INTO arc_info
(  instanceid ,arc_infoid ,changestamp ,timestamp ,family ,name  ,phone ,email ,login ,isadmin)
VALUES
(   id  , ausersid ,NOW() ,NOW()  ,alast ,afirst  ,aphone ,aemail ,alogin ,0 );

		select 'OK'  result;
    
   
    end
$$

--
-- Создать процедуру "validator_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_brief(
 acursession varchar(38),
 avalidatorid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if avalidatorid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
 if  aec >0 then
   set abrief=validator_brief_f(g2b(avalidatorid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "validator_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_client_trigger(
 acursession varchar(38),
 aVALIDATORid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "validator_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into validator 
 ( validatorid 
,parentstructrowid
,target

,code

 ) select 
copymap(acopyaction,b2g(validatorid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,target

,code

 from validator
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "validator_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_delete(
 acursession varchar(38),
 avalidatorid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=validator' result;
    leave body;
  end if;
 call validator_logger(acursession,avalidatorid) ; 
  delete from  validator 
  where  validatorid = g2b(avalidatorid) ;
  delete from num_values where ownerpartname='validator' and ownerrowid=g2b(avalidatorid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "validator_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from validator where validatorid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "validator_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call validator_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update validator set lockuserid =auserid ,locksessionid=null  where validatorid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update validator set lockuserid=null ,locksessionid =acursession  where validatorid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "validator_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_logger(
 acursession varchar(38),
 avalidatorid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "validator_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from validator where  validatorid=arowid;
  set aparenttable = 'part';
 end
$$

--
-- Создать процедуру "validator_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 avalidatorid varchar(38)
,atarget varchar(38)/* ??????? ????????? *//* ??????? ????????? */
,acode
 text/* ?????? *//* ?????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from validator where validatorid=g2b(avalidatorid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=validator' result;
    leave body;
  end if;
 start transaction ; 
 call validator_logger(acursession,avalidatorid) ; 
 update  validator set changestamp=now() 
,
  target=g2b(atarget)
,
  code=acode
  where  validatorid = g2b(avalidatorid) ;


call validator_client_trigger(acursession,avalidatorid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=validator' result;
    leave body;
  end if;
 start transaction;  
 insert into   validator
 (  changestamp,validatorid 
,parentstructrowid
,target

,code

 ) values (now(), g2b(avalidatorid) 
,g2b(aparentstructrowid)
,g2b(atarget)

,acode

 ) ;


call validator_client_trigger(acursession,avalidatorid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "validator_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE validator_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call validator_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update validator set lockuserid =null  where validatorid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update validator set locksessionid =null  where validatorid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "vdage_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdage_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_age_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdapl_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdapl_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_platform_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdappr_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdappr_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_approve_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdast_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdast_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_adstate_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdbrw_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdbrw_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_browser_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdcat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdcat_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_category_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdcn_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdcn_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_country_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdcst_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdcst_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_castate_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vddev_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vddev_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_device_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdfrmt_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdfrmt_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_adformat_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdinter_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdinter_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_interest_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdmstat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdmstat_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_matrialstatus_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdos_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdos_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_os_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdpos_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdpos_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_position_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdpt_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdpt_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_paytype_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdrel_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdrel_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_religion_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdrg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdrg_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_region_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdtt_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdtt_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_tasktype_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vdt_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vdt_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_town_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "viewcolumn_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_brief(
 acursession varchar(38),
 aviewcolumnid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aviewcolumnid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
 if  aec >0 then
   set abrief=viewcolumn_brief_f(g2b(aviewcolumnid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "viewcolumn_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_client_trigger(
 acursession varchar(38),
 aViewColumnid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "viewcolumn_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
, aparentstructrowid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into viewcolumn 
 ( viewcolumnid 
,parentstructrowid
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 ) select 
copymap(acopyaction,b2g(viewcolumnid)) 
,copymap(acopyaction,b2g(parentstructrowid))
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 from viewcolumn
 where parentstructrowid =g2b(aparentstructrowid); 
 end
$$

--
-- Создать процедуру "viewcolumn_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_delete(
 acursession varchar(38),
 aviewcolumnid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
if aec>0 then
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=viewcolumn' result;
    leave body;
  end if;
 call viewcolumn_logger(acursession,aviewcolumnid) ; 
  delete from  viewcolumn 
  where  viewcolumnid = g2b(aviewcolumnid) ;
  delete from num_values where ownerpartname='viewcolumn' and ownerrowid=g2b(aviewcolumnid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "viewcolumn_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from viewcolumn where viewcolumnid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "viewcolumn_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call viewcolumn_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update viewcolumn set lockuserid =auserid ,locksessionid=null  where viewcolumnid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update viewcolumn set lockuserid=null ,locksessionid =acursession  where viewcolumnid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "viewcolumn_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_logger(
 acursession varchar(38),
 aviewcolumnid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "viewcolumn_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  select parentstructrowid into aparentid from viewcolumn where  viewcolumnid=arowid;
  set aparenttable = 'partview';
 end
$$

--
-- Создать процедуру "viewcolumn_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aparentstructrowid varchar(38) ,
 aviewcolumnid varchar(38)
,asequence
 integer/* ? *//* ? */
,aname
 varchar (255)/* ???????? *//* ???????? */
,athe_alias
 varchar (64)/* ???????? *//* ???????? */
,afrompart varchar(38)/* ?????? *//* ?????? */
,afield varchar(38)/* ???? *//* ???? */
,aaggregation
 integer/* ????????? *//* ????????? */
,aexpression
 text/* ??????? *//* ??????? */
,aforcombo
 integer/* ??? ????? *//* ??? ????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from viewcolumn where viewcolumnid=g2b(aviewcolumnid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=viewcolumn' result;
    leave body;
  end if;
 start transaction ; 
 call viewcolumn_logger(acursession,aviewcolumnid) ; 
 update  viewcolumn set changestamp=now() 
,
  sequence=asequence
,
  name=aname
,
  the_alias=athe_alias
,
  frompart=g2b(afrompart)
,
  field=g2b(afield)
,
  aggregation=aaggregation
,
  expression=aexpression
,
  forcombo=aforcombo
  where  viewcolumnid = g2b(aviewcolumnid) ;


call viewcolumn_client_trigger(acursession,aviewcolumnid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzmetamodel.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=viewcolumn' result;
    leave body;
  end if;
 start transaction;  
 insert into   viewcolumn
 (  changestamp,viewcolumnid 
,parentstructrowid
,sequence

,name

,the_alias

,frompart

,field

,aggregation

,expression

,forcombo

 ) values (now(), g2b(aviewcolumnid) 
,g2b(aparentstructrowid)
,asequence

,aname

,athe_alias

,g2b(afrompart)

,g2b(afield)

,aaggregation

,aexpression

,aforcombo

 ) ;


call viewcolumn_client_trigger(acursession,aviewcolumnid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "viewcolumn_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE viewcolumn_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call viewcolumn_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update viewcolumn set lockuserid =null  where viewcolumnid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update viewcolumn set locksessionid =null  where viewcolumnid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать процедуру "vkads_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkads_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_adsdaydemografy_copy(acursession, aaction, ainstanceid);
    CALL vk_adinfo_copy(acursession, aaction, ainstanceid);
    CALL vk_adsowner_copy(acursession, aaction, ainstanceid);
    CALL vk_adovstat_copy(acursession, aaction, ainstanceid);
    CALL vk_adstrg_copy(acursession, aaction, ainstanceid);
    CALL vk_adsovdemografy_copy(acursession, aaction, ainstanceid);
    CALL vk_adsutm_copy(acursession, aaction, ainstanceid);
    CALL vk_adstat_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkads_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkads_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vkbrk_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkbrk_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_brkinfo_copy(acursession, aaction, ainstanceid);
    CALL vk_brkowner_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkbrk_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkbrk_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vkcam_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkcam_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_camovstat_copy(acursession, aaction, ainstanceid);
    CALL vk_camowner_copy(acursession, aaction, ainstanceid);
    CALL vk_camp_copy(acursession, aaction, ainstanceid);
    CALL vk_camstat_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkcam_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkcam_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vkprj_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkprj_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_prj_copy(acursession, aaction, ainstanceid);
    CALL vk_prjowner_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkprj_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkprj_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vkrot_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkrot_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_rotinfo_copy(acursession, aaction, ainstanceid);
    CALL vk_rotads_copy(acursession, aaction, ainstanceid);
    CALL vk_rotowner_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkrot_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkrot_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vktrg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vktrg_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_trgfiles_copy(acursession, aaction, ainstanceid);
    CALL vk_trginfo_copy(acursession, aaction, ainstanceid);
    CALL vk_trgowner_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vktrg_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vktrg_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vktsk_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vktsk_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_taskowner_copy(acursession, aaction, ainstanceid);
    CALL vk_taskinfo_copy(acursession, aaction, ainstanceid);
    CALL vk_taskmsg_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vktsk_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vktsk_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vkusr_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkusr_copy(acursession varchar(38),
ainstanceid varchar(38),
anewinstanceid varchar(38))
body:
  BEGIN
    DECLARE aaction varchar(38);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    SELECT
      uuid() INTO aaction;
    INSERT INTO copymapdata (actionid, inpid, outid)
      VALUES (g2b(aaction), g2b(ainstanceid), g2b(anewinstanceid));
    INSERT INTO instance (instanceid, name, objtype, status, archived)
      SELECT
        g2b(anewinstanceid),
        name,
        objtype,
        status,
        archived
      FROM instance
      WHERE instanceid = g2b(ainstanceid);
    CALL vk_cab_copy(acursession, aaction, ainstanceid);
    CALL vk_usr_copy(acursession, aaction, ainstanceid);
    DELETE
      FROM copymapdata
    WHERE actionid = g2b(aaction);
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vkusr_initownership"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vkusr_initownership(acursession varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adformat_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_brief(acursession varchar(38),
avk_adformatid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adformatid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adformat
    WHERE vk_adformatid = g2b(avk_adformatid);
    IF aec > 0 THEN
      SET abrief = vk_adformat_brief_f(g2b(avk_adformatid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adformat_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_client_trigger(acursession varchar(38),
aVK_ADFORMATid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adformat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adformat (vk_adformatid
    , instanceid
    , vkid

    , title)
      SELECT
        copymap(acopyaction, b2g(vk_adformatid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        title

      FROM vk_adformat
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adformat_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_delete(acursession varchar(38),
avk_adformatid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adformat
    WHERE vk_adformatid = g2b(avk_adformatid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdfrmt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adformat' result;
        LEAVE body;
      END IF;
      CALL vk_adformat_logger(acursession, avk_adformatid);
      DELETE
        FROM vk_adformat
      WHERE vk_adformatid = g2b(avk_adformatid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adformat'
        AND ownerrowid = g2b(avk_adformatid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adformat_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adformat
    WHERE vk_adformatid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adformat_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adformat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adformat
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adformatid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adformat
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adformatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adformat_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_logger(acursession varchar(38),
avk_adformatid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adformat_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adformat
    WHERE vk_adformatid = arowid;
  END
$$

--
-- Создать процедуру "vk_adformat_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adformatid varchar(38)
, avkid
integer/* id *//* id */
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adformat
    WHERE vk_adformatid = g2b(avk_adformatid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdfrmt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adformat' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adformat_logger(acursession, avk_adformatid);
        UPDATE vk_adformat
        SET changestamp = now(),
            vkid = avkid,
            title = atitle
        WHERE vk_adformatid = g2b(avk_adformatid);


        CALL vk_adformat_client_trigger(acursession, avk_adformatid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdfrmt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adformat' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adformat (changestamp, vk_adformatid
          , instanceid
          , vkid

          , title)
            VALUES (now(), g2b(avk_adformatid), g2b(ainstanceid), avkid, atitle);


          CALL vk_adformat_client_trigger(acursession, avk_adformatid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adformat_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adformat_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adformat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adformat
      SET lockuserid = NULL
      WHERE vk_adformatid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adformat
      SET locksessionid = NULL
      WHERE vk_adformatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adinfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_brief(acursession varchar(38),
avk_adinfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adinfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adinfo
    WHERE vk_adinfoid = g2b(avk_adinfoid);
    IF aec > 0 THEN
      SET abrief = vk_adinfo_brief_f(g2b(avk_adinfoid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adinfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_client_trigger(acursession varchar(38),
aVK_ADINFOid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adinfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adinfo (vk_adinfoid
    , instanceid
    , name

    , ads_id

    , campaign_id

    , ad_format

    , age_restriction

    , cost_type

    , cpc

    , cpm

    , ad_platform

    , category1_id

    , category2_id

    , status

    , impression_limit

    , all_limit

    , approved

    , video

    , disclamer

    , title

    , _description

    , link_url

    , link_domain

    , preview_link

    , image_src)
      SELECT
        copymap(acopyaction, b2g(vk_adinfoid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        ads_id,
        campaign_id,
        ad_format,
        age_restriction,
        cost_type,
        cpc,
        cpm,
        ad_platform,
        category1_id,
        category2_id,
        status,
        impression_limit,
        all_limit,
        approved,
        video,
        disclamer,
        title,
        _description,
        link_url,
        link_domain,
        preview_link,
        image_src

      FROM vk_adinfo
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adinfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_delete(acursession varchar(38),
avk_adinfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adinfo
    WHERE vk_adinfoid = g2b(avk_adinfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adinfo' result;
        LEAVE body;
      END IF;
      CALL vk_adinfo_logger(acursession, avk_adinfoid);
      DELETE
        FROM vk_adinfo
      WHERE vk_adinfoid = g2b(avk_adinfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adinfo'
        AND ownerrowid = g2b(avk_adinfoid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adinfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adinfo
    WHERE vk_adinfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adinfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adinfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adinfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adinfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adinfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_logger(acursession varchar(38),
avk_adinfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adinfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adinfo
    WHERE vk_adinfoid = arowid;
  END
$$

--
-- Создать процедуру "vk_adinfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adinfoid varchar(38)
, aname
varchar(255)/* ???????? *//* ???????? */
, aads_id
varchar(30)/* id *//* id */
, acampaign_id varchar(38)/* ???????? *//* ???????? */
, aad_format varchar(38)/* ?????? *//* ?????? */
, aage_restriction varchar(38)/* ??????????? *//* ??????????? */
, acost_type varchar(38)/* ??? ?????? *//* ??? ?????? */
, acpc
integer/* ?? ???????(???) *//* ?? ???????(???) */
, acpm
integer/* ?? 1000 ???????(???) *//* ?? 1000 ???????(???) */
, aad_platform varchar(38)/* ???????? *//* ???????? */
, acategory1_id varchar(38)/* ????????? 1 *//* ????????? 1 */
, acategory2_id varchar(38)/* ????????? 2 *//* ????????? 2 */
, astatus varchar(38)/* ?????? *//* ?????? */
, aimpression_limit
integer/* ??????????? ??????? *//* ??????????? ??????? */
, aall_limit
double/* ????? (???) *//* ????? (???) */
, aapproved varchar(38)/* ????????? *//* ????????? */
, avideo
integer/* ??????? ????? *//* ??????? ????? */
, adisclamer
integer/* ?????????????? *//* ?????????????? */
, atitle
varchar(255)/* ????????? *//* ????????? */
, a_description
varchar(4096)/* ???????? *//* ???????? */
, alink_url varchar(255)/* ??????????? *//* ??????????? */
, alink_domain
varchar(120)/* ????? ??????? *//* ????? ??????? */
, apreview_link varchar(255)/* ?????? *//* ?????? */
, aimage_src varchar(255)/* ??????????? *//* ??????????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adinfo
    WHERE vk_adinfoid = g2b(avk_adinfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adinfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adinfo_logger(acursession, avk_adinfoid);
        UPDATE vk_adinfo
        SET changestamp = now(),
            name = aname,
            ads_id = aads_id,
            campaign_id = g2b(acampaign_id),
            ad_format = g2b(aad_format),
            age_restriction = g2b(aage_restriction),
            cost_type = g2b(acost_type),
            cpc = acpc,
            cpm = acpm,
            ad_platform = g2b(aad_platform),
            category1_id = g2b(acategory1_id),
            category2_id = g2b(acategory2_id),
            status = g2b(astatus),
            impression_limit = aimpression_limit,
            all_limit = aall_limit,
            approved = g2b(aapproved),
            video = avideo,
            disclamer = adisclamer,
            title = atitle,
            _description = a_description,
            link_url = alink_url,
            link_domain = alink_domain,
            preview_link = apreview_link,
            image_src = aimage_src
        WHERE vk_adinfoid = g2b(avk_adinfoid);


        CALL vk_adinfo_client_trigger(acursession, avk_adinfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adinfo' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_adinfo
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_adinfo>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adinfo (changestamp, vk_adinfoid
          , instanceid
          , name

          , ads_id

          , campaign_id

          , ad_format

          , age_restriction

          , cost_type

          , cpc

          , cpm

          , ad_platform

          , category1_id

          , category2_id

          , status

          , impression_limit

          , all_limit

          , approved

          , video

          , disclamer

          , title

          , _description

          , link_url

          , link_domain

          , preview_link

          , image_src)
            VALUES (now(), g2b(avk_adinfoid), g2b(ainstanceid), aname, aads_id, g2b(acampaign_id), g2b(aad_format), g2b(aage_restriction), g2b(acost_type), acpc, acpm, g2b(aad_platform), g2b(acategory1_id), g2b(acategory2_id), g2b(astatus), aimpression_limit, aall_limit, g2b(aapproved), avideo, adisclamer, atitle, a_description, alink_url, alink_domain, apreview_link, aimage_src);


          CALL vk_adinfo_client_trigger(acursession, avk_adinfoid);

          CALL vkads_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adinfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adinfo_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adinfo
      SET lockuserid = NULL
      WHERE vk_adinfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adinfo
      SET locksessionid = NULL
      WHERE vk_adinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adovstat_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_brief(acursession varchar(38),
avk_adovstatid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adovstatid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adovstat
    WHERE vk_adovstatid = g2b(avk_adovstatid);
    IF aec > 0 THEN
      SET abrief = vk_adovstat_brief_f(g2b(avk_adovstatid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adovstat_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_client_trigger(acursession varchar(38),
aVK_ADOVSTATid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adovstat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adovstat (vk_adovstatid
    , instanceid
    , spent

    , join_rate

    , impressions

    , clicks

    , reach

    , video_views

    , video_views_half

    , video_views_full

    , video_clicks_site)
      SELECT
        copymap(acopyaction, b2g(vk_adovstatid)),
        copymap(acopyaction, b2g(instanceid)),
        spent,
        join_rate,
        impressions,
        clicks,
        reach,
        video_views,
        video_views_half,
        video_views_full,
        video_clicks_site

      FROM vk_adovstat
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adovstat_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_delete(acursession varchar(38),
avk_adovstatid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adovstat
    WHERE vk_adovstatid = g2b(avk_adovstatid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adovstat' result;
        LEAVE body;
      END IF;
      CALL vk_adovstat_logger(acursession, avk_adovstatid);
      DELETE
        FROM vk_adovstat
      WHERE vk_adovstatid = g2b(avk_adovstatid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adovstat'
        AND ownerrowid = g2b(avk_adovstatid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adovstat_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adovstat
    WHERE vk_adovstatid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adovstat_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adovstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adovstat
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adovstatid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adovstat
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adovstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adovstat_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_logger(acursession varchar(38),
avk_adovstatid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adovstat_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adovstat
    WHERE vk_adovstatid = arowid;
  END
$$

--
-- Создать процедуру "vk_adovstat_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adovstatid varchar(38)
, aspent
double/* ????????? *//* ????????? */
, ajoin_rate
integer/* ???????? *//* ???????? */
, aimpressions
integer/* ????????? *//* ????????? */
, aclicks
integer/* ????? *//* ????? */
, areach
integer/* ????? *//* ????? */
, avideo_views
integer/* ????????? *//* ????????? */
, avideo_views_half
integer/* ????????? ???????? *//* ????????? ???????? */
, avideo_views_full
integer/* ????????? ?????? *//* ????????? ?????? */
, avideo_clicks_site
integer/* ???????? ?? ???? *//* ???????? ?? ???? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adovstat
    WHERE vk_adovstatid = g2b(avk_adovstatid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adovstat' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adovstat_logger(acursession, avk_adovstatid);
        UPDATE vk_adovstat
        SET changestamp = now(),
            spent = aspent,
            join_rate = ajoin_rate,
            impressions = aimpressions,
            clicks = aclicks,
            reach = areach,
            video_views = avideo_views,
            video_views_half = avideo_views_half,
            video_views_full = avideo_views_full,
            video_clicks_site = avideo_clicks_site
        WHERE vk_adovstatid = g2b(avk_adovstatid);


        CALL vk_adovstat_client_trigger(acursession, avk_adovstatid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adovstat' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_adovstat
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_adovstat>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adovstat (changestamp, vk_adovstatid
          , instanceid
          , spent

          , join_rate

          , impressions

          , clicks

          , reach

          , video_views

          , video_views_half

          , video_views_full

          , video_clicks_site)
            VALUES (now(), g2b(avk_adovstatid), g2b(ainstanceid), aspent, ajoin_rate, aimpressions, aclicks, areach, avideo_views, avideo_views_half, avideo_views_full, avideo_clicks_site);


          CALL vk_adovstat_client_trigger(acursession, avk_adovstatid);

          CALL vkads_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adovstat_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adovstat_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adovstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adovstat
      SET lockuserid = NULL
      WHERE vk_adovstatid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adovstat
      SET locksessionid = NULL
      WHERE vk_adovstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_brief(acursession varchar(38),
avk_adsdaydemografyid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adsdaydemografyid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = g2b(avk_adsdaydemografyid);
    IF aec > 0 THEN
      SET abrief = vk_adsdaydemografy_brief_f(g2b(avk_adsdaydemografyid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_client_trigger(acursession varchar(38),
aVK_ADSDAYDEMOGRAFYid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adsdaydemografy_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adsdaydemografy (vk_adsdaydemografyid
    , instanceid
    , s_day

    , recordtype

    , impression_rate

    , click_rate

    , _value

    , name)
      SELECT
        copymap(acopyaction, b2g(vk_adsdaydemografyid)),
        copymap(acopyaction, b2g(instanceid)),
        s_day,
        recordtype,
        impression_rate,
        click_rate,
        _value,
        name

      FROM vk_adsdaydemografy
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_delete(acursession varchar(38),
avk_adsdaydemografyid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = g2b(avk_adsdaydemografyid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adsdaydemografy' result;
        LEAVE body;
      END IF;
      CALL vk_adsdaydemografy_logger(acursession, avk_adsdaydemografyid);
      DELETE
        FROM vk_adsdaydemografy
      WHERE vk_adsdaydemografyid = g2b(avk_adsdaydemografyid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adsdaydemografy'
        AND ownerrowid = g2b(avk_adsdaydemografyid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsdaydemografy_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adsdaydemografy
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adsdaydemografyid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adsdaydemografy
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adsdaydemografyid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_logger(acursession varchar(38),
avk_adsdaydemografyid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = arowid;
  END
$$

--
-- Создать процедуру "vk_adsdaydemografy_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adsdaydemografyid varchar(38)
, as_day
varchar(10)/* ???? *//* ???? */
, arecordtype
varchar(40)/* ??? ?????? *//* ??? ?????? */
, aimpression_rate
double/* ????????? *//* ????????? */
, aclick_rate
double/* ????? *//* ????? */
, a_value
varchar(64)/* ???????? *//* ???????? */
, aname
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = g2b(avk_adsdaydemografyid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adsdaydemografy' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adsdaydemografy_logger(acursession, avk_adsdaydemografyid);
        UPDATE vk_adsdaydemografy
        SET changestamp = now(),
            s_day = as_day,
            recordtype = arecordtype,
            impression_rate = aimpression_rate,
            click_rate = aclick_rate,
            _value = a_value,
            name = aname
        WHERE vk_adsdaydemografyid = g2b(avk_adsdaydemografyid);


        CALL vk_adsdaydemografy_client_trigger(acursession, avk_adsdaydemografyid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adsdaydemografy' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adsdaydemografy (changestamp, vk_adsdaydemografyid
          , instanceid
          , s_day

          , recordtype

          , impression_rate

          , click_rate

          , _value

          , name)
            VALUES (now(), g2b(avk_adsdaydemografyid), g2b(ainstanceid), as_day, arecordtype, aimpression_rate, aclick_rate, a_value, aname);


          CALL vk_adsdaydemografy_client_trigger(acursession, avk_adsdaydemografyid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adsdaydemografy_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsdaydemografy_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsdaydemografy_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adsdaydemografy
      SET lockuserid = NULL
      WHERE vk_adsdaydemografyid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adsdaydemografy
      SET locksessionid = NULL
      WHERE vk_adsdaydemografyid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_brief(acursession varchar(38),
avk_adsovdemografyid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adsovdemografyid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = g2b(avk_adsovdemografyid);
    IF aec > 0 THEN
      SET abrief = vk_adsovdemografy_brief_f(g2b(avk_adsovdemografyid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_client_trigger(acursession varchar(38),
aVK_ADSOVDEMOGRAFYid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adsovdemografy_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adsovdemografy (vk_adsovdemografyid
    , instanceid
    , recordtype

    , impression_rate

    , click_rate

    , _value

    , name)
      SELECT
        copymap(acopyaction, b2g(vk_adsovdemografyid)),
        copymap(acopyaction, b2g(instanceid)),
        recordtype,
        impression_rate,
        click_rate,
        _value,
        name

      FROM vk_adsovdemografy
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_delete(acursession varchar(38),
avk_adsovdemografyid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = g2b(avk_adsovdemografyid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adsovdemografy' result;
        LEAVE body;
      END IF;
      CALL vk_adsovdemografy_logger(acursession, avk_adsovdemografyid);
      DELETE
        FROM vk_adsovdemografy
      WHERE vk_adsovdemografyid = g2b(avk_adsovdemografyid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adsovdemografy'
        AND ownerrowid = g2b(avk_adsovdemografyid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsovdemografy_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adsovdemografy
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adsovdemografyid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adsovdemografy
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adsovdemografyid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_logger(acursession varchar(38),
avk_adsovdemografyid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = arowid;
  END
$$

--
-- Создать процедуру "vk_adsovdemografy_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adsovdemografyid varchar(38)
, arecordtype
varchar(40)/* ??? ?????? *//* ??? ?????? */
, aimpression_rate
double/* ????????? *//* ????????? */
, aclick_rate
double/* ????? *//* ????? */
, a_value
varchar(64)/* ???????? *//* ???????? */
, aname
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = g2b(avk_adsovdemografyid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adsovdemografy' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adsovdemografy_logger(acursession, avk_adsovdemografyid);
        UPDATE vk_adsovdemografy
        SET changestamp = now(),
            recordtype = arecordtype,
            impression_rate = aimpression_rate,
            click_rate = aclick_rate,
            _value = a_value,
            name = aname
        WHERE vk_adsovdemografyid = g2b(avk_adsovdemografyid);


        CALL vk_adsovdemografy_client_trigger(acursession, avk_adsovdemografyid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adsovdemografy' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adsovdemografy (changestamp, vk_adsovdemografyid
          , instanceid
          , recordtype

          , impression_rate

          , click_rate

          , _value

          , name)
            VALUES (now(), g2b(avk_adsovdemografyid), g2b(ainstanceid), arecordtype, aimpression_rate, aclick_rate, a_value, aname);


          CALL vk_adsovdemografy_client_trigger(acursession, avk_adsovdemografyid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adsovdemografy_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsovdemografy_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsovdemografy_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adsovdemografy
      SET lockuserid = NULL
      WHERE vk_adsovdemografyid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adsovdemografy
      SET locksessionid = NULL
      WHERE vk_adsovdemografyid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_brief(acursession varchar(38),
avk_adsownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adsownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adsowner
    WHERE vk_adsownerid = g2b(avk_adsownerid);
    IF aec > 0 THEN
      SET abrief = vk_adsowner_brief_f(g2b(avk_adsownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adsowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_client_trigger(acursession varchar(38),
aVK_ADSOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adsowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adsowner (vk_adsownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_adsownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_adsowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adsowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_delete(acursession varchar(38),
avk_adsownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsowner
    WHERE vk_adsownerid = g2b(avk_adsownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adsowner' result;
        LEAVE body;
      END IF;
      CALL vk_adsowner_logger(acursession, avk_adsownerid);
      DELETE
        FROM vk_adsowner
      WHERE vk_adsownerid = g2b(avk_adsownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adsowner'
        AND ownerrowid = g2b(avk_adsownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adsowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adsowner
    WHERE vk_adsownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adsowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adsowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adsownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adsowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adsownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_logger(acursession varchar(38),
avk_adsownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adsowner
    WHERE vk_adsownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_adsowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adsownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsowner
    WHERE vk_adsownerid = g2b(avk_adsownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adsowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adsowner_logger(acursession, avk_adsownerid);
        UPDATE vk_adsowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_adsownerid = g2b(avk_adsownerid);


        CALL vk_adsowner_client_trigger(acursession, avk_adsownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adsowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adsowner (changestamp, vk_adsownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_adsownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_adsowner_client_trigger(acursession, avk_adsownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adsowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adsowner
      SET lockuserid = NULL
      WHERE vk_adsownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adsowner
      SET locksessionid = NULL
      WHERE vk_adsownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstate_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_brief(acursession varchar(38),
avk_adstateid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adstateid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adstate
    WHERE vk_adstateid = g2b(avk_adstateid);
    IF aec > 0 THEN
      SET abrief = vk_adstate_brief_f(g2b(avk_adstateid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adstate_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_client_trigger(acursession varchar(38),
aVK_ADSTATEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adstate_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adstate (vk_adstateid
    , instanceid
    , title

    , vkid

    , iconname)
      SELECT
        copymap(acopyaction, b2g(vk_adstateid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid,
        iconname

      FROM vk_adstate
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adstate_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_delete(acursession varchar(38),
avk_adstateid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstate
    WHERE vk_adstateid = g2b(avk_adstateid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdast.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adstate' result;
        LEAVE body;
      END IF;
      CALL vk_adstate_logger(acursession, avk_adstateid);
      DELETE
        FROM vk_adstate
      WHERE vk_adstateid = g2b(avk_adstateid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adstate'
        AND ownerrowid = g2b(avk_adstateid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adstate_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adstate
    WHERE vk_adstateid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adstate_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adstate
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adstateid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adstate
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adstateid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstate_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_logger(acursession varchar(38),
avk_adstateid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstate_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adstate
    WHERE vk_adstateid = arowid;
  END
$$

--
-- Создать процедуру "vk_adstate_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adstateid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
, aiconname
varchar(60)/* ??? ???????? *//* ??? ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstate
    WHERE vk_adstateid = g2b(avk_adstateid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdast.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adstate' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adstate_logger(acursession, avk_adstateid);
        UPDATE vk_adstate
        SET changestamp = now(),
            title = atitle,
            vkid = avkid,
            iconname = aiconname
        WHERE vk_adstateid = g2b(avk_adstateid);


        CALL vk_adstate_client_trigger(acursession, avk_adstateid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdast.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adstate' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adstate (changestamp, vk_adstateid
          , instanceid
          , title

          , vkid

          , iconname)
            VALUES (now(), g2b(avk_adstateid), g2b(ainstanceid), atitle, avkid, aiconname);


          CALL vk_adstate_client_trigger(acursession, avk_adstateid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adstate_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstate_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adstate
      SET lockuserid = NULL
      WHERE vk_adstateid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adstate
      SET locksessionid = NULL
      WHERE vk_adstateid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstat_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_brief(acursession varchar(38),
avk_adstatid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adstatid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adstat
    WHERE vk_adstatid = g2b(avk_adstatid);
    IF aec > 0 THEN
      SET abrief = vk_adstat_brief_f(g2b(avk_adstatid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adstat_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_client_trigger(acursession varchar(38),
aVK_ADSTATid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adstat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adstat (vk_adstatid
    , instanceid
    , period

    , s_day

    , s_month

    , overal

    , spent

    , join_rate

    , impressions

    , clicks

    , reach

    , video_views

    , video_views_half

    , video_views_full

    , video_clicks_site)
      SELECT
        copymap(acopyaction, b2g(vk_adstatid)),
        copymap(acopyaction, b2g(instanceid)),
        period,
        s_day,
        s_month,
        overal,
        spent,
        join_rate,
        impressions,
        clicks,
        reach,
        video_views,
        video_views_half,
        video_views_full,
        video_clicks_site

      FROM vk_adstat
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adstat_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_delete(acursession varchar(38),
avk_adstatid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstat
    WHERE vk_adstatid = g2b(avk_adstatid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adstat' result;
        LEAVE body;
      END IF;
      CALL vk_adstat_logger(acursession, avk_adstatid);
      DELETE
        FROM vk_adstat
      WHERE vk_adstatid = g2b(avk_adstatid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adstat'
        AND ownerrowid = g2b(avk_adstatid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adstat_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adstat
    WHERE vk_adstatid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adstat_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adstat
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adstatid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adstat
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstat_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_logger(acursession varchar(38),
avk_adstatid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstat_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adstat
    WHERE vk_adstatid = arowid;
  END
$$

--
-- Создать процедуру "vk_adstat_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adstatid varchar(38)
, aperiod
varchar(10)/* ?????? *//* ?????? */
, as_day
varchar(10)/* ???? *//* ???? */
, as_month
varchar(7)/* ????? *//* ????? */
, aoveral
integer/* ????? *//* ????? */
, aspent
double/* ????????? *//* ????????? */
, ajoin_rate
integer/* ???????? *//* ???????? */
, aimpressions
integer/* ????????? *//* ????????? */
, aclicks
integer/* ????? *//* ????? */
, areach
integer/* ????? *//* ????? */
, avideo_views
integer/* ????????? *//* ????????? */
, avideo_views_half
integer/* ????????? ???????? *//* ????????? ???????? */
, avideo_views_full
integer/* ????????? ?????? *//* ????????? ?????? */
, avideo_clicks_site
integer/* ???????? ?? ???? *//* ???????? ?? ???? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstat
    WHERE vk_adstatid = g2b(avk_adstatid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adstat' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adstat_logger(acursession, avk_adstatid);
        UPDATE vk_adstat
        SET changestamp = now(),
            period = aperiod,
            s_day = as_day,
            s_month = as_month,
            overal = aoveral,
            spent = aspent,
            join_rate = ajoin_rate,
            impressions = aimpressions,
            clicks = aclicks,
            reach = areach,
            video_views = avideo_views,
            video_views_half = avideo_views_half,
            video_views_full = avideo_views_full,
            video_clicks_site = avideo_clicks_site
        WHERE vk_adstatid = g2b(avk_adstatid);


        CALL vk_adstat_client_trigger(acursession, avk_adstatid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adstat' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adstat (changestamp, vk_adstatid
          , instanceid
          , period

          , s_day

          , s_month

          , overal

          , spent

          , join_rate

          , impressions

          , clicks

          , reach

          , video_views

          , video_views_half

          , video_views_full

          , video_clicks_site)
            VALUES (now(), g2b(avk_adstatid), g2b(ainstanceid), aperiod, as_day, as_month, aoveral, aspent, ajoin_rate, aimpressions, aclicks, areach, avideo_views, avideo_views_half, avideo_views_full, avideo_clicks_site);


          CALL vk_adstat_client_trigger(acursession, avk_adstatid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adstat_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstat_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adstat
      SET lockuserid = NULL
      WHERE vk_adstatid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adstat
      SET locksessionid = NULL
      WHERE vk_adstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstrg_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_brief(acursession varchar(38),
avk_adstrgid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adstrgid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adstrg
    WHERE vk_adstrgid = g2b(avk_adstrgid);
    IF aec > 0 THEN
      SET abrief = vk_adstrg_brief_f(g2b(avk_adstrgid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adstrg_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_client_trigger(acursession varchar(38),
aVK_ADSTRGid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adstrg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adstrg (vk_adstrgid
    , instanceid
    , sex

    , birthday

    , statuses

    , positions

    , paying

    , age_from

    , age_to

    , school_from

    , school_to

    , uni_from

    , uni_to

    , country

    , cities

    , cities_not

    , districts

    , stations

    , streets

    , religions

    , interests

    , interest_categories

    , travellers

    , groups

    , groups_not

    , apps

    , apps_not

    , user_devices

    , user_os

    , user_browsers

    , retargeting_groups

    , retargeting_groups_not)
      SELECT
        copymap(acopyaction, b2g(vk_adstrgid)),
        copymap(acopyaction, b2g(instanceid)),
        sex,
        birthday,
        statuses,
        positions,
        paying,
        age_from,
        age_to,
        school_from,
        school_to,
        uni_from,
        uni_to,
        country,
        cities,
        cities_not,
        districts,
        stations,
        streets,
        religions,
        interests,
        interest_categories,
        travellers,
        groups,
        groups_not,
        apps,
        apps_not,
        user_devices,
        user_os,
        user_browsers,
        retargeting_groups,
        retargeting_groups_not

      FROM vk_adstrg
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adstrg_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_delete(acursession varchar(38),
avk_adstrgid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstrg
    WHERE vk_adstrgid = g2b(avk_adstrgid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adstrg' result;
        LEAVE body;
      END IF;
      CALL vk_adstrg_logger(acursession, avk_adstrgid);
      DELETE
        FROM vk_adstrg
      WHERE vk_adstrgid = g2b(avk_adstrgid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adstrg'
        AND ownerrowid = g2b(avk_adstrgid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adstrg_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adstrg
    WHERE vk_adstrgid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adstrg_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstrg_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adstrg
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adstrgid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adstrg
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adstrgid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstrg_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_logger(acursession varchar(38),
avk_adstrgid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adstrg_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adstrg
    WHERE vk_adstrgid = arowid;
  END
$$

--
-- Создать процедуру "vk_adstrg_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adstrgid varchar(38)
, asex
integer/* ??? *//* ??? */
, abirthday
integer/* ???? ???????? *//* ???? ???????? */
, astatuses
varchar(300)/* ???????? ????????? *//* ???????? ????????? */
, apositions
varchar(255)/* ????????? *//* ????????? */
, apaying
integer/* ?????????? ??????  ?? *//* ?????????? ??????  ?? */
, aage_from
integer/* ??????? ?? *//* ??????? ?? */
, aage_to
integer/* ??????? ?? *//* ??????? ?? */
, aschool_from
integer/* ????????? ????? ? *//* ????????? ????? ? */
, aschool_to
integer/* ????????? ??????? *//* ????????? ??????? */
, auni_from
integer/* ????????? ???? *//* ????????? ???? */
, auni_to
integer/* ????????? ???? *//* ????????? ???? */
, acountry
varchar(400)/* ?????? *//* ?????? */
, acities
varchar(400)/* ?????? *//* ?????? */
, acities_not
varchar(400)/* ???????? ?????? *//* ???????? ?????? */
, adistricts
varchar(255)/* ?????? *//* ?????? */
, astations
varchar(255)/* ??????? *//* ??????? */
, astreets
varchar(255)/* ????? *//* ????? */
, areligions
varchar(400)/* ??????????? ?????? *//* ??????????? ?????? */
, ainterests
varchar(255)/* ???????? *//* ???????? */
, ainterest_categories
varchar(400)/* ????????? *//* ????????? */
, atravellers
integer/* ??????????????? *//* ??????????????? */
, agroups
varchar(255)/* ?????? *//* ?????? */
, agroups_not
varchar(255)/* ???????? ?????? *//* ???????? ?????? */
, aapps
varchar(255)/* ?????????? *//* ?????????? */
, aapps_not
varchar(255)/* ???????? ?????????? *//* ???????? ?????????? */
, auser_devices integer /* ?????????? *//* ?????????? */
, auser_os integer /* ??. ??????? *//* ??. ??????? */
, auser_browsers integer /* ???????? *//* ???????? */
, aretargeting_groups
varchar(255)/* ?????? ???????????? *//* ?????? ???????????? */
, aretargeting_groups_not
varchar(255)/* ???????? ?????? *//* ???????? ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adstrg
    WHERE vk_adstrgid = g2b(avk_adstrgid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adstrg' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adstrg_logger(acursession, avk_adstrgid);
        UPDATE vk_adstrg
        SET changestamp = now(),
            sex = asex,
            birthday = abirthday,
            statuses = astatuses,
            positions = apositions,
            paying = apaying,
            age_from = aage_from,
            age_to = aage_to,
            school_from = aschool_from,
            school_to = aschool_to,
            uni_from = auni_from,
            uni_to = auni_to,
            country = acountry,
            cities = acities,
            cities_not = acities_not,
            districts = adistricts,
            stations = astations,
            streets = astreets,
            religions = areligions,
            interests = ainterests,
            interest_categories = ainterest_categories,
            travellers = atravellers,
            groups = agroups,
            groups_not = agroups_not,
            apps = aapps,
            apps_not = aapps_not,
            user_devices = auser_devices,
            user_os = auser_os,
            user_browsers = auser_browsers,
            retargeting_groups = aretargeting_groups,
            retargeting_groups_not = aretargeting_groups_not
        WHERE vk_adstrgid = g2b(avk_adstrgid);


        CALL vk_adstrg_client_trigger(acursession, avk_adstrgid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adstrg' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_adstrg
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_adstrg>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adstrg (changestamp, vk_adstrgid
          , instanceid
          , sex

          , birthday

          , statuses

          , positions

          , paying

          , age_from

          , age_to

          , school_from

          , school_to

          , uni_from

          , uni_to

          , country

          , cities

          , cities_not

          , districts

          , stations

          , streets

          , religions

          , interests

          , interest_categories

          , travellers

          , groups

          , groups_not

          , apps

          , apps_not

          , user_devices

          , user_os

          , user_browsers

          , retargeting_groups

          , retargeting_groups_not)
            VALUES (now(), g2b(avk_adstrgid), g2b(ainstanceid), asex, abirthday, astatuses, apositions, apaying, aage_from, aage_to, aschool_from, aschool_to, auni_from, auni_to, acountry, acities, acities_not, adistricts, astations, astreets, areligions, ainterests, ainterest_categories, atravellers, agroups, agroups_not, aapps, aapps_not, auser_devices, auser_os, auser_browsers, aretargeting_groups, aretargeting_groups_not);


          CALL vk_adstrg_client_trigger(acursession, avk_adstrgid);

          CALL vkads_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adstrg_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adstrg_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adstrg_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adstrg
      SET lockuserid = NULL
      WHERE vk_adstrgid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adstrg
      SET locksessionid = NULL
      WHERE vk_adstrgid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsutm_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_brief(acursession varchar(38),
avk_adsutmid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_adsutmid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_adsutm
    WHERE vk_adsutmid = g2b(avk_adsutmid);
    IF aec > 0 THEN
      SET abrief = vk_adsutm_brief_f(g2b(avk_adsutmid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_adsutm_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_client_trigger(acursession varchar(38),
aVK_ADSUTMid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_adsutm_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_adsutm (vk_adsutmid
    , instanceid
    , autoutm

    , utm_source

    , utm_medium

    , utm_term

    , utm_content

    , utm_campaign)
      SELECT
        copymap(acopyaction, b2g(vk_adsutmid)),
        copymap(acopyaction, b2g(instanceid)),
        autoutm,
        utm_source,
        utm_medium,
        utm_term,
        utm_content,
        utm_campaign

      FROM vk_adsutm
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_adsutm_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_delete(acursession varchar(38),
avk_adsutmid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsutm
    WHERE vk_adsutmid = g2b(avk_adsutmid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_adsutm' result;
        LEAVE body;
      END IF;
      CALL vk_adsutm_logger(acursession, avk_adsutmid);
      DELETE
        FROM vk_adsutm
      WHERE vk_adsutmid = g2b(avk_adsutmid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_adsutm'
        AND ownerrowid = g2b(avk_adsutmid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_adsutm_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_adsutm
    WHERE vk_adsutmid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_adsutm_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsutm_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_adsutm
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_adsutmid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_adsutm
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_adsutmid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsutm_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_logger(acursession varchar(38),
avk_adsutmid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_adsutm_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_adsutm
    WHERE vk_adsutmid = arowid;
  END
$$

--
-- Создать процедуру "vk_adsutm_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_save(acursession varchar(38),
ainstanceid varchar(38),
avk_adsutmid varchar(38)
, aautoutm
integer/* ??????????? *//* ??????????? */
, autm_source
varchar(64)/* ???????? *//* ???????? */
, autm_medium
varchar(64)/* ????? *//* ????? */
, autm_term
varchar(64)/* ???????? ?????  *//* ???????? ?????  */
, autm_content
varchar(64)/* ??????????  *//* ??????????  */
, autm_campaign
varchar(64)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_adsutm
    WHERE vk_adsutmid = g2b(avk_adsutmid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkads.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_adsutm' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_adsutm_logger(acursession, avk_adsutmid);
        UPDATE vk_adsutm
        SET changestamp = now(),
            autoutm = aautoutm,
            utm_source = autm_source,
            utm_medium = autm_medium,
            utm_term = autm_term,
            utm_content = autm_content,
            utm_campaign = autm_campaign
        WHERE vk_adsutmid = g2b(avk_adsutmid);


        CALL vk_adsutm_client_trigger(acursession, avk_adsutmid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkads.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_adsutm' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_adsutm
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_adsutm>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_adsutm (changestamp, vk_adsutmid
          , instanceid
          , autoutm

          , utm_source

          , utm_medium

          , utm_term

          , utm_content

          , utm_campaign)
            VALUES (now(), g2b(avk_adsutmid), g2b(ainstanceid), aautoutm, autm_source, autm_medium, autm_term, autm_content, autm_campaign);


          CALL vk_adsutm_client_trigger(acursession, avk_adsutmid);

          CALL vkads_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_adsutm_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_adsutm_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_adsutm_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_adsutm
      SET lockuserid = NULL
      WHERE vk_adsutmid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_adsutm
      SET locksessionid = NULL
      WHERE vk_adsutmid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_age_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_brief(acursession varchar(38),
avk_ageid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_ageid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_age
    WHERE vk_ageid = g2b(avk_ageid);
    IF aec > 0 THEN
      SET abrief = vk_age_brief_f(g2b(avk_ageid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_age_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_client_trigger(acursession varchar(38),
aVK_AGEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_age_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_age (vk_ageid
    , instanceid
    , vkid

    , title)
      SELECT
        copymap(acopyaction, b2g(vk_ageid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        title

      FROM vk_age
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_age_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_delete(acursession varchar(38),
avk_ageid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_age
    WHERE vk_ageid = g2b(avk_ageid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdage.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_age' result;
        LEAVE body;
      END IF;
      CALL vk_age_logger(acursession, avk_ageid);
      DELETE
        FROM vk_age
      WHERE vk_ageid = g2b(avk_ageid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_age'
        AND ownerrowid = g2b(avk_ageid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_age_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_age
    WHERE vk_ageid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_age_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_age_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_age
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_ageid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_age
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_ageid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_age_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_logger(acursession varchar(38),
avk_ageid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_age_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_age
    WHERE vk_ageid = arowid;
  END
$$

--
-- Создать процедуру "vk_age_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_save(acursession varchar(38),
ainstanceid varchar(38),
avk_ageid varchar(38)
, avkid
integer/* vkid *//* vkid */
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_age
    WHERE vk_ageid = g2b(avk_ageid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdage.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_age' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_age_logger(acursession, avk_ageid);
        UPDATE vk_age
        SET changestamp = now(),
            vkid = avkid,
            title = atitle
        WHERE vk_ageid = g2b(avk_ageid);


        CALL vk_age_client_trigger(acursession, avk_ageid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdage.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_age' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_age (changestamp, vk_ageid
          , instanceid
          , vkid

          , title)
            VALUES (now(), g2b(avk_ageid), g2b(ainstanceid), avkid, atitle);


          CALL vk_age_client_trigger(acursession, avk_ageid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_age_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_age_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_age_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_age
      SET lockuserid = NULL
      WHERE vk_ageid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_age
      SET locksessionid = NULL
      WHERE vk_ageid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_approve_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_brief(acursession varchar(38),
avk_approveid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_approveid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_approve
    WHERE vk_approveid = g2b(avk_approveid);
    IF aec > 0 THEN
      SET abrief = vk_approve_brief_f(g2b(avk_approveid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_approve_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_client_trigger(acursession varchar(38),
aVK_APPROVEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_approve_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_approve (vk_approveid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_approveid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_approve
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_approve_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_delete(acursession varchar(38),
avk_approveid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_approve
    WHERE vk_approveid = g2b(avk_approveid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdappr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_approve' result;
        LEAVE body;
      END IF;
      CALL vk_approve_logger(acursession, avk_approveid);
      DELETE
        FROM vk_approve
      WHERE vk_approveid = g2b(avk_approveid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_approve'
        AND ownerrowid = g2b(avk_approveid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_approve_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_approve
    WHERE vk_approveid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_approve_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_approve_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_approve
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_approveid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_approve
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_approveid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_approve_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_logger(acursession varchar(38),
avk_approveid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_approve_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_approve
    WHERE vk_approveid = arowid;
  END
$$

--
-- Создать процедуру "vk_approve_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_save(acursession varchar(38),
ainstanceid varchar(38),
avk_approveid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_approve
    WHERE vk_approveid = g2b(avk_approveid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdappr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_approve' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_approve_logger(acursession, avk_approveid);
        UPDATE vk_approve
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_approveid = g2b(avk_approveid);


        CALL vk_approve_client_trigger(acursession, avk_approveid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdappr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_approve' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_approve (changestamp, vk_approveid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_approveid), g2b(ainstanceid), atitle, avkid);


          CALL vk_approve_client_trigger(acursession, avk_approveid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_approve_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_approve_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_approve_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_approve
      SET lockuserid = NULL
      WHERE vk_approveid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_approve
      SET locksessionid = NULL
      WHERE vk_approveid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkinfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_brief(acursession varchar(38),
avk_brkinfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_brkinfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_brkinfo
    WHERE vk_brkinfoid = g2b(avk_brkinfoid);
    IF aec > 0 THEN
      SET abrief = vk_brkinfo_brief_f(g2b(avk_brkinfoid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_brkinfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_client_trigger(acursession varchar(38),
aVK_BRKINFOid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_brkinfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_brkinfo (vk_brkinfoid
    , instanceid
    , crdate

    , ads

    , rotation

    , name)
      SELECT
        copymap(acopyaction, b2g(vk_brkinfoid)),
        copymap(acopyaction, b2g(instanceid)),
        crdate,
        ads,
        rotation,
        name

      FROM vk_brkinfo
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_brkinfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_delete(acursession varchar(38),
avk_brkinfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_brkinfo
    WHERE vk_brkinfoid = g2b(avk_brkinfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_brkinfo' result;
        LEAVE body;
      END IF;
      CALL vk_brkinfo_logger(acursession, avk_brkinfoid);
      DELETE
        FROM vk_brkinfo
      WHERE vk_brkinfoid = g2b(avk_brkinfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_brkinfo'
        AND ownerrowid = g2b(avk_brkinfoid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_brkinfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_brkinfo
    WHERE vk_brkinfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_brkinfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_brkinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_brkinfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_brkinfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_brkinfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_brkinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkinfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_logger(acursession varchar(38),
avk_brkinfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkinfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_brkinfo
    WHERE vk_brkinfoid = arowid;
  END
$$

--
-- Создать процедуру "vk_brkinfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_save(acursession varchar(38),
ainstanceid varchar(38),
avk_brkinfoid varchar(38)
, acrdate
datetime/* ???? ???????? *//* ???? ???????? */
, aads varchar(38)/* ?????????? *//* ?????????? */
, arotation varchar(38)/* ??????? *//* ??????? */
, aname
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_brkinfo
    WHERE vk_brkinfoid = g2b(avk_brkinfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_brkinfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_brkinfo_logger(acursession, avk_brkinfoid);
        UPDATE vk_brkinfo
        SET changestamp = now(),
            crdate = acrdate,
            ads = g2b(aads),
            rotation = g2b(arotation),
            name = aname
        WHERE vk_brkinfoid = g2b(avk_brkinfoid);


        CALL vk_brkinfo_client_trigger(acursession, avk_brkinfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_brkinfo' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_brkinfo
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_brkinfo>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_brkinfo (changestamp, vk_brkinfoid
          , instanceid
          , crdate

          , ads

          , rotation

          , name)
            VALUES (now(), g2b(avk_brkinfoid), g2b(ainstanceid), acrdate, g2b(aads), g2b(arotation), aname);


          CALL vk_brkinfo_client_trigger(acursession, avk_brkinfoid);

          CALL vkbrk_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_brkinfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkinfo_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_brkinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_brkinfo
      SET lockuserid = NULL
      WHERE vk_brkinfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_brkinfo
      SET locksessionid = NULL
      WHERE vk_brkinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_brief(acursession varchar(38),
avk_brkownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_brkownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_brkowner
    WHERE vk_brkownerid = g2b(avk_brkownerid);
    IF aec > 0 THEN
      SET abrief = vk_brkowner_brief_f(g2b(avk_brkownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_brkowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_client_trigger(acursession varchar(38),
aVK_BRKOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_brkowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_brkowner (vk_brkownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_brkownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_brkowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_brkowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_delete(acursession varchar(38),
avk_brkownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_brkowner
    WHERE vk_brkownerid = g2b(avk_brkownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_brkowner' result;
        LEAVE body;
      END IF;
      CALL vk_brkowner_logger(acursession, avk_brkownerid);
      DELETE
        FROM vk_brkowner
      WHERE vk_brkownerid = g2b(avk_brkownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_brkowner'
        AND ownerrowid = g2b(avk_brkownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_brkowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_brkowner
    WHERE vk_brkownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_brkowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_brkowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_brkowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_brkownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_brkowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_brkownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_logger(acursession varchar(38),
avk_brkownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_brkowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_brkowner
    WHERE vk_brkownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_brkowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_brkownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_brkowner
    WHERE vk_brkownerid = g2b(avk_brkownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_brkowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_brkowner_logger(acursession, avk_brkownerid);
        UPDATE vk_brkowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_brkownerid = g2b(avk_brkownerid);


        CALL vk_brkowner_client_trigger(acursession, avk_brkownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkbrk.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_brkowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_brkowner (changestamp, vk_brkownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_brkownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_brkowner_client_trigger(acursession, avk_brkownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_brkowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_brkowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_brkowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_brkowner
      SET lockuserid = NULL
      WHERE vk_brkownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_brkowner
      SET locksessionid = NULL
      WHERE vk_brkownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_browser_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_brief(acursession varchar(38),
avk_browserid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_browserid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_browser
    WHERE vk_browserid = g2b(avk_browserid);
    IF aec > 0 THEN
      SET abrief = vk_browser_brief_f(g2b(avk_browserid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_browser_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_client_trigger(acursession varchar(38),
aVK_BROWSERid integer)
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_browser_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_browser (vk_browserid
    , instanceid
    , vkid

    , title)
      SELECT
        copymap(acopyaction, b2g(vk_browserid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        title

      FROM vk_browser
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_browser_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_delete(acursession varchar(38),
avk_browserid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_browser
    WHERE vk_browserid = g2b(avk_browserid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdbrw.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_browser' result;
        LEAVE body;
      END IF;
      CALL vk_browser_logger(acursession, avk_browserid);
      DELETE
        FROM vk_browser
      WHERE vk_browserid = g2b(avk_browserid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_browser'
        AND ownerrowid = g2b(avk_browserid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_browser_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_browser
    WHERE vk_browserid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_browser_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_browser_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_browser
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_browserid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_browser
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_browserid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_browser_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_logger(acursession varchar(38),
avk_browserid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_browser_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_browser
    WHERE vk_browserid = arowid;
  END
$$

--
-- Создать процедуру "vk_browser_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_save(acursession varchar(38),
ainstanceid varchar(38),
avk_browserid varchar(38)
, avkid
integer/* vkid *//* vkid */
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_browser
    WHERE vk_browserid = g2b(avk_browserid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdbrw.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_browser' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_browser_logger(acursession, avk_browserid);
        UPDATE vk_browser
        SET changestamp = now(),
            vkid = avkid,
            title = atitle
        WHERE vk_browserid = g2b(avk_browserid);


        CALL vk_browser_client_trigger(acursession, avk_browserid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdbrw.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_browser' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_browser (changestamp, vk_browserid
          , instanceid
          , vkid

          , title)
            VALUES (now(), g2b(avk_browserid), g2b(ainstanceid), avkid, atitle);


          CALL vk_browser_client_trigger(acursession, avk_browserid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_browser_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_browser_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_browser_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_browser
      SET lockuserid = NULL
      WHERE vk_browserid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_browser
      SET locksessionid = NULL
      WHERE vk_browserid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_cab_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_brief(acursession varchar(38),
avk_cabid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_cabid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_cab
    WHERE vk_cabid = g2b(avk_cabid);
    IF aec > 0 THEN
      SET abrief = vk_cab_brief_f(g2b(avk_cabid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_cab_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_client_trigger(acursession varchar(38),
aVK_CABid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_cab_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_cab (vk_cabid
    , instanceid
    , account_id

    , name

    , account_type

    , account_status

    , access_role)
      SELECT
        copymap(acopyaction, b2g(vk_cabid)),
        copymap(acopyaction, b2g(instanceid)),
        account_id,
        name,
        account_type,
        account_status,
        access_role

      FROM vk_cab
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_cab_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_delete(acursession varchar(38),
avk_cabid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_cab
    WHERE vk_cabid = g2b(avk_cabid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkusr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_cab' result;
        LEAVE body;
      END IF;
      CALL vk_cab_logger(acursession, avk_cabid);
      DELETE
        FROM vk_cab
      WHERE vk_cabid = g2b(avk_cabid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_cab'
        AND ownerrowid = g2b(avk_cabid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_cab_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_cab
    WHERE vk_cabid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_cab_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_cab_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_cab
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_cabid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_cab
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_cabid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_cab_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_logger(acursession varchar(38),
avk_cabid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_cab_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_cab
    WHERE vk_cabid = arowid;
  END
$$

--
-- Создать процедуру "vk_cab_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_save(acursession varchar(38),
ainstanceid varchar(38),
avk_cabid varchar(38)
, aaccount_id
varchar(20)/* id *//* id */
, aname
varchar(256)/* ???????? *//* ???????? */
, aaccount_type
varchar(20)/* ??? *//* ??? */
, aaccount_status
integer/* ??????? *//* ??????? */
, aaccess_role
varchar(20)/* ???? ???????????? *//* ???? ???????????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_cab
    WHERE vk_cabid = g2b(avk_cabid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkusr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_cab' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_cab_logger(acursession, avk_cabid);
        UPDATE vk_cab
        SET changestamp = now(),
            account_id = aaccount_id,
            name = aname,
            account_type = aaccount_type,
            account_status = aaccount_status,
            access_role = aaccess_role
        WHERE vk_cabid = g2b(avk_cabid);


        CALL vk_cab_client_trigger(acursession, avk_cabid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkusr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_cab' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_cab (changestamp, vk_cabid
          , instanceid
          , account_id

          , name

          , account_type

          , account_status

          , access_role)
            VALUES (now(), g2b(avk_cabid), g2b(ainstanceid), aaccount_id, aname, aaccount_type, aaccount_status, aaccess_role);


          CALL vk_cab_client_trigger(acursession, avk_cabid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_cab_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_cab_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_cab_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_cab
      SET lockuserid = NULL
      WHERE vk_cabid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_cab
      SET locksessionid = NULL
      WHERE vk_cabid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camovstat_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_brief(acursession varchar(38),
avk_camovstatid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_camovstatid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_camovstat
    WHERE vk_camovstatid = g2b(avk_camovstatid);
    IF aec > 0 THEN
      SET abrief = vk_camovstat_brief_f(g2b(avk_camovstatid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_camovstat_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_client_trigger(acursession varchar(38),
aVK_CAMOVSTATid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_camovstat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_camovstat (vk_camovstatid
    , instanceid
    , join_rate

    , spent

    , clicks

    , impressions

    , video_views

    , video_clicks_site

    , video_views_half

    , video_views_full

    , reach)
      SELECT
        copymap(acopyaction, b2g(vk_camovstatid)),
        copymap(acopyaction, b2g(instanceid)),
        join_rate,
        spent,
        clicks,
        impressions,
        video_views,
        video_clicks_site,
        video_views_half,
        video_views_full,
        reach

      FROM vk_camovstat
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_camovstat_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_delete(acursession varchar(38),
avk_camovstatid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camovstat
    WHERE vk_camovstatid = g2b(avk_camovstatid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_camovstat' result;
        LEAVE body;
      END IF;
      CALL vk_camovstat_logger(acursession, avk_camovstatid);
      DELETE
        FROM vk_camovstat
      WHERE vk_camovstatid = g2b(avk_camovstatid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_camovstat'
        AND ownerrowid = g2b(avk_camovstatid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_camovstat_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_camovstat
    WHERE vk_camovstatid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_camovstat_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camovstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_camovstat
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_camovstatid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_camovstat
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_camovstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camovstat_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_logger(acursession varchar(38),
avk_camovstatid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camovstat_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_camovstat
    WHERE vk_camovstatid = arowid;
  END
$$

--
-- Создать процедуру "vk_camovstat_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_save(acursession varchar(38),
ainstanceid varchar(38),
avk_camovstatid varchar(38)
, ajoin_rate
integer/* ???????? *//* ???????? */
, aspent
double/* ????????? *//* ????????? */
, aclicks
integer/* ????? *//* ????? */
, aimpressions
integer/* ????????? *//* ????????? */
, avideo_views
integer/* ????????? *//* ????????? */
, avideo_clicks_site
integer/* ???????? ?? ???? *//* ???????? ?? ???? */
, avideo_views_half
integer/* ????????? ???????? *//* ????????? ???????? */
, avideo_views_full
integer/* ????????? ?????? *//* ????????? ?????? */
, areach
integer/* ????? *//* ????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camovstat
    WHERE vk_camovstatid = g2b(avk_camovstatid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_camovstat' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_camovstat_logger(acursession, avk_camovstatid);
        UPDATE vk_camovstat
        SET changestamp = now(),
            join_rate = ajoin_rate,
            spent = aspent,
            clicks = aclicks,
            impressions = aimpressions,
            video_views = avideo_views,
            video_clicks_site = avideo_clicks_site,
            video_views_half = avideo_views_half,
            video_views_full = avideo_views_full,
            reach = areach
        WHERE vk_camovstatid = g2b(avk_camovstatid);


        CALL vk_camovstat_client_trigger(acursession, avk_camovstatid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkcam.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_camovstat' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_camovstat
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_camovstat>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_camovstat (changestamp, vk_camovstatid
          , instanceid
          , join_rate

          , spent

          , clicks

          , impressions

          , video_views

          , video_clicks_site

          , video_views_half

          , video_views_full

          , reach)
            VALUES (now(), g2b(avk_camovstatid), g2b(ainstanceid), ajoin_rate, aspent, aclicks, aimpressions, avideo_views, avideo_clicks_site, avideo_views_half, avideo_views_full, areach);


          CALL vk_camovstat_client_trigger(acursession, avk_camovstatid);

          CALL vkcam_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_camovstat_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camovstat_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camovstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_camovstat
      SET lockuserid = NULL
      WHERE vk_camovstatid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_camovstat
      SET locksessionid = NULL
      WHERE vk_camovstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_brief(acursession varchar(38),
avk_camownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_camownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_camowner
    WHERE vk_camownerid = g2b(avk_camownerid);
    IF aec > 0 THEN
      SET abrief = vk_camowner_brief_f(g2b(avk_camownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_camowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_client_trigger(acursession varchar(38),
aVK_CAMOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_camowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_camowner (vk_camownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_camownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_camowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_camowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_delete(acursession varchar(38),
avk_camownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camowner
    WHERE vk_camownerid = g2b(avk_camownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_camowner' result;
        LEAVE body;
      END IF;
      CALL vk_camowner_logger(acursession, avk_camownerid);
      DELETE
        FROM vk_camowner
      WHERE vk_camownerid = g2b(avk_camownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_camowner'
        AND ownerrowid = g2b(avk_camownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_camowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_camowner
    WHERE vk_camownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_camowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_camowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_camownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_camowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_camownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_logger(acursession varchar(38),
avk_camownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_camowner
    WHERE vk_camownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_camowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_camownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camowner
    WHERE vk_camownerid = g2b(avk_camownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_camowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_camowner_logger(acursession, avk_camownerid);
        UPDATE vk_camowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_camownerid = g2b(avk_camownerid);


        CALL vk_camowner_client_trigger(acursession, avk_camownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkcam.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_camowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_camowner (changestamp, vk_camownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_camownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_camowner_client_trigger(acursession, avk_camownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_camowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_camowner
      SET lockuserid = NULL
      WHERE vk_camownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_camowner
      SET locksessionid = NULL
      WHERE vk_camownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camp_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_brief(acursession varchar(38),
avk_campid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_campid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_camp
    WHERE vk_campid = g2b(avk_campid);
    IF aec > 0 THEN
      SET abrief = vk_camp_brief_f(g2b(avk_campid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_camp_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_client_trigger(acursession varchar(38),
aVk_CAMPid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_camp_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_camp (vk_campid
    , instanceid
    , vk_usr

    , vk_cab

    , campagin_id

    , status

    , name

    , all_limit

    , day_limit

    , stop_time

    , start_time

    , prj)
      SELECT
        copymap(acopyaction, b2g(vk_campid)),
        copymap(acopyaction, b2g(instanceid)),
        vk_usr,
        vk_cab,
        campagin_id,
        status,
        name,
        all_limit,
        day_limit,
        stop_time,
        start_time,
        prj

      FROM vk_camp
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_camp_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_delete(acursession varchar(38),
avk_campid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camp
    WHERE vk_campid = g2b(avk_campid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_camp' result;
        LEAVE body;
      END IF;
      CALL vk_camp_logger(acursession, avk_campid);
      DELETE
        FROM vk_camp
      WHERE vk_campid = g2b(avk_campid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_camp'
        AND ownerrowid = g2b(avk_campid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_camp_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_camp
    WHERE vk_campid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_camp_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camp_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_camp
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_campid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_camp
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_campid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camp_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_logger(acursession varchar(38),
avk_campid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camp_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_camp
    WHERE vk_campid = arowid;
  END
$$

--
-- Создать процедуру "vk_camp_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_save(acursession varchar(38),
ainstanceid varchar(38),
avk_campid varchar(38)
, avk_usr varchar(38)/* ???????????? *//* ???????????? */
, avk_cab varchar(38)/* ??????? *//* ??????? */
, acampagin_id
varchar(30)/* id *//* id */
, astatus varchar(38)/* ?????? *//* ?????? */
, aname
varchar(255)/* ???????? *//* ???????? */
, aall_limit
double/* ????? ????? *//* ????? ????? */
, aday_limit
double/* ??????? ????? *//* ??????? ????? */
, astop_time
datetime/* ?????????? *//* ?????????? */
, astart_time
datetime/* ?????? *//* ?????? */
, aprj varchar(38)/* ?????? *//* ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camp
    WHERE vk_campid = g2b(avk_campid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_camp' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_camp_logger(acursession, avk_campid);
        UPDATE vk_camp
        SET changestamp = now(),
            vk_usr = g2b(avk_usr),
            vk_cab = g2b(avk_cab),
            campagin_id = acampagin_id,
            status = g2b(astatus),
            name = aname,
            all_limit = aall_limit,
            day_limit = aday_limit,
            stop_time = astop_time,
            start_time = astart_time,
            prj = g2b(aprj)
        WHERE vk_campid = g2b(avk_campid);


        CALL vk_camp_client_trigger(acursession, avk_campid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkcam.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_camp' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_camp
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_camp>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_camp (changestamp, vk_campid
          , instanceid
          , vk_usr

          , vk_cab

          , campagin_id

          , status

          , name

          , all_limit

          , day_limit

          , stop_time

          , start_time

          , prj)
            VALUES (now(), g2b(avk_campid), g2b(ainstanceid), g2b(avk_usr), g2b(avk_cab), acampagin_id, g2b(astatus), aname, aall_limit, aday_limit, astop_time, astart_time, g2b(aprj));


          CALL vk_camp_client_trigger(acursession, avk_campid);

          CALL vkcam_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_camp_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camp_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camp_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_camp
      SET lockuserid = NULL
      WHERE vk_campid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_camp
      SET locksessionid = NULL
      WHERE vk_campid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camstat_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_brief(acursession varchar(38),
avk_camstatid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_camstatid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_camstat
    WHERE vk_camstatid = g2b(avk_camstatid);
    IF aec > 0 THEN
      SET abrief = vk_camstat_brief_f(g2b(avk_camstatid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_camstat_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_client_trigger(acursession varchar(38),
aVK_CAMSTATid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_camstat_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_camstat (vk_camstatid
    , instanceid
    , join_rate

    , overal

    , s_day

    , spent

    , video_views

    , impressions

    , video_views_full

    , reach

    , s_month

    , video_views_half

    , period

    , clicks

    , video_clicks_site)
      SELECT
        copymap(acopyaction, b2g(vk_camstatid)),
        copymap(acopyaction, b2g(instanceid)),
        join_rate,
        overal,
        s_day,
        spent,
        video_views,
        impressions,
        video_views_full,
        reach,
        s_month,
        video_views_half,
        period,
        clicks,
        video_clicks_site

      FROM vk_camstat
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_camstat_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_delete(acursession varchar(38),
avk_camstatid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camstat
    WHERE vk_camstatid = g2b(avk_camstatid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_camstat' result;
        LEAVE body;
      END IF;
      CALL vk_camstat_logger(acursession, avk_camstatid);
      DELETE
        FROM vk_camstat
      WHERE vk_camstatid = g2b(avk_camstatid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_camstat'
        AND ownerrowid = g2b(avk_camstatid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_camstat_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_camstat
    WHERE vk_camstatid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_camstat_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_camstat
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_camstatid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_camstat
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_camstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camstat_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_logger(acursession varchar(38),
avk_camstatid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_camstat_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_camstat
    WHERE vk_camstatid = arowid;
  END
$$

--
-- Создать процедуру "vk_camstat_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_save(acursession varchar(38),
ainstanceid varchar(38),
avk_camstatid varchar(38)
, ajoin_rate
integer/* ???????? *//* ???????? */
, aoveral
integer/* ????? *//* ????? */
, as_day
varchar(10)/* ???? *//* ???? */
, aspent
double/* ????????? *//* ????????? */
, avideo_views
integer/* ????????? *//* ????????? */
, aimpressions
integer/* ????????? *//* ????????? */
, avideo_views_full
integer/* ????????? ?????? *//* ????????? ?????? */
, areach
integer/* ????? *//* ????? */
, as_month
varchar(7)/* ????? *//* ????? */
, avideo_views_half
integer/* ????????? ???????? *//* ????????? ???????? */
, aperiod
varchar(10)/* ?????? *//* ?????? */
, aclicks
integer/* ????? *//* ????? */
, avideo_clicks_site
integer/* ???????? ?? ???? *//* ???????? ?? ???? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_camstat
    WHERE vk_camstatid = g2b(avk_camstatid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkcam.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_camstat' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_camstat_logger(acursession, avk_camstatid);
        UPDATE vk_camstat
        SET changestamp = now(),
            join_rate = ajoin_rate,
            overal = aoveral,
            s_day = as_day,
            spent = aspent,
            video_views = avideo_views,
            impressions = aimpressions,
            video_views_full = avideo_views_full,
            reach = areach,
            s_month = as_month,
            video_views_half = avideo_views_half,
            period = aperiod,
            clicks = aclicks,
            video_clicks_site = avideo_clicks_site
        WHERE vk_camstatid = g2b(avk_camstatid);


        CALL vk_camstat_client_trigger(acursession, avk_camstatid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkcam.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_camstat' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_camstat (changestamp, vk_camstatid
          , instanceid
          , join_rate

          , overal

          , s_day

          , spent

          , video_views

          , impressions

          , video_views_full

          , reach

          , s_month

          , video_views_half

          , period

          , clicks

          , video_clicks_site)
            VALUES (now(), g2b(avk_camstatid), g2b(ainstanceid), ajoin_rate, aoveral, as_day, aspent, avideo_views, aimpressions, avideo_views_full, areach, as_month, avideo_views_half, aperiod, aclicks, avideo_clicks_site);


          CALL vk_camstat_client_trigger(acursession, avk_camstatid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_camstat_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_camstat_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_camstat_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_camstat
      SET lockuserid = NULL
      WHERE vk_camstatid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_camstat
      SET locksessionid = NULL
      WHERE vk_camstatid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_castate_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_brief(acursession varchar(38),
avk_castateid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_castateid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_castate
    WHERE vk_castateid = g2b(avk_castateid);
    IF aec > 0 THEN
      SET abrief = vk_castate_brief_f(g2b(avk_castateid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_castate_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_client_trigger(acursession varchar(38),
aVK_CASTATEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_castate_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_castate (vk_castateid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_castateid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_castate
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_castate_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_delete(acursession varchar(38),
avk_castateid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_castate
    WHERE vk_castateid = g2b(avk_castateid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdcst.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_castate' result;
        LEAVE body;
      END IF;
      CALL vk_castate_logger(acursession, avk_castateid);
      DELETE
        FROM vk_castate
      WHERE vk_castateid = g2b(avk_castateid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_castate'
        AND ownerrowid = g2b(avk_castateid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_castate_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_castate
    WHERE vk_castateid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_castate_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_castate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_castate
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_castateid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_castate
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_castateid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_castate_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_logger(acursession varchar(38),
avk_castateid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_castate_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_castate
    WHERE vk_castateid = arowid;
  END
$$

--
-- Создать процедуру "vk_castate_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_save(acursession varchar(38),
ainstanceid varchar(38),
avk_castateid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_castate
    WHERE vk_castateid = g2b(avk_castateid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdcst.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_castate' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_castate_logger(acursession, avk_castateid);
        UPDATE vk_castate
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_castateid = g2b(avk_castateid);


        CALL vk_castate_client_trigger(acursession, avk_castateid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdcst.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_castate' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_castate (changestamp, vk_castateid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_castateid), g2b(ainstanceid), atitle, avkid);


          CALL vk_castate_client_trigger(acursession, avk_castateid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_castate_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_castate_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_castate_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_castate
      SET lockuserid = NULL
      WHERE vk_castateid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_castate
      SET locksessionid = NULL
      WHERE vk_castateid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_category_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_brief(acursession varchar(38),
avk_categoryid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_categoryid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_category
    WHERE vk_categoryid = g2b(avk_categoryid);
    IF aec > 0 THEN
      SET abrief = vk_category_brief_f(g2b(avk_categoryid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_category_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_client_trigger(acursession varchar(38),
aVK_CATEGORYid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_category_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_category (vk_categoryid
    , instanceid
    , title

    , vkid

    , parent_id)
      SELECT
        copymap(acopyaction, b2g(vk_categoryid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid,
        parent_id

      FROM vk_category
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_category_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_delete(acursession varchar(38),
avk_categoryid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_category
    WHERE vk_categoryid = g2b(avk_categoryid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdcat.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_category' result;
        LEAVE body;
      END IF;
      CALL vk_category_logger(acursession, avk_categoryid);
      DELETE
        FROM vk_category
      WHERE vk_categoryid = g2b(avk_categoryid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_category'
        AND ownerrowid = g2b(avk_categoryid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_category_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_category
    WHERE vk_categoryid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_category_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_category_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_category
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_categoryid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_category
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_categoryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_category_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_logger(acursession varchar(38),
avk_categoryid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_category_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_category
    WHERE vk_categoryid = arowid;
  END
$$

--
-- Создать процедуру "vk_category_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_save(acursession varchar(38),
ainstanceid varchar(38),
avk_categoryid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
, aparent_id
integer/* ???????????? ????????? *//* ???????????? ????????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_category
    WHERE vk_categoryid = g2b(avk_categoryid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdcat.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_category' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_category_logger(acursession, avk_categoryid);
        UPDATE vk_category
        SET changestamp = now(),
            title = atitle,
            vkid = avkid,
            parent_id = aparent_id
        WHERE vk_categoryid = g2b(avk_categoryid);


        CALL vk_category_client_trigger(acursession, avk_categoryid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdcat.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_category' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_category (changestamp, vk_categoryid
          , instanceid
          , title

          , vkid

          , parent_id)
            VALUES (now(), g2b(avk_categoryid), g2b(ainstanceid), atitle, avkid, aparent_id);


          CALL vk_category_client_trigger(acursession, avk_categoryid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_category_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_category_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_category_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_category
      SET lockuserid = NULL
      WHERE vk_categoryid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_category
      SET locksessionid = NULL
      WHERE vk_categoryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_country_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_brief(acursession varchar(38),
avk_countryid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_countryid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_country
    WHERE vk_countryid = g2b(avk_countryid);
    IF aec > 0 THEN
      SET abrief = vk_country_brief_f(g2b(avk_countryid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_country_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_client_trigger(acursession varchar(38),
aVK_COUNTRYid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_country_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_country (vk_countryid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_countryid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_country
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_country_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_delete(acursession varchar(38),
avk_countryid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_country
    WHERE vk_countryid = g2b(avk_countryid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdcn.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_country' result;
        LEAVE body;
      END IF;
      CALL vk_country_logger(acursession, avk_countryid);
      DELETE
        FROM vk_country
      WHERE vk_countryid = g2b(avk_countryid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_country'
        AND ownerrowid = g2b(avk_countryid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_country_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_country
    WHERE vk_countryid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_country_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_country_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_country
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_countryid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_country
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_countryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_country_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_logger(acursession varchar(38),
avk_countryid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_country_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_country
    WHERE vk_countryid = arowid;
  END
$$

--
-- Создать процедуру "vk_country_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_save(acursession varchar(38),
ainstanceid varchar(38),
avk_countryid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_country
    WHERE vk_countryid = g2b(avk_countryid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdcn.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_country' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_country_logger(acursession, avk_countryid);
        UPDATE vk_country
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_countryid = g2b(avk_countryid);


        CALL vk_country_client_trigger(acursession, avk_countryid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdcn.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_country' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_country (changestamp, vk_countryid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_countryid), g2b(ainstanceid), atitle, avkid);


          CALL vk_country_client_trigger(acursession, avk_countryid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_country_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_country_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_country_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_country
      SET lockuserid = NULL
      WHERE vk_countryid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_country
      SET locksessionid = NULL
      WHERE vk_countryid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_device_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_brief(acursession varchar(38),
avk_deviceid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_deviceid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_device
    WHERE vk_deviceid = g2b(avk_deviceid);
    IF aec > 0 THEN
      SET abrief = vk_device_brief_f(g2b(avk_deviceid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_device_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_client_trigger(acursession varchar(38),
aVK_DEVICEid integer)
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_device_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_device (vk_deviceid
    , instanceid
    , title)
      SELECT
        copymap(acopyaction, b2g(vk_deviceid)),
        copymap(acopyaction, b2g(instanceid)),
        title

      FROM vk_device
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_device_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_delete(acursession varchar(38),
avk_deviceid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_device
    WHERE vk_deviceid = g2b(avk_deviceid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vddev.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_device' result;
        LEAVE body;
      END IF;
      CALL vk_device_logger(acursession, avk_deviceid);
      DELETE
        FROM vk_device
      WHERE vk_deviceid = g2b(avk_deviceid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_device'
        AND ownerrowid = g2b(avk_deviceid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_device_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_device
    WHERE vk_deviceid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_device_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_device_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_device
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_deviceid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_device
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_deviceid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_device_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_logger(acursession varchar(38),
avk_deviceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_device_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_device
    WHERE vk_deviceid = arowid;
  END
$$

--
-- Создать процедуру "vk_device_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_save(acursession varchar(38),
ainstanceid varchar(38),
avk_deviceid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_device
    WHERE vk_deviceid = g2b(avk_deviceid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vddev.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_device' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_device_logger(acursession, avk_deviceid);
        UPDATE vk_device
        SET changestamp = now(),
            title = atitle
        WHERE vk_deviceid = g2b(avk_deviceid);


        CALL vk_device_client_trigger(acursession, avk_deviceid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vddev.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_device' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_device (changestamp, vk_deviceid
          , instanceid
          , title)
            VALUES (now(), g2b(avk_deviceid), g2b(ainstanceid), atitle);


          CALL vk_device_client_trigger(acursession, avk_deviceid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_device_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_device_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_device_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_device
      SET lockuserid = NULL
      WHERE vk_deviceid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_device
      SET locksessionid = NULL
      WHERE vk_deviceid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_interest_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_brief(acursession varchar(38),
avk_interestid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_interestid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_interest
    WHERE vk_interestid = g2b(avk_interestid);
    IF aec > 0 THEN
      SET abrief = vk_interest_brief_f(g2b(avk_interestid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_interest_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_client_trigger(acursession varchar(38),
aVK_INTERESTid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_interest_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_interest (vk_interestid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_interestid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_interest
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_interest_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_delete(acursession varchar(38),
avk_interestid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_interest
    WHERE vk_interestid = g2b(avk_interestid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdinter.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_interest' result;
        LEAVE body;
      END IF;
      CALL vk_interest_logger(acursession, avk_interestid);
      DELETE
        FROM vk_interest
      WHERE vk_interestid = g2b(avk_interestid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_interest'
        AND ownerrowid = g2b(avk_interestid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_interest_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_interest
    WHERE vk_interestid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_interest_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_interest_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_interest
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_interestid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_interest
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_interestid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_interest_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_logger(acursession varchar(38),
avk_interestid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_interest_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_interest
    WHERE vk_interestid = arowid;
  END
$$

--
-- Создать процедуру "vk_interest_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_save(acursession varchar(38),
ainstanceid varchar(38),
avk_interestid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* vkid *//* vkid */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_interest
    WHERE vk_interestid = g2b(avk_interestid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdinter.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_interest' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_interest_logger(acursession, avk_interestid);
        UPDATE vk_interest
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_interestid = g2b(avk_interestid);


        CALL vk_interest_client_trigger(acursession, avk_interestid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdinter.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_interest' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_interest (changestamp, vk_interestid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_interestid), g2b(ainstanceid), atitle, avkid);


          CALL vk_interest_client_trigger(acursession, avk_interestid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_interest_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_interest_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_interest_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_interest
      SET lockuserid = NULL
      WHERE vk_interestid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_interest
      SET locksessionid = NULL
      WHERE vk_interestid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_brief(acursession varchar(38),
avk_matrialstatusid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_matrialstatusid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = g2b(avk_matrialstatusid);
    IF aec > 0 THEN
      SET abrief = vk_matrialstatus_brief_f(g2b(avk_matrialstatusid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_matrialstatus_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_client_trigger(acursession varchar(38),
aVK_MATRIALSTATUSid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_matrialstatus_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_matrialstatus (vk_matrialstatusid
    , instanceid
    , vkid

    , title)
      SELECT
        copymap(acopyaction, b2g(vk_matrialstatusid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        title

      FROM vk_matrialstatus
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_matrialstatus_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_delete(acursession varchar(38),
avk_matrialstatusid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = g2b(avk_matrialstatusid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdmstat.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_matrialstatus' result;
        LEAVE body;
      END IF;
      CALL vk_matrialstatus_logger(acursession, avk_matrialstatusid);
      DELETE
        FROM vk_matrialstatus
      WHERE vk_matrialstatusid = g2b(avk_matrialstatusid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_matrialstatus'
        AND ownerrowid = g2b(avk_matrialstatusid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_matrialstatus_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_matrialstatus
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_matrialstatusid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_matrialstatus
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_matrialstatusid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_logger(acursession varchar(38),
avk_matrialstatusid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = arowid;
  END
$$

--
-- Создать процедуру "vk_matrialstatus_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_save(acursession varchar(38),
ainstanceid varchar(38),
avk_matrialstatusid varchar(38)
, avkid
integer/* id *//* id */
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = g2b(avk_matrialstatusid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdmstat.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_matrialstatus' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_matrialstatus_logger(acursession, avk_matrialstatusid);
        UPDATE vk_matrialstatus
        SET changestamp = now(),
            vkid = avkid,
            title = atitle
        WHERE vk_matrialstatusid = g2b(avk_matrialstatusid);


        CALL vk_matrialstatus_client_trigger(acursession, avk_matrialstatusid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdmstat.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_matrialstatus' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_matrialstatus (changestamp, vk_matrialstatusid
          , instanceid
          , vkid

          , title)
            VALUES (now(), g2b(avk_matrialstatusid), g2b(ainstanceid), avkid, atitle);


          CALL vk_matrialstatus_client_trigger(acursession, avk_matrialstatusid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_matrialstatus_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_matrialstatus_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_matrialstatus_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_matrialstatus
      SET lockuserid = NULL
      WHERE vk_matrialstatusid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_matrialstatus
      SET locksessionid = NULL
      WHERE vk_matrialstatusid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_os_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_brief(acursession varchar(38),
avk_osid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_osid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_os
    WHERE vk_osid = g2b(avk_osid);
    IF aec > 0 THEN
      SET abrief = vk_os_brief_f(g2b(avk_osid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_os_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_client_trigger(acursession varchar(38),
aVK_OSid integer)
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_os_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_os (vk_osid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_osid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_os
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_os_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_delete(acursession varchar(38),
avk_osid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_os
    WHERE vk_osid = g2b(avk_osid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdos.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_os' result;
        LEAVE body;
      END IF;
      CALL vk_os_logger(acursession, avk_osid);
      DELETE
        FROM vk_os
      WHERE vk_osid = g2b(avk_osid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_os'
        AND ownerrowid = g2b(avk_osid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_os_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_os
    WHERE vk_osid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_os_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_os_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_os
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_osid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_os
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_osid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_os_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_logger(acursession varchar(38),
avk_osid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_os_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_os
    WHERE vk_osid = arowid;
  END
$$

--
-- Создать процедуру "vk_os_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_save(acursession varchar(38),
ainstanceid varchar(38),
avk_osid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* vkid *//* vkid */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_os
    WHERE vk_osid = g2b(avk_osid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdos.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_os' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_os_logger(acursession, avk_osid);
        UPDATE vk_os
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_osid = g2b(avk_osid);


        CALL vk_os_client_trigger(acursession, avk_osid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdos.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_os' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_os (changestamp, vk_osid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_osid), g2b(ainstanceid), atitle, avkid);


          CALL vk_os_client_trigger(acursession, avk_osid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_os_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_os_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_os_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_os
      SET lockuserid = NULL
      WHERE vk_osid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_os
      SET locksessionid = NULL
      WHERE vk_osid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_paytype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_brief(acursession varchar(38),
avk_paytypeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_paytypeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_paytype
    WHERE vk_paytypeid = g2b(avk_paytypeid);
    IF aec > 0 THEN
      SET abrief = vk_paytype_brief_f(g2b(avk_paytypeid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_paytype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_client_trigger(acursession varchar(38),
aVK_PAYTYPEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_paytype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_paytype (vk_paytypeid
    , instanceid
    , vkid

    , title)
      SELECT
        copymap(acopyaction, b2g(vk_paytypeid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        title

      FROM vk_paytype
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_paytype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_delete(acursession varchar(38),
avk_paytypeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_paytype
    WHERE vk_paytypeid = g2b(avk_paytypeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdpt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_paytype' result;
        LEAVE body;
      END IF;
      CALL vk_paytype_logger(acursession, avk_paytypeid);
      DELETE
        FROM vk_paytype
      WHERE vk_paytypeid = g2b(avk_paytypeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_paytype'
        AND ownerrowid = g2b(avk_paytypeid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_paytype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_paytype
    WHERE vk_paytypeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_paytype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_paytype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_paytype
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_paytypeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_paytype
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_paytypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_paytype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_logger(acursession varchar(38),
avk_paytypeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_paytype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_paytype
    WHERE vk_paytypeid = arowid;
  END
$$

--
-- Создать процедуру "vk_paytype_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_save(acursession varchar(38),
ainstanceid varchar(38),
avk_paytypeid varchar(38)
, avkid
integer/* id *//* id */
, atitle
varchar(255)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_paytype
    WHERE vk_paytypeid = g2b(avk_paytypeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdpt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_paytype' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_paytype_logger(acursession, avk_paytypeid);
        UPDATE vk_paytype
        SET changestamp = now(),
            vkid = avkid,
            title = atitle
        WHERE vk_paytypeid = g2b(avk_paytypeid);


        CALL vk_paytype_client_trigger(acursession, avk_paytypeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdpt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_paytype' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_paytype (changestamp, vk_paytypeid
          , instanceid
          , vkid

          , title)
            VALUES (now(), g2b(avk_paytypeid), g2b(ainstanceid), avkid, atitle);


          CALL vk_paytype_client_trigger(acursession, avk_paytypeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_paytype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_paytype_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_paytype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_paytype
      SET lockuserid = NULL
      WHERE vk_paytypeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_paytype
      SET locksessionid = NULL
      WHERE vk_paytypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_platform_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_brief(acursession varchar(38),
avk_platformid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_platformid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_platform
    WHERE vk_platformid = g2b(avk_platformid);
    IF aec > 0 THEN
      SET abrief = vk_platform_brief_f(g2b(avk_platformid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_platform_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_client_trigger(acursession varchar(38),
aVK_PLATFORMid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_platform_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_platform (vk_platformid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_platformid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_platform
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_platform_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_delete(acursession varchar(38),
avk_platformid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_platform
    WHERE vk_platformid = g2b(avk_platformid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdapl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_platform' result;
        LEAVE body;
      END IF;
      CALL vk_platform_logger(acursession, avk_platformid);
      DELETE
        FROM vk_platform
      WHERE vk_platformid = g2b(avk_platformid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_platform'
        AND ownerrowid = g2b(avk_platformid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_platform_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_platform
    WHERE vk_platformid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_platform_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_platform_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_platform
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_platformid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_platform
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_platformid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_platform_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_logger(acursession varchar(38),
avk_platformid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_platform_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_platform
    WHERE vk_platformid = arowid;
  END
$$

--
-- Создать процедуру "vk_platform_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_save(acursession varchar(38),
ainstanceid varchar(38),
avk_platformid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_platform
    WHERE vk_platformid = g2b(avk_platformid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdapl.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_platform' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_platform_logger(acursession, avk_platformid);
        UPDATE vk_platform
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_platformid = g2b(avk_platformid);


        CALL vk_platform_client_trigger(acursession, avk_platformid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdapl.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_platform' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_platform (changestamp, vk_platformid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_platformid), g2b(ainstanceid), atitle, avkid);


          CALL vk_platform_client_trigger(acursession, avk_platformid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_platform_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_platform_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_platform_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_platform
      SET lockuserid = NULL
      WHERE vk_platformid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_platform
      SET locksessionid = NULL
      WHERE vk_platformid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_position_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_brief(acursession varchar(38),
avk_positionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_positionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_position
    WHERE vk_positionid = g2b(avk_positionid);
    IF aec > 0 THEN
      SET abrief = vk_position_brief_f(g2b(avk_positionid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_position_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_client_trigger(acursession varchar(38),
aVK_POSITIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_position_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_position (vk_positionid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_positionid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_position
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_position_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_delete(acursession varchar(38),
avk_positionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_position
    WHERE vk_positionid = g2b(avk_positionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdpos.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_position' result;
        LEAVE body;
      END IF;
      CALL vk_position_logger(acursession, avk_positionid);
      DELETE
        FROM vk_position
      WHERE vk_positionid = g2b(avk_positionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_position'
        AND ownerrowid = g2b(avk_positionid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_position_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_position
    WHERE vk_positionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_position_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_position_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_position
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_positionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_position
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_positionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_position_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_logger(acursession varchar(38),
avk_positionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_position_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_position
    WHERE vk_positionid = arowid;
  END
$$

--
-- Создать процедуру "vk_position_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_save(acursession varchar(38),
ainstanceid varchar(38),
avk_positionid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* vkid *//* vkid */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_position
    WHERE vk_positionid = g2b(avk_positionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdpos.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_position' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_position_logger(acursession, avk_positionid);
        UPDATE vk_position
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_positionid = g2b(avk_positionid);


        CALL vk_position_client_trigger(acursession, avk_positionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdpos.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_position' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_position (changestamp, vk_positionid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_positionid), g2b(ainstanceid), atitle, avkid);


          CALL vk_position_client_trigger(acursession, avk_positionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_position_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_position_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_position_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_position
      SET lockuserid = NULL
      WHERE vk_positionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_position
      SET locksessionid = NULL
      WHERE vk_positionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prjowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_brief(acursession varchar(38),
avk_prjownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_prjownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_prjowner
    WHERE vk_prjownerid = g2b(avk_prjownerid);
    IF aec > 0 THEN
      SET abrief = vk_prjowner_brief_f(g2b(avk_prjownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_prjowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_client_trigger(acursession varchar(38),
aVK_PRJOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_prjowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_prjowner (vk_prjownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_prjownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_prjowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_prjowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_delete(acursession varchar(38),
avk_prjownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_prjowner
    WHERE vk_prjownerid = g2b(avk_prjownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkprj.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_prjowner' result;
        LEAVE body;
      END IF;
      CALL vk_prjowner_logger(acursession, avk_prjownerid);
      DELETE
        FROM vk_prjowner
      WHERE vk_prjownerid = g2b(avk_prjownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_prjowner'
        AND ownerrowid = g2b(avk_prjownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_prjowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_prjowner
    WHERE vk_prjownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_prjowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_prjowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_prjowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_prjownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_prjowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_prjownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prjowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_logger(acursession varchar(38),
avk_prjownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prjowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_prjowner
    WHERE vk_prjownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_prjowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_prjownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_prjowner
    WHERE vk_prjownerid = g2b(avk_prjownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkprj.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_prjowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_prjowner_logger(acursession, avk_prjownerid);
        UPDATE vk_prjowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_prjownerid = g2b(avk_prjownerid);


        CALL vk_prjowner_client_trigger(acursession, avk_prjownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkprj.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_prjowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_prjowner (changestamp, vk_prjownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_prjownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_prjowner_client_trigger(acursession, avk_prjownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_prjowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prjowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_prjowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_prjowner
      SET lockuserid = NULL
      WHERE vk_prjownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_prjowner
      SET locksessionid = NULL
      WHERE vk_prjownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prj_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_brief(acursession varchar(38),
avk_prjid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_prjid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_prj
    WHERE vk_prjid = g2b(avk_prjid);
    IF aec > 0 THEN
      SET abrief = vk_prj_brief_f(g2b(avk_prjid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_prj_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_client_trigger(acursession varchar(38),
aVK_PRJid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_prj_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_prj (vk_prjid
    , instanceid
    , title

    , info)
      SELECT
        copymap(acopyaction, b2g(vk_prjid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        info

      FROM vk_prj
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_prj_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_delete(acursession varchar(38),
avk_prjid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_prj
    WHERE vk_prjid = g2b(avk_prjid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkprj.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_prj' result;
        LEAVE body;
      END IF;
      CALL vk_prj_logger(acursession, avk_prjid);
      DELETE
        FROM vk_prj
      WHERE vk_prjid = g2b(avk_prjid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_prj'
        AND ownerrowid = g2b(avk_prjid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_prj_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_prj
    WHERE vk_prjid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_prj_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_prj_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_prj
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_prjid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_prj
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_prjid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prj_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_logger(acursession varchar(38),
avk_prjid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_prj_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_prj
    WHERE vk_prjid = arowid;
  END
$$

--
-- Создать процедуру "vk_prj_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_save(acursession varchar(38),
ainstanceid varchar(38),
avk_prjid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, ainfo
varchar(4096)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_prj
    WHERE vk_prjid = g2b(avk_prjid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkprj.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_prj' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_prj_logger(acursession, avk_prjid);
        UPDATE vk_prj
        SET changestamp = now(),
            title = atitle,
            info = ainfo
        WHERE vk_prjid = g2b(avk_prjid);


        CALL vk_prj_client_trigger(acursession, avk_prjid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkprj.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_prj' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_prj
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_prj>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_prj (changestamp, vk_prjid
          , instanceid
          , title

          , info)
            VALUES (now(), g2b(avk_prjid), g2b(ainstanceid), atitle, ainfo);


          CALL vk_prj_client_trigger(acursession, avk_prjid);

          CALL vkprj_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_prj_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_prj_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_prj_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_prj
      SET lockuserid = NULL
      WHERE vk_prjid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_prj
      SET locksessionid = NULL
      WHERE vk_prjid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_region_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_brief(acursession varchar(38),
avk_regionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_regionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_region
    WHERE vk_regionid = g2b(avk_regionid);
    IF aec > 0 THEN
      SET abrief = vk_region_brief_f(g2b(avk_regionid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_region_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_client_trigger(acursession varchar(38),
aVK_REGIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_region_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_region (vk_regionid
    , instanceid
    , title

    , vkid

    , country_id)
      SELECT
        copymap(acopyaction, b2g(vk_regionid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid,
        country_id

      FROM vk_region
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_region_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_delete(acursession varchar(38),
avk_regionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_region
    WHERE vk_regionid = g2b(avk_regionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_region' result;
        LEAVE body;
      END IF;
      CALL vk_region_logger(acursession, avk_regionid);
      DELETE
        FROM vk_region
      WHERE vk_regionid = g2b(avk_regionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_region'
        AND ownerrowid = g2b(avk_regionid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_region_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_region
    WHERE vk_regionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_region_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_region_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_region
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_regionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_region
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_regionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_region_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_logger(acursession varchar(38),
avk_regionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_region_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_region
    WHERE vk_regionid = arowid;
  END
$$

--
-- Создать процедуру "vk_region_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_save(acursession varchar(38),
ainstanceid varchar(38),
avk_regionid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
, acountry_id varchar(38)/* ?????? *//* ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_region
    WHERE vk_regionid = g2b(avk_regionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_region' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_region_logger(acursession, avk_regionid);
        UPDATE vk_region
        SET changestamp = now(),
            title = atitle,
            vkid = avkid,
            country_id = g2b(acountry_id)
        WHERE vk_regionid = g2b(avk_regionid);


        CALL vk_region_client_trigger(acursession, avk_regionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdrg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_region' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_region (changestamp, vk_regionid
          , instanceid
          , title

          , vkid

          , country_id)
            VALUES (now(), g2b(avk_regionid), g2b(ainstanceid), atitle, avkid, g2b(acountry_id));


          CALL vk_region_client_trigger(acursession, avk_regionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_region_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_region_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_region_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_region
      SET lockuserid = NULL
      WHERE vk_regionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_region
      SET locksessionid = NULL
      WHERE vk_regionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_religion_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_brief(acursession varchar(38),
avk_religionid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_religionid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_religion
    WHERE vk_religionid = g2b(avk_religionid);
    IF aec > 0 THEN
      SET abrief = vk_religion_brief_f(g2b(avk_religionid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_religion_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_client_trigger(acursession varchar(38),
aVK_RELIGIONid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_religion_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_religion (vk_religionid
    , instanceid
    , title

    , vkid)
      SELECT
        copymap(acopyaction, b2g(vk_religionid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid

      FROM vk_religion
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_religion_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_delete(acursession varchar(38),
avk_religionid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_religion
    WHERE vk_religionid = g2b(avk_religionid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdrel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_religion' result;
        LEAVE body;
      END IF;
      CALL vk_religion_logger(acursession, avk_religionid);
      DELETE
        FROM vk_religion
      WHERE vk_religionid = g2b(avk_religionid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_religion'
        AND ownerrowid = g2b(avk_religionid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_religion_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_religion
    WHERE vk_religionid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_religion_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_religion_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_religion
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_religionid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_religion
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_religionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_religion_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_logger(acursession varchar(38),
avk_religionid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_religion_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_religion
    WHERE vk_religionid = arowid;
  END
$$

--
-- Создать процедуру "vk_religion_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_save(acursession varchar(38),
ainstanceid varchar(38),
avk_religionid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* vkid *//* vkid */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_religion
    WHERE vk_religionid = g2b(avk_religionid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdrel.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_religion' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_religion_logger(acursession, avk_religionid);
        UPDATE vk_religion
        SET changestamp = now(),
            title = atitle,
            vkid = avkid
        WHERE vk_religionid = g2b(avk_religionid);


        CALL vk_religion_client_trigger(acursession, avk_religionid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdrel.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_religion' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_religion (changestamp, vk_religionid
          , instanceid
          , title

          , vkid)
            VALUES (now(), g2b(avk_religionid), g2b(ainstanceid), atitle, avkid);


          CALL vk_religion_client_trigger(acursession, avk_religionid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_religion_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_religion_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_religion_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_religion
      SET lockuserid = NULL
      WHERE vk_religionid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_religion
      SET locksessionid = NULL
      WHERE vk_religionid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotads_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_brief(acursession varchar(38),
avk_rotadsid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_rotadsid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_rotads
    WHERE vk_rotadsid = g2b(avk_rotadsid);
    IF aec > 0 THEN
      SET abrief = vk_rotads_brief_f(g2b(avk_rotadsid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_rotads_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_client_trigger(acursession varchar(38),
aVK_ROTADSid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_rotads_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_rotads (vk_rotadsid
    , instanceid
    , ads

    , adweight)
      SELECT
        copymap(acopyaction, b2g(vk_rotadsid)),
        copymap(acopyaction, b2g(instanceid)),
        ads,
        adweight

      FROM vk_rotads
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_rotads_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_delete(acursession varchar(38),
avk_rotadsid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotads
    WHERE vk_rotadsid = g2b(avk_rotadsid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_rotads' result;
        LEAVE body;
      END IF;
      CALL vk_rotads_logger(acursession, avk_rotadsid);
      DELETE
        FROM vk_rotads
      WHERE vk_rotadsid = g2b(avk_rotadsid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_rotads'
        AND ownerrowid = g2b(avk_rotadsid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_rotads_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_rotads
    WHERE vk_rotadsid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_rotads_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotads_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_rotads
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_rotadsid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_rotads
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_rotadsid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotads_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_logger(acursession varchar(38),
avk_rotadsid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotads_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_rotads
    WHERE vk_rotadsid = arowid;
  END
$$

--
-- Создать процедуру "vk_rotads_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_save(acursession varchar(38),
ainstanceid varchar(38),
avk_rotadsid varchar(38)
, aads varchar(38)/* ?????????? *//* ?????????? */
, aadweight
integer/* ??? ?????????? *//* ??? ?????????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotads
    WHERE vk_rotadsid = g2b(avk_rotadsid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_rotads' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_rotads_logger(acursession, avk_rotadsid);
        UPDATE vk_rotads
        SET changestamp = now(),
            ads = g2b(aads),
            adweight = aadweight
        WHERE vk_rotadsid = g2b(avk_rotadsid);


        CALL vk_rotads_client_trigger(acursession, avk_rotadsid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkrot.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_rotads' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_rotads (changestamp, vk_rotadsid
          , instanceid
          , ads

          , adweight)
            VALUES (now(), g2b(avk_rotadsid), g2b(ainstanceid), g2b(aads), aadweight);


          CALL vk_rotads_client_trigger(acursession, avk_rotadsid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_rotads_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotads_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotads_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_rotads
      SET lockuserid = NULL
      WHERE vk_rotadsid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_rotads
      SET locksessionid = NULL
      WHERE vk_rotadsid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotinfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_brief(acursession varchar(38),
avk_rotinfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_rotinfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_rotinfo
    WHERE vk_rotinfoid = g2b(avk_rotinfoid);
    IF aec > 0 THEN
      SET abrief = vk_rotinfo_brief_f(g2b(avk_rotinfoid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_rotinfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_client_trigger(acursession varchar(38),
aVK_ROTINFOid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_rotinfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_rotinfo (vk_rotinfoid
    , instanceid
    , name

    , campaign_id

    , status

    , _description)
      SELECT
        copymap(acopyaction, b2g(vk_rotinfoid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        campaign_id,
        status,
        _description

      FROM vk_rotinfo
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_rotinfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_delete(acursession varchar(38),
avk_rotinfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotinfo
    WHERE vk_rotinfoid = g2b(avk_rotinfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_rotinfo' result;
        LEAVE body;
      END IF;
      CALL vk_rotinfo_logger(acursession, avk_rotinfoid);
      DELETE
        FROM vk_rotinfo
      WHERE vk_rotinfoid = g2b(avk_rotinfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_rotinfo'
        AND ownerrowid = g2b(avk_rotinfoid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_rotinfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_rotinfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_rotinfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_rotinfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_rotinfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_rotinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotinfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_logger(acursession varchar(38),
avk_rotinfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotinfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = arowid;
  END
$$

--
-- Создать процедуру "vk_rotinfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_save(acursession varchar(38),
ainstanceid varchar(38),
avk_rotinfoid varchar(38)
, aname
varchar(255)/* ???????? *//* ???????? */
, acampaign_id varchar(38)/* ????????? ???????? *//* ????????? ???????? */
, astatus varchar(38)/* ?????? *//* ?????? */
, a_description
varchar(4096)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotinfo
    WHERE vk_rotinfoid = g2b(avk_rotinfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_rotinfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_rotinfo_logger(acursession, avk_rotinfoid);
        UPDATE vk_rotinfo
        SET changestamp = now(),
            name = aname,
            campaign_id = g2b(acampaign_id),
            status = g2b(astatus),
            _description = a_description
        WHERE vk_rotinfoid = g2b(avk_rotinfoid);


        CALL vk_rotinfo_client_trigger(acursession, avk_rotinfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkrot.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_rotinfo' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_rotinfo
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_rotinfo>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_rotinfo (changestamp, vk_rotinfoid
          , instanceid
          , name

          , campaign_id

          , status

          , _description)
            VALUES (now(), g2b(avk_rotinfoid), g2b(ainstanceid), aname, g2b(acampaign_id), g2b(astatus), a_description);


          CALL vk_rotinfo_client_trigger(acursession, avk_rotinfoid);

          CALL vkrot_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_rotinfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotinfo_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_rotinfo
      SET lockuserid = NULL
      WHERE vk_rotinfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_rotinfo
      SET locksessionid = NULL
      WHERE vk_rotinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_brief(acursession varchar(38),
avk_rotownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_rotownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_rotowner
    WHERE vk_rotownerid = g2b(avk_rotownerid);
    IF aec > 0 THEN
      SET abrief = vk_rotowner_brief_f(g2b(avk_rotownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_rotowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_client_trigger(acursession varchar(38),
aVK_ROTOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_rotowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_rotowner (vk_rotownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_rotownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_rotowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_rotowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_delete(acursession varchar(38),
avk_rotownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotowner
    WHERE vk_rotownerid = g2b(avk_rotownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_rotowner' result;
        LEAVE body;
      END IF;
      CALL vk_rotowner_logger(acursession, avk_rotownerid);
      DELETE
        FROM vk_rotowner
      WHERE vk_rotownerid = g2b(avk_rotownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_rotowner'
        AND ownerrowid = g2b(avk_rotownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_rotowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_rotowner
    WHERE vk_rotownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_rotowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_rotowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_rotownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_rotowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_rotownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_logger(acursession varchar(38),
avk_rotownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_rotowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_rotowner
    WHERE vk_rotownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_rotowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_rotownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_rotowner
    WHERE vk_rotownerid = g2b(avk_rotownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkrot.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_rotowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_rotowner_logger(acursession, avk_rotownerid);
        UPDATE vk_rotowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_rotownerid = g2b(avk_rotownerid);


        CALL vk_rotowner_client_trigger(acursession, avk_rotownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkrot.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_rotowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_rotowner (changestamp, vk_rotownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_rotownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_rotowner_client_trigger(acursession, avk_rotownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_rotowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_rotowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_rotowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_rotowner
      SET lockuserid = NULL
      WHERE vk_rotownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_rotowner
      SET locksessionid = NULL
      WHERE vk_rotownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskinfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_brief(acursession varchar(38),
avk_taskinfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_taskinfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_taskinfo
    WHERE vk_taskinfoid = g2b(avk_taskinfoid);
    IF aec > 0 THEN
      SET abrief = vk_taskinfo_brief_f(g2b(avk_taskinfoid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_taskinfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_client_trigger(acursession varchar(38),
aVK_TASKINFOid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_taskinfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_taskinfo (vk_taskinfoid
    , instanceid
    , tasktype

    , name

    , crdate

    , repeat_interval

    , lastdate

    , result

    , isdone

    , cab

    , camp

    , ads

    , rotation)
      SELECT
        copymap(acopyaction, b2g(vk_taskinfoid)),
        copymap(acopyaction, b2g(instanceid)),
        tasktype,
        name,
        crdate,
        repeat_interval,
        lastdate,
        result,
        isdone,
        cab,
        camp,
        ads,
        rotation

      FROM vk_taskinfo
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_taskinfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_delete(acursession varchar(38),
avk_taskinfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskinfo
    WHERE vk_taskinfoid = g2b(avk_taskinfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_taskinfo' result;
        LEAVE body;
      END IF;
      CALL vk_taskinfo_logger(acursession, avk_taskinfoid);
      DELETE
        FROM vk_taskinfo
      WHERE vk_taskinfoid = g2b(avk_taskinfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_taskinfo'
        AND ownerrowid = g2b(avk_taskinfoid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_taskinfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_taskinfo
    WHERE vk_taskinfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_taskinfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_taskinfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_taskinfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_taskinfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_taskinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskinfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_logger(acursession varchar(38),
avk_taskinfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskinfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_taskinfo
    WHERE vk_taskinfoid = arowid;
  END
$$

--
-- Создать процедуру "vk_taskinfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_save(acursession varchar(38),
ainstanceid varchar(38),
avk_taskinfoid varchar(38)
, atasktype varchar(38)/* ??? ?????? *//* ??? ?????? */
, aname
varchar(255)/* ???????? *//* ???????? */
, acrdate
datetime/* ???? ???????? *//* ???? ???????? */
, arepeat_interval
integer/* ????? ??????? (???) *//* ????? ??????? (???) */
, alastdate
datetime/* ????  ?????????? *//* ????  ?????????? */
, aresult
varchar(255)/* ????????? *//* ????????? */
, aisdone
integer/* ????????? *//* ????????? */
, acab varchar(38)/* ??????? *//* ??????? */
, acamp varchar(38)/* ???????? *//* ???????? */
, aads varchar(38)/* ?????????? *//* ?????????? */
, arotation varchar(38)/* ??????? *//* ??????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskinfo
    WHERE vk_taskinfoid = g2b(avk_taskinfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_taskinfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_taskinfo_logger(acursession, avk_taskinfoid);
        UPDATE vk_taskinfo
        SET changestamp = now(),
            tasktype = g2b(atasktype),
            name = aname,
            crdate = acrdate,
            repeat_interval = arepeat_interval,
            lastdate = alastdate,
            result = aresult,
            isdone = aisdone,
            cab = g2b(acab),
            camp = g2b(acamp),
            ads = g2b(aads),
            rotation = g2b(arotation)
        WHERE vk_taskinfoid = g2b(avk_taskinfoid);


        CALL vk_taskinfo_client_trigger(acursession, avk_taskinfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktsk.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_taskinfo' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_taskinfo
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_taskinfo>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_taskinfo (changestamp, vk_taskinfoid
          , instanceid
          , tasktype

          , name

          , crdate

          , repeat_interval

          , lastdate

          , result

          , isdone

          , cab

          , camp

          , ads

          , rotation)
            VALUES (now(), g2b(avk_taskinfoid), g2b(ainstanceid), g2b(atasktype), aname, acrdate, arepeat_interval, alastdate, aresult, aisdone, g2b(acab), g2b(acamp), g2b(aads), g2b(arotation));


          CALL vk_taskinfo_client_trigger(acursession, avk_taskinfoid);

          CALL vktsk_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_taskinfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskinfo_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskinfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_taskinfo
      SET lockuserid = NULL
      WHERE vk_taskinfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_taskinfo
      SET locksessionid = NULL
      WHERE vk_taskinfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskmsg_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_brief(acursession varchar(38),
avk_taskmsgid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_taskmsgid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_taskmsg
    WHERE vk_taskmsgid = g2b(avk_taskmsgid);
    IF aec > 0 THEN
      SET abrief = vk_taskmsg_brief_f(g2b(avk_taskmsgid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_taskmsg_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_client_trigger(acursession varchar(38),
aVK_TASKMSGid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_taskmsg_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_taskmsg (vk_taskmsgid
    , instanceid
    , msgdate

    , info

    , okmsg)
      SELECT
        copymap(acopyaction, b2g(vk_taskmsgid)),
        copymap(acopyaction, b2g(instanceid)),
        msgdate,
        info,
        okmsg

      FROM vk_taskmsg
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_taskmsg_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_delete(acursession varchar(38),
avk_taskmsgid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskmsg
    WHERE vk_taskmsgid = g2b(avk_taskmsgid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_taskmsg' result;
        LEAVE body;
      END IF;
      CALL vk_taskmsg_logger(acursession, avk_taskmsgid);
      DELETE
        FROM vk_taskmsg
      WHERE vk_taskmsgid = g2b(avk_taskmsgid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_taskmsg'
        AND ownerrowid = g2b(avk_taskmsgid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_taskmsg_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_taskmsg
    WHERE vk_taskmsgid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_taskmsg_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskmsg_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_taskmsg
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_taskmsgid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_taskmsg
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_taskmsgid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskmsg_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_logger(acursession varchar(38),
avk_taskmsgid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskmsg_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_taskmsg
    WHERE vk_taskmsgid = arowid;
  END
$$

--
-- Создать процедуру "vk_taskmsg_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_save(acursession varchar(38),
ainstanceid varchar(38),
avk_taskmsgid varchar(38)
, amsgdate
datetime/* ???? ????????? *//* ???? ????????? */
, ainfo
varchar(255)/* ????????? *//* ????????? */
, aokmsg
integer/* ??????? *//* ??????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskmsg
    WHERE vk_taskmsgid = g2b(avk_taskmsgid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_taskmsg' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_taskmsg_logger(acursession, avk_taskmsgid);
        UPDATE vk_taskmsg
        SET changestamp = now(),
            msgdate = amsgdate,
            info = ainfo,
            okmsg = aokmsg
        WHERE vk_taskmsgid = g2b(avk_taskmsgid);


        CALL vk_taskmsg_client_trigger(acursession, avk_taskmsgid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktsk.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_taskmsg' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_taskmsg (changestamp, vk_taskmsgid
          , instanceid
          , msgdate

          , info

          , okmsg)
            VALUES (now(), g2b(avk_taskmsgid), g2b(ainstanceid), amsgdate, ainfo, aokmsg);


          CALL vk_taskmsg_client_trigger(acursession, avk_taskmsgid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_taskmsg_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskmsg_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskmsg_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_taskmsg
      SET lockuserid = NULL
      WHERE vk_taskmsgid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_taskmsg
      SET locksessionid = NULL
      WHERE vk_taskmsgid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_brief(acursession varchar(38),
avk_taskownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_taskownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_taskowner
    WHERE vk_taskownerid = g2b(avk_taskownerid);
    IF aec > 0 THEN
      SET abrief = vk_taskowner_brief_f(g2b(avk_taskownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_taskowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_client_trigger(acursession varchar(38),
aVK_TASKOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_taskowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_taskowner (vk_taskownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_taskownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_taskowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_taskowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_delete(acursession varchar(38),
avk_taskownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskowner
    WHERE vk_taskownerid = g2b(avk_taskownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_taskowner' result;
        LEAVE body;
      END IF;
      CALL vk_taskowner_logger(acursession, avk_taskownerid);
      DELETE
        FROM vk_taskowner
      WHERE vk_taskownerid = g2b(avk_taskownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_taskowner'
        AND ownerrowid = g2b(avk_taskownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_taskowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_taskowner
    WHERE vk_taskownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_taskowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_taskowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_taskownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_taskowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_taskownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_logger(acursession varchar(38),
avk_taskownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_taskowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_taskowner
    WHERE vk_taskownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_taskowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_taskownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_taskowner
    WHERE vk_taskownerid = g2b(avk_taskownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktsk.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_taskowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_taskowner_logger(acursession, avk_taskownerid);
        UPDATE vk_taskowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_taskownerid = g2b(avk_taskownerid);


        CALL vk_taskowner_client_trigger(acursession, avk_taskownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktsk.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_taskowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_taskowner (changestamp, vk_taskownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_taskownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_taskowner_client_trigger(acursession, avk_taskownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_taskowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_taskowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_taskowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_taskowner
      SET lockuserid = NULL
      WHERE vk_taskownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_taskowner
      SET locksessionid = NULL
      WHERE vk_taskownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_tasktype_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_brief(acursession varchar(38),
avk_tasktypeid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_tasktypeid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_tasktype
    WHERE vk_tasktypeid = g2b(avk_tasktypeid);
    IF aec > 0 THEN
      SET abrief = vk_tasktype_brief_f(g2b(avk_tasktypeid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_tasktype_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_client_trigger(acursession varchar(38),
aVK_TASKTYPEid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_tasktype_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_tasktype (vk_tasktypeid
    , instanceid
    , title

    , repeatabletask)
      SELECT
        copymap(acopyaction, b2g(vk_tasktypeid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        repeatabletask

      FROM vk_tasktype
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_tasktype_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_delete(acursession varchar(38),
avk_tasktypeid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_tasktype
    WHERE vk_tasktypeid = g2b(avk_tasktypeid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdtt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_tasktype' result;
        LEAVE body;
      END IF;
      CALL vk_tasktype_logger(acursession, avk_tasktypeid);
      DELETE
        FROM vk_tasktype
      WHERE vk_tasktypeid = g2b(avk_tasktypeid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_tasktype'
        AND ownerrowid = g2b(avk_tasktypeid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_tasktype_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_tasktype
    WHERE vk_tasktypeid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_tasktype_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_tasktype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_tasktype
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_tasktypeid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_tasktype
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_tasktypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_tasktype_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_logger(acursession varchar(38),
avk_tasktypeid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_tasktype_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_tasktype
    WHERE vk_tasktypeid = arowid;
  END
$$

--
-- Создать процедуру "vk_tasktype_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_save(acursession varchar(38),
ainstanceid varchar(38),
avk_tasktypeid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, arepeatabletask
integer/* ????????????? ?????? *//* ????????????? ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_tasktype
    WHERE vk_tasktypeid = g2b(avk_tasktypeid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdtt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_tasktype' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_tasktype_logger(acursession, avk_tasktypeid);
        UPDATE vk_tasktype
        SET changestamp = now(),
            title = atitle,
            repeatabletask = arepeatabletask
        WHERE vk_tasktypeid = g2b(avk_tasktypeid);


        CALL vk_tasktype_client_trigger(acursession, avk_tasktypeid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdtt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_tasktype' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_tasktype (changestamp, vk_tasktypeid
          , instanceid
          , title

          , repeatabletask)
            VALUES (now(), g2b(avk_tasktypeid), g2b(ainstanceid), atitle, arepeatabletask);


          CALL vk_tasktype_client_trigger(acursession, avk_tasktypeid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_tasktype_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_tasktype_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_tasktype_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_tasktype
      SET lockuserid = NULL
      WHERE vk_tasktypeid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_tasktype
      SET locksessionid = NULL
      WHERE vk_tasktypeid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_town_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_brief(acursession varchar(38),
avk_townid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_townid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_town
    WHERE vk_townid = g2b(avk_townid);
    IF aec > 0 THEN
      SET abrief = vk_town_brief_f(g2b(avk_townid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_town_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_client_trigger(acursession varchar(38),
aVK_TOWNid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_town_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_town (vk_townid
    , instanceid
    , title

    , vkid

    , country_id

    , region_id)
      SELECT
        copymap(acopyaction, b2g(vk_townid)),
        copymap(acopyaction, b2g(instanceid)),
        title,
        vkid,
        country_id,
        region_id

      FROM vk_town
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_town_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_delete(acursession varchar(38),
avk_townid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_town
    WHERE vk_townid = g2b(avk_townid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vdt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_town' result;
        LEAVE body;
      END IF;
      CALL vk_town_logger(acursession, avk_townid);
      DELETE
        FROM vk_town
      WHERE vk_townid = g2b(avk_townid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_town'
        AND ownerrowid = g2b(avk_townid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_town_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_town
    WHERE vk_townid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_town_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_town_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_town
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_townid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_town
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_townid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_town_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_logger(acursession varchar(38),
avk_townid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_town_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_town
    WHERE vk_townid = arowid;
  END
$$

--
-- Создать процедуру "vk_town_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_save(acursession varchar(38),
ainstanceid varchar(38),
avk_townid varchar(38)
, atitle
varchar(255)/* ???????? *//* ???????? */
, avkid
integer/* id *//* id */
, acountry_id varchar(38)/* ?????? *//* ?????? */
, aregion_id varchar(38)/* ?????? *//* ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_town
    WHERE vk_townid = g2b(avk_townid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vdt.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_town' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_town_logger(acursession, avk_townid);
        UPDATE vk_town
        SET changestamp = now(),
            title = atitle,
            vkid = avkid,
            country_id = g2b(acountry_id),
            region_id = g2b(aregion_id)
        WHERE vk_townid = g2b(avk_townid);


        CALL vk_town_client_trigger(acursession, avk_townid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vdt.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_town' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_town (changestamp, vk_townid
          , instanceid
          , title

          , vkid

          , country_id

          , region_id)
            VALUES (now(), g2b(avk_townid), g2b(ainstanceid), atitle, avkid, g2b(acountry_id), g2b(aregion_id));


          CALL vk_town_client_trigger(acursession, avk_townid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_town_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_town_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_town_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_town
      SET lockuserid = NULL
      WHERE vk_townid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_town
      SET locksessionid = NULL
      WHERE vk_townid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgfiles_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_brief(acursession varchar(38),
avk_trgfilesid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_trgfilesid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_trgfiles
    WHERE vk_trgfilesid = g2b(avk_trgfilesid);
    IF aec > 0 THEN
      SET abrief = vk_trgfiles_brief_f(g2b(avk_trgfilesid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_trgfiles_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_client_trigger(acursession varchar(38),
aVK_TRGFILESid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_trgfiles_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_trgfiles (vk_trgfilesid
    , instanceid
    , name

    , thefile

    , thefile_ext
    , listtext)
      SELECT
        copymap(acopyaction, b2g(vk_trgfilesid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        thefile,
        thefile_ext,
        listtext

      FROM vk_trgfiles
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_trgfiles_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_delete(acursession varchar(38),
avk_trgfilesid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trgfiles
    WHERE vk_trgfilesid = g2b(avk_trgfilesid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_trgfiles' result;
        LEAVE body;
      END IF;
      CALL vk_trgfiles_logger(acursession, avk_trgfilesid);
      DELETE
        FROM vk_trgfiles
      WHERE vk_trgfilesid = g2b(avk_trgfilesid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_trgfiles'
        AND ownerrowid = g2b(avk_trgfilesid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_trgfiles_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_trgfiles
    WHERE vk_trgfilesid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_trgfiles_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trgfiles_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_trgfiles
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_trgfilesid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_trgfiles
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_trgfilesid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgfiles_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_logger(acursession varchar(38),
avk_trgfilesid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgfiles_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_trgfiles
    WHERE vk_trgfilesid = arowid;
  END
$$

--
-- Создать процедуру "vk_trgfiles_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_save(acursession varchar(38),
ainstanceid varchar(38),
avk_trgfilesid varchar(38)
, aname
varchar(255)/* ???????? *//* ???????? */
, athefile varchar(255)/* ???? */
, athefile_ext varchar(4) /* ???? */
, alisttext
text/* ????? ?????? *//* ????? ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trgfiles
    WHERE vk_trgfilesid = g2b(avk_trgfilesid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_trgfiles' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_trgfiles_logger(acursession, avk_trgfilesid);
        UPDATE vk_trgfiles
        SET changestamp = now(),
            name = aname,
            thefile = athefile,
            thefile_ext =
            athefile_ext,
            listtext = alisttext
        WHERE vk_trgfilesid = g2b(avk_trgfilesid);


        CALL vk_trgfiles_client_trigger(acursession, avk_trgfilesid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktrg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_trgfiles' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_trgfiles (changestamp, vk_trgfilesid
          , instanceid
          , name

          , thefile

          , thefile_ext
          , listtext)
            VALUES (now(), g2b(avk_trgfilesid), g2b(ainstanceid), aname, athefile, athefile_ext, alisttext);


          CALL vk_trgfiles_client_trigger(acursession, avk_trgfilesid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_trgfiles_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgfiles_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trgfiles_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_trgfiles
      SET lockuserid = NULL
      WHERE vk_trgfilesid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_trgfiles
      SET locksessionid = NULL
      WHERE vk_trgfilesid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trginfo_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_brief(acursession varchar(38),
avk_trginfoid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_trginfoid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_trginfo
    WHERE vk_trginfoid = g2b(avk_trginfoid);
    IF aec > 0 THEN
      SET abrief = vk_trginfo_brief_f(g2b(avk_trginfoid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_trginfo_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_client_trigger(acursession varchar(38),
aVK_TRGINFOid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_trginfo_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_trginfo (vk_trginfoid
    , instanceid
    , name

    , cab

    , vkid

    , info

    , trgdomain

    , audience_count

    , lifetime

    , pixel)
      SELECT
        copymap(acopyaction, b2g(vk_trginfoid)),
        copymap(acopyaction, b2g(instanceid)),
        name,
        cab,
        vkid,
        info,
        trgdomain,
        audience_count,
        lifetime,
        pixel

      FROM vk_trginfo
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_trginfo_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_delete(acursession varchar(38),
avk_trginfoid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trginfo
    WHERE vk_trginfoid = g2b(avk_trginfoid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_trginfo' result;
        LEAVE body;
      END IF;
      CALL vk_trginfo_logger(acursession, avk_trginfoid);
      DELETE
        FROM vk_trginfo
      WHERE vk_trginfoid = g2b(avk_trginfoid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_trginfo'
        AND ownerrowid = g2b(avk_trginfoid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_trginfo_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_trginfo
    WHERE vk_trginfoid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_trginfo_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trginfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_trginfo
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_trginfoid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_trginfo
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_trginfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trginfo_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_logger(acursession varchar(38),
avk_trginfoid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trginfo_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_trginfo
    WHERE vk_trginfoid = arowid;
  END
$$

--
-- Создать процедуру "vk_trginfo_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_save(acursession varchar(38),
ainstanceid varchar(38),
avk_trginfoid varchar(38)
, aname
varchar(255)/* ???????? *//* ???????? */
, acab varchar(38)/* ??????? *//* ??????? */
, avkid
varchar(30)/* id *//* id */
, ainfo
varchar(4096)/* ???????? *//* ???????? */
, atrgdomain
varchar(255)/* ????? *//* ????? */
, aaudience_count
integer/* ????????? *//* ????????? */
, alifetime
integer/* ???????????? ????? (??.) *//* ???????????? ????? (??.) */
, apixel
varchar(4096)/* ??? ??? ??????? *//* ??? ??? ??????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trginfo
    WHERE vk_trginfoid = g2b(avk_trginfoid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_trginfo' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_trginfo_logger(acursession, avk_trginfoid);
        UPDATE vk_trginfo
        SET changestamp = now(),
            name = aname,
            cab = g2b(acab),
            vkid = avkid,
            info = ainfo,
            trgdomain = atrgdomain,
            audience_count = aaudience_count,
            lifetime = alifetime,
            pixel = apixel
        WHERE vk_trginfoid = g2b(avk_trginfoid);


        CALL vk_trginfo_client_trigger(acursession, avk_trginfoid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktrg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_trginfo' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_trginfo
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_trginfo>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_trginfo (changestamp, vk_trginfoid
          , instanceid
          , name

          , cab

          , vkid

          , info

          , trgdomain

          , audience_count

          , lifetime

          , pixel)
            VALUES (now(), g2b(avk_trginfoid), g2b(ainstanceid), aname, g2b(acab), avkid, ainfo, atrgdomain, aaudience_count, alifetime, apixel);


          CALL vk_trginfo_client_trigger(acursession, avk_trginfoid);

          CALL vktrg_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_trginfo_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trginfo_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trginfo_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_trginfo
      SET lockuserid = NULL
      WHERE vk_trginfoid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_trginfo
      SET locksessionid = NULL
      WHERE vk_trginfoid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgowner_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_brief(acursession varchar(38),
avk_trgownerid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_trgownerid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_trgowner
    WHERE vk_trgownerid = g2b(avk_trgownerid);
    IF aec > 0 THEN
      SET abrief = vk_trgowner_brief_f(g2b(avk_trgownerid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_trgowner_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_client_trigger(acursession varchar(38),
aVK_TRGOWNERid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_trgowner_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_trgowner (vk_trgownerid
    , instanceid
    , vkusr)
      SELECT
        copymap(acopyaction, b2g(vk_trgownerid)),
        copymap(acopyaction, b2g(instanceid)),
        vkusr

      FROM vk_trgowner
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_trgowner_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_delete(acursession varchar(38),
avk_trgownerid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trgowner
    WHERE vk_trgownerid = g2b(avk_trgownerid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_trgowner' result;
        LEAVE body;
      END IF;
      CALL vk_trgowner_logger(acursession, avk_trgownerid);
      DELETE
        FROM vk_trgowner
      WHERE vk_trgownerid = g2b(avk_trgownerid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_trgowner'
        AND ownerrowid = g2b(avk_trgownerid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_trgowner_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_trgowner
    WHERE vk_trgownerid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_trgowner_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trgowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_trgowner
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_trgownerid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_trgowner
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_trgownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgowner_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_logger(acursession varchar(38),
avk_trgownerid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_trgowner_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_trgowner
    WHERE vk_trgownerid = arowid;
  END
$$

--
-- Создать процедуру "vk_trgowner_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_save(acursession varchar(38),
ainstanceid varchar(38),
avk_trgownerid varchar(38)
, avkusr varchar(38)/* ???????? *//* ???????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_trgowner
    WHERE vk_trgownerid = g2b(avk_trgownerid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vktrg.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_trgowner' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_trgowner_logger(acursession, avk_trgownerid);
        UPDATE vk_trgowner
        SET changestamp = now(),
            vkusr = g2b(avkusr)
        WHERE vk_trgownerid = g2b(avk_trgownerid);


        CALL vk_trgowner_client_trigger(acursession, avk_trgownerid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vktrg.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_trgowner' result;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_trgowner (changestamp, vk_trgownerid
          , instanceid
          , vkusr)
            VALUES (now(), g2b(avk_trgownerid), g2b(ainstanceid), g2b(avkusr));


          CALL vk_trgowner_client_trigger(acursession, avk_trgownerid);

        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_trgowner_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_trgowner_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_trgowner_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_trgowner
      SET lockuserid = NULL
      WHERE vk_trgownerid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_trgowner
      SET locksessionid = NULL
      WHERE vk_trgownerid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_usr_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_brief(acursession varchar(38),
avk_usrid varchar(38),
OUT abrief varchar(255))
body:
  BEGIN
    DECLARE aaccess int;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    DECLARE alang2 varchar(25);
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      lang INTO alang2
    FROM the_session
    WHERE the_sessionid = g2b(acursession);
    IF avk_usrid IS NULL THEN
      SET abrief = '';
      LEAVE body;
    END IF;
    SELECT
      COUNT(*) INTO aec
    FROM vk_usr
    WHERE vk_usrid = g2b(avk_usrid);
    IF aec > 0 THEN
      SET abrief = vk_usr_brief_f(g2b(avk_usrid), alang2);
    ELSE
      SET abrief = '???????? ?????????????';
    END IF;
    SET abrief = LEFT(abrief, 255);
  END
$$

--
-- Создать процедуру "vk_usr_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_client_trigger(acursession varchar(38),
aVK_USRid varchar(38))
BEGIN
  DECLARE aBRIEF varchar(255);
  SET aBRIEF = 'to do';
END
$$

--
-- Создать процедуру "vk_usr_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_copy(acursession varchar(38),
acopyaction varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    INSERT INTO vk_usr (vk_usrid
    , instanceid
    , vkid

    , first_name

    , last_name

    , deactivated

    , photo_id

    , sex

    , bdate

    , country

    , home_town

    , has_photo

    , photo_50

    , photo_100

    , online

    , status)
      SELECT
        copymap(acopyaction, b2g(vk_usrid)),
        copymap(acopyaction, b2g(instanceid)),
        vkid,
        first_name,
        last_name,
        deactivated,
        photo_id,
        sex,
        bdate,
        country,
        home_town,
        has_photo,
        photo_50,
        photo_100,
        online,
        status

      FROM vk_usr
      WHERE instanceid = g2b(ainstanceid);
  END
$$

--
-- Создать процедуру "vk_usr_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_delete(acursession varchar(38),
avk_usrid varchar(38),
ainstanceid varchar(38))
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aec int;
    SELECT
      instanceid INTO asysinstid
    FROM instance
    WHERE objtype = 'mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_usr
    WHERE vk_usrid = g2b(avk_usrid);
    IF aec > 0 THEN
      SELECT
        checkoperation(acursession, 'vkusr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '???????? ????? ?? ?????????. ??????=vk_usr' result;
        LEAVE body;
      END IF;
      CALL vk_usr_logger(acursession, avk_usrid);
      DELETE
        FROM vk_usr
      WHERE vk_usrid = g2b(avk_usrid);
      DELETE
        FROM num_values
      WHERE ownerpartname = 'vk_usr'
        AND ownerrowid = g2b(avk_usrid);
    END IF;
    SELECT
      'ok' result;
  END
$$

--
-- Создать процедуру "vk_usr_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_islocked(acursession varchar(38),
arowid binary(16),
OUT aislocked integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE alockuserid binary(16);
    DECLARE alocksessionid binary(16);
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SET aislocked = 0;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    SELECT
      lockuserid,
      locksessionid INTO alockuserid, alocksessionid
    FROM vk_usr
    WHERE vk_usrid = arowid;
    /* verify this row */
    IF NOT alockuserid IS NULL THEN
      IF alockuserid <> auserid THEN
        SET aislocked = 4; /* checkout by another user */
        LEAVE body;
      ELSE
        SET aislocked = 2; /* checkout by caller */
        LEAVE body;
      END IF;
    END IF;
    IF NOT alocksessionid IS NULL THEN
      IF alocksessionid <> acursession THEN
        SET aislocked = 3;/* lockes by another user */
        LEAVE body;
      ELSE
        SET aislocked = 1; /* locked by caller */
        LEAVE body;
      END IF;
    END IF;
    SET aislocked = 0;
  END
$$

--
-- Создать процедуру "vk_usr_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_lock(acursession varchar(38),
arowid binary(16),
alockmode integer)
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE atmpid binary(16);
    DECLARE aaccess integer;
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      auserid = usersid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_usr_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF alockmode = 2 THEN
      UPDATE vk_usr
      SET lockuserid = auserid,
          locksessionid = NULL
      WHERE vk_usrid = arowid;
      LEAVE body;
    END IF;
    IF alockmode = 1 THEN
      UPDATE vk_usr
      SET lockuserid = NULL,
          locksessionid = acursession
      WHERE vk_usrid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_usr_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_logger(acursession varchar(38),
avk_usrid varchar(38))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "vk_usr_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_parent(acursession varchar(38),
arowid binary(16),
OUT aparentid binary(16),
OUT aparenttable varchar(255))
body:
  BEGIN
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SET aparenttable = 'instance';
    SELECT
      instanceid INTO aparentid
    FROM vk_usr
    WHERE vk_usrid = arowid;
  END
$$

--
-- Создать процедуру "vk_usr_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_save(acursession varchar(38),
ainstanceid varchar(38),
avk_usrid varchar(38)
, avkid
varchar(20)/* id *//* id */
, afirst_name
varchar(255)/* ??? *//* ??? */
, alast_name
varchar(256)/* ??????? *//* ??????? */
, adeactivated
integer/* ?????? ??????? *//* ?????? ??????? */
, aphoto_id
varchar(255)/* ???? *//* ???? */
, asex
integer/* ??? *//* ??? */
, abdate
varchar(20)/* ???? ???????? *//* ???? ???????? */
, acountry varchar(38)/* ?????? *//* ?????? */
, ahome_town varchar(38)/* ?????? ????? *//* ?????? ????? */
, ahas_photo
integer/* ???? ???? *//* ???? ???? */
, aphoto_50 varchar(255)/* ???? 50 *//* ???? 50 */
, aphoto_100 varchar(255)/* ???? 100 *//* ???? 100 */
, aonline
integer/* on-line *//* on-line */
, astatus
varchar(255)/* ?????? *//* ?????? */
)
body:
  BEGIN
    DECLARE asyslogid binary(16);
    DECLARE auniquerowcount integer;
    DECLARE atmpstr varchar(255);
    DECLARE atmpid binary(16);
    DECLARE aaccess int;
    DECLARE asysinstid binary(16);
    -- declare asessuserid binary(16);
    DECLARE amlf_partid binary(16);
    -- declare asessuserlogin varchar(40);
    DECLARE aec int;
    -- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
    -- select login into asessuserlogin from users where usersid=asessuserid;
    -- select instanceid into asysinstid from instance where objtype='mtzsystem';
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = g2b(acursession)
    AND closed = 0;
    IF aec = 0 THEN
      SELECT
        '?????? ??? ?????????.' result;
      LEAVE body;
    END IF;
    /*if exists */ SELECT
      COUNT(*) INTO aec
    FROM vk_usr
    WHERE vk_usrid = g2b(avk_usrid);
    IF aec > 0 THEN
      --  update  --
      --  verify access  --
      SELECT
        checkoperation(acursession, 'vkusr.edit') INTO aaccess;
      IF aaccess = 0 THEN
        SELECT
          '????????? ????? ?? ?????????. ??????=vk_usr' result;
        LEAVE body;
      END IF;
      START TRANSACTION;
        CALL vk_usr_logger(acursession, avk_usrid);
        UPDATE vk_usr
        SET changestamp = now(),
            vkid = avkid,
            first_name = afirst_name,
            last_name = alast_name,
            deactivated = adeactivated,
            photo_id = aphoto_id,
            sex = asex,
            bdate = abdate,
            country = g2b(acountry),
            home_town = g2b(ahome_town),
            has_photo = ahas_photo,
            photo_50 = aphoto_50,
            photo_100 = aphoto_100,
            online = aonline,
            status = astatus
        WHERE vk_usrid = g2b(avk_usrid);


        CALL vk_usr_client_trigger(acursession, avk_usrid);

      ELSE
        --  insert  --
        --  verify access  --
        SELECT
          checkoperation(acursession, 'vkusr.edit') INTO aaccess;
        IF aaccess = 0 THEN
          SELECT
            '?????????? ????? ?? ?????????. ??????=vk_usr' result;
          LEAVE body;
        END IF;
        SELECT
          COUNT(*) INTO aec
        FROM vk_usr
        WHERE instanceid = g2b(ainstanceid);
        IF aec > 0 THEN
          SELECT
            '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <vk_usr>' result;
          ROLLBACK;
          LEAVE body;
        END IF;
        START TRANSACTION;
          INSERT INTO vk_usr (changestamp, vk_usrid
          , instanceid
          , vkid

          , first_name

          , last_name

          , deactivated

          , photo_id

          , sex

          , bdate

          , country

          , home_town

          , has_photo

          , photo_50

          , photo_100

          , online

          , status)
            VALUES (now(), g2b(avk_usrid), g2b(ainstanceid), avkid, afirst_name, alast_name, adeactivated, aphoto_id, asex, abdate, g2b(acountry), g2b(ahome_town), ahas_photo, aphoto_50, aphoto_100, aonline, astatus);


          CALL vk_usr_client_trigger(acursession, avk_usrid);

          CALL vkusr_initownership(acursession, ainstanceid);
        END IF;
      COMMIT;
      SELECT
        'ok' result;
    END
$$

--
-- Создать процедуру "vk_usr_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE vk_usr_unlock(acursession varchar(38),
arowid binary(16))
body:
  BEGIN
    DECLARE aparentid binary(16);
    DECLARE auserid binary(16);
    DECLARE aislocked integer;
    DECLARE aparenttable varchar(255);
    DECLARE aec int;
    SELECT
      COUNT(*) INTO aec
    FROM the_session
    WHERE the_sessionid = acursession
    AND closed = 0;
    IF aec = 0 THEN
      LEAVE body;
    END IF;
    SELECT
      usersid INTO auserid
    FROM the_session
    WHERE the_sessionid = acursession;
    CALL vk_usr_islocked(acursession, arowid, aislocked);
    IF aislocked >= 3 THEN
      LEAVE body;
    END IF;
    IF aislocked = 2 THEN
      UPDATE vk_usr
      SET lockuserid = NULL
      WHERE vk_usrid = arowid;
      LEAVE body;
    END IF;
    IF aislocked = 1 THEN
      UPDATE vk_usr
      SET locksessionid = NULL
      WHERE vk_usrid = arowid;
      LEAVE body;
    END IF;
  END
$$

--
-- Создать процедуру "workplace_brief"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_brief(
 acursession varchar(38),
 aworkplaceid varchar(38),
out abrief varchar(255)
)
body: begin  
 declare aaccess int;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aec int;
 declare alang2 varchar(25);
 select count(*) into aec  from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
     set abrief=''; leave body;
  end if;
 select lang into alang2 from the_session where the_sessionid=g2b(acursession);
 if aworkplaceid is null then set abrief=''; leave body; end if;
 select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
 if  aec >0 then
   set abrief=workplace_brief_f(g2b(aworkplaceid), alang2);
 else
   set abrief= '???????? ?????????????';
 end if;
 set abrief=left(abrief,255);
end
$$

--
-- Создать процедуру "workplace_client_trigger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_client_trigger(
 acursession varchar(38),
 aWorkPlaceid varchar(38)
)
begin  
   declare aBRIEF varchar(255);
  set aBRIEF='to do';
end
$$

--
-- Создать процедуру "workplace_copy"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_copy(
 acursession varchar(38),
 acopyaction varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
    leave body;
 end if;
 insert into workplace 
 ( workplaceid 
,instanceid
,name

,caption

,theversion

,theplatform

,thecomment

 ) select 
copymap(acopyaction,b2g(workplaceid)) 
,copymap(acopyaction,b2g(instanceid))
,name

,caption

,theversion

,theplatform

,thecomment

 from workplace
 where instanceid =g2b( ainstanceid); 
 end
$$

--
-- Создать процедуру "workplace_delete"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_delete(
 acursession varchar(38),
 aworkplaceid varchar(38),
 ainstanceid varchar(38) 
)
body: begin  
 declare aaccess int;
 declare asysinstid binary(16);
 declare atmpid binary(16);
 declare aec int;
 select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0 then
    leave body;
  end if;
/*if exists */ select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
if aec>0 then
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '???????? ????? ?? ?????????. ??????=workplace' result;
    leave body;
  end if;
 call workplace_logger(acursession,aworkplaceid) ; 
  delete from  workplace 
  where  workplaceid = g2b(aworkplaceid) ;
  delete from num_values where ownerpartname='workplace' and ownerrowid=g2b(aworkplaceid);
  end if;
    select 'ok' result;
 end
$$

--
-- Создать процедуру "workplace_islocked"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_islocked(
 acursession varchar(38),
 arowid binary(16) ,
 out aislocked integer
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare alockuserid binary(16);
 declare alocksessionid binary(16);
 declare aparenttable varchar(255); 
declare aec  int;
 set aislocked = 0;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select  usersid into auserid  from the_session where the_sessionid=acursession;
 select  lockuserid,locksessionid into alockuserid, alocksessionid from workplace where workplaceid=arowid;
 /* verify this row */
 if not alockuserid is null  then
   if  alockuserid <> auserid  then
     set aislocked = 4; /* checkout by another user */
     leave body;
   else 
     set aislocked = 2; /* checkout by caller */
     leave body;
   end if;  
 end if;  
 if not alocksessionid is null then 
   if  alocksessionid <> acursession  then
     set aislocked = 3 ;/* lockes by another user */
     leave body;
   else 
     set aislocked = 1; /* locked by caller */
     leave body;
   end if;  
 end if;  
 set aislocked = 0; 
 end
$$

--
-- Создать процедуру "workplace_lock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_lock(
 acursession varchar(38),
 arowid binary(16) ,
 alockmode integer 
)
body:begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare atmpid binary(16);
 declare aaccess integer;
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select auserid = usersid  from the_session where the_sessionid=acursession;
 call workplace_islocked( acursession,arowid,aislocked);
 if aislocked >=3  then
    leave body;
  end if;
   if  alockmode =2  then
    update workplace set lockuserid =auserid ,locksessionid=null  where workplaceid=arowid;
     leave body;
   end if;
   if  alockmode =1  then
    update workplace set lockuserid=null ,locksessionid =acursession  where workplaceid=arowid;
     leave body;
   end if;
 end
$$

--
-- Создать процедуру "workplace_logger"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_logger(
 acursession varchar(38),
 aworkplaceid varchar(38)
)
body: begin  
 declare aec int;
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
 if aec=0 then
    leave body;
 end if;
 end
$$

--
-- Создать процедуру "workplace_parent"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_parent(
 acursession varchar(38),
 arowid binary(16) ,
out  aparentid binary(16),
out aparenttable varchar(255)
)
body:begin  
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
  set aparenttable = 'instance';
  select instanceid into aparentid from workplace where  workplaceid=arowid;
 end
$$

--
-- Создать процедуру "workplace_save"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_save(
 acursession varchar(38),
ainstanceid varchar(38) ,
 aworkplaceid varchar(38)
,aname
 varchar (255)/* ???????? *//* ???????? */
,acaption
 varchar (255)/* ????????? *//* ????????? */
,atheversion
 varchar (30)/* ?????? *//* ?????? */
,atheplatform
 integer/* ????????? ?????????? *//* ????????? ?????????? */
,athecomment
 text/* ?????????? *//* ?????????? */
)
body: begin  
 declare auniquerowcount integer;
 declare atmpstr varchar(255);
 declare atmpid binary(16);
 declare aaccess int;
 declare asysinstid binary(16);
 -- declare asessuserid binary(16);
 declare amlf_partid binary(16);
 -- declare asessuserlogin varchar(40);
 declare aec int;
-- select usersid into asessuserid from the_session where the_sessionid=g2b(acursession);
-- select login into asessuserlogin from users where usersid=asessuserid;
-- select instanceid into asysinstid from instance where objtype='mtzsystem';
 select count(*) into aec from the_session where the_sessionid=g2b(acursession) and closed=0 ;
if aec=0  then
  select '?????? ??? ?????????.' result;
    leave body;
  end if;
/*if exists */ select  count(*) into aec from workplace where workplaceid=g2b(aworkplaceid);
if aec >0 then
 --  update  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '????????? ????? ?? ?????????. ??????=workplace' result;
    leave body;
  end if;
 start transaction ; 
 call workplace_logger(acursession,aworkplaceid) ; 
 update  workplace set changestamp=now() 
,
  name=aname
,
  caption=acaption
,
  theversion=atheversion
,
  theplatform=atheplatform
,
  thecomment=athecomment
  where  workplaceid = g2b(aworkplaceid) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from workplace where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=??? ???????=(???????????? ??? ???.????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call workplace_client_trigger(acursession,aworkplaceid);

 else
 --  insert  --
 --  verify access  --
 select checkoperation( acursession ,'mtzwp.edit') into aaccess;
 if aaccess=0  then
    select '?????????? ????? ?? ?????????. ??????=workplace' result;
    leave body;
  end if;
select count(*) into aec from workplace where 
instanceid=g2b(ainstanceid);
if aec >0 then 
    select '?????????? ??????? ?????? ?????? ? ???????????? ??????. ??????: <workplace>' result;
    rollback;
    leave body;
 end if;
 start transaction;  
 insert into   workplace
 (  changestamp,workplaceid 
,instanceid
,name

,caption

,theversion

,theplatform

,thecomment

 ) values (now(), g2b(aworkplaceid) 
,g2b(ainstanceid)
,aname

,acaption

,atheversion

,atheplatform

,athecomment

 ) ;
-- if asessuserlogin<>'replicator'  then
select count(*) into  auniquerowcount from workplace where 1=1  
 and name=aname;
if auniquerowcount>=2 then
  select '????????? ???????????? ????????? ?????.  ??????=??? ???????=(???????????? ??? ???.????????)'  result;
  rollback;
  leave body;
end if;
 -- end if;

call workplace_client_trigger(acursession,aworkplaceid);

 end if;
 commit; 
select 'ok' result;
 end
$$

--
-- Создать процедуру "workplace_unlock"
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE workplace_unlock(
 acursession varchar(38),
 arowid binary(16) 
)
body: begin  
 declare aparentid binary(16);
 declare auserid binary(16);
 declare aislocked integer;
 declare aparenttable varchar(255); 
declare aec  int;
select count(*) into aec from the_session where the_sessionid=acursession and closed=0 ;
if aec=0  then
    leave body;
end if;
 select usersid into auserid  from the_session where the_sessionid=acursession;
 call workplace_islocked( acursession,arowid,aislocked );
 if aislocked >=3  then
    leave body;
   end if;
   if  aislocked =2  then
    update workplace set lockuserid =null  where workplaceid=arowid;
    leave body;
   end if;
   if  aislocked =1  then
    update workplace set locksessionid =null  where workplaceid=arowid;
    leave body;
   end if;
 end
$$

--
-- Создать функцию "arc_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "arc_chanel_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_chanel_brief_f(
 aarc_chanelid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarc_chanelid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from arc_chanel where arc_chanelid=aarc_chanelid;
if aec<>0 then
  set abrief='';
select ch_taype
 into atmpid  from arc_chanel  where  arc_chanelid = aarc_chanelid; 
 select armd_chaneltype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(ch_param,'') ,' '  )
  into abrief   from arc_chanel  where  arc_chanelid = aarc_chanelid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "arc_chanel_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_chanel_mref_f(
 aarc_chanel_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select arc_chanel_brief_f(arc_chanelid, alang)  from arc_chanel
where aarc_chanel_ref like concat('%',replace(replace(b2g(arc_chanelid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arc_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "arc_info_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_info_brief_f(
 aarc_infoid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarc_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from arc_info where arc_infoid=aarc_infoid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(family,'') ,' '  )
  into abrief   from arc_info  where  arc_infoid = aarc_infoid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "arc_info_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_info_mref_f(
 aarc_info_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select arc_info_brief_f(arc_infoid, alang)  from arc_info
where aarc_info_ref like concat('%',replace(replace(b2g(arc_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arc_md_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_md_brief_f(
 aarc_mdid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarc_mdid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from arc_md where arc_mdid=aarc_mdid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(moduleserial,'') ,' '  )
  into abrief   from arc_md  where  arc_mdid = aarc_mdid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from arc_md  where  arc_mdid = aarc_mdid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "arc_md_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arc_md_mref_f(
 aarc_md_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select arc_md_brief_f(arc_mdid, alang)  from arc_md
where aarc_md_ref like concat('%',replace(replace(b2g(arc_mdid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arlog_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arlog_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "arlog_data_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arlog_data_brief_f(
 aarlog_dataid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarlog_dataid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from arlog_data where arlog_dataid=aarlog_dataid;
if aec<>0 then
  set abrief='';
select sms
 into atmpid  from arlog_data  where  arlog_dataid = aarlog_dataid; 
 select arsms_data_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "arlog_data_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arlog_data_mref_f(
 aarlog_data_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select arlog_data_brief_f(arlog_dataid, alang)  from arlog_data
where aarlog_data_ref like concat('%',replace(replace(b2g(arlog_dataid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arlog_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arlog_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "armd_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "armd_chaneltype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_chaneltype_brief_f(
 aarmd_chaneltypeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmd_chaneltypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armd_chaneltype where armd_chaneltypeid=aarmd_chaneltypeid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armd_chaneltype  where  armd_chaneltypeid = aarmd_chaneltypeid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armd_chaneltype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_chaneltype_mref_f(
 aarmd_chaneltype_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armd_chaneltype_brief_f(armd_chaneltypeid, alang)  from armd_chaneltype
where aarmd_chaneltype_ref like concat('%',replace(replace(b2g(armd_chaneltypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armd_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "armd_info_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_info_brief_f(
 aarmd_infoid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmd_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armd_info where armd_infoid=aarmd_infoid;
if aec<>0 then
  set abrief='';
select moduletype
 into atmpid  from armd_info  where  armd_infoid = aarmd_infoid; 
 select armd_type_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(serialno,'') ,' '  )
  into abrief   from armd_info  where  armd_infoid = aarmd_infoid; 
  select concat(abrief 
  , '' , ifnull(phone,'') ,' '  )
  into abrief   from armd_info  where  armd_infoid = aarmd_infoid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armd_info_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_info_mref_f(
 aarmd_info_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armd_info_brief_f(armd_infoid, alang)  from armd_info
where aarmd_info_ref like concat('%',replace(replace(b2g(armd_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armd_type_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_type_brief_f(
 aarmd_typeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmd_typeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armd_type where armd_typeid=aarmd_typeid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armd_type  where  armd_typeid = aarmd_typeid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armd_type_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armd_type_mref_f(
 aarmd_type_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armd_type_brief_f(armd_typeid, alang)  from armd_type
where aarmd_type_ref like concat('%',replace(replace(b2g(armd_typeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armjournal_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjournal_brief_f(
 aarmjournalid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjournalid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjournal where armjournalid=aarmjournalid;
if aec<>0 then
  set abrief='';
select thejournal
 into atmpid  from armjournal  where  armjournalid = aarmjournalid; 
 select instance_brief_f( atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armjournal_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjournal_mref_f(
 aarmjournal_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjournal_brief_f(armjournalid, alang)  from armjournal
where aarmjournal_ref like concat('%',replace(replace(b2g(armjournalid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armjrnladd_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnladd_brief_f(
 aarmjrnladdid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnladdid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnladd where armjrnladdid=aarmjrnladdid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armjrnladd  where  armjrnladdid = aarmjrnladdid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armjrnladd_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnladd_mref_f(
 aarmjrnladd_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnladd_brief_f(armjrnladdid, alang)  from armjrnladd
where aarmjrnladd_ref like concat('%',replace(replace(b2g(armjrnladdid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armjrnlrep_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnlrep_brief_f(
 aarmjrnlrepid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnlrepid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnlrep where armjrnlrepid=aarmjrnlrepid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(repname,'') ,' '  )
  into abrief   from armjrnlrep  where  armjrnlrepid = aarmjrnlrepid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armjrnlrep_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnlrep_mref_f(
 aarmjrnlrep_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnlrep_brief_f(armjrnlrepid, alang)  from armjrnlrep
where aarmjrnlrep_ref like concat('%',replace(replace(b2g(armjrnlrepid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armjrnlrun_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnlrun_brief_f(
 aarmjrnlrunid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmjrnlrunid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armjrnlrun where armjrnlrunid=aarmjrnlrunid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from armjrnlrun  where  armjrnlrunid = aarmjrnlrunid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armjrnlrun_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armjrnlrun_mref_f(
 aarmjrnlrun_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armjrnlrun_brief_f(armjrnlrunid, alang)  from armjrnlrun
where aarmjrnlrun_ref like concat('%',replace(replace(b2g(armjrnlrunid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "armtypes_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armtypes_brief_f(
 aarmtypesid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarmtypesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from armtypes where armtypesid=aarmtypesid;
if aec<>0 then
  set abrief='';
select thedocumenttype
 into atmpid  from armtypes  where  armtypesid = aarmtypesid; 
 select objecttype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "armtypes_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION armtypes_mref_f(
 aarmtypes_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select armtypes_brief_f(armtypesid, alang)  from armtypes
where aarmtypes_ref like concat('%',replace(replace(b2g(armtypesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arsms_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arsms_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "arsms_data_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arsms_data_brief_f(
 aarsms_dataid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aarsms_dataid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from arsms_data where arsms_dataid=aarsms_dataid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(smstime,'') ,' '  )
  into abrief   from arsms_data  where  arsms_dataid = aarsms_dataid; 
  select concat(abrief 
  , '' , ifnull(serialno,'') ,' '  )
  into abrief   from arsms_data  where  arsms_dataid = aarsms_dataid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "arsms_data_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arsms_data_mref_f(
 aarsms_data_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select arsms_data_brief_f(arsms_dataid, alang)  from arsms_data
where aarsms_data_ref like concat('%',replace(replace(b2g(arsms_dataid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "arsms_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION arsms_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "b2g"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION b2g(
    $data binary(16)
)
  RETURNS char(38) CHARSET utf8
  DETERMINISTIC
begin
    declare $result char(38) default null;
    if $data is not null then
        set $result = concat('{',hex(substring($data,4,1)),hex(substring($data,3,1)),hex(substring($data,2,1)), hex(substring($data,1,1)) , '-', 
                hex(substring($data,6,1)),hex(substring($data,5,1)),'-',
                hex(substring($data,8,1)) , hex(substring($data,7,1)),'-',
                hex(substring($data,9,2)),'-',hex(substring($data,11,6)) ,'}');
        set $result = ucase($result);
    end if;
    return $result;
end
$$

--
-- Создать функцию "bpc_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpc_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "bpc_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpc_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "bpc_info_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpc_info_brief_f(
 abpc_infoid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if abpc_infoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from bpc_info where bpc_infoid=abpc_infoid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from bpc_info  where  bpc_infoid = abpc_infoid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "bpc_info_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpc_info_mref_f(
 abpc_info_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select bpc_info_brief_f(bpc_infoid, alang)  from bpc_info
where abpc_info_ref like concat('%',replace(replace(b2g(bpc_infoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "bpdi_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpdi_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "bpdi_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpdi_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "bpdr_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpdr_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "bpdr_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpdr_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "bprcfg_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bprcfg_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "bprcfg_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bprcfg_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "bpu_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpu_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "bpu_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION bpu_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "checkoperation"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION checkoperation(
    acursession varchar(38)
    ,aopname varchar(255)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin
  declare isok int;
  select 1 into isok;
  /*select roles_operations.allowaction into isok from   roles_operations  
      join roles_def on roles_def.instanceid=roles_operations.instanceid
      join the_session on the_session.userrole=roles_def.roles_defid
      where the_session.the_sessionid=g2b(acursession) 
      and roles_operations.name=aopname;
*/
  if isok<>0 then
      return 1;
  else
      return 0;
  end if;
end
$$

--
-- Создать функцию "constraintfield_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION constraintfield_brief_f(
 aconstraintfieldid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aconstraintfieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from constraintfield where constraintfieldid=aconstraintfieldid;
if aec<>0 then
  set abrief='';
select thefield
 into atmpid  from constraintfield  where  constraintfieldid = aconstraintfieldid; 
 select field_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "constraintfield_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION constraintfield_mref_f(
 aconstraintfield_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select constraintfield_brief_f(constraintfieldid, alang)  from constraintfield
where aconstraintfield_ref like concat('%',replace(replace(b2g(constraintfieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "dinamicfilterscript_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION dinamicfilterscript_brief_f(
 adinamicfilterscriptid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if adinamicfilterscriptid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from dinamicfilterscript where dinamicfilterscriptid=adinamicfilterscriptid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from dinamicfilterscript  where  dinamicfilterscriptid = adinamicfilterscriptid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "dinamicfilterscript_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION dinamicfilterscript_mref_f(
 adinamicfilterscript_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select dinamicfilterscript_brief_f(dinamicfilterscriptid, alang)  from dinamicfilterscript
where adinamicfilterscript_ref like concat('%',replace(replace(b2g(dinamicfilterscriptid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "entrypoints_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION entrypoints_brief_f(
 aentrypointsid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aentrypointsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from entrypoints where entrypointsid=aentrypointsid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from entrypoints  where  entrypointsid = aentrypointsid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from entrypoints  where  entrypointsid = aentrypointsid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "entrypoints_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION entrypoints_mref_f(
 aentrypoints_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select entrypoints_brief_f(entrypointsid, alang)  from entrypoints
where aentrypoints_ref like concat('%',replace(replace(b2g(entrypointsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "enumitem_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION enumitem_brief_f(
 aenumitemid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aenumitemid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from enumitem where enumitemid=aenumitemid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from enumitem  where  enumitemid = aenumitemid; 
  select concat(abrief 
  , '' , ifnull(namevalue,'') ,' '  )
  into abrief   from enumitem  where  enumitemid = aenumitemid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "enumitem_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION enumitem_mref_f(
 aenumitem_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select enumitem_brief_f(enumitemid, alang)  from enumitem
where aenumitem_ref like concat('%',replace(replace(b2g(enumitemid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "epfilterlink_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION epfilterlink_brief_f(
 aepfilterlinkid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aepfilterlinkid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from epfilterlink where epfilterlinkid=aepfilterlinkid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(rowsource,'') ,' '  )
  into abrief   from epfilterlink  where  epfilterlinkid = aepfilterlinkid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "epfilterlink_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION epfilterlink_mref_f(
 aepfilterlink_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select epfilterlink_brief_f(epfilterlinkid, alang)  from epfilterlink
where aepfilterlink_ref like concat('%',replace(replace(b2g(epfilterlinkid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "extenderinterface_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION extenderinterface_brief_f(
 aextenderinterfaceid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aextenderinterfaceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from extenderinterface where extenderinterfaceid=aextenderinterfaceid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(thename,'') ,' '  )
  into abrief   from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
select targetplatform
 into atmpid  from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(theobject,'') ,' '  )
  into abrief   from extenderinterface  where  extenderinterfaceid = aextenderinterfaceid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "extenderinterface_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION extenderinterface_mref_f(
 aextenderinterface_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select extenderinterface_brief_f(extenderinterfaceid, alang)  from extenderinterface
where aextenderinterface_ref like concat('%',replace(replace(b2g(extenderinterfaceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldexpression_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldexpression_brief_f(
 afieldexpressionid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldexpressionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldexpression where fieldexpressionid=afieldexpressionid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from fieldexpression  where  fieldexpressionid = afieldexpressionid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldexpression_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldexpression_mref_f(
 afieldexpression_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldexpression_brief_f(fieldexpressionid, alang)  from fieldexpression
where afieldexpression_ref like concat('%',replace(replace(b2g(fieldexpressionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldmenu_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldmenu_brief_f(
 afieldmenuid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldmenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldmenu where fieldmenuid=afieldmenuid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fieldmenu  where  fieldmenuid = afieldmenuid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldmenu_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldmenu_mref_f(
 afieldmenu_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldmenu_brief_f(fieldmenuid, alang)  from fieldmenu
where afieldmenu_ref like concat('%',replace(replace(b2g(fieldmenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldparammap_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldparammap_brief_f(
 afieldparammapid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldparammapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldparammap where fieldparammapid=afieldparammapid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(fieldname,'') ,' '  )
  into abrief   from fieldparammap  where  fieldparammapid = afieldparammapid; 
  select concat(abrief 
  , '' , ifnull(paramname,'') ,' '  )
  into abrief   from fieldparammap  where  fieldparammapid = afieldparammapid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldparammap_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldparammap_mref_f(
 afieldparammap_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldparammap_brief_f(fieldparammapid, alang)  from fieldparammap
where afieldparammap_ref like concat('%',replace(replace(b2g(fieldparammapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldrestriction_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldrestriction_brief_f(
 afieldrestrictionid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
if aec<>0 then
  set abrief='';
select thepart
 into atmpid  from fieldrestriction  where  fieldrestrictionid = afieldrestrictionid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
select thefield
 into atmpid  from fieldrestriction  where  fieldrestrictionid = afieldrestrictionid; 
 select field_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select allowread
 into aec  from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowmodify
 into aec  from fieldrestriction where fieldrestrictionid=afieldrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldrestriction_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldrestriction_mref_f(
 afieldrestriction_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldrestriction_brief_f(fieldrestrictionid, alang)  from fieldrestriction
where afieldrestriction_ref like concat('%',replace(replace(b2g(fieldrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldsrcdef_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldsrcdef_brief_f(
 afieldsrcdefid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldsrcdefid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldsrcdef where fieldsrcdefid=afieldsrcdefid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(datasource,'') ,' '  )
  into abrief   from fieldsrcdef  where  fieldsrcdefid = afieldsrcdefid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldsrcdef_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldsrcdef_mref_f(
 afieldsrcdef_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldsrcdef_brief_f(fieldsrcdefid, alang)  from fieldsrcdef
where afieldsrcdef_ref like concat('%',replace(replace(b2g(fieldsrcdefid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldtypemap_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldtypemap_brief_f(
 afieldtypemapid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldtypemapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldtypemap where fieldtypemapid=afieldtypemapid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from fieldtypemap  where  fieldtypemapid = afieldtypemapid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(stoagetype,'') ,' '  )
  into abrief   from fieldtypemap  where  fieldtypemapid = afieldtypemapid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldtypemap_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldtypemap_mref_f(
 afieldtypemap_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldtypemap_brief_f(fieldtypemapid, alang)  from fieldtypemap
where afieldtypemap_ref like concat('%',replace(replace(b2g(fieldtypemapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldtype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldtype_brief_f(
 afieldtypeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldtypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldtype where fieldtypeid=afieldtypeid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fieldtype  where  fieldtypeid = afieldtypeid; 
 select typestyle
 into aec  from fieldtype where fieldtypeid=afieldtypeid;
  case aec 
when 4 then 
  select concat(abrief ,
 '??????; ') into abrief ;
when 1 then 
  select concat(abrief ,
 '?????????; ') into abrief ;
when 5 then 
  select concat(abrief ,
 '??????? ??????????; ') into abrief ;
when 3 then 
  select concat(abrief ,
 '????????; ') into abrief ;
when 2 then 
  select concat(abrief ,
 '????????????; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '????????? ???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldtype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldtype_mref_f(
 afieldtype_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldtype_brief_f(fieldtypeid, alang)  from fieldtype
where afieldtype_ref like concat('%',replace(replace(b2g(fieldtypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fieldvalidator_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldvalidator_brief_f(
 afieldvalidatorid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldvalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fieldvalidator where fieldvalidatorid=afieldvalidatorid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from fieldvalidator  where  fieldvalidatorid = afieldvalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fieldvalidator_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fieldvalidator_mref_f(
 afieldvalidator_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fieldvalidator_brief_f(fieldvalidatorid, alang)  from fieldvalidator
where afieldvalidator_ref like concat('%',replace(replace(b2g(fieldvalidatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "field_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION field_brief_f(
 afieldid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from field where fieldid=afieldid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from field  where  fieldid = afieldid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from field  where  fieldid = afieldid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "field_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION field_mref_f(
 afield_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select field_brief_f(fieldid, alang)  from field
where afield_ref like concat('%',replace(replace(b2g(fieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fileterfield_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fileterfield_brief_f(
 afileterfieldid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afileterfieldid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fileterfield where fileterfieldid=afileterfieldid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from fileterfield  where  fileterfieldid = afileterfieldid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from fileterfield  where  fileterfieldid = afileterfieldid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fileterfield_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fileterfield_mref_f(
 afileterfield_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fileterfield_brief_f(fileterfieldid, alang)  from fileterfield
where afileterfield_ref like concat('%',replace(replace(b2g(fileterfieldid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "filterfieldgroup_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION filterfieldgroup_brief_f(
 afilterfieldgroupid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afilterfieldgroupid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from filterfieldgroup where filterfieldgroupid=afilterfieldgroupid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from filterfieldgroup  where  filterfieldgroupid = afilterfieldgroupid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from filterfieldgroup  where  filterfieldgroupid = afilterfieldgroupid; 
 select allowignore
 into aec  from filterfieldgroup where filterfieldgroupid=afilterfieldgroupid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "filterfieldgroup_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION filterfieldgroup_mref_f(
 afilterfieldgroup_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select filterfieldgroup_brief_f(filterfieldgroupid, alang)  from filterfieldgroup
where afilterfieldgroup_ref like concat('%',replace(replace(b2g(filterfieldgroupid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "filters_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION filters_brief_f(
 afiltersid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afiltersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from filters where filtersid=afiltersid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from filters  where  filtersid = afiltersid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "filters_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION filters_mref_f(
 afilters_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select filters_brief_f(filtersid, alang)  from filters
where afilters_ref like concat('%',replace(replace(b2g(filtersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "fldextenders_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fldextenders_brief_f(
 afldextendersid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if afldextendersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from fldextenders where fldextendersid=afldextendersid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(thename,'') ,' '  )
  into abrief   from fldextenders  where  fldextendersid = afldextendersid; 
select targetplatform
 into atmpid  from fldextenders  where  fldextendersid = afldextendersid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(theobject,'') ,' '  )
  into abrief   from fldextenders  where  fldextendersid = afldextendersid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "fldextenders_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION fldextenders_mref_f(
 afldextenders_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select fldextenders_brief_f(fldextendersid, alang)  from fldextenders
where afldextenders_ref like concat('%',replace(replace(b2g(fldextendersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "g2b"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION g2b(
    $data varchar(38)
)
  RETURNS binary(16)
  DETERMINISTIC
begin
    declare $result binary(16) default null;
    if $data is not null then
        set $data = replace($data,'-','');
        set $data = replace($data,'{','');
        set $data = replace($data,'}','');
        set $result = concat(unhex(substring($data,7,2)),unhex(substring($data,5,2)),unhex(substring($data,3,2)), unhex(substring($data,1,2)),
                unhex(substring($data,11,2)),unhex(substring($data,9,2)),unhex(substring($data,15,2)) , unhex(substring($data,13,2)),
                unhex(substring($data,17,16)));
    end if;
    return $result;
end
$$

--
-- Создать функцию "gencontrols_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION gencontrols_brief_f(
 agencontrolsid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agencontrolsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from gencontrols where gencontrolsid=agencontrolsid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(controlprogid,'') ,' '  )
  into abrief   from gencontrols  where  gencontrolsid = agencontrolsid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "gencontrols_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION gencontrols_mref_f(
 agencontrols_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select gencontrols_brief_f(gencontrolsid, alang)  from gencontrols
where agencontrols_ref like concat('%',replace(replace(b2g(gencontrolsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "generator_target_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION generator_target_brief_f(
 agenerator_targetid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenerator_targetid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from generator_target where generator_targetid=agenerator_targetid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from generator_target  where  generator_targetid = agenerator_targetid; 
 select targettype
 into aec  from generator_target where generator_targetid=agenerator_targetid;
  case aec 
when 0 then 
  select concat(abrief ,
 '????; ') into abrief ;
when 3 then 
  select concat(abrief ,
 '????????????; ') into abrief ;
when 1 then 
  select concat(abrief ,
 '??????; ') into abrief ;
when 2 then 
  select concat(abrief ,
 '??????????; ') into abrief ;
when 4 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "generator_target_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION generator_target_mref_f(
 agenerator_target_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select generator_target_brief_f(generator_targetid, alang)  from generator_target
where agenerator_target_ref like concat('%',replace(replace(b2g(generator_targetid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "genmanualcode_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genmanualcode_brief_f(
 agenmanualcodeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenmanualcodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genmanualcode where genmanualcodeid=agenmanualcodeid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genmanualcode  where  genmanualcodeid = agenmanualcodeid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "genmanualcode_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genmanualcode_mref_f(
 agenmanualcode_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genmanualcode_brief_f(genmanualcodeid, alang)  from genmanualcode
where agenmanualcode_ref like concat('%',replace(replace(b2g(genmanualcodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "genpackage_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genpackage_brief_f(
 agenpackageid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenpackageid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genpackage where genpackageid=agenpackageid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genpackage  where  genpackageid = agenpackageid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "genpackage_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genpackage_mref_f(
 agenpackage_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genpackage_brief_f(genpackageid, alang)  from genpackage
where agenpackage_ref like concat('%',replace(replace(b2g(genpackageid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "genreference_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genreference_brief_f(
 agenreferenceid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agenreferenceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from genreference where genreferenceid=agenreferenceid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from genreference  where  genreferenceid = agenreferenceid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "genreference_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION genreference_mref_f(
 agenreference_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select genreference_brief_f(genreferenceid, alang)  from genreference
where agenreference_ref like concat('%',replace(replace(b2g(genreferenceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "getbrieffromxml"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION getbrieffromxml(axmlsource varchar(255))
  RETURNS varchar(255) CHARSET utf8
  DETERMINISTIC
body:begin
declare aoutstr  varchar(255);
declare afrom int;
declare ato int;
set afrom = charindex('<brief>', axmlsource);
set ato = charindex('</brief>', axmlsource);
if (afrom > 0 and ato > 0) then
  set aoutstr = substring(axmlsource, afrom + 7, ato - afrom - 7);
else
  set aoutstr = '';
end if;
return aoutstr;
end
$$

--
-- Создать функцию "getclientsms"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION getclientsms(aclientid varchar(38)
, arowid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;

  SELECT
    COUNT(*) INTO existscnt
  FROM arsms_data
    JOIN arc_md
      ON arc_md.moduleserial = arsms_data.serialno
  WHERE arc_md.instanceid = g2b(aclientid)
  AND arsms_dataid = g2b(arowid);
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  RETURN 1;
END
$$

--
-- Создать функцию "getidfromxml"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION getidfromxml(axmlsource varchar(255))
  RETURNS varchar(255) CHARSET utf8
  DETERMINISTIC
begin
declare aoutstr  varchar(255);
declare afrom  int;
declare ato  int;

set afrom = charindex('<id>', axmlsource);
set ato = charindex('</id>', axmlsource);
if (afrom > 0 and ato > 0) then
  set aoutstr = substring(axmlsource, afrom + 4, ato - afrom - 4);
 else 
  set aoutstr = '';
end if;

return aoutstr;
end
$$

--
-- Создать функцию "getmodulename"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION getmodulename(aclientid varchar(38)
, arowid varchar(38))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE aname varchar(255);

  SELECT
    arc_md.name INTO aname
  FROM arc_md
    JOIN arsms_data
      ON arc_md.moduleserial = arsms_data.serialno
  WHERE arc_md.instanceid = g2b(aclientid)
  AND arsms_dataid = g2b(arowid) LIMIT 0, 1;

  RETURN aname;
END
$$

--
-- Создать функцию "groups_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION groups_brief_f(
 agroupsid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agroupsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from groups where groupsid=agroupsid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from groups  where  groupsid = agroupsid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "groups_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION groups_mref_f(
 agroups_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select groups_brief_f(groupsid, alang)  from groups
where agroups_ref like concat('%',replace(replace(b2g(groupsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "groupuser_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION groupuser_brief_f(
 agroupuserid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if agroupuserid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from groupuser where groupuserid=agroupuserid;
if aec<>0 then
  set abrief='';
select theuser
 into atmpid  from groupuser  where  groupuserid = agroupuserid; 
 select users_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "groupuser_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION groupuser_mref_f(
 agroupuser_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select groupuser_brief_f(groupuserid, alang)  from groupuser
where agroupuser_ref like concat('%',replace(replace(b2g(groupuserid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "instancevalidator_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION instancevalidator_brief_f(
 ainstancevalidatorid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ainstancevalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from instancevalidator where instancevalidatorid=ainstancevalidatorid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from instancevalidator  where  instancevalidatorid = ainstancevalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "instancevalidator_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION instancevalidator_mref_f(
 ainstancevalidator_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select instancevalidator_brief_f(instancevalidatorid, alang)  from instancevalidator
where ainstancevalidator_ref like concat('%',replace(replace(b2g(instancevalidatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "instance_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION instance_brief_f(
 ainstanceid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin
 declare abrief varchar(255);
 declare aec int;
if ainstanceid is null then set abrief=''; return abrief; end if;
select count(*) into aec from instance where instanceid=ainstanceid;
if aec=0 then
  set abrief='';
  select concat(abrief
  ,  ifnull(name,''))
 into abrief from instance  where  instanceid = ainstanceid;
else
  set abrief= '';
end if;
set abrief=left(abrief,255);
  return abrief;
end
$$

--
-- Создать функцию "instance_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION instance_mref_f(
 ainstance_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select instance_brief_f(instanceid, alang)  from instance
where ainstance_ref like concat('%',replace(replace(b2g(instanceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_crole_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_crole_brief_f(
 aiu_croleid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_croleid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_crole where iu_croleid=aiu_croleid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_crole  where  iu_croleid = aiu_croleid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_crole_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_crole_mref_f(
 aiu_crole_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_crole_brief_f(iu_croleid, alang)  from iu_crole
where aiu_crole_ref like concat('%',replace(replace(b2g(iu_croleid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_int_modules_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_int_modules_brief_f(
 aiu_int_modulesid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_int_modulesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_int_modules where iu_int_modulesid=aiu_int_modulesid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_int_modules  where  iu_int_modulesid = aiu_int_modulesid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from iu_int_modules  where  iu_int_modulesid = aiu_int_modulesid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_int_modules_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_int_modules_mref_f(
 aiu_int_modules_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_int_modules_brief_f(iu_int_modulesid, alang)  from iu_int_modules
where aiu_int_modules_ref like concat('%',replace(replace(b2g(iu_int_modulesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_rcfg_def_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_def_brief_f(
 aiu_rcfg_defid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_def where iu_rcfg_defid=aiu_rcfg_defid;
if aec<>0 then
  set abrief='';
select therole
 into atmpid  from iu_rcfg_def  where  iu_rcfg_defid = aiu_rcfg_defid; 
 select iu_crole_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_rcfg_def_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_def_mref_f(
 aiu_rcfg_def_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_def_brief_f(iu_rcfg_defid, alang)  from iu_rcfg_def
where aiu_rcfg_def_ref like concat('%',replace(replace(b2g(iu_rcfg_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_rcfg_docmode_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_docmode_brief_f(
 aiu_rcfg_docmodeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_docmodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_docmode where iu_rcfg_docmodeid=aiu_rcfg_docmodeid;
if aec<>0 then
  set abrief='';
select the_document
 into atmpid  from iu_rcfg_docmode  where  iu_rcfg_docmodeid = aiu_rcfg_docmodeid; 
 select objecttype_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_rcfg_docmode_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_docmode_mref_f(
 aiu_rcfg_docmode_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_docmode_brief_f(iu_rcfg_docmodeid, alang)  from iu_rcfg_docmode
where aiu_rcfg_docmode_ref like concat('%',replace(replace(b2g(iu_rcfg_docmodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_rcfg_mod_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_mod_brief_f(
 aiu_rcfg_modid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_rcfg_modid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_rcfg_mod where iu_rcfg_modid=aiu_rcfg_modid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from iu_rcfg_mod  where  iu_rcfg_modid = aiu_rcfg_modid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_rcfg_mod  where  iu_rcfg_modid = aiu_rcfg_modid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_rcfg_mod_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_rcfg_mod_mref_f(
 aiu_rcfg_mod_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_rcfg_mod_brief_f(iu_rcfg_modid, alang)  from iu_rcfg_mod
where aiu_rcfg_mod_ref like concat('%',replace(replace(b2g(iu_rcfg_modid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "iu_u_def_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_u_def_brief_f(
 aiu_u_defid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aiu_u_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from iu_u_def where iu_u_defid=aiu_u_defid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(lastname,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
  select concat(abrief 
  , '' , ifnull(surname,'') ,' '  )
  into abrief   from iu_u_def  where  iu_u_defid = aiu_u_defid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "iu_u_def_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION iu_u_def_mref_f(
 aiu_u_def_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select iu_u_def_brief_f(iu_u_defid, alang)  from iu_u_def
where aiu_u_def_ref like concat('%',replace(replace(b2g(iu_u_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "jcolumnsource_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION jcolumnsource_brief_f(
 ajcolumnsourceid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajcolumnsourceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from jcolumnsource where jcolumnsourceid=ajcolumnsourceid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(viewfield,'') ,' '  )
  into abrief   from jcolumnsource  where  jcolumnsourceid = ajcolumnsourceid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "jcolumnsource_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION jcolumnsource_mref_f(
 ajcolumnsource_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select jcolumnsource_brief_f(jcolumnsourceid, alang)  from jcolumnsource
where ajcolumnsource_ref like concat('%',replace(replace(b2g(jcolumnsourceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "journalcolumn_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journalcolumn_brief_f(
 ajournalcolumnid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalcolumnid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journalcolumn where journalcolumnid=ajournalcolumnid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from journalcolumn  where  journalcolumnid = ajournalcolumnid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "journalcolumn_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journalcolumn_mref_f(
 ajournalcolumn_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journalcolumn_brief_f(journalcolumnid, alang)  from journalcolumn
where ajournalcolumn_ref like concat('%',replace(replace(b2g(journalcolumnid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "journalsrc_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journalsrc_brief_f(
 ajournalsrcid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalsrcid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journalsrc where journalsrcid=ajournalsrcid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(viewalias,'') ,' '  )
  into abrief   from journalsrc  where  journalsrcid = ajournalsrcid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "journalsrc_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journalsrc_mref_f(
 ajournalsrc_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journalsrc_brief_f(journalsrcid, alang)  from journalsrc
where ajournalsrc_ref like concat('%',replace(replace(b2g(journalsrcid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "journal_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journal_brief_f(
 ajournalid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ajournalid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from journal where journalid=ajournalid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from journal  where  journalid = ajournalid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "journal_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION journal_mref_f(
 ajournal_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select journal_brief_f(journalid, alang)  from journal
where ajournal_ref like concat('%',replace(replace(b2g(journalid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "localizeinfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION localizeinfo_brief_f(
 alocalizeinfoid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if alocalizeinfoid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from localizeinfo where localizeinfoid=alocalizeinfoid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(langfull,'') ,' '  )
  into abrief   from localizeinfo  where  localizeinfoid = alocalizeinfoid; 
  select concat(abrief 
  , '' , ifnull(langshort,'') ,' '  )
  into abrief   from localizeinfo  where  localizeinfoid = alocalizeinfoid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "localizeinfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION localizeinfo_mref_f(
 alocalizeinfo_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select localizeinfo_brief_f(localizeinfoid, alang)  from localizeinfo
where alocalizeinfo_ref like concat('%',replace(replace(b2g(localizeinfoid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "methodrestriction_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION methodrestriction_brief_f(
 amethodrestrictionid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amethodrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from methodrestriction where methodrestrictionid=amethodrestrictionid;
if aec<>0 then
  set abrief='';
select method
 into atmpid  from methodrestriction  where  methodrestrictionid = amethodrestrictionid; 
 select sharedmethod_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select isrestricted
 into aec  from methodrestriction where methodrestrictionid=amethodrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "methodrestriction_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION methodrestriction_mref_f(
 amethodrestriction_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select methodrestriction_brief_f(methodrestrictionid, alang)  from methodrestriction
where amethodrestriction_ref like concat('%',replace(replace(b2g(methodrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "mtz2job_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtz2job_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "mtz2job_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtz2job_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "mtzapp_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzapp_brief_f(
 amtzappid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzappid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzapp where mtzappid=amtzappid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from mtzapp  where  mtzappid = amtzappid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "mtzapp_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzapp_mref_f(
 amtzapp_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzapp_brief_f(mtzappid, alang)  from mtzapp
where amtzapp_ref like concat('%',replace(replace(b2g(mtzappid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "mtzextrel_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzextrel_brief_f(
 amtzextrelid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzextrelid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzextrel where mtzextrelid=amtzextrelid;
if aec<>0 then
  set abrief='';
 select theplatform
 into aec  from mtzextrel where mtzextrelid=amtzextrelid;
  case aec 
when 3 then 
  select concat(abrief ,
 'other; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'dotnet; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'java; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'vb6; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "mtzextrel_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzextrel_mref_f(
 amtzextrel_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzextrel_brief_f(mtzextrelid, alang)  from mtzextrel
where amtzextrel_ref like concat('%',replace(replace(b2g(mtzextrelid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "mtzext_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzext_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzext_def_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzext_def_brief_f(
 amtzext_defid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if amtzext_defid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from mtzext_def where mtzext_defid=amtzext_defid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from mtzext_def  where  mtzext_defid = amtzext_defid; 
 select exttype
 into aec  from mtzext_def where mtzext_defid=amtzext_defid;
  case aec 
when 6 then 
  select concat(abrief ,
 'verifyrowext; ') into abrief ;
when 7 then 
  select concat(abrief ,
 'codegenerator; ') into abrief ;
when 5 then 
  select concat(abrief ,
 'defaultext; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'statusext; ') into abrief ;
when 4 then 
  select concat(abrief ,
 'jrnlrunext; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'customext; ') into abrief ;
when 8 then 
  select concat(abrief ,
 'armgenerator; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'onformext; ') into abrief ;
when 3 then 
  select concat(abrief ,
 'jrnladdext; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "mtzext_def_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzext_def_mref_f(
 amtzext_def_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select mtzext_def_brief_f(mtzext_defid, alang)  from mtzext_def
where amtzext_def_ref like concat('%',replace(replace(b2g(mtzext_defid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "mtzext_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzext_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzfltr_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzfltr_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzfltr_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzfltr_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzjrnl_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzjrnl_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzjrnl_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzjrnl_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzmetamodel_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzmetamodel_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzmetamodel_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzmetamodel_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzrprt_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzrprt_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzrprt_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzrprt_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzsystem_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzsystem_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzsystem_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzsystem_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzusers_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzusers_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzusers_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzusers_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "mtzwp_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzwp_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "mtzwp_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION mtzwp_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "nextstate_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION nextstate_brief_f(
 anextstateid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anextstateid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from nextstate where nextstateid=anextstateid;
if aec<>0 then
  set abrief='';
select thestate
 into atmpid  from nextstate  where  nextstateid = anextstateid; 
 select objstatus_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "nextstate_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION nextstate_mref_f(
 anextstate_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select nextstate_brief_f(nextstateid, alang)  from nextstate
where anextstate_ref like concat('%',replace(replace(b2g(nextstateid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "NotArchived"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION NotArchived(aINSTANCEID binary(16))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN

  DECLARE existsCnt int;
  SELECT
    0 INTO existsCnt;
  SELECT
    archived INTO existsCnt
  FROM instance
  WHERE INSTANCEID = aINSTANCEID LIMIT 0, 1;
  IF existsCnt = 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END
$$

--
-- Создать функцию "num_head_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_head_brief_f(
 anum_headid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_headid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_head where num_headid=anum_headid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from num_head  where  num_headid = anum_headid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "num_head_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_head_mref_f(
 anum_head_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_head_brief_f(num_headid, alang)  from num_head
where anum_head_ref like concat('%',replace(replace(b2g(num_headid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "num_values_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_values_brief_f(
 anum_valuesid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_valuesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_values where num_valuesid=anum_valuesid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(the_value,'') ,' '  )
  into abrief   from num_values  where  num_valuesid = anum_valuesid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "num_values_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_values_mref_f(
 anum_values_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_values_brief_f(num_valuesid, alang)  from num_values
where anum_values_ref like concat('%',replace(replace(b2g(num_valuesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "num_zones_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_zones_brief_f(
 anum_zonesid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if anum_zonesid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from num_zones where num_zonesid=anum_zonesid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(zonemask,'') ,' '  )
  into abrief   from num_zones  where  num_zonesid = anum_zonesid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "num_zones_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION num_zones_mref_f(
 anum_zones_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select num_zones_brief_f(num_zonesid, alang)  from num_zones
where anum_zones_ref like concat('%',replace(replace(b2g(num_zonesid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "objectmode_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objectmode_brief_f(
 aobjectmodeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjectmodeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objectmode where objectmodeid=aobjectmodeid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from objectmode  where  objectmodeid = aobjectmodeid; 
 select defaultmode
 into aec  from objectmode where objectmodeid=aobjectmodeid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "objectmode_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objectmode_mref_f(
 aobjectmode_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objectmode_brief_f(objectmodeid, alang)  from objectmode
where aobjectmode_ref like concat('%',replace(replace(b2g(objectmodeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "objecttype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objecttype_brief_f(
 aobjecttypeid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjecttypeid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objecttype where objecttypeid=aobjecttypeid;
if aec<>0 then
  set abrief='';
select package
 into atmpid  from objecttype  where  objecttypeid = aobjecttypeid; 
 select mtzapp_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(the_comment,'') ,' '  )
  into abrief   from objecttype  where  objecttypeid = aobjecttypeid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "objecttype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objecttype_mref_f(
 aobjecttype_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objecttype_brief_f(objecttypeid, alang)  from objecttype
where aobjecttype_ref like concat('%',replace(replace(b2g(objecttypeid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "objstatus_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objstatus_brief_f(
 aobjstatusid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aobjstatusid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from objstatus where objstatusid=aobjstatusid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from objstatus  where  objstatusid = aobjstatusid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "objstatus_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION objstatus_mref_f(
 aobjstatus_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select objstatus_brief_f(objstatusid, alang)  from objstatus
where aobjstatus_ref like concat('%',replace(replace(b2g(objstatusid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "parameters_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION parameters_brief_f(
 aparametersid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aparametersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from parameters where parametersid=aparametersid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from parameters  where  parametersid = aparametersid; 
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from parameters  where  parametersid = aparametersid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "parameters_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION parameters_mref_f(
 aparameters_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select parameters_brief_f(parametersid, alang)  from parameters
where aparameters_ref like concat('%',replace(replace(b2g(parametersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "parentpackage_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION parentpackage_brief_f(
 aparentpackageid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aparentpackageid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from parentpackage where parentpackageid=aparentpackageid;
if aec<>0 then
  set abrief='';
select package
 into atmpid  from parentpackage  where  parentpackageid = aparentpackageid; 
 select mtzapp_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "parentpackage_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION parentpackage_mref_f(
 aparentpackage_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select parentpackage_brief_f(parentpackageid, alang)  from parentpackage
where aparentpackage_ref like concat('%',replace(replace(b2g(parentpackageid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "partmenu_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partmenu_brief_f(
 apartmenuid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartmenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partmenu where partmenuid=apartmenuid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from partmenu  where  partmenuid = apartmenuid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "partmenu_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partmenu_mref_f(
 apartmenu_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partmenu_brief_f(partmenuid, alang)  from partmenu
where apartmenu_ref like concat('%',replace(replace(b2g(partmenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "partparammap_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partparammap_brief_f(
 apartparammapid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartparammapid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partparammap where partparammapid=apartparammapid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(fieldname,'') ,' '  )
  into abrief   from partparammap  where  partparammapid = apartparammapid; 
  select concat(abrief 
  , '' , ifnull(paramname,'') ,' '  )
  into abrief   from partparammap  where  partparammapid = apartparammapid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "partparammap_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partparammap_mref_f(
 apartparammap_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partparammap_brief_f(partparammapid, alang)  from partparammap
where apartparammap_ref like concat('%',replace(replace(b2g(partparammapid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "partview_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partview_brief_f(
 apartviewid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartviewid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partview where partviewid=apartviewid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from partview  where  partviewid = apartviewid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "partview_lnk_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partview_lnk_brief_f(
 apartview_lnkid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartview_lnkid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from partview_lnk where partview_lnkid=apartview_lnkid;
if aec<>0 then
  set abrief='';
select theview
 into atmpid  from partview_lnk  where  partview_lnkid = apartview_lnkid; 
 select partview_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "partview_lnk_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partview_lnk_mref_f(
 apartview_lnk_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partview_lnk_brief_f(partview_lnkid, alang)  from partview_lnk
where apartview_lnk_ref like concat('%',replace(replace(b2g(partview_lnkid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "partview_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION partview_mref_f(
 apartview_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select partview_brief_f(partviewid, alang)  from partview
where apartview_ref like concat('%',replace(replace(b2g(partviewid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "part_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION part_brief_f(
 apartid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if apartid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from part where partid=apartid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from part  where  partid = apartid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from part  where  partid = apartid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "part_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION part_mref_f(
 apart_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select part_brief_f(partid, alang)  from part
where apart_ref like concat('%',replace(replace(b2g(partid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "reports_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION reports_brief_f(
 areportsid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if areportsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from reports where reportsid=areportsid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from reports  where  reportsid = areportsid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "reports_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION reports_mref_f(
 areports_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select reports_brief_f(reportsid, alang)  from reports
where areports_ref like concat('%',replace(replace(b2g(reportsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "roles_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION roles_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "roles_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION roles_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "rptfields_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptfields_brief_f(
 arptfieldsid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptfieldsid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptfields where rptfieldsid=arptfieldsid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptfields  where  rptfieldsid = arptfieldsid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "rptfields_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptfields_mref_f(
 arptfields_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptfields_brief_f(rptfieldsid, alang)  from rptfields
where arptfields_ref like concat('%',replace(replace(b2g(rptfieldsid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "rptformula_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptformula_brief_f(
 arptformulaid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptformulaid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptformula where rptformulaid=arptformulaid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptformula  where  rptformulaid = arptformulaid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "rptformula_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptformula_mref_f(
 arptformula_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptformula_brief_f(rptformulaid, alang)  from rptformula
where arptformula_ref like concat('%',replace(replace(b2g(rptformulaid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "rptstruct_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptstruct_brief_f(
 arptstructid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if arptstructid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from rptstruct where rptstructid=arptstructid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from rptstruct  where  rptstructid = arptstructid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "rptstruct_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION rptstruct_mref_f(
 arptstruct_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select rptstruct_brief_f(rptstructid, alang)  from rptstruct
where arptstruct_ref like concat('%',replace(replace(b2g(rptstructid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "script_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION script_brief_f(
 ascriptid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ascriptid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from script where scriptid=ascriptid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from script  where  scriptid = ascriptid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "script_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION script_mref_f(
 ascript_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select script_brief_f(scriptid, alang)  from script
where ascript_ref like concat('%',replace(replace(b2g(scriptid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "sharedmethod_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION sharedmethod_brief_f(
 asharedmethodid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asharedmethodid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from sharedmethod where sharedmethodid=asharedmethodid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from sharedmethod  where  sharedmethodid = asharedmethodid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "sharedmethod_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION sharedmethod_mref_f(
 asharedmethod_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select sharedmethod_brief_f(sharedmethodid, alang)  from sharedmethod
where asharedmethod_ref like concat('%',replace(replace(b2g(sharedmethodid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "stdinfostore_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION stdinfostore_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "stdinfostore_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION stdinfostore_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "stdnumerator_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION stdnumerator_access_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt > 0 then
     return 1;
  else
     return 0;
  end if;
 return 1;
end
$$

--
-- Создать функцию "stdnumerator_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION stdnumerator_export_f(
 acursession varchar(38)
, ainstanceid varchar(38)
)
  RETURNS tinyint(1)
  READS SQL DATA
begin  
  declare existscnt int;  
  select count(*) into existscnt from the_session 
  where the_sessionid =g2b(acursession)  and closed=0;
  if existscnt = 0 then
     return 0;
  end if;
 -- export no data by default !!! 
 return 0;
end
$$

--
-- Создать функцию "structrestriction_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION structrestriction_brief_f(
 astructrestrictionid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if astructrestrictionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from structrestriction where structrestrictionid=astructrestrictionid;
if aec<>0 then
  set abrief='';
select struct
 into atmpid  from structrestriction  where  structrestrictionid = astructrestrictionid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select allowread
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowadd
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowedit
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
 select allowdelete
 into aec  from structrestriction where structrestrictionid=astructrestrictionid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "structrestriction_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION structrestriction_mref_f(
 astructrestriction_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select structrestriction_brief_f(structrestrictionid, alang)  from structrestriction
where astructrestriction_ref like concat('%',replace(replace(b2g(structrestrictionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "syslog_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION syslog_brief_f(
 asyslogid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asyslogid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from syslog where syslogid=asyslogid;
if aec<>0 then
  set abrief='';
select thesession
 into atmpid  from syslog  where  syslogid = asyslogid; 
 select the_session_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
  select concat(abrief 
  , '' , ifnull(logstructid,'') ,' '  )
  into abrief   from syslog  where  syslogid = asyslogid; 
  select concat(abrief 
  , '' , ifnull(verb,'') ,' '  )
  into abrief   from syslog  where  syslogid = asyslogid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "syslog_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION syslog_mref_f(
 asyslog_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select syslog_brief_f(syslogid, alang)  from syslog
where asyslog_ref like concat('%',replace(replace(b2g(syslogid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "sysrefcache_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION sysrefcache_brief_f(
 asysrefcacheid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if asysrefcacheid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from sysrefcache where sysrefcacheid=asysrefcacheid;
if aec<>0 then
  set abrief='';
select sessionid
 into atmpid  from sysrefcache  where  sysrefcacheid = asysrefcacheid; 
 select the_session_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "sysrefcache_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION sysrefcache_mref_f(
 asysrefcache_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select sysrefcache_brief_f(sysrefcacheid, alang)  from sysrefcache
where asysrefcache_ref like concat('%',replace(replace(b2g(sysrefcacheid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "the_session_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION the_session_brief_f(
 athe_sessionid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if athe_sessionid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from the_session where the_sessionid=athe_sessionid;
if aec<>0 then
  set abrief='';
select userrole
 into atmpid  from the_session  where  the_sessionid = athe_sessionid; 
 select groups_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select closed
 into aec  from the_session where the_sessionid=athe_sessionid;
  case aec 
when 1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
select usersid
 into atmpid  from the_session  where  the_sessionid = athe_sessionid; 
 select users_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "the_session_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION the_session_mref_f(
 athe_session_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select the_session_brief_f(the_sessionid, alang)  from the_session
where athe_session_ref like concat('%',replace(replace(b2g(the_sessionid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "tocard_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tocard_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "tocard_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tocard_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "tod_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "tod_bug_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_bug_brief_f(atod_bugid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_bugid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_bug
  WHERE tod_bugid = atod_bugid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      the_system INTO atmpid
    FROM tod_bug
    WHERE tod_bugid = atod_bugid;
    SELECT
      tod_system_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_bug
    WHERE tod_bugid = atod_bugid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_bug_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_bug_mref_f(atod_bug_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_bug_brief_f(tod_bugid, alang)
  FROM tod_bug
  WHERE atod_bug_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_bugid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_building_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_building_brief_f(atod_buildingid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_buildingid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_building
  WHERE tod_buildingid = atod_buildingid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      thefactory INTO atmpid
    FROM tod_building
    WHERE tod_buildingid = atod_buildingid;
    SELECT
      tod_factory_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_building
    WHERE tod_buildingid = atod_buildingid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_building_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_building_mref_f(atod_building_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_building_brief_f(tod_buildingid, alang)
  FROM tod_building
  WHERE atod_building_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_buildingid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_edizm_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_edizm_brief_f(atod_edizmid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_edizmid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_edizm
  WHERE tod_edizmid = atod_edizmid;
  IF aec <> 0 THEN
    SET abrief = '';
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_edizm_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_edizm_mref_f(atod_edizm_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_edizm_brief_f(tod_edizmid, alang)
  FROM tod_edizm
  WHERE atod_edizm_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_edizmid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "tod_factory_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_factory_brief_f(atod_factoryid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_factoryid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_factory
  WHERE tod_factoryid = atod_factoryid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_factory
    WHERE tod_factoryid = atod_factoryid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_factory_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_factory_mref_f(atod_factory_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_factory_brief_f(tod_factoryid, alang)
  FROM tod_factory
  WHERE atod_factory_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_factoryid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_material_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_material_brief_f(atod_materialid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_materialid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_material
  WHERE tod_materialid = atod_materialid;
  IF aec <> 0 THEN
    SET abrief = '';
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_material_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_material_mref_f(atod_material_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_material_brief_f(tod_materialid, alang)
  FROM tod_material
  WHERE atod_material_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_materialid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_model_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_model_brief_f(atod_modelid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_modelid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_model
  WHERE tod_modelid = atod_modelid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_model
    WHERE tod_modelid = atod_modelid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_model_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_model_mref_f(atod_model_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_model_brief_f(tod_modelid, alang)
  FROM tod_model
  WHERE atod_model_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_modelid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_oprole_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_oprole_brief_f(atod_oproleid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_oproleid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_oprole
  WHERE tod_oproleid = atod_oproleid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_oprole
    WHERE tod_oproleid = atod_oproleid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_oprole_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_oprole_mref_f(atod_oprole_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_oprole_brief_f(tod_oproleid, alang)
  FROM tod_oprole
  WHERE atod_oprole_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_oproleid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_st_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_st_brief_f(atod_stid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_stid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_st
  WHERE tod_stid = atod_stid;
  IF aec <> 0 THEN
    SET abrief = '';
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_st_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_st_mref_f(atod_st_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_st_brief_f(tod_stid, alang)
  FROM tod_st
  WHERE atod_st_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_stid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_system_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_system_brief_f(atod_systemid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_systemid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_system
  WHERE tod_systemid = atod_systemid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_system
    WHERE tod_systemid = atod_systemid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_system_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_system_mref_f(atod_system_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_system_brief_f(tod_systemid, alang)
  FROM tod_system
  WHERE atod_system_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_systemid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_trand_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_trand_brief_f(atod_trandid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_trandid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_trand
  WHERE tod_trandid = atod_trandid;
  IF aec <> 0 THEN
    SET abrief = '';
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_trand_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_trand_mref_f(atod_trand_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_trand_brief_f(tod_trandid, alang)
  FROM tod_trand
  WHERE atod_trand_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_trandid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "tod_valtype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_valtype_brief_f(atod_valtypeid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF atod_valtypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM tod_valtype
  WHERE tod_valtypeid = atod_valtypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM tod_valtype
    WHERE tod_valtypeid = atod_valtypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "tod_valtype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tod_valtype_mref_f(atod_valtype_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    tod_valtype_brief_f(tod_valtypeid, alang)
  FROM tod_valtype
  WHERE atod_valtype_ref LIKE concat('%', REPLACE(REPLACE(b2g(tod_valtypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "toimg_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION toimg_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "toimg_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION toimg_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "toop_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION toop_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "toop_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION toop_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "tor_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tor_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "tor_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tor_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "tosched_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tosched_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "tosched_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION tosched_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "totask_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION totask_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "totask_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION totask_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "totrn_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION totrn_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "totrn_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION totrn_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "typemenu_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION typemenu_brief_f(
 atypemenuid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if atypemenuid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from typemenu where typemenuid=atypemenuid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from typemenu  where  typemenuid = atypemenuid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "typemenu_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION typemenu_mref_f(
 atypemenu_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select typemenu_brief_f(typemenuid, alang)  from typemenu
where atypemenu_ref like concat('%',replace(replace(b2g(typemenuid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "uniqueconstraint_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION uniqueconstraint_brief_f(
 auniqueconstraintid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if auniqueconstraintid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from uniqueconstraint where uniqueconstraintid=auniqueconstraintid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from uniqueconstraint  where  uniqueconstraintid = auniqueconstraintid; 
 select perparent
 into aec  from uniqueconstraint where uniqueconstraintid=auniqueconstraintid;
  case aec 
when -1 then 
  select concat(abrief ,
 '??; ') into abrief ;
when 0 then 
  select concat(abrief ,
 '???; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "uniqueconstraint_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION uniqueconstraint_mref_f(
 auniqueconstraint_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select uniqueconstraint_brief_f(uniqueconstraintid, alang)  from uniqueconstraint
where auniqueconstraint_ref like concat('%',replace(replace(b2g(uniqueconstraintid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "users_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION users_brief_f(
 ausersid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if ausersid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from users where usersid=ausersid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(family,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
  select concat(abrief 
  , '' , ifnull(surname,'') ,' '  )
  into abrief   from users  where  usersid = ausersid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "users_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION users_mref_f(
 ausers_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select users_brief_f(usersid, alang)  from users
where ausers_ref like concat('%',replace(replace(b2g(usersid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "validator_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION validator_brief_f(
 avalidatorid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if avalidatorid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from validator where validatorid=avalidatorid;
if aec<>0 then
  set abrief='';
select target
 into atmpid  from validator  where  validatorid = avalidatorid; 
 select generator_target_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "validator_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION validator_mref_f(
 avalidator_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select validator_brief_f(validatorid, alang)  from validator
where avalidator_ref like concat('%',replace(replace(b2g(validatorid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "vdage_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdage_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdage_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdage_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdapl_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdapl_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdapl_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdapl_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdappr_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdappr_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdappr_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdappr_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdast_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdast_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdast_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdast_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdbrw_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdbrw_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdbrw_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdbrw_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcat_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcat_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcat_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcat_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcn_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcn_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcn_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcn_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdcst_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcst_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdcst_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdcst_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vddev_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vddev_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vddev_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vddev_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdfrmt_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdfrmt_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdfrmt_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdfrmt_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdinter_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdinter_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdinter_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdinter_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdmstat_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdmstat_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdmstat_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdmstat_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdos_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdos_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdos_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdos_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdpos_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdpos_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdpos_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdpos_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdpt_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdpt_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdpt_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdpt_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdrel_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdrel_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdrel_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdrel_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdrg_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdrg_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdrg_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdrg_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdtt_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdtt_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdtt_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdtt_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vdt_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdt_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt > 0 THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
  RETURN 1;
END
$$

--
-- Создать функцию "vdt_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vdt_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "viewcolumn_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION viewcolumn_brief_f(
 aviewcolumnid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aviewcolumnid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from viewcolumn where viewcolumnid=aviewcolumnid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(name,'') ,' '  )
  into abrief   from viewcolumn  where  viewcolumnid = aviewcolumnid; 
select frompart
 into atmpid  from viewcolumn  where  viewcolumnid = aviewcolumnid; 
 select part_brief_f(atmpid, alang) into atmpbrief;
  set abrief= concat(abrief , '' , ifnull(atmpbrief,'') , ' ');
 select aggregation
 into aec  from viewcolumn where viewcolumnid=aviewcolumnid;
  case aec 
when 3 then 
  select concat(abrief ,
 'sum; ') into abrief ;
when 1 then 
  select concat(abrief ,
 'avg; ') into abrief ;
when 6 then 
  select concat(abrief ,
 'custom; ') into abrief ;
when 0 then 
  select concat(abrief ,
 'none; ') into abrief ;
when 2 then 
  select concat(abrief ,
 'count; ') into abrief ;
when 5 then 
  select concat(abrief ,
 'max; ') into abrief ;
when 4 then 
  select concat(abrief ,
 'min; ') into abrief ;
 else 
  select concat(abrief ,
 '; ') into abrief ;
  end case; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "viewcolumn_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION viewcolumn_mref_f(
 aviewcolumn_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select viewcolumn_brief_f(viewcolumnid, alang)  from viewcolumn
where aviewcolumn_ref like concat('%',replace(replace(b2g(viewcolumnid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

--
-- Создать функцию "vkads_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkads_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  /*
  select count(*) into existscnt from vk_adsowner 
  join vk_usr on vk_adsowner.vkusr=vk_usr.vk_usrid
  join users on vk_usr.vk_usrid=users.usersid 
  join the_session on users.usersid=the_session.usersid
  where the_sessionid =g2b(acursession) and vk_adsowner.instanceid=g2b(ainstanceid);
  if existscnt = 0 then
     return 0;
  end if;
*/
  RETURN 1;
END
$$

--
-- Создать функцию "vkads_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkads_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkbrk_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkbrk_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  SELECT
    COUNT(*) INTO existscnt
  FROM vk_brkowner
    JOIN vk_usr
      ON vk_brkowner.vkusr = vk_usr.vk_usrid
    JOIN users
      ON vk_usr.vk_usrid = users.usersid
    JOIN the_session
      ON users.usersid = the_session.usersid
  WHERE the_sessionid = g2b(acursession)
  AND vk_brkowner.instanceid = g2b(ainstanceid);
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  RETURN 1;
END
$$

--
-- Создать функцию "vkbrk_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkbrk_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkcam_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkcam_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  /*
  select count(*) into existscnt from vk_camowner 
  join vk_usr on vk_camowner.vkusr=vk_usr.vk_usrid
  join users on vk_usr.vk_usrid=users.usersid 
  join the_session on users.usersid=the_session.usersid
  where the_sessionid =g2b(acursession) and vk_camowner.instanceid=g2b(ainstanceid);
  if existscnt = 0 then
     return 0;
  end if;
*/
  RETURN 1;
END
$$

--
-- Создать функцию "vkcam_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkcam_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkprj_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkprj_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  /*
  select count(*) into existscnt from vk_prjowner 
  join vk_usr on vk_prjowner.vkusr=vk_usr.vk_usrid
  join users on vk_usr.vk_usrid=users.usersid 
  join the_session on users.usersid=the_session.usersid
  where the_sessionid =g2b(acursession) and vk_prjowner.instanceid=g2b(ainstanceid);
  if existscnt = 0 then
     return 0;
  end if;
*/
  RETURN 1;
END
$$

--
-- Создать функцию "vkprj_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkprj_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkrot_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkrot_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  /*
    select count(*) into existscnt from vk_rotowner 
    join vk_usr on vk_rotowner.vkusr=vk_usr.vk_usrid
    join users on vk_usr.vk_usrid=users.usersid 
    join the_session on users.usersid=the_session.usersid
    where the_sessionid =g2b(acursession) and vk_rotowner.instanceid=g2b(ainstanceid);
    if existscnt = 0 then
       return 0;
    end if;
  */
  RETURN 1;
END
$$

--
-- Создать функцию "vkrot_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkrot_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vktrg_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vktrg_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  /*
  select count(*) into existscnt from vk_trgowner 
  join vk_usr on vk_trgowner.vkusr=vk_usr.vk_usrid
  join users on vk_usr.vk_usrid=users.usersid 
  join the_session on users.usersid=the_session.usersid
  where the_sessionid =g2b(acursession) and vk_trgowner.instanceid=g2b(ainstanceid);
  if existscnt = 0 then
     return 0;
  end if;
*/
  RETURN 1;
END
$$

--
-- Создать функцию "vktrg_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vktrg_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vktsk_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vktsk_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  SELECT
    COUNT(*) INTO existscnt
  FROM vk_taskowner
    JOIN vk_usr
      ON vk_taskowner.vkusr = vk_usr.vk_usrid
    JOIN users
      ON vk_usr.vk_usrid = users.usersid
    JOIN the_session
      ON users.usersid = the_session.usersid
  WHERE the_sessionid = g2b(acursession)
  AND vk_taskowner.instanceid = g2b(ainstanceid);
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;

  RETURN 1;
END
$$

--
-- Создать функцию "vktsk_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vktsk_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vkusr_access_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkusr_access_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  /*
    select count(*) into existscnt from vk_usr
    join users on vk_usr.vk_usrid=users.usersid 
    join the_session on users.usersid=the_session.usersid
    where the_sessionid =g2b(acursession) and vk_usr.instanceid=g2b(ainstanceid);
    if existscnt = 0 then
       return 0;
    end if;
  */
  RETURN 1;
END
$$

--
-- Создать функцию "vkusr_export_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vkusr_export_f(acursession varchar(38)
, ainstanceid varchar(38))
  RETURNS tinyint(1)
  READS SQL DATA
BEGIN
  DECLARE existscnt int;
  SELECT
    COUNT(*) INTO existscnt
  FROM the_session
  WHERE the_sessionid = g2b(acursession)
  AND closed = 0;
  IF existscnt = 0 THEN
    RETURN 0;
  END IF;
  -- export no data by default !!! 
  RETURN 0;
END
$$

--
-- Создать функцию "vk_adformat_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adformat_brief_f(avk_adformatid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adformatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adformat
  WHERE vk_adformatid = avk_adformatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_adformat
    WHERE vk_adformatid = avk_adformatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adformat_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adformat_mref_f(avk_adformat_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adformat_brief_f(vk_adformatid, alang)
  FROM vk_adformat
  WHERE avk_adformat_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adformatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adinfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adinfo_brief_f(avk_adinfoid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adinfo
  WHERE vk_adinfoid = avk_adinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_adinfo
    WHERE vk_adinfoid = avk_adinfoid;
    SELECT
      concat(abrief
      , '', ifnull(ads_id, ''), ' ') INTO abrief
    FROM vk_adinfo
    WHERE vk_adinfoid = avk_adinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adinfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adinfo_mref_f(avk_adinfo_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adinfo_brief_f(vk_adinfoid, alang)
  FROM vk_adinfo
  WHERE avk_adinfo_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adovstat_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adovstat_brief_f(avk_adovstatid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adovstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adovstat
  WHERE vk_adovstatid = avk_adovstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(spent, ''), ' ') INTO abrief
    FROM vk_adovstat
    WHERE vk_adovstatid = avk_adovstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adovstat_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adovstat_mref_f(avk_adovstat_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adovstat_brief_f(vk_adovstatid, alang)
  FROM vk_adovstat
  WHERE avk_adovstat_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adovstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsdaydemografy_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsdaydemografy_brief_f(avk_adsdaydemografyid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsdaydemografyid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsdaydemografy
  WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(s_day, ''), ' ') INTO abrief
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
    SELECT
      concat(abrief
      , '', ifnull(recordtype, ''), ' ') INTO abrief
    FROM vk_adsdaydemografy
    WHERE vk_adsdaydemografyid = avk_adsdaydemografyid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsdaydemografy_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsdaydemografy_mref_f(avk_adsdaydemografy_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsdaydemografy_brief_f(vk_adsdaydemografyid, alang)
  FROM vk_adsdaydemografy
  WHERE avk_adsdaydemografy_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adsdaydemografyid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsovdemografy_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsovdemografy_brief_f(avk_adsovdemografyid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsovdemografyid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsovdemografy
  WHERE vk_adsovdemografyid = avk_adsovdemografyid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(recordtype, ''), ' ') INTO abrief
    FROM vk_adsovdemografy
    WHERE vk_adsovdemografyid = avk_adsovdemografyid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsovdemografy_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsovdemografy_mref_f(avk_adsovdemografy_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsovdemografy_brief_f(vk_adsovdemografyid, alang)
  FROM vk_adsovdemografy
  WHERE avk_adsovdemografy_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adsovdemografyid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsowner_brief_f(avk_adsownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsowner
  WHERE vk_adsownerid = avk_adsownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_adsowner
    WHERE vk_adsownerid = avk_adsownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsowner_mref_f(avk_adsowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsowner_brief_f(vk_adsownerid, alang)
  FROM vk_adsowner
  WHERE avk_adsowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adsownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstate_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstate_brief_f(avk_adstateid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstateid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstate
  WHERE vk_adstateid = avk_adstateid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_adstate
    WHERE vk_adstateid = avk_adstateid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstate_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstate_mref_f(avk_adstate_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstate_brief_f(vk_adstateid, alang)
  FROM vk_adstate
  WHERE avk_adstate_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adstateid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstat_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstat_brief_f(avk_adstatid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstat
  WHERE vk_adstatid = avk_adstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(period, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      concat(abrief
      , '', ifnull(s_day, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      concat(abrief
      , '', ifnull(s_month, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
    SELECT
      concat(abrief
      , '', ifnull(overal, ''), ' ') INTO abrief
    FROM vk_adstat
    WHERE vk_adstatid = avk_adstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstat_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstat_mref_f(avk_adstat_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstat_brief_f(vk_adstatid, alang)
  FROM vk_adstat
  WHERE avk_adstat_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adstrg_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstrg_brief_f(avk_adstrgid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adstrgid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adstrg
  WHERE vk_adstrgid = avk_adstrgid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      sex INTO aec
    FROM vk_adstrg
    WHERE vk_adstrgid = avk_adstrgid;
    CASE aec
      WHEN 0 THEN SELECT
            concat(abrief,
            '?? ???????????; ') INTO abrief;
      WHEN 2 THEN SELECT
            concat(abrief,
            '???????; ') INTO abrief;
      WHEN 1 THEN SELECT
            concat(abrief,
            '???????; ') INTO abrief;
      ELSE SELECT
          concat(abrief,
          '; ') INTO abrief;
    END CASE;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adstrg_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adstrg_mref_f(avk_adstrg_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adstrg_brief_f(vk_adstrgid, alang)
  FROM vk_adstrg
  WHERE avk_adstrg_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adstrgid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_adsutm_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsutm_brief_f(avk_adsutmid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_adsutmid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_adsutm
  WHERE vk_adsutmid = avk_adsutmid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(utm_source, ''), ' ') INTO abrief
    FROM vk_adsutm
    WHERE vk_adsutmid = avk_adsutmid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_adsutm_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_adsutm_mref_f(avk_adsutm_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_adsutm_brief_f(vk_adsutmid, alang)
  FROM vk_adsutm
  WHERE avk_adsutm_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_adsutmid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_age_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_age_brief_f(avk_ageid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_ageid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_age
  WHERE vk_ageid = avk_ageid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_age
    WHERE vk_ageid = avk_ageid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_age_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_age_mref_f(avk_age_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_age_brief_f(vk_ageid, alang)
  FROM vk_age
  WHERE avk_age_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_ageid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_approve_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_approve_brief_f(avk_approveid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_approveid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_approve
  WHERE vk_approveid = avk_approveid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_approve
    WHERE vk_approveid = avk_approveid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_approve_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_approve_mref_f(avk_approve_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_approve_brief_f(vk_approveid, alang)
  FROM vk_approve
  WHERE avk_approve_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_approveid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_brkinfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_brkinfo_brief_f(avk_brkinfoid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_brkinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_brkinfo
  WHERE vk_brkinfoid = avk_brkinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_brkinfo
    WHERE vk_brkinfoid = avk_brkinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_brkinfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_brkinfo_mref_f(avk_brkinfo_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_brkinfo_brief_f(vk_brkinfoid, alang)
  FROM vk_brkinfo
  WHERE avk_brkinfo_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_brkinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_brkowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_brkowner_brief_f(avk_brkownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_brkownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_brkowner
  WHERE vk_brkownerid = avk_brkownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_brkowner
    WHERE vk_brkownerid = avk_brkownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_brkowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_brkowner_mref_f(avk_brkowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_brkowner_brief_f(vk_brkownerid, alang)
  FROM vk_brkowner
  WHERE avk_brkowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_brkownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_browser_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_browser_brief_f(avk_browserid integer
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_browserid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_browser
  WHERE vk_browserid = avk_browser;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_browser
    WHERE vk_browserid = avk_browser;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_browser_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_browser_mref_f(avk_browser_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_browser_brief_f(vk_browserid, alang)
  FROM vk_browser
  WHERE avk_browser_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_browserid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_cab_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_cab_brief_f(avk_cabid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_cabid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_cab
  WHERE vk_cabid = avk_cabid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(account_id, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
    SELECT
      concat(abrief
      , '', ifnull(account_type, ''), ' ') INTO abrief
    FROM vk_cab
    WHERE vk_cabid = avk_cabid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_cab_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_cab_mref_f(avk_cab_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_cab_brief_f(vk_cabid, alang)
  FROM vk_cab
  WHERE avk_cab_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_cabid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camovstat_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camovstat_brief_f(avk_camovstatid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camovstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camovstat
  WHERE vk_camovstatid = avk_camovstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(spent, ''), ' ') INTO abrief
    FROM vk_camovstat
    WHERE vk_camovstatid = avk_camovstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camovstat_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camovstat_mref_f(avk_camovstat_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camovstat_brief_f(vk_camovstatid, alang)
  FROM vk_camovstat
  WHERE avk_camovstat_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_camovstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camowner_brief_f(avk_camownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camowner
  WHERE vk_camownerid = avk_camownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_camowner
    WHERE vk_camownerid = avk_camownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camowner_mref_f(avk_camowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camowner_brief_f(vk_camownerid, alang)
  FROM vk_camowner
  WHERE avk_camowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_camownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camp_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camp_brief_f(avk_campid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_campid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camp
  WHERE vk_campid = avk_campid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(campagin_id, ''), ' ') INTO abrief
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      prj INTO atmpid
    FROM vk_camp
    WHERE vk_campid = avk_campid;
    SELECT
      vk_prj_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camp_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camp_mref_f(avk_camp_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camp_brief_f(vk_campid, alang)
  FROM vk_camp
  WHERE avk_camp_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_campid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_camstat_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camstat_brief_f(avk_camstatid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_camstatid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_camstat
  WHERE vk_camstatid = avk_camstatid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(overal, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      concat(abrief
      , '', ifnull(s_day, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      concat(abrief
      , '', ifnull(s_month, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
    SELECT
      concat(abrief
      , '', ifnull(period, ''), ' ') INTO abrief
    FROM vk_camstat
    WHERE vk_camstatid = avk_camstatid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_camstat_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_camstat_mref_f(avk_camstat_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_camstat_brief_f(vk_camstatid, alang)
  FROM vk_camstat
  WHERE avk_camstat_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_camstatid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_castate_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_castate_brief_f(avk_castateid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_castateid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_castate
  WHERE vk_castateid = avk_castateid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_castate
    WHERE vk_castateid = avk_castateid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_castate_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_castate_mref_f(avk_castate_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_castate_brief_f(vk_castateid, alang)
  FROM vk_castate
  WHERE avk_castate_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_castateid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_category_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_category_brief_f(avk_categoryid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_categoryid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_category
  WHERE vk_categoryid = avk_categoryid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_category
    WHERE vk_categoryid = avk_categoryid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_category_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_category_mref_f(avk_category_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_category_brief_f(vk_categoryid, alang)
  FROM vk_category
  WHERE avk_category_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_categoryid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_country_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_country_brief_f(avk_countryid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_countryid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_country
  WHERE vk_countryid = avk_countryid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_country
    WHERE vk_countryid = avk_countryid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_country_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_country_mref_f(avk_country_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_country_brief_f(vk_countryid, alang)
  FROM vk_country
  WHERE avk_country_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_countryid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_device_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_device_brief_f(avk_deviceid integer
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_deviceid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_device
  WHERE vk_deviceid = avk_device;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_device
    WHERE vk_deviceid = avk_device;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_device_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_device_mref_f(avk_device_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_device_brief_f(vk_deviceid, alang)
  FROM vk_device
  WHERE avk_device_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_deviceid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_interest_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_interest_brief_f(avk_interestid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_interestid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_interest
  WHERE vk_interestid = avk_interestid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_interest
    WHERE vk_interestid = avk_interestid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_interest_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_interest_mref_f(avk_interest_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_interest_brief_f(vk_interestid, alang)
  FROM vk_interest
  WHERE avk_interest_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_interestid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_matrialstatus_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_matrialstatus_brief_f(avk_matrialstatusid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_matrialstatusid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_matrialstatus
  WHERE vk_matrialstatusid = avk_matrialstatusid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_matrialstatus
    WHERE vk_matrialstatusid = avk_matrialstatusid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_matrialstatus_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_matrialstatus_mref_f(avk_matrialstatus_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_matrialstatus_brief_f(vk_matrialstatusid, alang)
  FROM vk_matrialstatus
  WHERE avk_matrialstatus_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_matrialstatusid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_os_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_os_brief_f(avk_osid integer
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_osid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_os
  WHERE vk_osid = avk_os;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_os
    WHERE vk_osid = avk_os;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_os_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_os_mref_f(avk_os_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_os_brief_f(vk_osid, alang)
  FROM vk_os
  WHERE avk_os_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_osid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_paytype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_paytype_brief_f(avk_paytypeid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_paytypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_paytype
  WHERE vk_paytypeid = avk_paytypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_paytype
    WHERE vk_paytypeid = avk_paytypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_paytype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_paytype_mref_f(avk_paytype_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_paytype_brief_f(vk_paytypeid, alang)
  FROM vk_paytype
  WHERE avk_paytype_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_paytypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_platform_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_platform_brief_f(avk_platformid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_platformid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_platform
  WHERE vk_platformid = avk_platformid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_platform
    WHERE vk_platformid = avk_platformid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_platform_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_platform_mref_f(avk_platform_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_platform_brief_f(vk_platformid, alang)
  FROM vk_platform
  WHERE avk_platform_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_platformid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_position_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_position_brief_f(avk_positionid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_positionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_position
  WHERE vk_positionid = avk_positionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_position
    WHERE vk_positionid = avk_positionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_position_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_position_mref_f(avk_position_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_position_brief_f(vk_positionid, alang)
  FROM vk_position
  WHERE avk_position_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_positionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_prjowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_prjowner_brief_f(avk_prjownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_prjownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_prjowner
  WHERE vk_prjownerid = avk_prjownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_prjowner
    WHERE vk_prjownerid = avk_prjownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_prjowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_prjowner_mref_f(avk_prjowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_prjowner_brief_f(vk_prjownerid, alang)
  FROM vk_prjowner
  WHERE avk_prjowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_prjownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_prj_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_prj_brief_f(avk_prjid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_prjid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_prj
  WHERE vk_prjid = avk_prjid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_prj
    WHERE vk_prjid = avk_prjid;
    SELECT
      concat(abrief
      , '', ifnull(info, ''), ' ') INTO abrief
    FROM vk_prj
    WHERE vk_prjid = avk_prjid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_prj_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_prj_mref_f(avk_prj_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_prj_brief_f(vk_prjid, alang)
  FROM vk_prj
  WHERE avk_prj_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_prjid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_region_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_region_brief_f(avk_regionid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_regionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_region
  WHERE vk_regionid = avk_regionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_region
    WHERE vk_regionid = avk_regionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_region_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_region_mref_f(avk_region_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_region_brief_f(vk_regionid, alang)
  FROM vk_region
  WHERE avk_region_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_regionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_religion_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_religion_brief_f(avk_religionid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_religionid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_religion
  WHERE vk_religionid = avk_religionid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_religion
    WHERE vk_religionid = avk_religionid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_religion_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_religion_mref_f(avk_religion_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_religion_brief_f(vk_religionid, alang)
  FROM vk_religion
  WHERE avk_religion_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_religionid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotads_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotads_brief_f(avk_rotadsid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotadsid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotads
  WHERE vk_rotadsid = avk_rotadsid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      ads INTO atmpid
    FROM vk_rotads
    WHERE vk_rotadsid = avk_rotadsid;
    SELECT
      vk_adinfo_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotads_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotads_mref_f(avk_rotads_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotads_brief_f(vk_rotadsid, alang)
  FROM vk_rotads
  WHERE avk_rotads_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_rotadsid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotinfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotinfo_brief_f(avk_rotinfoid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotinfo
  WHERE vk_rotinfoid = avk_rotinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      campaign_id INTO atmpid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      vk_camp_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
    SELECT
      status INTO atmpid
    FROM vk_rotinfo
    WHERE vk_rotinfoid = avk_rotinfoid;
    SELECT
      vk_adstate_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotinfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotinfo_mref_f(avk_rotinfo_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotinfo_brief_f(vk_rotinfoid, alang)
  FROM vk_rotinfo
  WHERE avk_rotinfo_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_rotinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_rotowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotowner_brief_f(avk_rotownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_rotownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_rotowner
  WHERE vk_rotownerid = avk_rotownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_rotowner
    WHERE vk_rotownerid = avk_rotownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_rotowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_rotowner_mref_f(avk_rotowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_rotowner_brief_f(vk_rotownerid, alang)
  FROM vk_rotowner
  WHERE avk_rotowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_rotownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskinfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskinfo_brief_f(avk_taskinfoid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskinfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskinfo
  WHERE vk_taskinfoid = avk_taskinfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      tasktype INTO atmpid
    FROM vk_taskinfo
    WHERE vk_taskinfoid = avk_taskinfoid;
    SELECT
      vk_tasktype_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_taskinfo
    WHERE vk_taskinfoid = avk_taskinfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskinfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskinfo_mref_f(avk_taskinfo_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskinfo_brief_f(vk_taskinfoid, alang)
  FROM vk_taskinfo
  WHERE avk_taskinfo_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_taskinfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskmsg_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskmsg_brief_f(avk_taskmsgid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskmsgid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskmsg
  WHERE vk_taskmsgid = avk_taskmsgid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(msgdate, ''), ' ') INTO abrief
    FROM vk_taskmsg
    WHERE vk_taskmsgid = avk_taskmsgid;
    SELECT
      concat(abrief
      , '', ifnull(info, ''), ' ') INTO abrief
    FROM vk_taskmsg
    WHERE vk_taskmsgid = avk_taskmsgid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskmsg_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskmsg_mref_f(avk_taskmsg_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskmsg_brief_f(vk_taskmsgid, alang)
  FROM vk_taskmsg
  WHERE avk_taskmsg_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_taskmsgid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_taskowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskowner_brief_f(avk_taskownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_taskownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_taskowner
  WHERE vk_taskownerid = avk_taskownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_taskowner
    WHERE vk_taskownerid = avk_taskownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_taskowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_taskowner_mref_f(avk_taskowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_taskowner_brief_f(vk_taskownerid, alang)
  FROM vk_taskowner
  WHERE avk_taskowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_taskownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_tasktype_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_tasktype_brief_f(avk_tasktypeid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_tasktypeid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_tasktype
  WHERE vk_tasktypeid = avk_tasktypeid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_tasktype
    WHERE vk_tasktypeid = avk_tasktypeid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_tasktype_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_tasktype_mref_f(avk_tasktype_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_tasktype_brief_f(vk_tasktypeid, alang)
  FROM vk_tasktype
  WHERE avk_tasktype_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_tasktypeid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_town_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_town_brief_f(avk_townid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_townid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_town
  WHERE vk_townid = avk_townid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(title, ''), ' ') INTO abrief
    FROM vk_town
    WHERE vk_townid = avk_townid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_town_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_town_mref_f(avk_town_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_town_brief_f(vk_townid, alang)
  FROM vk_town
  WHERE avk_town_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_townid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trgfiles_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trgfiles_brief_f(avk_trgfilesid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trgfilesid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trgfiles
  WHERE vk_trgfilesid = avk_trgfilesid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_trgfiles
    WHERE vk_trgfilesid = avk_trgfilesid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trgfiles_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trgfiles_mref_f(avk_trgfiles_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trgfiles_brief_f(vk_trgfilesid, alang)
  FROM vk_trgfiles
  WHERE avk_trgfiles_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_trgfilesid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trginfo_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trginfo_brief_f(avk_trginfoid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trginfoid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trginfo
  WHERE vk_trginfoid = avk_trginfoid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(name, ''), ' ') INTO abrief
    FROM vk_trginfo
    WHERE vk_trginfoid = avk_trginfoid;
    SELECT
      concat(abrief
      , '', ifnull(vkid, ''), ' ') INTO abrief
    FROM vk_trginfo
    WHERE vk_trginfoid = avk_trginfoid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trginfo_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trginfo_mref_f(avk_trginfo_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trginfo_brief_f(vk_trginfoid, alang)
  FROM vk_trginfo
  WHERE avk_trginfo_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_trginfoid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_trgowner_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trgowner_brief_f(avk_trgownerid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_trgownerid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_trgowner
  WHERE vk_trgownerid = avk_trgownerid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      vkusr INTO atmpid
    FROM vk_trgowner
    WHERE vk_trgownerid = avk_trgownerid;
    SELECT
      vk_usr_brief_f(atmpid, alang) INTO atmpbrief;
    SET abrief = concat(abrief, '', ifnull(atmpbrief, ''), ' ');
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_trgowner_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_trgowner_mref_f(avk_trgowner_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_trgowner_brief_f(vk_trgownerid, alang)
  FROM vk_trgowner
  WHERE avk_trgowner_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_trgownerid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "vk_usr_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_usr_brief_f(avk_usrid binary(16)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE abrief varchar(255);
  DECLARE atmpstr varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE atmpid binary(16);
  DECLARE atmpmr varchar(255);
  DECLARE amlftemp varchar(255);
  DECLARE amlfbrief varchar(255);
  DECLARE aec int;
  IF avk_usrid IS NULL THEN
    SET abrief = '';
    RETURN abrief;
  END IF;
  SELECT
    COUNT(*) INTO aec
  FROM vk_usr
  WHERE vk_usrid = avk_usrid;
  IF aec <> 0 THEN
    SET abrief = '';
    SELECT
      concat(abrief
      , '', ifnull(vkid, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
    SELECT
      concat(abrief
      , '', ifnull(first_name, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
    SELECT
      concat(abrief
      , '', ifnull(last_name, ''), ' ') INTO abrief
    FROM vk_usr
    WHERE vk_usrid = avk_usrid;
  ELSE
    SET abrief = '';
  END IF;
  RETURN abrief;
END
$$

--
-- Создать функцию "vk_usr_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION vk_usr_mref_f(avk_usr_ref varchar(255)
, alang varchar(25))
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
BEGIN
  DECLARE amref varchar(255);
  DECLARE atmpbrief varchar(255);
  DECLARE fetch_done int DEFAULT FALSE;
  DECLARE multiref_cursor CURSOR FOR
  SELECT
    vk_usr_brief_f(vk_usrid, alang)
  FROM vk_usr
  WHERE avk_usr_ref LIKE concat('%', REPLACE(REPLACE(b2g(vk_usrid), '{', ''), '}', ''), '%');
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET fetch_done = TRUE;
  SET amref = '';
  OPEN multiref_cursor;
  SET fetch_done = FALSE;
  FETCH multiref_cursor INTO atmpbrief;
  WHILE NOT fetch_done DO
    IF amref <> '' THEN
      SET amref = concat(amref, ',');
    END IF;
    SET amref = concat(amref, atmpbrief);
    SET fetch_done = FALSE;
    FETCH multiref_cursor INTO atmpbrief;
  END WHILE;
  CLOSE multiref_cursor;
  SET amref = LEFT(amref, 255);
  RETURN amref;
END
$$

--
-- Создать функцию "workplace_brief_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION workplace_brief_f(
 aworkplaceid binary(16)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare abrief varchar(255);
 declare atmpstr varchar(255);
 declare atmpbrief varchar(255);
 declare atmpid binary(16);
 declare atmpmr varchar(255); 
 declare amlftemp varchar(255);
 declare amlfbrief varchar(255);
 declare aec int;
if aworkplaceid is null then  set abrief=''; return abrief; end if;
select count(*) into aec from workplace where workplaceid=aworkplaceid;
if aec<>0 then
  set abrief='';
  select concat(abrief 
  , '' , ifnull(caption,'') ,' '  )
  into abrief   from workplace  where  workplaceid = aworkplaceid; 
else
  set abrief= '';
end if;
return abrief;
end
$$

--
-- Создать функцию "workplace_mref_f"
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION workplace_mref_f(
 aworkplace_ref varchar(255)
 ,alang varchar(25)
)
  RETURNS varchar(255) CHARSET utf8
  READS SQL DATA
begin  
 declare amref varchar(255);
 declare atmpbrief varchar(255);
 declare fetch_done int default false;
declare multiref_cursor cursor for
select workplace_brief_f(workplaceid, alang)  from workplace
where aworkplace_ref like concat('%',replace(replace(b2g(workplaceid),'{',''),'}',''),'%');
 declare continue handler for not found set fetch_done = true;
set amref='';
open multiref_cursor;
  set  fetch_done=false;
fetch multiref_cursor into atmpbrief;
while not fetch_done do 
    if amref<>'' then
        set amref=concat(amref,',');
    end if;
    set amref=concat(amref,atmpbrief);
  set  fetch_done=false;
    fetch multiref_cursor into atmpbrief;
end while;
close multiref_cursor;
set amref=left(amref,255);
return amref;
end
$$

DELIMITER ;

--
-- Создать представление "v_autoarc_chanel"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_chanel
AS
SELECT
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `arc_chanelid`,
  `arc_chanel`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `b2g`(`arc_chanel`.`ch_taype`) AS `arc_chanel_ch_taype_id`,
  `armd_chaneltype_brief_f`(`arc_chanel`.`ch_taype`, NULL) AS `arc_chanel_ch_taype`,
  `arc_chanel`.`ch_param` AS `arc_chanel_ch_param`,
  `arc_chanel`.`ch_on` AS `arc_chanel_ch_on_val`,
  (CASE `arc_chanel`.`ch_on` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_ch_on`,
  `arc_chanel`.`msg_crash` AS `arc_chanel_msg_crash_val`,
  (CASE `arc_chanel`.`msg_crash` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_crash`,
  `arc_chanel`.`msg_current` AS `arc_chanel_msg_current_val`,
  (CASE `arc_chanel`.`msg_current` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_current`,
  `arc_chanel`.`chanelname` AS `arc_chanel_chanelname`,
  `arc_chanel`.`chanelcomment` AS `arc_chanel_chanelcomment`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `id`,
  'arc_chanel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`arc_chanel`
  JOIN `arc_md`
    ON ((`arc_md`.`arc_mdid` = `arc_chanel`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_chanel_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_chanel_en_us
AS
SELECT
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `arc_chanelid`,
  `arc_chanel`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `b2g`(`arc_chanel`.`ch_taype`) AS `arc_chanel_ch_taype_id`,
  `armd_chaneltype_brief_f`(`arc_chanel`.`ch_taype`, 'en_us') AS `arc_chanel_ch_taype`,
  `arc_chanel`.`ch_param` AS `arc_chanel_ch_param`,
  `arc_chanel`.`ch_on` AS `arc_chanel_ch_on_val`,
  (CASE `arc_chanel`.`ch_on` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_ch_on`,
  `arc_chanel`.`msg_crash` AS `arc_chanel_msg_crash_val`,
  (CASE `arc_chanel`.`msg_crash` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_crash`,
  `arc_chanel`.`msg_current` AS `arc_chanel_msg_current_val`,
  (CASE `arc_chanel`.`msg_current` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_current`,
  `arc_chanel`.`chanelname` AS `arc_chanel_chanelname`,
  `arc_chanel`.`chanelcomment` AS `arc_chanel_chanelcomment`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `id`,
  'arc_chanel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`arc_chanel`
  JOIN `arc_md`
    ON ((`arc_md`.`arc_mdid` = `arc_chanel`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_chanel_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_chanel_ru_ru
AS
SELECT
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `arc_chanelid`,
  `arc_chanel`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `b2g`(`arc_chanel`.`ch_taype`) AS `arc_chanel_ch_taype_id`,
  `armd_chaneltype_brief_f`(`arc_chanel`.`ch_taype`, 'ru_ru') AS `arc_chanel_ch_taype`,
  `arc_chanel`.`ch_param` AS `arc_chanel_ch_param`,
  `arc_chanel`.`ch_on` AS `arc_chanel_ch_on_val`,
  (CASE `arc_chanel`.`ch_on` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_ch_on`,
  `arc_chanel`.`msg_crash` AS `arc_chanel_msg_crash_val`,
  (CASE `arc_chanel`.`msg_crash` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_crash`,
  `arc_chanel`.`msg_current` AS `arc_chanel_msg_current_val`,
  (CASE `arc_chanel`.`msg_current` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_chanel_msg_current`,
  `arc_chanel`.`chanelname` AS `arc_chanel_chanelname`,
  `arc_chanel`.`chanelcomment` AS `arc_chanel_chanelcomment`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_chanel`.`arc_chanelid`) AS `id`,
  'arc_chanel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`arc_chanel`
  JOIN `arc_md`
    ON ((`arc_md`.`arc_mdid` = `arc_chanel`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_info"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_info
AS
SELECT
  `b2g`(`arc_info`.`arc_infoid`) AS `arc_infoid`,
  `arc_info`.`changestamp` AS `changestamp`,
  `arc_info`.`family` AS `arc_info_family`,
  `arc_info`.`name` AS `arc_info_name`,
  `arc_info`.`org` AS `arc_info_org`,
  `arc_info`.`phone` AS `arc_info_phone`,
  `arc_info`.`email` AS `arc_info_email`,
  `arc_info`.`login` AS `arc_info_login`,
  `arc_info`.`isadmin` AS `arc_info_isadmin_val`,
  (CASE `arc_info`.`isadmin` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_info_isadmin`,
  `b2g`(`arc_info`.`instanceid`) AS `instanceid`,
  `arc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_info`.`arc_infoid`) AS `id`,
  'arc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_info`
  JOIN `instance`
    ON ((`arc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_info_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_info_en_us
AS
SELECT
  `b2g`(`arc_info`.`arc_infoid`) AS `arc_infoid`,
  `arc_info`.`changestamp` AS `changestamp`,
  `arc_info`.`family` AS `arc_info_family`,
  `arc_info`.`name` AS `arc_info_name`,
  `arc_info`.`org` AS `arc_info_org`,
  `arc_info`.`phone` AS `arc_info_phone`,
  `arc_info`.`email` AS `arc_info_email`,
  `arc_info`.`login` AS `arc_info_login`,
  `arc_info`.`isadmin` AS `arc_info_isadmin_val`,
  (CASE `arc_info`.`isadmin` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_info_isadmin`,
  `b2g`(`arc_info`.`instanceid`) AS `instanceid`,
  `arc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_info`.`arc_infoid`) AS `id`,
  'arc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_info`
  JOIN `instance`
    ON ((`arc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_info_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_info_ru_ru
AS
SELECT
  `b2g`(`arc_info`.`arc_infoid`) AS `arc_infoid`,
  `arc_info`.`changestamp` AS `changestamp`,
  `arc_info`.`family` AS `arc_info_family`,
  `arc_info`.`name` AS `arc_info_name`,
  `arc_info`.`org` AS `arc_info_org`,
  `arc_info`.`phone` AS `arc_info_phone`,
  `arc_info`.`email` AS `arc_info_email`,
  `arc_info`.`login` AS `arc_info_login`,
  `arc_info`.`isadmin` AS `arc_info_isadmin_val`,
  (CASE `arc_info`.`isadmin` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_info_isadmin`,
  `b2g`(`arc_info`.`instanceid`) AS `instanceid`,
  `arc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_info`.`arc_infoid`) AS `id`,
  'arc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_info`
  JOIN `instance`
    ON ((`arc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_md"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_md
AS
SELECT
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `arc_md`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`mymodule`) AS `arc_md_mymodule_id`,
  `armd_info_brief_f`(`arc_md`.`mymodule`, NULL) AS `arc_md_mymodule`,
  `arc_md`.`moduleserial` AS `arc_md_moduleserial`,
  `arc_md`.`name` AS `arc_md_name`,
  `arc_md`.`deivetype` AS `arc_md_deivetype`,
  `arc_md`.`theaddress` AS `arc_md_theaddress`,
  `arc_md`.`master_fio` AS `arc_md_master_fio`,
  `arc_md`.`roof_no` AS `arc_md_roof_no_val`,
  (CASE `arc_md`.`roof_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_roof_no`,
  `arc_md`.`pop_no` AS `arc_md_pop_no_val`,
  (CASE `arc_md`.`pop_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_pop_no`,
  `arc_md`.`power_no` AS `arc_md_power_no_val`,
  (CASE `arc_md`.`power_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_power_no`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_md`.`arc_mdid`) AS `id`,
  'arc_md' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_md`
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_md_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_md_en_us
AS
SELECT
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `arc_md`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`mymodule`) AS `arc_md_mymodule_id`,
  `armd_info_brief_f`(`arc_md`.`mymodule`, 'en_us') AS `arc_md_mymodule`,
  `arc_md`.`moduleserial` AS `arc_md_moduleserial`,
  `arc_md`.`name` AS `arc_md_name`,
  `arc_md`.`deivetype` AS `arc_md_deivetype`,
  `arc_md`.`theaddress` AS `arc_md_theaddress`,
  `arc_md`.`master_fio` AS `arc_md_master_fio`,
  `arc_md`.`roof_no` AS `arc_md_roof_no_val`,
  (CASE `arc_md`.`roof_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_roof_no`,
  `arc_md`.`pop_no` AS `arc_md_pop_no_val`,
  (CASE `arc_md`.`pop_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_pop_no`,
  `arc_md`.`power_no` AS `arc_md_power_no_val`,
  (CASE `arc_md`.`power_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_power_no`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_md`.`arc_mdid`) AS `id`,
  'arc_md' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_md`
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarc_md_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarc_md_ru_ru
AS
SELECT
  `b2g`(`arc_md`.`arc_mdid`) AS `arc_mdid`,
  `arc_md`.`changestamp` AS `changestamp`,
  `b2g`(`arc_md`.`mymodule`) AS `arc_md_mymodule_id`,
  `armd_info_brief_f`(`arc_md`.`mymodule`, 'ru_ru') AS `arc_md_mymodule`,
  `arc_md`.`moduleserial` AS `arc_md_moduleserial`,
  `arc_md`.`name` AS `arc_md_name`,
  `arc_md`.`deivetype` AS `arc_md_deivetype`,
  `arc_md`.`theaddress` AS `arc_md_theaddress`,
  `arc_md`.`master_fio` AS `arc_md_master_fio`,
  `arc_md`.`roof_no` AS `arc_md_roof_no_val`,
  (CASE `arc_md`.`roof_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_roof_no`,
  `arc_md`.`pop_no` AS `arc_md_pop_no_val`,
  (CASE `arc_md`.`pop_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_pop_no`,
  `arc_md`.`power_no` AS `arc_md_power_no_val`,
  (CASE `arc_md`.`power_no` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arc_md_power_no`,
  `b2g`(`arc_md`.`instanceid`) AS `instanceid`,
  `arc_md`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arc_md`.`arc_mdid`) AS `id`,
  'arc_md' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arc_md`
  JOIN `instance`
    ON ((`arc_md`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarlog_data"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarlog_data
AS
SELECT
  `b2g`(`arlog_data`.`arlog_dataid`) AS `arlog_dataid`,
  `arlog_data`.`changestamp` AS `changestamp`,
  `arlog_data`.`finished` AS `arlog_data_finished_val`,
  (CASE `arlog_data`.`finished` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arlog_data_finished`,
  `arlog_data`.`sendtime` AS `arlog_data_sendtime`,
  `b2g`(`arlog_data`.`chanel`) AS `arlog_data_chanel_id`,
  `arc_chanel_brief_f`(`arlog_data`.`chanel`, NULL) AS `arlog_data_chanel`,
  `arlog_data`.`sendresult` AS `arlog_data_sendresult`,
  `arlog_data`.`trynumber` AS `arlog_data_trynumber`,
  `b2g`(`arlog_data`.`sms`) AS `arlog_data_sms_id`,
  `arsms_data_brief_f`(`arlog_data`.`sms`, NULL) AS `arlog_data_sms`,
  `b2g`(`arlog_data`.`instanceid`) AS `instanceid`,
  `arlog_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arlog_data`.`arlog_dataid`) AS `id`,
  'arlog_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arlog_data`
  JOIN `instance`
    ON ((`arlog_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarlog_data_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarlog_data_en_us
AS
SELECT
  `b2g`(`arlog_data`.`arlog_dataid`) AS `arlog_dataid`,
  `arlog_data`.`changestamp` AS `changestamp`,
  `arlog_data`.`finished` AS `arlog_data_finished_val`,
  (CASE `arlog_data`.`finished` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arlog_data_finished`,
  `arlog_data`.`sendtime` AS `arlog_data_sendtime`,
  `b2g`(`arlog_data`.`chanel`) AS `arlog_data_chanel_id`,
  `arc_chanel_brief_f`(`arlog_data`.`chanel`, 'en_us') AS `arlog_data_chanel`,
  `arlog_data`.`sendresult` AS `arlog_data_sendresult`,
  `arlog_data`.`trynumber` AS `arlog_data_trynumber`,
  `b2g`(`arlog_data`.`sms`) AS `arlog_data_sms_id`,
  `arsms_data_brief_f`(`arlog_data`.`sms`, 'en_us') AS `arlog_data_sms`,
  `b2g`(`arlog_data`.`instanceid`) AS `instanceid`,
  `arlog_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arlog_data`.`arlog_dataid`) AS `id`,
  'arlog_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arlog_data`
  JOIN `instance`
    ON ((`arlog_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarlog_data_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarlog_data_ru_ru
AS
SELECT
  `b2g`(`arlog_data`.`arlog_dataid`) AS `arlog_dataid`,
  `arlog_data`.`changestamp` AS `changestamp`,
  `arlog_data`.`finished` AS `arlog_data_finished_val`,
  (CASE `arlog_data`.`finished` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arlog_data_finished`,
  `arlog_data`.`sendtime` AS `arlog_data_sendtime`,
  `b2g`(`arlog_data`.`chanel`) AS `arlog_data_chanel_id`,
  `arc_chanel_brief_f`(`arlog_data`.`chanel`, 'ru_ru') AS `arlog_data_chanel`,
  `arlog_data`.`sendresult` AS `arlog_data_sendresult`,
  `arlog_data`.`trynumber` AS `arlog_data_trynumber`,
  `b2g`(`arlog_data`.`sms`) AS `arlog_data_sms_id`,
  `arsms_data_brief_f`(`arlog_data`.`sms`, 'ru_ru') AS `arlog_data_sms`,
  `b2g`(`arlog_data`.`instanceid`) AS `instanceid`,
  `arlog_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arlog_data`.`arlog_dataid`) AS `id`,
  'arlog_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arlog_data`
  JOIN `instance`
    ON ((`arlog_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_chaneltype"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_chaneltype
AS
SELECT
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `armd_chaneltypeid`,
  `armd_chaneltype`.`changestamp` AS `changestamp`,
  `armd_chaneltype`.`name` AS `armd_chaneltype_name`,
  `b2g`(`armd_chaneltype`.`instanceid`) AS `instanceid`,
  `armd_chaneltype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `id`,
  'armd_chaneltype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_chaneltype`
  JOIN `instance`
    ON ((`armd_chaneltype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_chaneltype_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_chaneltype_en_us
AS
SELECT
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `armd_chaneltypeid`,
  `armd_chaneltype`.`changestamp` AS `changestamp`,
  `armd_chaneltype`.`name` AS `armd_chaneltype_name`,
  `b2g`(`armd_chaneltype`.`instanceid`) AS `instanceid`,
  `armd_chaneltype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `id`,
  'armd_chaneltype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_chaneltype`
  JOIN `instance`
    ON ((`armd_chaneltype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_chaneltype_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_chaneltype_ru_ru
AS
SELECT
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `armd_chaneltypeid`,
  `armd_chaneltype`.`changestamp` AS `changestamp`,
  `armd_chaneltype`.`name` AS `armd_chaneltype_name`,
  `b2g`(`armd_chaneltype`.`instanceid`) AS `instanceid`,
  `armd_chaneltype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_chaneltype`.`armd_chaneltypeid`) AS `id`,
  'armd_chaneltype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_chaneltype`
  JOIN `instance`
    ON ((`armd_chaneltype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_info"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_info
AS
SELECT
  `b2g`(`armd_info`.`armd_infoid`) AS `armd_infoid`,
  `armd_info`.`changestamp` AS `changestamp`,
  `b2g`(`armd_info`.`moduletype`) AS `armd_info_moduletype_id`,
  `armd_type_brief_f`(`armd_info`.`moduletype`, NULL) AS `armd_info_moduletype`,
  `armd_info`.`serialno` AS `armd_info_serialno`,
  `armd_info`.`makedate` AS `armd_info_makedate`,
  `armd_info`.`phone` AS `armd_info_phone`,
  `b2g`(`armd_info`.`instanceid`) AS `instanceid`,
  `armd_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_info`.`armd_infoid`) AS `id`,
  'armd_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_info`
  JOIN `instance`
    ON ((`armd_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_info_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_info_en_us
AS
SELECT
  `b2g`(`armd_info`.`armd_infoid`) AS `armd_infoid`,
  `armd_info`.`changestamp` AS `changestamp`,
  `b2g`(`armd_info`.`moduletype`) AS `armd_info_moduletype_id`,
  `armd_type_brief_f`(`armd_info`.`moduletype`, 'en_us') AS `armd_info_moduletype`,
  `armd_info`.`serialno` AS `armd_info_serialno`,
  `armd_info`.`makedate` AS `armd_info_makedate`,
  `armd_info`.`phone` AS `armd_info_phone`,
  `b2g`(`armd_info`.`instanceid`) AS `instanceid`,
  `armd_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_info`.`armd_infoid`) AS `id`,
  'armd_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_info`
  JOIN `instance`
    ON ((`armd_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_info_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_info_ru_ru
AS
SELECT
  `b2g`(`armd_info`.`armd_infoid`) AS `armd_infoid`,
  `armd_info`.`changestamp` AS `changestamp`,
  `b2g`(`armd_info`.`moduletype`) AS `armd_info_moduletype_id`,
  `armd_type_brief_f`(`armd_info`.`moduletype`, 'ru_ru') AS `armd_info_moduletype`,
  `armd_info`.`serialno` AS `armd_info_serialno`,
  `armd_info`.`makedate` AS `armd_info_makedate`,
  `armd_info`.`phone` AS `armd_info_phone`,
  `b2g`(`armd_info`.`instanceid`) AS `instanceid`,
  `armd_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_info`.`armd_infoid`) AS `id`,
  'armd_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_info`
  JOIN `instance`
    ON ((`armd_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_type"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_type
AS
SELECT
  `b2g`(`armd_type`.`armd_typeid`) AS `armd_typeid`,
  `armd_type`.`changestamp` AS `changestamp`,
  `armd_type`.`name` AS `armd_type_name`,
  `b2g`(`armd_type`.`instanceid`) AS `instanceid`,
  `armd_type`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_type`.`armd_typeid`) AS `id`,
  'armd_type' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_type`
  JOIN `instance`
    ON ((`armd_type`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_type_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_type_en_us
AS
SELECT
  `b2g`(`armd_type`.`armd_typeid`) AS `armd_typeid`,
  `armd_type`.`changestamp` AS `changestamp`,
  `armd_type`.`name` AS `armd_type_name`,
  `b2g`(`armd_type`.`instanceid`) AS `instanceid`,
  `armd_type`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_type`.`armd_typeid`) AS `id`,
  'armd_type' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_type`
  JOIN `instance`
    ON ((`armd_type`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmd_type_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmd_type_ru_ru
AS
SELECT
  `b2g`(`armd_type`.`armd_typeid`) AS `armd_typeid`,
  `armd_type`.`changestamp` AS `changestamp`,
  `armd_type`.`name` AS `armd_type_name`,
  `b2g`(`armd_type`.`instanceid`) AS `instanceid`,
  `armd_type`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armd_type`.`armd_typeid`) AS `id`,
  'armd_type' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armd_type`
  JOIN `instance`
    ON ((`armd_type`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjournal"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjournal
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, NULL) AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjournal_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjournal_en_us
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, 'en_us') AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjournal_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjournal_ru_ru
AS
SELECT
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `armjournal`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`thejournal`) AS `armjournal_thejournal_id`,
  `instance_brief_f`(`armjournal`.`thejournal`, 'ru_ru') AS `armjournal_thejournal`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjournal`.`armjournalid`) AS `id`,
  'armjournal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armjournal`
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnladd
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, NULL) AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnladd_en_us
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, 'en_us') AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnladd_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnladd_ru_ru
AS
SELECT
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `armjrnladdid`,
  `armjrnladd`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnladd`.`theextention`) AS `armjrnladd_theextention_id`,
  `instance_brief_f`(`armjrnladd`.`theextention`, 'ru_ru') AS `armjrnladd_theextention`,
  `armjrnladd`.`name` AS `armjrnladd_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnladd`.`armjrnladdid`) AS `id`,
  'armjrnladd' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnladd`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnladd`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrep
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, NULL) AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrep_en_us
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, 'en_us') AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrep_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrep_ru_ru
AS
SELECT
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `armjrnlrepid`,
  `armjrnlrep`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrep`.`thereport`) AS `armjrnlrep_thereport_id`,
  `instance_brief_f`(`armjrnlrep`.`thereport`, 'ru_ru') AS `armjrnlrep_thereport`,
  `armjrnlrep`.`repname` AS `armjrnlrep_repname`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrep`.`armjrnlrepid`) AS `id`,
  'armjrnlrep' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrep`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrep`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrun
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, NULL) AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrun_en_us
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, 'en_us') AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmjrnlrun_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmjrnlrun_ru_ru
AS
SELECT
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `armjrnlrunid`,
  `armjrnlrun`.`changestamp` AS `changestamp`,
  `b2g`(`armjournal`.`armjournalid`) AS `armjournalid`,
  `b2g`(`armjrnlrun`.`theextention`) AS `armjrnlrun_theextention_id`,
  `instance_brief_f`(`armjrnlrun`.`theextention`, 'ru_ru') AS `armjrnlrun_theextention`,
  `armjrnlrun`.`name` AS `armjrnlrun_name`,
  `b2g`(`armjournal`.`instanceid`) AS `instanceid`,
  `armjournal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armjrnlrun`.`armjrnlrunid`) AS `id`,
  'armjrnlrun' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`armjrnlrun`
  JOIN `armjournal`
    ON ((`armjournal`.`armjournalid` = `armjrnlrun`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`armjournal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmtypes
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, NULL) AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmtypes_en_us
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, 'en_us') AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarmtypes_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarmtypes_ru_ru
AS
SELECT
  `b2g`(`armtypes`.`armtypesid`) AS `armtypesid`,
  `armtypes`.`changestamp` AS `changestamp`,
  `b2g`(`armtypes`.`thedocumenttype`) AS `armtypes_thedocumenttype_id`,
  `objecttype_brief_f`(`armtypes`.`thedocumenttype`, 'ru_ru') AS `armtypes_thedocumenttype`,
  `b2g`(`armtypes`.`instanceid`) AS `instanceid`,
  `armtypes`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`armtypes`.`armtypesid`) AS `id`,
  'armtypes' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`armtypes`
  JOIN `instance`
    ON ((`armtypes`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarsms_data"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarsms_data
AS
SELECT
  `b2g`(`arsms_data`.`arsms_dataid`) AS `arsms_dataid`,
  `arsms_data`.`changestamp` AS `changestamp`,
  `arsms_data`.`roof_open` AS `arsms_data_roof_open_val`,
  (CASE `arsms_data`.`roof_open` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_roof_open`,
  `arsms_data`.`power_ok` AS `arsms_data_power_ok_val`,
  (CASE `arsms_data`.`power_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_power_ok`,
  `arsms_data`.`opercode` AS `arsms_data_opercode`,
  `arsms_data`.`serialno` AS `arsms_data_serialno`,
  `arsms_data`.`controlcode` AS `arsms_data_controlcode`,
  `arsms_data`.`phone` AS `arsms_data_phone`,
  `arsms_data`.`temperature` AS `arsms_data_temperature`,
  `arsms_data`.`pop_ok` AS `arsms_data_pop_ok_val`,
  (CASE `arsms_data`.`pop_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_pop_ok`,
  `arsms_data`.`smstime` AS `arsms_data_smstime`,
  `b2g`(`arsms_data`.`instanceid`) AS `instanceid`,
  `arsms_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arsms_data`.`arsms_dataid`) AS `id`,
  'arsms_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arsms_data`
  JOIN `instance`
    ON ((`arsms_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarsms_data_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarsms_data_en_us
AS
SELECT
  `b2g`(`arsms_data`.`arsms_dataid`) AS `arsms_dataid`,
  `arsms_data`.`changestamp` AS `changestamp`,
  `arsms_data`.`roof_open` AS `arsms_data_roof_open_val`,
  (CASE `arsms_data`.`roof_open` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_roof_open`,
  `arsms_data`.`power_ok` AS `arsms_data_power_ok_val`,
  (CASE `arsms_data`.`power_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_power_ok`,
  `arsms_data`.`opercode` AS `arsms_data_opercode`,
  `arsms_data`.`serialno` AS `arsms_data_serialno`,
  `arsms_data`.`controlcode` AS `arsms_data_controlcode`,
  `arsms_data`.`phone` AS `arsms_data_phone`,
  `arsms_data`.`temperature` AS `arsms_data_temperature`,
  `arsms_data`.`pop_ok` AS `arsms_data_pop_ok_val`,
  (CASE `arsms_data`.`pop_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_pop_ok`,
  `arsms_data`.`smstime` AS `arsms_data_smstime`,
  `b2g`(`arsms_data`.`instanceid`) AS `instanceid`,
  `arsms_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arsms_data`.`arsms_dataid`) AS `id`,
  'arsms_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arsms_data`
  JOIN `instance`
    ON ((`arsms_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoarsms_data_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoarsms_data_ru_ru
AS
SELECT
  `b2g`(`arsms_data`.`arsms_dataid`) AS `arsms_dataid`,
  `arsms_data`.`changestamp` AS `changestamp`,
  `arsms_data`.`roof_open` AS `arsms_data_roof_open_val`,
  (CASE `arsms_data`.`roof_open` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_roof_open`,
  `arsms_data`.`power_ok` AS `arsms_data_power_ok_val`,
  (CASE `arsms_data`.`power_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_power_ok`,
  `arsms_data`.`opercode` AS `arsms_data_opercode`,
  `arsms_data`.`serialno` AS `arsms_data_serialno`,
  `arsms_data`.`controlcode` AS `arsms_data_controlcode`,
  `arsms_data`.`phone` AS `arsms_data_phone`,
  `arsms_data`.`temperature` AS `arsms_data_temperature`,
  `arsms_data`.`pop_ok` AS `arsms_data_pop_ok_val`,
  (CASE `arsms_data`.`pop_ok` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `arsms_data_pop_ok`,
  `arsms_data`.`smstime` AS `arsms_data_smstime`,
  `b2g`(`arsms_data`.`instanceid`) AS `instanceid`,
  `arsms_data`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`arsms_data`.`arsms_dataid`) AS `id`,
  'arsms_data' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`arsms_data`
  JOIN `instance`
    ON ((`arsms_data`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autobpc_info
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autobpc_info_en_us
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autobpc_info_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autobpc_info_ru_ru
AS
SELECT
  `b2g`(`bpc_info`.`bpc_infoid`) AS `bpc_infoid`,
  `bpc_info`.`changestamp` AS `changestamp`,
  `bpc_info`.`name` AS `bpc_info_name`,
  `b2g`(`bpc_info`.`instanceid`) AS `instanceid`,
  `bpc_info`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`bpc_info`.`bpc_infoid`) AS `id`,
  'bpc_info' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`bpc_info`
  JOIN `instance`
    ON ((`bpc_info`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoconstraintfield
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, NULL) AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoconstraintfield_en_us
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, 'en_us') AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoconstraintfield_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoconstraintfield_ru_ru
AS
SELECT
  `b2g`(`constraintfield`.`constraintfieldid`) AS `constraintfieldid`,
  `constraintfield`.`changestamp` AS `changestamp`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`constraintfield`.`thefield`) AS `constraintfield_thefield_id`,
  `field_brief_f`(`constraintfield`.`thefield`, 'ru_ru') AS `constraintfield_thefield`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`constraintfield`.`constraintfieldid`) AS `id`,
  'constraintfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`constraintfield`
  JOIN `uniqueconstraint`
    ON ((`uniqueconstraint`.`uniqueconstraintid` = `constraintfield`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autodinamicfilterscript
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, NULL) AS `dinamicfilterscript_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autodinamicfilterscript_en_us
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, 'en_us') AS `dinamicfilterscript_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autodinamicfilterscript_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autodinamicfilterscript_ru_ru
AS
SELECT
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `dinamicfilterscriptid`,
  `dinamicfilterscript`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `dinamicfilterscript`.`code` AS `dinamicfilterscript_code`,
  `b2g`(`dinamicfilterscript`.`target`) AS `dinamicfilterscript_target_id`,
  `generator_target_brief_f`(`dinamicfilterscript`.`target`, 'ru_ru') AS `dinamicfilterscript_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`dinamicfilterscript`.`dinamicfilterscriptid`) AS `id`,
  'dinamicfilterscript' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`dinamicfilterscript`
  JOIN `field`
    ON ((`field`.`fieldid` = `dinamicfilterscript`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoentrypoints
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, NULL) AS `entrypoints_method`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, NULL) AS `entrypoints_theextention`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, NULL) AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, NULL) AS `entrypoints_document`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN '????????? ???' WHEN 2 THEN '????????? ?????' WHEN 5 THEN '??????? ?????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ????????' WHEN 3 THEN '??????? ??????' ELSE '' END) AS `entrypoints_actiontype`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, NULL) AS `entrypoints_journal`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, NULL) AS `entrypoints_thefilter`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, NULL) AS `entrypoints_report`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, NULL) AS `entrypoints_objecttype`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowedit`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowadd`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoentrypoints_en_us
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, 'en_us') AS `entrypoints_method`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, 'en_us') AS `entrypoints_theextention`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, 'en_us') AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, 'en_us') AS `entrypoints_document`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN '????????? ???' WHEN 2 THEN '????????? ?????' WHEN 5 THEN '??????? ?????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ????????' WHEN 3 THEN '??????? ??????' ELSE '' END) AS `entrypoints_actiontype`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, 'en_us') AS `entrypoints_journal`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, 'en_us') AS `entrypoints_thefilter`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, 'en_us') AS `entrypoints_report`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, 'en_us') AS `entrypoints_objecttype`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowedit`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowadd`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoentrypoints_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoentrypoints_ru_ru
AS
SELECT
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `entrypoints`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`method`) AS `entrypoints_method_id`,
  `sharedmethod_brief_f`(`entrypoints`.`method`, 'ru_ru') AS `entrypoints_method`,
  `b2g`(`entrypoints`.`theextention`) AS `entrypoints_theextention_id`,
  `instance_brief_f`(`entrypoints`.`theextention`, 'ru_ru') AS `entrypoints_theextention`,
  `b2g`(`entrypoints`.`arm`) AS `entrypoints_arm_id`,
  `instance_brief_f`(`entrypoints`.`arm`, 'ru_ru') AS `entrypoints_arm`,
  `b2g`(`entrypoints`.`document`) AS `entrypoints_document_id`,
  `instance_brief_f`(`entrypoints`.`document`, 'ru_ru') AS `entrypoints_document`,
  `entrypoints`.`name` AS `entrypoints_name`,
  `entrypoints`.`actiontype` AS `entrypoints_actiontype_val`,
  (CASE `entrypoints`.`actiontype` WHEN 4 THEN '????????? ???' WHEN 2 THEN '????????? ?????' WHEN 5 THEN '??????? ?????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ????????' WHEN 3 THEN '??????? ??????' ELSE '' END) AS `entrypoints_actiontype`,
  `entrypoints`.`allowprint` AS `entrypoints_allowprint_val`,
  (CASE `entrypoints`.`allowprint` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowprint`,
  `entrypoints`.`astoolbaritem` AS `entrypoints_astoolbaritem_val`,
  (CASE `entrypoints`.`astoolbaritem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_astoolbaritem`,
  `entrypoints`.`allowdel` AS `entrypoints_allowdel_val`,
  (CASE `entrypoints`.`allowdel` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowdel`,
  `entrypoints`.`caption` AS `entrypoints_caption`,
  `b2g`(`entrypoints`.`journal`) AS `entrypoints_journal_id`,
  `instance_brief_f`(`entrypoints`.`journal`, 'ru_ru') AS `entrypoints_journal`,
  `entrypoints`.`iconfile` AS `entrypoints_iconfile`,
  `b2g`(`entrypoints`.`thefilter`) AS `entrypoints_thefilter_id`,
  `instance_brief_f`(`entrypoints`.`thefilter`, 'ru_ru') AS `entrypoints_thefilter`,
  `entrypoints`.`sequence` AS `entrypoints_sequence`,
  `entrypoints`.`allowfilter` AS `entrypoints_allowfilter_val`,
  (CASE `entrypoints`.`allowfilter` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowfilter`,
  `b2g`(`entrypoints`.`report`) AS `entrypoints_report_id`,
  `instance_brief_f`(`entrypoints`.`report`, 'ru_ru') AS `entrypoints_report`,
  `b2g`(`entrypoints`.`objecttype`) AS `entrypoints_objecttype_id`,
  `objecttype_brief_f`(`entrypoints`.`objecttype`, 'ru_ru') AS `entrypoints_objecttype`,
  `entrypoints`.`journalfixedquery` AS `entrypoints_journalfixedquery`,
  `entrypoints`.`allowedit` AS `entrypoints_allowedit_val`,
  (CASE `entrypoints`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowedit`,
  `entrypoints`.`thecomment` AS `entrypoints_thecomment`,
  `entrypoints`.`allowadd` AS `entrypoints_allowadd_val`,
  (CASE `entrypoints`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `entrypoints_allowadd`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `id`,
  'entrypoints' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`entrypoints`
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoenumitem
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoenumitem_en_us
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoenumitem_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoenumitem_ru_ru
AS
SELECT
  `b2g`(`enumitem`.`enumitemid`) AS `enumitemid`,
  `enumitem`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `enumitem`.`name` AS `enumitem_name`,
  `enumitem`.`nameincode` AS `enumitem_nameincode`,
  `enumitem`.`namevalue` AS `enumitem_namevalue`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`enumitem`.`enumitemid`) AS `id`,
  'enumitem' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`enumitem`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `enumitem`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoepfilterlink
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoepfilterlink_en_us
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoepfilterlink_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoepfilterlink_ru_ru
AS
SELECT
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `epfilterlinkid`,
  `epfilterlink`.`changestamp` AS `changestamp`,
  `b2g`(`entrypoints`.`entrypointsid`) AS `entrypointsid`,
  `epfilterlink`.`theexpression` AS `epfilterlink_theexpression`,
  `epfilterlink`.`filterfield` AS `epfilterlink_filterfield`,
  `epfilterlink`.`rowsource` AS `epfilterlink_rowsource`,
  `b2g`(`entrypoints`.`instanceid`) AS `instanceid`,
  `entrypoints`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`epfilterlink`.`epfilterlinkid`) AS `id`,
  'epfilterlink' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`epfilterlink`
  JOIN `entrypoints`
    ON ((`entrypoints`.`entrypointsid` = `epfilterlink`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`entrypoints`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoextenderinterface
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, NULL) AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoextenderinterface_en_us
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, 'en_us') AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoextenderinterface_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoextenderinterface_ru_ru
AS
SELECT
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `extenderinterfaceid`,
  `extenderinterface`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `extenderinterface`.`theconfig` AS `extenderinterface_theconfig`,
  `extenderinterface`.`thename` AS `extenderinterface_thename`,
  `b2g`(`extenderinterface`.`targetplatform`) AS `extenderinterface_targetplatform_id`,
  `generator_target_brief_f`(`extenderinterface`.`targetplatform`, 'ru_ru') AS `extenderinterface_targetplatform`,
  `extenderinterface`.`theobject` AS `extenderinterface_theobject`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`extenderinterface`.`extenderinterfaceid`) AS `id`,
  'extenderinterface' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`extenderinterface`
  JOIN `part`
    ON ((`part`.`partid` = `extenderinterface`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofield
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, NULL) AS `field_numberdatefield`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_createrefonly`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, NULL) AS `field_reftotype`,
  `field`.`name` AS `field_name`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_allownull`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isbrief`,
  `field`.`themask` AS `field_themask`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`datasize` AS `field_datasize`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, NULL) AS `field_thenumerator`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, NULL) AS `field_reftopart`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isautonumber`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_internalreference`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `field_referencetype`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_istabbrief`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, NULL) AS `field_fieldtype`,
  `field`.`caption` AS `field_caption`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofield_en_us
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, 'en_us') AS `field_numberdatefield`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_createrefonly`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, 'en_us') AS `field_reftotype`,
  `field`.`name` AS `field_name`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_allownull`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isbrief`,
  `field`.`themask` AS `field_themask`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`datasize` AS `field_datasize`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, 'en_us') AS `field_thenumerator`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, 'en_us') AS `field_reftopart`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isautonumber`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_internalreference`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `field_referencetype`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_istabbrief`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, 'en_us') AS `field_fieldtype`,
  `field`.`caption` AS `field_caption`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofield_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofield_ru_ru
AS
SELECT
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `field`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`field`.`numberdatefield`) AS `field_numberdatefield_id`,
  `field_brief_f`(`field`.`numberdatefield`, 'ru_ru') AS `field_numberdatefield`,
  `field`.`createrefonly` AS `field_createrefonly_val`,
  (CASE `field`.`createrefonly` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_createrefonly`,
  `b2g`(`field`.`reftotype`) AS `field_reftotype_id`,
  `objecttype_brief_f`(`field`.`reftotype`, 'ru_ru') AS `field_reftotype`,
  `field`.`name` AS `field_name`,
  `field`.`allownull` AS `field_allownull_val`,
  (CASE `field`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_allownull`,
  `field`.`isbrief` AS `field_isbrief_val`,
  (CASE `field`.`isbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isbrief`,
  `field`.`themask` AS `field_themask`,
  `field`.`thenameclass` AS `field_thenameclass`,
  `field`.`datasize` AS `field_datasize`,
  `b2g`(`field`.`thenumerator`) AS `field_thenumerator_id`,
  `instance_brief_f`(`field`.`thenumerator`, 'ru_ru') AS `field_thenumerator`,
  `field`.`sequence` AS `field_sequence`,
  `field`.`shablonbrief` AS `field_shablonbrief`,
  `b2g`(`field`.`reftopart`) AS `field_reftopart_id`,
  `part_brief_f`(`field`.`reftopart`, 'ru_ru') AS `field_reftopart`,
  `field`.`isautonumber` AS `field_isautonumber_val`,
  (CASE `field`.`isautonumber` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_isautonumber`,
  `field`.`internalreference` AS `field_internalreference_val`,
  (CASE `field`.`internalreference` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_internalreference`,
  `field`.`fieldgroupbox` AS `field_fieldgroupbox`,
  `field`.`thecomment` AS `field_thecomment`,
  `field`.`zonetemplate` AS `field_zonetemplate`,
  `field`.`thestyle` AS `field_thestyle`,
  `field`.`referencetype` AS `field_referencetype_val`,
  (CASE `field`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `field_referencetype`,
  `field`.`istabbrief` AS `field_istabbrief_val`,
  (CASE `field`.`istabbrief` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `field_istabbrief`,
  `b2g`(`field`.`fieldtype`) AS `field_fieldtype_id`,
  `fieldtype_brief_f`(`field`.`fieldtype`, 'ru_ru') AS `field_fieldtype`,
  `field`.`caption` AS `field_caption`,
  `field`.`tabname` AS `field_tabname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`field`.`fieldid`) AS `id`,
  'field' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`field`
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldexpression
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, NULL) AS `fieldexpression_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldexpression_en_us
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, 'en_us') AS `fieldexpression_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldexpression_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldexpression_ru_ru
AS
SELECT
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `fieldexpressionid`,
  `fieldexpression`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldexpression`.`code` AS `fieldexpression_code`,
  `b2g`(`fieldexpression`.`target`) AS `fieldexpression_target_id`,
  `generator_target_brief_f`(`fieldexpression`.`target`, 'ru_ru') AS `fieldexpression_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldexpression`.`fieldexpressionid`) AS `id`,
  'fieldexpression' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldexpression`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldexpression`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldmenu
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, NULL) AS `fieldmenu_actionid`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldmenu_en_us
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, 'en_us') AS `fieldmenu_actionid`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldmenu_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldmenu_ru_ru
AS
SELECT
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `fieldmenu`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldmenu`.`istoolbarbutton` AS `fieldmenu_istoolbarbutton_val`,
  (CASE `fieldmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_istoolbarbutton`,
  `fieldmenu`.`name` AS `fieldmenu_name`,
  `fieldmenu`.`hotkey` AS `fieldmenu_hotkey`,
  `fieldmenu`.`caption` AS `fieldmenu_caption`,
  `fieldmenu`.`tooltip` AS `fieldmenu_tooltip`,
  `b2g`(`fieldmenu`.`actionid`) AS `fieldmenu_actionid_id`,
  `sharedmethod_brief_f`(`fieldmenu`.`actionid`, 'ru_ru') AS `fieldmenu_actionid`,
  `fieldmenu`.`ismenuitem` AS `fieldmenu_ismenuitem_val`,
  (CASE `fieldmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldmenu_ismenuitem`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `id`,
  'fieldmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldmenu`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldparammap
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldparammap_en_us
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldparammap_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldparammap_ru_ru
AS
SELECT
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `fieldparammapid`,
  `fieldparammap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldmenu`.`fieldmenuid`) AS `fieldmenuid`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldparammap`.`paramname` AS `fieldparammap_paramname`,
  `fieldparammap`.`noedit` AS `fieldparammap_noedit_val`,
  (CASE `fieldparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldparammap_noedit`,
  `fieldparammap`.`fieldname` AS `fieldparammap_fieldname`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldparammap`.`fieldparammapid`) AS `id`,
  'fieldparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((((`fieldparammap`
  JOIN `fieldmenu`
    ON ((`fieldmenu`.`fieldmenuid` = `fieldparammap`.`parentstructrowid`)))
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldmenu`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldrestriction
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, NULL) AS `fieldrestriction_thefield`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, NULL) AS `fieldrestriction_thepart`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN '?? ???????????' WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldrestriction_en_us
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, 'en_us') AS `fieldrestriction_thefield`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, 'en_us') AS `fieldrestriction_thepart`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN '?? ???????????' WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldrestriction_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldrestriction_ru_ru
AS
SELECT
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `fieldrestrictionid`,
  `fieldrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldrestriction`.`allowmodify` AS `fieldrestriction_allowmodify_val`,
  (CASE `fieldrestriction`.`allowmodify` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowmodify`,
  `b2g`(`fieldrestriction`.`thefield`) AS `fieldrestriction_thefield_id`,
  `field_brief_f`(`fieldrestriction`.`thefield`, 'ru_ru') AS `fieldrestriction_thefield`,
  `b2g`(`fieldrestriction`.`thepart`) AS `fieldrestriction_thepart_id`,
  `part_brief_f`(`fieldrestriction`.`thepart`, 'ru_ru') AS `fieldrestriction_thepart`,
  `fieldrestriction`.`mandatoryfield` AS `fieldrestriction_mandatoryfield_val`,
  (CASE `fieldrestriction`.`mandatoryfield` WHEN -(1) THEN '?? ???????????' WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_mandatoryfield`,
  `fieldrestriction`.`allowread` AS `fieldrestriction_allowread_val`,
  (CASE `fieldrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldrestriction_allowread`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldrestriction`.`fieldrestrictionid`) AS `id`,
  'fieldrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`fieldrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `fieldrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldsrcdef
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldsrcdef_en_us
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldsrcdef_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldsrcdef_ru_ru
AS
SELECT
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `fieldsrcdefid`,
  `fieldsrcdef`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldsrcdef`.`filterstring` AS `fieldsrcdef_filterstring`,
  `fieldsrcdef`.`idfield` AS `fieldsrcdef_idfield`,
  `fieldsrcdef`.`sortfield` AS `fieldsrcdef_sortfield`,
  `fieldsrcdef`.`datasource` AS `fieldsrcdef_datasource`,
  `fieldsrcdef`.`descriptionstring` AS `fieldsrcdef_descriptionstring`,
  `fieldsrcdef`.`connectionstring` AS `fieldsrcdef_connectionstring`,
  `fieldsrcdef`.`provider` AS `fieldsrcdef_provider`,
  `fieldsrcdef`.`briefstring` AS `fieldsrcdef_briefstring`,
  `fieldsrcdef`.`dontshowdialog` AS `fieldsrcdef_dontshowdialog_val`,
  (CASE `fieldsrcdef`.`dontshowdialog` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldsrcdef_dontshowdialog`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldsrcdef`.`fieldsrcdefid`) AS `id`,
  'fieldsrcdef' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldsrcdef`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldsrcdef`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtype
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN '??????' WHEN 1 THEN '?????????' WHEN 5 THEN '??????? ??????????' WHEN 3 THEN '????????' WHEN 2 THEN '????????????' WHEN 0 THEN '????????? ???' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtype_en_us
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN '??????' WHEN 1 THEN '?????????' WHEN 5 THEN '??????? ??????????' WHEN 3 THEN '????????' WHEN 2 THEN '????????????' WHEN 0 THEN '????????? ???' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtype_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtype_ru_ru
AS
SELECT
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `fieldtype`.`changestamp` AS `changestamp`,
  `fieldtype`.`name` AS `fieldtype_name`,
  `fieldtype`.`typestyle` AS `fieldtype_typestyle_val`,
  (CASE `fieldtype`.`typestyle` WHEN 4 THEN '??????' WHEN 1 THEN '?????????' WHEN 5 THEN '??????? ??????????' WHEN 3 THEN '????????' WHEN 2 THEN '????????????' WHEN 0 THEN '????????? ???' ELSE '' END) AS `fieldtype_typestyle`,
  `fieldtype`.`minimum` AS `fieldtype_minimum`,
  `fieldtype`.`gridsorttype` AS `fieldtype_gridsorttype_val`,
  (CASE `fieldtype`.`gridsorttype` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `fieldtype_gridsorttype`,
  `fieldtype`.`the_comment` AS `fieldtype_the_comment`,
  `fieldtype`.`allowlikesearch` AS `fieldtype_allowlikesearch_val`,
  (CASE `fieldtype`.`allowlikesearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowlikesearch`,
  `fieldtype`.`allowsize` AS `fieldtype_allowsize_val`,
  (CASE `fieldtype`.`allowsize` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_allowsize`,
  `fieldtype`.`delayedsave` AS `fieldtype_delayedsave_val`,
  (CASE `fieldtype`.`delayedsave` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fieldtype_delayedsave`,
  `fieldtype`.`maximum` AS `fieldtype_maximum`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `id`,
  'fieldtype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`fieldtype`
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtypemap
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, NULL) AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtypemap_en_us
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, 'en_us') AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldtypemap_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldtypemap_ru_ru
AS
SELECT
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `fieldtypemapid`,
  `fieldtypemap`.`changestamp` AS `changestamp`,
  `b2g`(`fieldtype`.`fieldtypeid`) AS `fieldtypeid`,
  `b2g`(`fieldtypemap`.`target`) AS `fieldtypemap_target_id`,
  `generator_target_brief_f`(`fieldtypemap`.`target`, 'ru_ru') AS `fieldtypemap_target`,
  `fieldtypemap`.`stoagetype` AS `fieldtypemap_stoagetype`,
  `fieldtypemap`.`fixedsize` AS `fieldtypemap_fixedsize`,
  `b2g`(`fieldtype`.`instanceid`) AS `instanceid`,
  `fieldtype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldtypemap`.`fieldtypemapid`) AS `id`,
  'fieldtypemap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fieldtypemap`
  JOIN `fieldtype`
    ON ((`fieldtype`.`fieldtypeid` = `fieldtypemap`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`fieldtype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldvalidator
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, NULL) AS `fieldvalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldvalidator_en_us
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, 'en_us') AS `fieldvalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofieldvalidator_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofieldvalidator_ru_ru
AS
SELECT
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `fieldvalidatorid`,
  `fieldvalidator`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `fieldvalidator`.`code` AS `fieldvalidator_code`,
  `b2g`(`fieldvalidator`.`target`) AS `fieldvalidator_target_id`,
  `generator_target_brief_f`(`fieldvalidator`.`target`, 'ru_ru') AS `fieldvalidator_target`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fieldvalidator`.`fieldvalidatorid`) AS `id`,
  'fieldvalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fieldvalidator`
  JOIN `field`
    ON ((`field`.`fieldid` = `fieldvalidator`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofileterfield
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, NULL) AS `fileterfield_fieldtype`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, NULL) AS `fileterfield_reftotype`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, NULL) AS `fileterfield_reftopart`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `fileterfield_reftype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofileterfield_en_us
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, 'en_us') AS `fileterfield_fieldtype`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, 'en_us') AS `fileterfield_reftotype`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, 'en_us') AS `fileterfield_reftopart`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `fileterfield_reftype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofileterfield_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofileterfield_ru_ru
AS
SELECT
  `b2g`(`fileterfield`.`fileterfieldid`) AS `fileterfieldid`,
  `fileterfield`.`changestamp` AS `changestamp`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `b2g`(`fileterfield`.`fieldtype`) AS `fileterfield_fieldtype_id`,
  `fieldtype_brief_f`(`fileterfield`.`fieldtype`, 'ru_ru') AS `fileterfield_fieldtype`,
  `fileterfield`.`valuearray` AS `fileterfield_valuearray_val`,
  (CASE `fileterfield`.`valuearray` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `fileterfield_valuearray`,
  `b2g`(`fileterfield`.`reftotype`) AS `fileterfield_reftotype_id`,
  `objecttype_brief_f`(`fileterfield`.`reftotype`, 'ru_ru') AS `fileterfield_reftotype`,
  `fileterfield`.`name` AS `fileterfield_name`,
  `fileterfield`.`caption` AS `fileterfield_caption`,
  `fileterfield`.`fieldsize` AS `fileterfield_fieldsize`,
  `b2g`(`fileterfield`.`reftopart`) AS `fileterfield_reftopart_id`,
  `part_brief_f`(`fileterfield`.`reftopart`, 'ru_ru') AS `fileterfield_reftopart`,
  `fileterfield`.`reftype` AS `fileterfield_reftype_val`,
  (CASE `fileterfield`.`reftype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `fileterfield_reftype`,
  `fileterfield`.`sequence` AS `fileterfield_sequence`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fileterfield`.`fileterfieldid`) AS `id`,
  'fileterfield' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`fileterfield`
  JOIN `filterfieldgroup`
    ON ((`filterfieldgroup`.`filterfieldgroupid` = `fileterfield`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilterfieldgroup
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilterfieldgroup_en_us
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilterfieldgroup_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilterfieldgroup_ru_ru
AS
SELECT
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `filterfieldgroupid`,
  `filterfieldgroup`.`changestamp` AS `changestamp`,
  `filterfieldgroup`.`sequence` AS `filterfieldgroup_sequence`,
  `filterfieldgroup`.`name` AS `filterfieldgroup_name`,
  `filterfieldgroup`.`allowignore` AS `filterfieldgroup_allowignore_val`,
  (CASE `filterfieldgroup`.`allowignore` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `filterfieldgroup_allowignore`,
  `filterfieldgroup`.`caption` AS `filterfieldgroup_caption`,
  `b2g`(`filterfieldgroup`.`instanceid`) AS `instanceid`,
  `filterfieldgroup`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filterfieldgroup`.`filterfieldgroupid`) AS `id`,
  'filterfieldgroup' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filterfieldgroup`
  JOIN `instance`
    ON ((`filterfieldgroup`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilters
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`name` AS `filters_name`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilters_en_us
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`name` AS `filters_name`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofilters_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofilters_ru_ru
AS
SELECT
  `b2g`(`filters`.`filtersid`) AS `filtersid`,
  `filters`.`changestamp` AS `changestamp`,
  `filters`.`name` AS `filters_name`,
  `filters`.`thecaption` AS `filters_thecaption`,
  `filters`.`thecomment` AS `filters_thecomment`,
  `b2g`(`filters`.`instanceid`) AS `instanceid`,
  `filters`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`filters`.`filtersid`) AS `id`,
  'filters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`filters`
  JOIN `instance`
    ON ((`filters`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofldextenders
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, NULL) AS `fldextenders_targetplatform`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofldextenders_en_us
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, 'en_us') AS `fldextenders_targetplatform`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autofldextenders_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autofldextenders_ru_ru
AS
SELECT
  `b2g`(`fldextenders`.`fldextendersid`) AS `fldextendersid`,
  `fldextenders`.`changestamp` AS `changestamp`,
  `b2g`(`field`.`fieldid`) AS `fieldid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`fldextenders`.`targetplatform`) AS `fldextenders_targetplatform_id`,
  `generator_target_brief_f`(`fldextenders`.`targetplatform`, 'ru_ru') AS `fldextenders_targetplatform`,
  `fldextenders`.`theconfig` AS `fldextenders_theconfig`,
  `fldextenders`.`theobject` AS `fldextenders_theobject`,
  `fldextenders`.`thename` AS `fldextenders_thename`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`fldextenders`.`fldextendersid`) AS `id`,
  'fldextenders' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`fldextenders`
  JOIN `field`
    ON ((`field`.`fieldid` = `fldextenders`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `field`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogencontrols
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogencontrols_en_us
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogencontrols_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogencontrols_ru_ru
AS
SELECT
  `b2g`(`gencontrols`.`gencontrolsid`) AS `gencontrolsid`,
  `gencontrols`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `gencontrols`.`versionminor` AS `gencontrols_versionminor`,
  `gencontrols`.`versionmajor` AS `gencontrols_versionmajor`,
  `gencontrols`.`controlprogid` AS `gencontrols_controlprogid`,
  `gencontrols`.`controlclassid` AS `gencontrols_controlclassid`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`gencontrols`.`gencontrolsid`) AS `id`,
  'gencontrols' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`gencontrols`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `gencontrols`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenerator_target
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN '???? ???' WHEN 1 THEN '??? ???? ?????' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN '????' WHEN 3 THEN '????????????' WHEN 1 THEN '??????' WHEN 2 THEN '??????????' WHEN 4 THEN '???' ELSE '' END) AS `generator_target_targettype`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenerator_target_en_us
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN '???? ???' WHEN 1 THEN '??? ???? ?????' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN '????' WHEN 3 THEN '????????????' WHEN 1 THEN '??????' WHEN 2 THEN '??????????' WHEN 4 THEN '???' ELSE '' END) AS `generator_target_targettype`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenerator_target_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenerator_target_ru_ru
AS
SELECT
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `generator_target`.`changestamp` AS `changestamp`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `generator_target`.`thedevelopmentenv` AS `generator_target_thedevelopmentenv_val`,
  (CASE `generator_target`.`thedevelopmentenv` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `generator_target_thedevelopmentenv`,
  `generator_target`.`queuename` AS `generator_target_queuename`,
  `generator_target`.`name` AS `generator_target_name`,
  `generator_target`.`generatorstyle` AS `generator_target_generatorstyle_val`,
  (CASE `generator_target`.`generatorstyle` WHEN 0 THEN '???? ???' WHEN 1 THEN '??? ???? ?????' ELSE '' END) AS `generator_target_generatorstyle`,
  `generator_target`.`generatorprogid` AS `generator_target_generatorprogid`,
  `generator_target`.`targettype` AS `generator_target_targettype_val`,
  (CASE `generator_target`.`targettype` WHEN 0 THEN '????' WHEN 3 THEN '????????????' WHEN 1 THEN '??????' WHEN 2 THEN '??????????' WHEN 4 THEN '???' ELSE '' END) AS `generator_target_targettype`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`generator_target`.`generator_targetid`) AS `id`,
  'generator_target' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`generator_target`
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenmanualcode
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenmanualcode_en_us
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenmanualcode_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenmanualcode_ru_ru
AS
SELECT
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `genmanualcodeid`,
  `genmanualcode`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genmanualcode`.`the_alias` AS `genmanualcode_the_alias`,
  `genmanualcode`.`code` AS `genmanualcode_code`,
  `genmanualcode`.`name` AS `genmanualcode_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genmanualcode`.`genmanualcodeid`) AS `id`,
  'genmanualcode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genmanualcode`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genmanualcode`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenpackage
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenpackage_en_us
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenpackage_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenpackage_ru_ru
AS
SELECT
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genpackage`.`changestamp` AS `changestamp`,
  `genpackage`.`name` AS `genpackage_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genpackage`.`genpackageid`) AS `id`,
  'genpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`genpackage`
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenreference
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `genreference`.`name` AS `genreference_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenreference_en_us
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `genreference`.`name` AS `genreference_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogenreference_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogenreference_ru_ru
AS
SELECT
  `b2g`(`genreference`.`genreferenceid`) AS `genreferenceid`,
  `genreference`.`changestamp` AS `changestamp`,
  `b2g`(`generator_target`.`generator_targetid`) AS `generator_targetid`,
  `b2g`(`genpackage`.`genpackageid`) AS `genpackageid`,
  `genreference`.`versionminor` AS `genreference_versionminor`,
  `genreference`.`versionmajor` AS `genreference_versionmajor`,
  `genreference`.`refclassid` AS `genreference_refclassid`,
  `genreference`.`name` AS `genreference_name`,
  `b2g`(`genpackage`.`instanceid`) AS `instanceid`,
  `genpackage`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`genreference`.`genreferenceid`) AS `id`,
  'genreference' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`genreference`
  JOIN `generator_target`
    ON ((`generator_target`.`generator_targetid` = `genreference`.`parentstructrowid`)))
  JOIN `genpackage`
    ON ((`genpackage`.`genpackageid` = `generator_target`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`genpackage`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroups
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroups_en_us
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroups_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroups_ru_ru
AS
SELECT
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `groups`.`changestamp` AS `changestamp`,
  `groups`.`adgroup` AS `groups_adgroup`,
  `groups`.`name` AS `groups_name`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groups`.`groupsid`) AS `id`,
  'groups' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`groups`
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroupuser
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, NULL) AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroupuser_en_us
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, 'en_us') AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autogroupuser_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autogroupuser_ru_ru
AS
SELECT
  `b2g`(`groupuser`.`groupuserid`) AS `groupuserid`,
  `groupuser`.`changestamp` AS `changestamp`,
  `b2g`(`groups`.`groupsid`) AS `groupsid`,
  `b2g`(`groupuser`.`theuser`) AS `groupuser_theuser_id`,
  `users_brief_f`(`groupuser`.`theuser`, 'ru_ru') AS `groupuser_theuser`,
  `b2g`(`groups`.`instanceid`) AS `instanceid`,
  `groups`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`groupuser`.`groupuserid`) AS `id`,
  'groupuser' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`groupuser`
  JOIN `groups`
    ON ((`groups`.`groupsid` = `groupuser`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`groups`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoinstancevalidator
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, NULL) AS `instancevalidator_target`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoinstancevalidator_en_us
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, 'en_us') AS `instancevalidator_target`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoinstancevalidator_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoinstancevalidator_ru_ru
AS
SELECT
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `instancevalidatorid`,
  `instancevalidator`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`instancevalidator`.`target`) AS `instancevalidator_target_id`,
  `generator_target_brief_f`(`instancevalidator`.`target`, 'ru_ru') AS `instancevalidator_target`,
  `instancevalidator`.`code` AS `instancevalidator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`instancevalidator`.`instancevalidatorid`) AS `id`,
  'instancevalidator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`instancevalidator`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `instancevalidator`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_crole
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_crole_en_us
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_crole_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_crole_ru_ru
AS
SELECT
  `b2g`(`iu_crole`.`iu_croleid`) AS `iu_croleid`,
  `iu_crole`.`changestamp` AS `changestamp`,
  `iu_crole`.`name` AS `iu_crole_name`,
  `iu_crole`.`allowsetuser` AS `iu_crole_allowsetuser_val`,
  (CASE `iu_crole`.`allowsetuser` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_crole_allowsetuser`,
  `b2g`(`iu_crole`.`instanceid`) AS `instanceid`,
  `iu_crole`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_crole`.`iu_croleid`) AS `id`,
  'iu_crole' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_crole`
  JOIN `instance`
    ON ((`iu_crole`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_int_modules
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_int_modules_en_us
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_int_modules_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_int_modules_ru_ru
AS
SELECT
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `iu_int_modulesid`,
  `iu_int_modules`.`changestamp` AS `changestamp`,
  `iu_int_modules`.`visiblecontrol` AS `iu_int_modules_visiblecontrol_val`,
  (CASE `iu_int_modules`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_visiblecontrol`,
  `iu_int_modules`.`name` AS `iu_int_modules_name`,
  `iu_int_modules`.`theicon` AS `iu_int_modules_theicon`,
  `iu_int_modules`.`otherdocmode` AS `iu_int_modules_otherdocmode`,
  `iu_int_modules`.`caption` AS `iu_int_modules_caption`,
  `iu_int_modules`.`sequence` AS `iu_int_modules_sequence`,
  `iu_int_modules`.`allobjects` AS `iu_int_modules_allobjects_val`,
  (CASE `iu_int_modules`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_allobjects`,
  `iu_int_modules`.`substructobjects` AS `iu_int_modules_substructobjects_val`,
  (CASE `iu_int_modules`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_substructobjects`,
  `iu_int_modules`.`colegsobject` AS `iu_int_modules_colegsobject_val`,
  (CASE `iu_int_modules`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_int_modules_colegsobject`,
  `iu_int_modules`.`controldocmode` AS `iu_int_modules_controldocmode`,
  `iu_int_modules`.`groupname` AS `iu_int_modules_groupname`,
  `iu_int_modules`.`mydocmode` AS `iu_int_modules_mydocmode`,
  `b2g`(`iu_int_modules`.`instanceid`) AS `instanceid`,
  `iu_int_modules`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_int_modules`.`iu_int_modulesid`) AS `id`,
  'iu_int_modules' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_int_modules`
  JOIN `instance`
    ON ((`iu_int_modules`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_def
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, NULL) AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_def_en_us
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, 'en_us') AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_def_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_def_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `iu_rcfg_defid`,
  `iu_rcfg_def`.`changestamp` AS `changestamp`,
  `b2g`(`iu_rcfg_def`.`therole`) AS `iu_rcfg_def_therole_id`,
  `iu_crole_brief_f`(`iu_rcfg_def`.`therole`, 'ru_ru') AS `iu_rcfg_def_therole`,
  `b2g`(`iu_rcfg_def`.`instanceid`) AS `instanceid`,
  `iu_rcfg_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_def`.`iu_rcfg_defid`) AS `id`,
  'iu_rcfg_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_def`
  JOIN `instance`
    ON ((`iu_rcfg_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_docmode
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, NULL) AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_docmode_en_us
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, 'en_us') AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_docmode_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_docmode_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `iu_rcfg_docmodeid`,
  `iu_rcfg_docmode`.`changestamp` AS `changestamp`,
  `iu_rcfg_docmode`.`addmode` AS `iu_rcfg_docmode_addmode`,
  `iu_rcfg_docmode`.`allowadd` AS `iu_rcfg_docmode_allowadd_val`,
  (CASE `iu_rcfg_docmode`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowadd`,
  `iu_rcfg_docmode`.`editmode` AS `iu_rcfg_docmode_editmode`,
  `b2g`(`iu_rcfg_docmode`.`the_document`) AS `iu_rcfg_docmode_the_document_id`,
  `objecttype_brief_f`(`iu_rcfg_docmode`.`the_document`, 'ru_ru') AS `iu_rcfg_docmode_the_document`,
  `iu_rcfg_docmode`.`allowdelete` AS `iu_rcfg_docmode_allowdelete_val`,
  (CASE `iu_rcfg_docmode`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_docmode_allowdelete`,
  `b2g`(`iu_rcfg_docmode`.`instanceid`) AS `instanceid`,
  `iu_rcfg_docmode`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_docmode`.`iu_rcfg_docmodeid`) AS `id`,
  'iu_rcfg_docmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_docmode`
  JOIN `instance`
    ON ((`iu_rcfg_docmode`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_mod
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_mod_en_us
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_rcfg_mod_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_rcfg_mod_ru_ru
AS
SELECT
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `iu_rcfg_modid`,
  `iu_rcfg_mod`.`changestamp` AS `changestamp`,
  `iu_rcfg_mod`.`sequence` AS `iu_rcfg_mod_sequence`,
  `iu_rcfg_mod`.`caption` AS `iu_rcfg_mod_caption`,
  `iu_rcfg_mod`.`colegsobject` AS `iu_rcfg_mod_colegsobject_val`,
  (CASE `iu_rcfg_mod`.`colegsobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_colegsobject`,
  `iu_rcfg_mod`.`theicon` AS `iu_rcfg_mod_theicon`,
  `iu_rcfg_mod`.`otherdocmode` AS `iu_rcfg_mod_otherdocmode`,
  `iu_rcfg_mod`.`visiblecontrol` AS `iu_rcfg_mod_visiblecontrol_val`,
  (CASE `iu_rcfg_mod`.`visiblecontrol` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_visiblecontrol`,
  `iu_rcfg_mod`.`name` AS `iu_rcfg_mod_name`,
  `iu_rcfg_mod`.`groupname` AS `iu_rcfg_mod_groupname`,
  `iu_rcfg_mod`.`substructobjects` AS `iu_rcfg_mod_substructobjects_val`,
  (CASE `iu_rcfg_mod`.`substructobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_substructobjects`,
  `iu_rcfg_mod`.`mydocmode` AS `iu_rcfg_mod_mydocmode`,
  `iu_rcfg_mod`.`moduleaccessible` AS `iu_rcfg_mod_moduleaccessible_val`,
  (CASE `iu_rcfg_mod`.`moduleaccessible` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_moduleaccessible`,
  `iu_rcfg_mod`.`controldocmode` AS `iu_rcfg_mod_controldocmode`,
  `iu_rcfg_mod`.`allobjects` AS `iu_rcfg_mod_allobjects_val`,
  (CASE `iu_rcfg_mod`.`allobjects` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_rcfg_mod_allobjects`,
  `b2g`(`iu_rcfg_mod`.`instanceid`) AS `instanceid`,
  `iu_rcfg_mod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_rcfg_mod`.`iu_rcfg_modid`) AS `id`,
  'iu_rcfg_mod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_rcfg_mod`
  JOIN `instance`
    ON ((`iu_rcfg_mod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_u_def
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_sendtomail`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, NULL) AS `iu_u_def_theclient`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, NULL) AS `iu_u_def_currole`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_u_def_en_us
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_sendtomail`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, 'en_us') AS `iu_u_def_theclient`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, 'en_us') AS `iu_u_def_currole`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoiu_u_def_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoiu_u_def_ru_ru
AS
SELECT
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `iu_u_defid`,
  `iu_u_def`.`changestamp` AS `changestamp`,
  `iu_u_def`.`freelancer` AS `iu_u_def_freelancer_val`,
  (CASE `iu_u_def`.`freelancer` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_freelancer`,
  `iu_u_def`.`surname` AS `iu_u_def_surname`,
  `iu_u_def`.`email` AS `iu_u_def_email`,
  `iu_u_def`.`sendtomail` AS `iu_u_def_sendtomail_val`,
  (CASE `iu_u_def`.`sendtomail` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `iu_u_def_sendtomail`,
  `b2g`(`iu_u_def`.`theclient`) AS `iu_u_def_theclient_id`,
  `bpc_info_brief_f`(`iu_u_def`.`theclient`, 'ru_ru') AS `iu_u_def_theclient`,
  `iu_u_def`.`lastname` AS `iu_u_def_lastname`,
  `b2g`(`iu_u_def`.`currole`) AS `iu_u_def_currole_id`,
  `iu_crole_brief_f`(`iu_u_def`.`currole`, 'ru_ru') AS `iu_u_def_currole`,
  `iu_u_def`.`name` AS `iu_u_def_name`,
  `iu_u_def`.`thephone` AS `iu_u_def_thephone`,
  `iu_u_def`.`login` AS `iu_u_def_login`,
  `b2g`(`iu_u_def`.`instanceid`) AS `instanceid`,
  `iu_u_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`iu_u_def`.`iu_u_defid`) AS `id`,
  'iu_u_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`iu_u_def`
  JOIN `instance`
    ON ((`iu_u_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojcolumnsource
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, NULL) AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojcolumnsource_en_us
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, 'en_us') AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojcolumnsource_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojcolumnsource_ru_ru
AS
SELECT
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `jcolumnsourceid`,
  `jcolumnsource`.`changestamp` AS `changestamp`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `b2g`(`jcolumnsource`.`srcpartview`) AS `jcolumnsource_srcpartview_id`,
  `journalsrc_brief_f`(`jcolumnsource`.`srcpartview`, 'ru_ru') AS `jcolumnsource_srcpartview`,
  `jcolumnsource`.`viewfield` AS `jcolumnsource_viewfield`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`jcolumnsource`.`jcolumnsourceid`) AS `id`,
  'jcolumnsource' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`jcolumnsource`
  JOIN `journalcolumn`
    ON ((`journalcolumn`.`journalcolumnid` = `jcolumnsource`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournal
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournal_en_us
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournal_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournal_ru_ru
AS
SELECT
  `b2g`(`journal`.`journalid`) AS `journalid`,
  `journal`.`changestamp` AS `changestamp`,
  `journal`.`jrnliconcls` AS `journal_jrnliconcls`,
  `journal`.`usefavorites` AS `journal_usefavorites_val`,
  (CASE `journal`.`usefavorites` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `journal_usefavorites`,
  `journal`.`name` AS `journal_name`,
  `journal`.`the_alias` AS `journal_the_alias`,
  `journal`.`thecomment` AS `journal_thecomment`,
  `b2g`(`journal`.`instanceid`) AS `instanceid`,
  `journal`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journal`.`journalid`) AS `id`,
  'journal' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journal`
  JOIN `instance`
    ON ((`journal`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalcolumn
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalcolumn_en_us
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalcolumn_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalcolumn_ru_ru
AS
SELECT
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `journalcolumnid`,
  `journalcolumn`.`changestamp` AS `changestamp`,
  `journalcolumn`.`sequence` AS `journalcolumn_sequence`,
  `journalcolumn`.`name` AS `journalcolumn_name`,
  `journalcolumn`.`groupaggregation` AS `journalcolumn_groupaggregation_val`,
  (CASE `journalcolumn`.`groupaggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `journalcolumn_groupaggregation`,
  `journalcolumn`.`columnalignment` AS `journalcolumn_columnalignment_val`,
  (CASE `journalcolumn`.`columnalignment` WHEN 6 THEN 'right top' WHEN 7 THEN 'right center' WHEN 8 THEN 'right bottom' WHEN 3 THEN 'center top' WHEN 0 THEN 'left top' WHEN 4 THEN 'center center' WHEN 1 THEN 'left center' WHEN 5 THEN 'center bottom' WHEN 2 THEN 'left bottom' ELSE '' END) AS `journalcolumn_columnalignment`,
  `journalcolumn`.`colsort` AS `journalcolumn_colsort_val`,
  (CASE `journalcolumn`.`colsort` WHEN 0 THEN 'as string' WHEN 1 THEN 'as numeric' WHEN 2 THEN 'as date' ELSE '' END) AS `journalcolumn_colsort`,
  `b2g`(`journalcolumn`.`instanceid`) AS `instanceid`,
  `journalcolumn`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalcolumn`.`journalcolumnid`) AS `id`,
  'journalcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalcolumn`
  JOIN `instance`
    ON ((`journalcolumn`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalsrc
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN '??????? ????????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ??????' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalsrc_en_us
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN '??????? ????????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ??????' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autojournalsrc_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autojournalsrc_ru_ru
AS
SELECT
  `b2g`(`journalsrc`.`journalsrcid`) AS `journalsrcid`,
  `journalsrc`.`changestamp` AS `changestamp`,
  `journalsrc`.`viewalias` AS `journalsrc_viewalias`,
  `journalsrc`.`onrun` AS `journalsrc_onrun_val`,
  (CASE `journalsrc`.`onrun` WHEN 2 THEN '??????? ????????' WHEN 0 THEN '?????? ?? ??????' WHEN 1 THEN '??????? ??????' ELSE '' END) AS `journalsrc_onrun`,
  `journalsrc`.`openmode` AS `journalsrc_openmode`,
  `b2g`(`journalsrc`.`instanceid`) AS `instanceid`,
  `journalsrc`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`journalsrc`.`journalsrcid`) AS `id`,
  'journalsrc' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`journalsrc`
  JOIN `instance`
    ON ((`journalsrc`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autolocalizeinfo
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autolocalizeinfo_en_us
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autolocalizeinfo_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autolocalizeinfo_ru_ru
AS
SELECT
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `localizeinfoid`,
  `localizeinfo`.`changestamp` AS `changestamp`,
  `localizeinfo`.`langfull` AS `localizeinfo_langfull`,
  `localizeinfo`.`langshort` AS `localizeinfo_langshort`,
  `b2g`(`localizeinfo`.`instanceid`) AS `instanceid`,
  `localizeinfo`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`localizeinfo`.`localizeinfoid`) AS `id`,
  'localizeinfo' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`localizeinfo`
  JOIN `instance`
    ON ((`localizeinfo`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automethodrestriction
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, NULL) AS `methodrestriction_part`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, NULL) AS `methodrestriction_method`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automethodrestriction_en_us
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, 'en_us') AS `methodrestriction_part`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, 'en_us') AS `methodrestriction_method`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automethodrestriction_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automethodrestriction_ru_ru
AS
SELECT
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `methodrestrictionid`,
  `methodrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`methodrestriction`.`part`) AS `methodrestriction_part_id`,
  `part_brief_f`(`methodrestriction`.`part`, 'ru_ru') AS `methodrestriction_part`,
  `methodrestriction`.`isrestricted` AS `methodrestriction_isrestricted_val`,
  (CASE `methodrestriction`.`isrestricted` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `methodrestriction_isrestricted`,
  `b2g`(`methodrestriction`.`method`) AS `methodrestriction_method_id`,
  `sharedmethod_brief_f`(`methodrestriction`.`method`, 'ru_ru') AS `methodrestriction_method`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`methodrestriction`.`methodrestrictionid`) AS `id`,
  'methodrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`methodrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `methodrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzapp
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzapp_en_us
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzapp_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzapp_ru_ru
AS
SELECT
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `mtzapp`.`changestamp` AS `changestamp`,
  `mtzapp`.`thecomment` AS `mtzapp_thecomment`,
  `mtzapp`.`dbname` AS `mtzapp_dbname`,
  `mtzapp`.`name` AS `mtzapp_name`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzapp`.`mtzappid`) AS `id`,
  'mtzapp' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzapp`
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzext_def
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzext_def_en_us
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzext_def_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzext_def_ru_ru
AS
SELECT
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `mtzext_defid`,
  `mtzext_def`.`changestamp` AS `changestamp`,
  `mtzext_def`.`thedescription` AS `mtzext_def_thedescription`,
  `mtzext_def`.`name` AS `mtzext_def_name`,
  `mtzext_def`.`exttype` AS `mtzext_def_exttype_val`,
  (CASE `mtzext_def`.`exttype` WHEN 6 THEN 'verifyrowext' WHEN 7 THEN 'codegenerator' WHEN 5 THEN 'defaultext' WHEN 0 THEN 'statusext' WHEN 4 THEN 'jrnlrunext' WHEN 2 THEN 'customext' WHEN 8 THEN 'armgenerator' WHEN 1 THEN 'onformext' WHEN 3 THEN 'jrnladdext' ELSE '' END) AS `mtzext_def_exttype`,
  `b2g`(`mtzext_def`.`instanceid`) AS `instanceid`,
  `mtzext_def`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzext_def`.`mtzext_defid`) AS `id`,
  'mtzext_def' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzext_def`
  JOIN `instance`
    ON ((`mtzext_def`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzextrel
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzextrel_en_us
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_automtzextrel_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_automtzextrel_ru_ru
AS
SELECT
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `mtzextrelid`,
  `mtzextrel`.`changestamp` AS `changestamp`,
  `mtzextrel`.`theclassname` AS `mtzextrel_theclassname`,
  `mtzextrel`.`theplatform` AS `mtzextrel_theplatform_val`,
  (CASE `mtzextrel`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `mtzextrel_theplatform`,
  `mtzextrel`.`thelibraryname` AS `mtzextrel_thelibraryname`,
  `b2g`(`mtzextrel`.`instanceid`) AS `instanceid`,
  `mtzextrel`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`mtzextrel`.`mtzextrelid`) AS `id`,
  'mtzextrel' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`mtzextrel`
  JOIN `instance`
    ON ((`mtzextrel`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_head
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN '?? ????????' WHEN 3 THEN '?? ??????' WHEN 0 THEN '?????? ????' WHEN 4 THEN '?? ???' WHEN 1 THEN '?? ????' WHEN 10 THEN '???????????? ????' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_head_en_us
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN '?? ????????' WHEN 3 THEN '?? ??????' WHEN 0 THEN '?????? ????' WHEN 4 THEN '?? ???' WHEN 1 THEN '?? ????' WHEN 10 THEN '???????????? ????' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_head_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_head_ru_ru
AS
SELECT
  `b2g`(`num_head`.`num_headid`) AS `num_headid`,
  `num_head`.`changestamp` AS `changestamp`,
  `num_head`.`shema` AS `num_head_shema_val`,
  (CASE `num_head`.`shema` WHEN 2 THEN '?? ????????' WHEN 3 THEN '?? ??????' WHEN 0 THEN '?????? ????' WHEN 4 THEN '?? ???' WHEN 1 THEN '?? ????' WHEN 10 THEN '???????????? ????' ELSE '' END) AS `num_head_shema`,
  `num_head`.`name` AS `num_head_name`,
  `b2g`(`num_head`.`instanceid`) AS `instanceid`,
  `num_head`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_head`.`num_headid`) AS `id`,
  'num_head' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_head`
  JOIN `instance`
    ON ((`num_head`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_values
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_values_en_us
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_values_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_values_ru_ru
AS
SELECT
  `b2g`(`num_values`.`num_valuesid`) AS `num_valuesid`,
  `num_values`.`changestamp` AS `changestamp`,
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_values`.`ownerrowid` AS `num_values_ownerrowid`,
  `num_values`.`the_value` AS `num_values_the_value`,
  `num_values`.`ownerpartname` AS `num_values_ownerpartname`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_values`.`num_valuesid`) AS `id`,
  'num_values' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`num_values`
  JOIN `num_zones`
    ON ((`num_zones`.`num_zonesid` = `num_values`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_zones
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_zones_en_us
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autonum_zones_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autonum_zones_ru_ru
AS
SELECT
  `b2g`(`num_zones`.`num_zonesid`) AS `num_zonesid`,
  `num_zones`.`changestamp` AS `changestamp`,
  `num_zones`.`zonemask` AS `num_zones_zonemask`,
  `b2g`(`num_zones`.`instanceid`) AS `instanceid`,
  `num_zones`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`num_zones`.`num_zonesid`) AS `id`,
  'num_zones' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`num_zones`
  JOIN `instance`
    ON ((`num_zones`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjectmode
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `objectmode`.`name` AS `objectmode_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjectmode_en_us
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `objectmode`.`name` AS `objectmode_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjectmode_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjectmode_ru_ru
AS
SELECT
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `objectmode`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objectmode`.`defaultmode` AS `objectmode_defaultmode_val`,
  (CASE `objectmode`.`defaultmode` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objectmode_defaultmode`,
  `objectmode`.`thecomment` AS `objectmode_thecomment`,
  `objectmode`.`name` AS `objectmode_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objectmode`.`objectmodeid`) AS `id`,
  'objectmode' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objectmode`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjecttype
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowsearch`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, NULL) AS `objecttype_ondelete`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_useownership`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN '?????????' WHEN 0 THEN '???? ????????' WHEN 2 THEN '?????????' ELSE '' END) AS `objecttype_replicatype`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, NULL) AS `objecttype_oncreate`,
  `objecttype`.`name` AS `objecttype_name`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, NULL) AS `objecttype_onrun`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, NULL) AS `objecttype_chooseview`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowreftoobject`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, NULL) AS `objecttype_package`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjecttype_en_us
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowsearch`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, 'en_us') AS `objecttype_ondelete`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_useownership`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN '?????????' WHEN 0 THEN '???? ????????' WHEN 2 THEN '?????????' ELSE '' END) AS `objecttype_replicatype`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, 'en_us') AS `objecttype_oncreate`,
  `objecttype`.`name` AS `objecttype_name`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, 'en_us') AS `objecttype_onrun`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, 'en_us') AS `objecttype_chooseview`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowreftoobject`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, 'en_us') AS `objecttype_package`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjecttype_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjecttype_ru_ru
AS
SELECT
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objecttype`.`changestamp` AS `changestamp`,
  `objecttype`.`allowsearch` AS `objecttype_allowsearch_val`,
  (CASE `objecttype`.`allowsearch` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowsearch`,
  `b2g`(`objecttype`.`ondelete`) AS `objecttype_ondelete_id`,
  `typemenu_brief_f`(`objecttype`.`ondelete`, 'ru_ru') AS `objecttype_ondelete`,
  `objecttype`.`useownership` AS `objecttype_useownership_val`,
  (CASE `objecttype`.`useownership` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_useownership`,
  `objecttype`.`thecomment` AS `objecttype_thecomment`,
  `objecttype`.`replicatype` AS `objecttype_replicatype_val`,
  (CASE `objecttype`.`replicatype` WHEN 1 THEN '?????????' WHEN 0 THEN '???? ????????' WHEN 2 THEN '?????????' ELSE '' END) AS `objecttype_replicatype`,
  `objecttype`.`commitfullobject` AS `objecttype_commitfullobject_val`,
  (CASE `objecttype`.`commitfullobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_commitfullobject`,
  `objecttype`.`objiconcls` AS `objecttype_objiconcls`,
  `b2g`(`objecttype`.`oncreate`) AS `objecttype_oncreate_id`,
  `typemenu_brief_f`(`objecttype`.`oncreate`, 'ru_ru') AS `objecttype_oncreate`,
  `objecttype`.`name` AS `objecttype_name`,
  `objecttype`.`issingleinstance` AS `objecttype_issingleinstance_val`,
  (CASE `objecttype`.`issingleinstance` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_issingleinstance`,
  `objecttype`.`the_comment` AS `objecttype_the_comment`,
  `b2g`(`objecttype`.`onrun`) AS `objecttype_onrun_id`,
  `typemenu_brief_f`(`objecttype`.`onrun`, 'ru_ru') AS `objecttype_onrun`,
  `b2g`(`objecttype`.`chooseview`) AS `objecttype_chooseview_id`,
  `partview_brief_f`(`objecttype`.`chooseview`, 'ru_ru') AS `objecttype_chooseview`,
  `objecttype`.`allowreftoobject` AS `objecttype_allowreftoobject_val`,
  (CASE `objecttype`.`allowreftoobject` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_allowreftoobject`,
  `objecttype`.`usearchiving` AS `objecttype_usearchiving_val`,
  (CASE `objecttype`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objecttype_usearchiving`,
  `b2g`(`objecttype`.`package`) AS `objecttype_package_id`,
  `mtzapp_brief_f`(`objecttype`.`package`, 'ru_ru') AS `objecttype_package`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objecttype`.`objecttypeid`) AS `id`,
  'objecttype' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`objecttype`
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjstatus
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isarchive`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjstatus_en_us
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isarchive`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoobjstatus_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoobjstatus_ru_ru
AS
SELECT
  `b2g`(`objstatus`.`objstatusid`) AS `objstatusid`,
  `objstatus`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `objstatus`.`the_comment` AS `objstatus_the_comment`,
  `objstatus`.`name` AS `objstatus_name`,
  `objstatus`.`isstartup` AS `objstatus_isstartup_val`,
  (CASE `objstatus`.`isstartup` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isstartup`,
  `objstatus`.`isarchive` AS `objstatus_isarchive_val`,
  (CASE `objstatus`.`isarchive` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `objstatus_isarchive`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`objstatus`.`objstatusid`) AS `id`,
  'objstatus' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`objstatus`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objstatus`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparameters
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `parameters_referencetype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_allownull`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, NULL) AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, NULL) AS `parameters_typeofparm`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, NULL) AS `parameters_reftotype`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparameters_en_us
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `parameters_referencetype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_allownull`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, 'en_us') AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, 'en_us') AS `parameters_typeofparm`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, 'en_us') AS `parameters_reftotype`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparameters_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparameters_ru_ru
AS
SELECT
  `b2g`(`parameters`.`parametersid`) AS `parametersid`,
  `parameters`.`changestamp` AS `changestamp`,
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `parameters`.`sequence` AS `parameters_sequence`,
  `parameters`.`referencetype` AS `parameters_referencetype_val`,
  (CASE `parameters`.`referencetype` WHEN 3 THEN '?? ???????? ??????' WHEN 0 THEN '????????? ???? ( ?? ??????)' WHEN 2 THEN '?? ?????? ???????' WHEN 1 THEN '?? ?????? ' ELSE '' END) AS `parameters_referencetype`,
  `parameters`.`allownull` AS `parameters_allownull_val`,
  (CASE `parameters`.`allownull` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_allownull`,
  `b2g`(`parameters`.`reftopart`) AS `parameters_reftopart_id`,
  `part_brief_f`(`parameters`.`reftopart`, 'ru_ru') AS `parameters_reftopart`,
  `parameters`.`caption` AS `parameters_caption`,
  `b2g`(`parameters`.`typeofparm`) AS `parameters_typeofparm_id`,
  `fieldtype_brief_f`(`parameters`.`typeofparm`, 'ru_ru') AS `parameters_typeofparm`,
  `b2g`(`parameters`.`reftotype`) AS `parameters_reftotype_id`,
  `objecttype_brief_f`(`parameters`.`reftotype`, 'ru_ru') AS `parameters_reftotype`,
  `parameters`.`datasize` AS `parameters_datasize`,
  `parameters`.`name` AS `parameters_name`,
  `parameters`.`outparam` AS `parameters_outparam_val`,
  (CASE `parameters`.`outparam` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `parameters_outparam`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parameters`.`parametersid`) AS `id`,
  'parameters' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`parameters`
  JOIN `script`
    ON ((`script`.`scriptid` = `parameters`.`parentstructrowid`)))
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparentpackage
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, NULL) AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparentpackage_en_us
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, 'en_us') AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoparentpackage_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoparentpackage_ru_ru
AS
SELECT
  `b2g`(`parentpackage`.`parentpackageid`) AS `parentpackageid`,
  `parentpackage`.`changestamp` AS `changestamp`,
  `b2g`(`mtzapp`.`mtzappid`) AS `mtzappid`,
  `b2g`(`parentpackage`.`package`) AS `parentpackage_package_id`,
  `mtzapp_brief_f`(`parentpackage`.`package`, 'ru_ru') AS `parentpackage_package`,
  `b2g`(`mtzapp`.`instanceid`) AS `instanceid`,
  `mtzapp`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`parentpackage`.`parentpackageid`) AS `id`,
  'parentpackage' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`parentpackage`
  JOIN `mtzapp`
    ON ((`mtzapp`.`mtzappid` = `parentpackage`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`mtzapp`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopart
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, NULL) AS `part_onrun`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_integerpkey`,
  `part`.`sequence` AS `part_sequence`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, NULL) AS `part_extenderobject`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, NULL) AS `part_oncreate`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN '?????????' WHEN 2 THEN '??????' WHEN 0 THEN '??????' WHEN 4 THEN '?????????? ? ???????' WHEN 3 THEN '??????????' ELSE '' END) AS `part_parttype`,
  `part`.`particoncls` AS `part_particoncls`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, NULL) AS `part_ondelete`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_manualregister`,
  `part`.`name` AS `part_name`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_nolog`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, NULL) AS `part_onsave`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopart_en_us
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, 'en_us') AS `part_onrun`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_integerpkey`,
  `part`.`sequence` AS `part_sequence`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, 'en_us') AS `part_extenderobject`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, 'en_us') AS `part_oncreate`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN '?????????' WHEN 2 THEN '??????' WHEN 0 THEN '??????' WHEN 4 THEN '?????????? ? ???????' WHEN 3 THEN '??????????' ELSE '' END) AS `part_parttype`,
  `part`.`particoncls` AS `part_particoncls`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, 'en_us') AS `part_ondelete`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_manualregister`,
  `part`.`name` AS `part_name`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_nolog`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, 'en_us') AS `part_onsave`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopart_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopart_ru_ru
AS
SELECT
  `b2g`(`part`.`partid`) AS `partid`,
  `part`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`part`.`onrun`) AS `part_onrun_id`,
  `partmenu_brief_f`(`part`.`onrun`, 'ru_ru') AS `part_onrun`,
  `part`.`integerpkey` AS `part_integerpkey_val`,
  (CASE `part`.`integerpkey` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_integerpkey`,
  `part`.`sequence` AS `part_sequence`,
  `part`.`isjormalchange` AS `part_isjormalchange_val`,
  (CASE `part`.`isjormalchange` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_isjormalchange`,
  `b2g`(`part`.`extenderobject`) AS `part_extenderobject_id`,
  `instance_brief_f`(`part`.`extenderobject`, 'ru_ru') AS `part_extenderobject`,
  `part`.`rulebrief` AS `part_rulebrief`,
  `part`.`usearchiving` AS `part_usearchiving_val`,
  (CASE `part`.`usearchiving` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_usearchiving`,
  `b2g`(`part`.`oncreate`) AS `part_oncreate_id`,
  `partmenu_brief_f`(`part`.`oncreate`, 'ru_ru') AS `part_oncreate`,
  `part`.`parttype` AS `part_parttype_val`,
  (CASE `part`.`parttype` WHEN 1 THEN '?????????' WHEN 2 THEN '??????' WHEN 0 THEN '??????' WHEN 4 THEN '?????????? ? ???????' WHEN 3 THEN '??????????' ELSE '' END) AS `part_parttype`,
  `part`.`particoncls` AS `part_particoncls`,
  `b2g`(`part`.`ondelete`) AS `part_ondelete_id`,
  `partmenu_brief_f`(`part`.`ondelete`, 'ru_ru') AS `part_ondelete`,
  `part`.`the_comment` AS `part_the_comment`,
  `part`.`manualregister` AS `part_manualregister_val`,
  (CASE `part`.`manualregister` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_manualregister`,
  `part`.`name` AS `part_name`,
  `part`.`nolog` AS `part_nolog_val`,
  (CASE `part`.`nolog` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `part_nolog`,
  `part`.`shablonbrief` AS `part_shablonbrief`,
  `part`.`caption` AS `part_caption`,
  `part`.`addbehaivor` AS `part_addbehaivor_val`,
  (CASE `part`.`addbehaivor` WHEN 0 THEN 'addform' WHEN 2 THEN 'runaction' WHEN 1 THEN 'refreshonly' ELSE '' END) AS `part_addbehaivor`,
  `b2g`(`part`.`onsave`) AS `part_onsave_id`,
  `partmenu_brief_f`(`part`.`onsave`, 'ru_ru') AS `part_onsave`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`part`.`partid`) AS `id`,
  'part' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`part`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartmenu
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, NULL) AS `partmenu_the_action`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartmenu_en_us
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, 'en_us') AS `partmenu_the_action`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartmenu_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartmenu_ru_ru
AS
SELECT
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `partmenu`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partmenu`.`istoolbarbutton` AS `partmenu_istoolbarbutton_val`,
  (CASE `partmenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_istoolbarbutton`,
  `partmenu`.`tooltip` AS `partmenu_tooltip`,
  `partmenu`.`name` AS `partmenu_name`,
  `partmenu`.`ismenuitem` AS `partmenu_ismenuitem_val`,
  (CASE `partmenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partmenu_ismenuitem`,
  `b2g`(`partmenu`.`the_action`) AS `partmenu_the_action_id`,
  `sharedmethod_brief_f`(`partmenu`.`the_action`, 'ru_ru') AS `partmenu_the_action`,
  `partmenu`.`caption` AS `partmenu_caption`,
  `partmenu`.`hotkey` AS `partmenu_hotkey`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partmenu`.`partmenuid`) AS `id`,
  'partmenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partmenu`
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartparammap
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partparammap_noedit`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartparammap_en_us
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partparammap_noedit`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartparammap_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartparammap_ru_ru
AS
SELECT
  `b2g`(`partparammap`.`partparammapid`) AS `partparammapid`,
  `partparammap`.`changestamp` AS `changestamp`,
  `b2g`(`partmenu`.`partmenuid`) AS `partmenuid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partparammap`.`paramname` AS `partparammap_paramname`,
  `partparammap`.`fieldname` AS `partparammap_fieldname`,
  `partparammap`.`noedit` AS `partparammap_noedit_val`,
  (CASE `partparammap`.`noedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partparammap_noedit`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partparammap`.`partparammapid`) AS `id`,
  'partparammap' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partparammap`
  JOIN `partmenu`
    ON ((`partmenu`.`partmenuid` = `partparammap`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partmenu`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partview_forchoose`,
  `partview`.`name` AS `partview_name`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview_en_us
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partview_forchoose`,
  `partview`.`name` AS `partview_name`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview_lnk
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN '???' WHEN 4 THEN '?????? parentstructrowid  (? ???????? ???????)' WHEN 3 THEN '?????? instanceid (? ???????? ???????)' WHEN 1 THEN '?????? ?? ??????' WHEN 2 THEN '?????? ?? ??????' ELSE '' END) AS `partview_lnk_reftype`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, NULL) AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, NULL) AS `partview_lnk_thejoindestination`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, NULL) AS `partview_lnk_theview`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview_lnk_en_us
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN '???' WHEN 4 THEN '?????? parentstructrowid  (? ???????? ???????)' WHEN 3 THEN '?????? instanceid (? ???????? ???????)' WHEN 1 THEN '?????? ?? ??????' WHEN 2 THEN '?????? ?? ??????' ELSE '' END) AS `partview_lnk_reftype`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, 'en_us') AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, 'en_us') AS `partview_lnk_thejoindestination`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, 'en_us') AS `partview_lnk_theview`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_lnk_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview_lnk_ru_ru
AS
SELECT
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `partview_lnkid`,
  `partview_lnk`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview_lnk`.`reftype` AS `partview_lnk_reftype_val`,
  (CASE `partview_lnk`.`reftype` WHEN 0 THEN '???' WHEN 4 THEN '?????? parentstructrowid  (? ???????? ???????)' WHEN 3 THEN '?????? instanceid (? ???????? ???????)' WHEN 1 THEN '?????? ?? ??????' WHEN 2 THEN '?????? ?? ??????' ELSE '' END) AS `partview_lnk_reftype`,
  `b2g`(`partview_lnk`.`thejoinsource`) AS `partview_lnk_thejoinsource_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoinsource`, 'ru_ru') AS `partview_lnk_thejoinsource`,
  `partview_lnk`.`seq` AS `partview_lnk_seq`,
  `b2g`(`partview_lnk`.`thejoindestination`) AS `partview_lnk_thejoindestination_id`,
  `viewcolumn_brief_f`(`partview_lnk`.`thejoindestination`, 'ru_ru') AS `partview_lnk_thejoindestination`,
  `b2g`(`partview_lnk`.`theview`) AS `partview_lnk_theview_id`,
  `partview_brief_f`(`partview_lnk`.`theview`, 'ru_ru') AS `partview_lnk_theview`,
  `partview_lnk`.`handjoin` AS `partview_lnk_handjoin`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview_lnk`.`partview_lnkid`) AS `id`,
  'partview_lnk' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`partview_lnk`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `partview_lnk`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autopartview_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autopartview_ru_ru
AS
SELECT
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `partview`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `partview`.`filterfield2` AS `partview_filterfield2`,
  `partview`.`filterfield1` AS `partview_filterfield1`,
  `partview`.`forchoose` AS `partview_forchoose_val`,
  (CASE `partview`.`forchoose` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `partview_forchoose`,
  `partview`.`name` AS `partview_name`,
  `partview`.`filterfield0` AS `partview_filterfield0`,
  `partview`.`the_alias` AS `partview_the_alias`,
  `partview`.`filterfield3` AS `partview_filterfield3`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`partview`.`partviewid`) AS `id`,
  'partview' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`partview`
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoreports
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `reports`.`caption` AS `reports_caption`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, NULL) AS `reports_thereportext`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN '??????? ?? excel ???????' WHEN 0 THEN '???????' WHEN 3 THEN '??????? ?? word ???????' WHEN 1 THEN '????????? ???????' WHEN 2 THEN '?????? ??????' ELSE '' END) AS `reports_reporttype`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, NULL) AS `reports_preparemethod`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoreports_en_us
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `reports`.`caption` AS `reports_caption`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, 'en_us') AS `reports_thereportext`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN '??????? ?? excel ???????' WHEN 0 THEN '???????' WHEN 3 THEN '??????? ?? word ???????' WHEN 1 THEN '????????? ???????' WHEN 2 THEN '?????? ??????' ELSE '' END) AS `reports_reporttype`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, 'en_us') AS `reports_preparemethod`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoreports_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoreports_ru_ru
AS
SELECT
  `b2g`(`reports`.`reportsid`) AS `reportsid`,
  `reports`.`changestamp` AS `changestamp`,
  `reports`.`reportfile` AS `reports_reportfile`,
  `reports`.`caption` AS `reports_caption`,
  `b2g`(`reports`.`thereportext`) AS `reports_thereportext_id`,
  `instance_brief_f`(`reports`.`thereportext`, 'ru_ru') AS `reports_thereportext`,
  `reports`.`thecomment` AS `reports_thecomment`,
  `reports`.`reporttype` AS `reports_reporttype_val`,
  (CASE `reports`.`reporttype` WHEN 4 THEN '??????? ?? excel ???????' WHEN 0 THEN '???????' WHEN 3 THEN '??????? ?? word ???????' WHEN 1 THEN '????????? ???????' WHEN 2 THEN '?????? ??????' ELSE '' END) AS `reports_reporttype`,
  `reports`.`name` AS `reports_name`,
  `reports`.`reportview` AS `reports_reportview`,
  `b2g`(`reports`.`preparemethod`) AS `reports_preparemethod_id`,
  `sharedmethod_brief_f`(`reports`.`preparemethod`, 'ru_ru') AS `reports_preparemethod`,
  `b2g`(`reports`.`instanceid`) AS `instanceid`,
  `reports`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`reports`.`reportsid`) AS `id`,
  'reports' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`reports`
  JOIN `instance`
    ON ((`reports`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptfields
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, NULL) AS `rptfields_fieldtype`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptfields_en_us
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, 'en_us') AS `rptfields_fieldtype`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptfields_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptfields_ru_ru
AS
SELECT
  `b2g`(`rptfields`.`rptfieldsid`) AS `rptfieldsid`,
  `rptfields`.`changestamp` AS `changestamp`,
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptfields`.`caption` AS `rptfields_caption`,
  `b2g`(`rptfields`.`fieldtype`) AS `rptfields_fieldtype_id`,
  `fieldtype_brief_f`(`rptfields`.`fieldtype`, 'ru_ru') AS `rptfields_fieldtype`,
  `rptfields`.`name` AS `rptfields_name`,
  `rptfields`.`fieldsize` AS `rptfields_fieldsize`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptfields`.`rptfieldsid`) AS `id`,
  'rptfields' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`rptfields`
  JOIN `rptstruct`
    ON ((`rptstruct`.`rptstructid` = `rptfields`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptformula
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, NULL) AS `rptformula_platform`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptformula_en_us
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, 'en_us') AS `rptformula_platform`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptformula_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptformula_ru_ru
AS
SELECT
  `b2g`(`rptformula`.`rptformulaid`) AS `rptformulaid`,
  `rptformula`.`changestamp` AS `changestamp`,
  `rptformula`.`name` AS `rptformula_name`,
  `rptformula`.`code` AS `rptformula_code`,
  `b2g`(`rptformula`.`platform`) AS `rptformula_platform_id`,
  `generator_target_brief_f`(`rptformula`.`platform`, 'ru_ru') AS `rptformula_platform`,
  `b2g`(`rptformula`.`instanceid`) AS `instanceid`,
  `rptformula`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptformula`.`rptformulaid`) AS `id`,
  'rptformula' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptformula`
  JOIN `instance`
    ON ((`rptformula`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptstruct
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptstruct_en_us
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autorptstruct_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autorptstruct_ru_ru
AS
SELECT
  `b2g`(`rptstruct`.`rptstructid`) AS `rptstructid`,
  `rptstruct`.`changestamp` AS `changestamp`,
  `rptstruct`.`name` AS `rptstruct_name`,
  `rptstruct`.`caption` AS `rptstruct_caption`,
  `b2g`(`rptstruct`.`instanceid`) AS `instanceid`,
  `rptstruct`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`rptstruct`.`rptstructid`) AS `id`,
  'rptstruct' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`rptstruct`
  JOIN `instance`
    ON ((`rptstruct`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoscript
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `script`.`code` AS `script_code`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, NULL) AS `script_target`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoscript_en_us
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `script`.`code` AS `script_code`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, 'en_us') AS `script_target`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoscript_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoscript_ru_ru
AS
SELECT
  `b2g`(`script`.`scriptid`) AS `scriptid`,
  `script`.`changestamp` AS `changestamp`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `script`.`code` AS `script_code`,
  `b2g`(`script`.`target`) AS `script_target_id`,
  `generator_target_brief_f`(`script`.`target`, 'ru_ru') AS `script_target`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`script`.`scriptid`) AS `id`,
  'script' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`script`
  JOIN `sharedmethod`
    ON ((`sharedmethod`.`sharedmethodid` = `script`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosharedmethod
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, NULL) AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosharedmethod_en_us
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, 'en_us') AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosharedmethod_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosharedmethod_ru_ru
AS
SELECT
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `sharedmethodid`,
  `sharedmethod`.`changestamp` AS `changestamp`,
  `sharedmethod`.`the_comment` AS `sharedmethod_the_comment`,
  `sharedmethod`.`name` AS `sharedmethod_name`,
  `b2g`(`sharedmethod`.`returntype`) AS `sharedmethod_returntype_id`,
  `fieldtype_brief_f`(`sharedmethod`.`returntype`, 'ru_ru') AS `sharedmethod_returntype`,
  `b2g`(`sharedmethod`.`instanceid`) AS `instanceid`,
  `sharedmethod`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sharedmethod`.`sharedmethodid`) AS `id`,
  'sharedmethod' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sharedmethod`
  JOIN `instance`
    ON ((`sharedmethod`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autostructrestriction
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowdelete`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowread`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, NULL) AS `structrestriction_struct`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowadd`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autostructrestriction_en_us
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowdelete`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowread`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, 'en_us') AS `structrestriction_struct`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowadd`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autostructrestriction_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autostructrestriction_ru_ru
AS
SELECT
  `b2g`(`structrestriction`.`structrestrictionid`) AS `structrestrictionid`,
  `structrestriction`.`changestamp` AS `changestamp`,
  `b2g`(`objectmode`.`objectmodeid`) AS `objectmodeid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `structrestriction`.`allowedit` AS `structrestriction_allowedit_val`,
  (CASE `structrestriction`.`allowedit` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowedit`,
  `structrestriction`.`allowdelete` AS `structrestriction_allowdelete_val`,
  (CASE `structrestriction`.`allowdelete` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowdelete`,
  `structrestriction`.`allowread` AS `structrestriction_allowread_val`,
  (CASE `structrestriction`.`allowread` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowread`,
  `b2g`(`structrestriction`.`struct`) AS `structrestriction_struct_id`,
  `part_brief_f`(`structrestriction`.`struct`, 'ru_ru') AS `structrestriction_struct`,
  `structrestriction`.`allowadd` AS `structrestriction_allowadd_val`,
  (CASE `structrestriction`.`allowadd` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `structrestriction_allowadd`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`structrestriction`.`structrestrictionid`) AS `id`,
  'structrestriction' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`structrestriction`
  JOIN `objectmode`
    ON ((`objectmode`.`objectmodeid` = `structrestriction`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `objectmode`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosyslog
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, NULL) AS `syslog_thesession`,
  `syslog`.`verb` AS `syslog_verb`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosyslog_en_us
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, 'en_us') AS `syslog_thesession`,
  `syslog`.`verb` AS `syslog_verb`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosyslog_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosyslog_ru_ru
AS
SELECT
  `b2g`(`syslog`.`syslogid`) AS `syslogid`,
  `syslog`.`changestamp` AS `changestamp`,
  `syslog`.`logstructid` AS `syslog_logstructid`,
  `syslog`.`loginstanceid` AS `syslog_loginstanceid`,
  `syslog`.`the_resource` AS `syslog_the_resource`,
  `b2g`(`syslog`.`thesession`) AS `syslog_thesession_id`,
  `the_session_brief_f`(`syslog`.`thesession`, 'ru_ru') AS `syslog_thesession`,
  `syslog`.`verb` AS `syslog_verb`,
  `b2g`(`syslog`.`instanceid`) AS `instanceid`,
  `syslog`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`syslog`.`syslogid`) AS `id`,
  'syslog' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`syslog`
  JOIN `instance`
    ON ((`syslog`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosysrefcache
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, NULL) AS `sysrefcache_sessionid`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosysrefcache_en_us
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, 'en_us') AS `sysrefcache_sessionid`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autosysrefcache_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autosysrefcache_ru_ru
AS
SELECT
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `sysrefcacheid`,
  `sysrefcache`.`changestamp` AS `changestamp`,
  `b2g`(`sysrefcache`.`sessionid`) AS `sysrefcache_sessionid_id`,
  `the_session_brief_f`(`sysrefcache`.`sessionid`, 'ru_ru') AS `sysrefcache_sessionid`,
  `sysrefcache`.`objectownerid` AS `sysrefcache_objectownerid`,
  `sysrefcache`.`cachetype` AS `sysrefcache_cachetype_val`,
  (CASE `sysrefcache`.`cachetype` WHEN 4 THEN 'space' WHEN 3 THEN 'mark' WHEN 2 THEN 'odd' WHEN 0 THEN 'none' WHEN 1 THEN 'even' ELSE '' END) AS `sysrefcache_cachetype`,
  `sysrefcache`.`modulename` AS `sysrefcache_modulename`,
  `b2g`(`sysrefcache`.`instanceid`) AS `instanceid`,
  `sysrefcache`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`sysrefcache`.`sysrefcacheid`) AS `id`,
  'sysrefcache' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`sysrefcache`
  JOIN `instance`
    ON ((`sysrefcache`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autothe_session
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`startat` AS `the_session_startat`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, NULL) AS `the_session_usersid`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`lang` AS `the_session_lang`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, NULL) AS `the_session_applicationid`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, NULL) AS `the_session_userrole`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autothe_session_en_us
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`startat` AS `the_session_startat`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, 'en_us') AS `the_session_usersid`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`lang` AS `the_session_lang`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, 'en_us') AS `the_session_applicationid`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, 'en_us') AS `the_session_userrole`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autothe_session_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autothe_session_ru_ru
AS
SELECT
  `b2g`(`the_session`.`the_sessionid`) AS `the_sessionid`,
  `the_session`.`changestamp` AS `changestamp`,
  `the_session`.`lastaccess` AS `the_session_lastaccess`,
  `the_session`.`startat` AS `the_session_startat`,
  `b2g`(`the_session`.`usersid`) AS `the_session_usersid_id`,
  `users_brief_f`(`the_session`.`usersid`, 'ru_ru') AS `the_session_usersid`,
  `the_session`.`closedat` AS `the_session_closedat`,
  `the_session`.`login` AS `the_session_login`,
  `the_session`.`lang` AS `the_session_lang`,
  `b2g`(`the_session`.`applicationid`) AS `the_session_applicationid_id`,
  `workplace_brief_f`(`the_session`.`applicationid`, 'ru_ru') AS `the_session_applicationid`,
  `the_session`.`closed` AS `the_session_closed_val`,
  (CASE `the_session`.`closed` WHEN 1 THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `the_session_closed`,
  `b2g`(`the_session`.`userrole`) AS `the_session_userrole_id`,
  `groups_brief_f`(`the_session`.`userrole`, 'ru_ru') AS `the_session_userrole`,
  `b2g`(`the_session`.`instanceid`) AS `instanceid`,
  `the_session`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`the_session`.`the_sessionid`) AS `id`,
  'the_session' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`the_session`
  JOIN `instance`
    ON ((`the_session`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autotypemenu
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, NULL) AS `typemenu_the_action`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autotypemenu_en_us
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, 'en_us') AS `typemenu_the_action`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autotypemenu_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autotypemenu_ru_ru
AS
SELECT
  `b2g`(`typemenu`.`typemenuid`) AS `typemenuid`,
  `typemenu`.`changestamp` AS `changestamp`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `typemenu`.`hotkey` AS `typemenu_hotkey`,
  `typemenu`.`istoolbarbutton` AS `typemenu_istoolbarbutton_val`,
  (CASE `typemenu`.`istoolbarbutton` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_istoolbarbutton`,
  `typemenu`.`caption` AS `typemenu_caption`,
  `b2g`(`typemenu`.`the_action`) AS `typemenu_the_action_id`,
  `sharedmethod_brief_f`(`typemenu`.`the_action`, 'ru_ru') AS `typemenu_the_action`,
  `typemenu`.`ismenuitem` AS `typemenu_ismenuitem_val`,
  (CASE `typemenu`.`ismenuitem` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `typemenu_ismenuitem`,
  `typemenu`.`name` AS `typemenu_name`,
  `typemenu`.`tooltip` AS `typemenu_tooltip`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`typemenu`.`typemenuid`) AS `id`,
  'typemenu' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((`typemenu`
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `typemenu`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autouniqueconstraint
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autouniqueconstraint_en_us
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autouniqueconstraint_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autouniqueconstraint_ru_ru
AS
SELECT
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `uniqueconstraintid`,
  `uniqueconstraint`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `uniqueconstraint`.`perparent` AS `uniqueconstraint_perparent_val`,
  (CASE `uniqueconstraint`.`perparent` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `uniqueconstraint_perparent`,
  `uniqueconstraint`.`name` AS `uniqueconstraint_name`,
  `uniqueconstraint`.`thecomment` AS `uniqueconstraint_thecomment`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`uniqueconstraint`.`uniqueconstraintid`) AS `id`,
  'uniqueconstraint' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`uniqueconstraint`
  JOIN `part`
    ON ((`part`.`partid` = `uniqueconstraint`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autousers
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`family` AS `users_family`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`login` AS `users_login`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`email` AS `users_email`,
  `users`.`phone` AS `users_phone`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autousers_en_us
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`family` AS `users_family`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`login` AS `users_login`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`email` AS `users_email`,
  `users`.`phone` AS `users_phone`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autousers_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autousers_ru_ru
AS
SELECT
  `b2g`(`users`.`usersid`) AS `usersid`,
  `users`.`changestamp` AS `changestamp`,
  `users`.`family` AS `users_family`,
  `users`.`localphone` AS `users_localphone`,
  `users`.`domainame` AS `users_domainame`,
  `users`.`login` AS `users_login`,
  `users`.`surname` AS `users_surname`,
  `users`.`name` AS `users_name`,
  `users`.`email` AS `users_email`,
  `users`.`phone` AS `users_phone`,
  `b2g`(`users`.`instanceid`) AS `instanceid`,
  `users`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`users`.`usersid`) AS `id`,
  'users' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`users`
  JOIN `instance`
    ON ((`users`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autovalidator
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, NULL) AS `validator_target`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autovalidator_en_us
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, 'en_us') AS `validator_target`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autovalidator_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autovalidator_ru_ru
AS
SELECT
  `b2g`(`validator`.`validatorid`) AS `validatorid`,
  `validator`.`changestamp` AS `changestamp`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `b2g`(`validator`.`target`) AS `validator_target_id`,
  `generator_target_brief_f`(`validator`.`target`, 'ru_ru') AS `validator_target`,
  `validator`.`code` AS `validator_code`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`validator`.`validatorid`) AS `id`,
  'validator' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((((`validator`
  JOIN `part`
    ON ((`part`.`partid` = `validator`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoviewcolumn
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, NULL) AS `viewcolumn_frompart`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, NULL) AS `viewcolumn_field`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoviewcolumn_en_us
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, 'en_us') AS `viewcolumn_frompart`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, 'en_us') AS `viewcolumn_field`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoviewcolumn_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoviewcolumn_ru_ru
AS
SELECT
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `viewcolumnid`,
  `viewcolumn`.`changestamp` AS `changestamp`,
  `b2g`(`partview`.`partviewid`) AS `partviewid`,
  `b2g`(`part`.`partid`) AS `partid`,
  `b2g`(`objecttype`.`objecttypeid`) AS `objecttypeid`,
  `viewcolumn`.`expression` AS `viewcolumn_expression`,
  `viewcolumn`.`forcombo` AS `viewcolumn_forcombo_val`,
  (CASE `viewcolumn`.`forcombo` WHEN -(1) THEN '??' WHEN 0 THEN '???' ELSE '' END) AS `viewcolumn_forcombo`,
  `viewcolumn`.`sequence` AS `viewcolumn_sequence`,
  `viewcolumn`.`aggregation` AS `viewcolumn_aggregation_val`,
  (CASE `viewcolumn`.`aggregation` WHEN 3 THEN 'sum' WHEN 1 THEN 'avg' WHEN 6 THEN 'custom' WHEN 0 THEN 'none' WHEN 2 THEN 'count' WHEN 5 THEN 'max' WHEN 4 THEN 'min' ELSE '' END) AS `viewcolumn_aggregation`,
  `viewcolumn`.`the_alias` AS `viewcolumn_the_alias`,
  `b2g`(`viewcolumn`.`frompart`) AS `viewcolumn_frompart_id`,
  `part_brief_f`(`viewcolumn`.`frompart`, 'ru_ru') AS `viewcolumn_frompart`,
  `b2g`(`viewcolumn`.`field`) AS `viewcolumn_field_id`,
  `field_brief_f`(`viewcolumn`.`field`, 'ru_ru') AS `viewcolumn_field`,
  `viewcolumn`.`name` AS `viewcolumn_name`,
  `b2g`(`objecttype`.`instanceid`) AS `instanceid`,
  `objecttype`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`viewcolumn`.`viewcolumnid`) AS `id`,
  'viewcolumn' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM (((((`viewcolumn`
  JOIN `partview`
    ON ((`partview`.`partviewid` = `viewcolumn`.`parentstructrowid`)))
  JOIN `part`
    ON ((`part`.`partid` = `partview`.`parentstructrowid`)))
  JOIN `objecttype`
    ON ((`objecttype`.`objecttypeid` = `part`.`parentstructrowid`)))
  JOIN `instance`
    ON ((`objecttype`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoworkplace
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace_en_us"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoworkplace_en_us
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_autoworkplace_ru_ru"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_autoworkplace_ru_ru
AS
SELECT
  `b2g`(`workplace`.`workplaceid`) AS `workplaceid`,
  `workplace`.`changestamp` AS `changestamp`,
  `workplace`.`thecomment` AS `workplace_thecomment`,
  `workplace`.`name` AS `workplace_name`,
  `workplace`.`theplatform` AS `workplace_theplatform_val`,
  (CASE `workplace`.`theplatform` WHEN 3 THEN 'other' WHEN 1 THEN 'dotnet' WHEN 2 THEN 'java' WHEN 0 THEN 'vb6' ELSE '' END) AS `workplace_theplatform`,
  `workplace`.`caption` AS `workplace_caption`,
  `workplace`.`theversion` AS `workplace_theversion`,
  `b2g`(`workplace`.`instanceid`) AS `instanceid`,
  `workplace`.`instanceid` AS `instanceid_val`,
  `instance`.`archived` AS `instance_archived`,
  `b2g`(`workplace`.`workplaceid`) AS `id`,
  'workplace' AS `viewbase`,
  `xxxmystatusxxx`.`name` AS `statusname`,
  `b2g`(`xxxmystatusxxx`.`objstatusid`) AS `intsancestatusid`
FROM ((`workplace`
  JOIN `instance`
    ON ((`workplace`.`instanceid` = `instance`.`instanceid`)))
  LEFT JOIN `objstatus` `xxxmystatusxxx`
    ON ((`instance`.`status` = `xxxmystatusxxx`.`objstatusid`)));

--
-- Создать представление "v_instance"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_instance
AS
SELECT
  `b2g`(`instance`.`instanceid`) AS `instanceid`,
  `instance`.`lockuserid` AS `lockuserid`,
  `instance`.`locksessionid` AS `locksessionid`,
  `instance`.`securitystyleid` AS `securitystyleid`,
  `instance`.`name` AS `name`,
  `instance`.`objtype` AS `objtype`,
  `instance`.`ownerpartname` AS `ownerpartname`,
  `instance`.`ownerrowid` AS `ownerrowid`,
  `instance`.`status` AS `status`,
  `instance`.`archived` AS `archived`,
  `objstatus`.`name` AS `statusname`,
  `objstatus`.`isarchive` AS `isarchive`
FROM (`instance`
  LEFT JOIN `objstatus`
    ON ((`instance`.`status` = `objstatus`.`objstatusid`)));

--
-- Создать представление "v_sender"
--
CREATE
DEFINER = 'root'@'localhost'
VIEW v_sender
AS
SELECT
  `b2g`(`arlog_data`.`arlog_dataid`) AS `id`,
  `arc_md`.`name` AS `modulename`,
  `armd_chaneltype`.`name` AS `chtype`,
  `arlog_data`.`trynumber` AS `trynumber`,
  `arlog_data`.`finished` AS `finished`,
  `arlog_data`.`sendresult` AS `sendresult`,
  `arlog_data`.`sendtime` AS `sendtime`,
  `arc_chanel`.`ch_param` AS `ch_param`,
  `arsms_data`.`smstime` AS `smstime`,
  `arsms_data`.`pop_ok` AS `pop_ok`,
  `arsms_data`.`roof_open` AS `roof_open`,
  `arsms_data`.`power_ok` AS `power_ok`,
  `arsms_data`.`temperature` AS `temperature`,
  `arc_info`.`family` AS `family`,
  `arc_info`.`name` AS `name`,
  `b2g`(`arc_md`.`arc_mdid`) AS `mdid`
FROM (((((`arlog_data`
  JOIN `arsms_data`
    ON ((`arlog_data`.`sms` = `arsms_data`.`arsms_dataid`)))
  JOIN `arc_chanel`
    ON ((`arlog_data`.`chanel` = `arc_chanel`.`arc_chanelid`)))
  JOIN `armd_chaneltype`
    ON ((`arc_chanel`.`ch_taype` = `armd_chaneltype`.`armd_chaneltypeid`)))
  JOIN `arc_md`
    ON ((`arc_chanel`.`parentstructrowid` = `arc_md`.`arc_mdid`)))
  JOIN `arc_info`
    ON ((`arc_md`.`instanceid` = `arc_info`.`instanceid`)));

-- 
-- Вывод данных для таблицы armodule_state
--
-- Таблица areal_cli.armodule_state не содержит данных

-- 
-- Вывод данных для таблицы instance
--
INSERT INTO instance VALUES
(x'05579817DD4C91498B464AA503560B22', NULL, NULL, NULL, NULL, 'bpu', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'065BBC35D9EE7142B2377D2414971C04', NULL, NULL, NULL, NULL, 'STDNumerator', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'0752D68639D4B84FA618E16AA4B9C7B3', NULL, NULL, NULL, NULL, 'MTZMetaModel', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'08AED59498D66B49BDCCCCAA48DB7BBA', NULL, NULL, NULL, NULL, 'bpdi', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'091E4CC6089495458C938FB65DCE1597', NULL, NULL, NULL, NULL, 'MTZSystem', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'0BD43AD9C2CDFF48B64203D74D2AD26C', NULL, NULL, NULL, NULL, 'arlog', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'12726B41EFB973419A38E215B75A2103', NULL, NULL, NULL, NULL, '???????? ??????? ??????????', 'arlog', NULL, NULL, NULL, NULL, 0),
(x'13C4DB7814202741BC0AA73A4C48E1A0', NULL, NULL, NULL, NULL, 'armd', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'1A8497E7032A8247BDC21D7D8C36FDAC', NULL, NULL, NULL, NULL, 'bpc', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'1C5B5B4E8781E711B25D001E673EF734', NULL, NULL, NULL, '2017-08-15', '??????? ???????', 'arc', NULL, NULL, NULL, NULL, 0),
(x'23CCFE44B4350749A2B21FA0A5790A92', NULL, NULL, NULL, NULL, '??????????', 'armd', NULL, NULL, NULL, NULL, 0),
(x'24DFB005D858294BAD90CA9C426A99D8', NULL, NULL, NULL, NULL, 'bpc', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'2D158DEE75A1ED4696EC2E0B19F13088', NULL, NULL, NULL, NULL, 'MTZwp', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'362658B28DECA247B57ACD83E40E8916', NULL, NULL, NULL, NULL, '?????????', 'bpdi', NULL, NULL, NULL, NULL, 0),
(x'41E45A120C09504F858CF04C03DFB877', NULL, NULL, NULL, NULL, 'MTZRprt', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', NULL, NULL, NULL, NULL, 'arlog', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'436B5C57FE19E14696E964BA2C6492F8', NULL, NULL, NULL, NULL, 'MTZMetaModel', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'4A812E80DC98274DAFD6EC9AA85CFCE2', NULL, NULL, NULL, NULL, '???? ??????????', 'bpdr', NULL, NULL, NULL, NULL, 0),
(x'4CC8BA018F65E7119A61001E673EF734', NULL, NULL, NULL, '2017-07-10', '', 'arc', NULL, NULL, NULL, NULL, 0),
(x'53D2EF80ACAE7F41873F49757B64EEED', NULL, NULL, NULL, NULL, 'bpdr', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', NULL, NULL, NULL, NULL, '', 'arsms', NULL, NULL, NULL, NULL, 0),
(x'5C81F22DEB16F84CB3976E91B25F9A21', NULL, NULL, NULL, NULL, 'bprcfg', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'5FE24E9785AAAE4696C8E7CEAC10D881', NULL, NULL, NULL, NULL, 'armd', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'66E6A1469C4AE711B02EA81E843486A3', NULL, NULL, NULL, NULL, '', 'arc', NULL, NULL, NULL, NULL, 0),
(x'702C3CFDBCB3954A98311DB91ED6FF59', NULL, NULL, NULL, '2018-04-06', 'arc', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'78221231FD6EE71190D3001E673EF734', NULL, NULL, NULL, '2017-07-22', '??????? ????????', 'arc', NULL, NULL, NULL, NULL, 0),
(x'8A9B23A5D46DDC4580E8254EDB431172', NULL, NULL, NULL, NULL, 'MTZSystem', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'8B381BA09D21284C9DAD1EB0AD335175', NULL, NULL, NULL, NULL, 'MTZFltr', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', NULL, NULL, NULL, NULL, 'MTZwp', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', NULL, NULL, NULL, NULL, 'MTZRprt', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'A3669D7F7C239C4AAFB4787081A17353', NULL, NULL, NULL, NULL, 'MTZFltr', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', NULL, x'5D54142B9939E8119E29A81E843486A3', NULL, NULL, '????:??????????', 'MTZMetaModel', NULL, NULL, NULL, NULL, 0),
(x'AAD6C6D88C65E7119A61001E673EF734', NULL, NULL, NULL, '2017-07-10', '', 'arc', NULL, NULL, NULL, NULL, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', NULL, NULL, NULL, NULL, 'arsms', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'B0E71995CEDA9542B766E5A25153D048', NULL, NULL, NULL, NULL, 'MTZExt', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'B833633DB7CA85449C53855D214B0239', NULL, NULL, NULL, NULL, 'MTZJrnl', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'B998BE609F9FEC4CA38F73BE5801C9DD', NULL, NULL, NULL, NULL, '????????? ???? 06.06.2017 21:00:50', 'bprcfg', NULL, NULL, NULL, NULL, 0),
(x'BA0AB8087870E71190D3001E673EF734', NULL, NULL, NULL, '2017-07-24', '???????? ????????', 'arc', NULL, NULL, NULL, NULL, 0),
(x'BE482BF13E897043936D9ADCEC0792F0', NULL, NULL, NULL, NULL, 'bpdr', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'C841F119F05EA04D8A7AC95C55006D3B', NULL, NULL, NULL, NULL, 'MTZExt', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'C86383A90863714595D733F2B7B19A7A', NULL, NULL, NULL, NULL, 'bpdi', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'DDCB4E7D8365E7119A61001E673EF734', NULL, NULL, NULL, '2017-07-10', '', 'arc', NULL, NULL, NULL, NULL, 0),
(x'DF472CDCDDA6BC4C9C464D9323257B3C', NULL, NULL, NULL, NULL, 'STDNumerator', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'E8EB8EACF3AA184FAD8201F785FFC308', NULL, NULL, NULL, NULL, 'bprcfg', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', NULL, NULL, NULL, NULL, 'bpu', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', NULL, NULL, NULL, '2018-04-06', 'arc', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', NULL, x'EFBFBD2A236DEFBFBD4AEFBFBD11EFBF', NULL, NULL, '???????????? ? ??????', 'mtzusers', NULL, NULL, NULL, NULL, 0),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', NULL, NULL, NULL, NULL, '????????? ??????????', 'mtzsystem', NULL, NULL, NULL, NULL, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', NULL, NULL, NULL, NULL, 'MTZJrnl', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'F4247773D34AE711B02EA81E843486A3', NULL, NULL, NULL, NULL, '', 'arc', NULL, NULL, NULL, NULL, 1),
(x'F57213126A6DE71190D3001E673EF734', NULL, NULL, NULL, '2017-07-20', '???????? ????????????', 'arc', NULL, NULL, NULL, NULL, 0),
(x'FAE3E6A670A7644783805809EFAD7EB1', NULL, NULL, NULL, NULL, 'arsms', 'mtzfltr', NULL, NULL, NULL, NULL, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', NULL, NULL, NULL, NULL, 'MTZUsers', 'mtzjrnl', NULL, NULL, NULL, NULL, 0),
(x'FE38AEB336CF27419A6290CA5C342314', NULL, NULL, NULL, NULL, 'MTZUsers', 'mtzfltr', NULL, NULL, NULL, NULL, 0);

-- 
-- Вывод данных для таблицы origname
--
-- Таблица areal_cli.origname не содержит данных

-- 
-- Вывод данных для таблицы queryresult
--
-- Таблица areal_cli.queryresult не содержит данных

-- 
-- Вывод данных для таблицы rpresult
--
-- Таблица areal_cli.rpresult не содержит данных

-- 
-- Вывод данных для таблицы sysoptions
--
INSERT INTO sysoptions VALUES
(x'00579DA3D7D33C4C9C91B74AC0AD24F2', 'bpc_info', 'bpc', 'struct_type'),
(x'02007197E13CB442A763E302840AD183', 'armd_chaneltype', 'autoarmd_chaneltype', 'defview'),
(x'02A150EAE5E74E49B10CFCCD5AD6EEE0', 'a282dd68-9188-4c40-b0f2-be69caee3dea', 'checkverbright', 'methodname'),
(x'03C588695A7EA74081E42AA55196D29A', 'iu_u_def', 'bpu', 'struct_type'),
(x'0422D045D5D8104E823B0F4C0F0874B6', 'arsms_data', 'arsms', 'struct_type'),
(x'05B4C27099F61E4196598DA365C7518B', 'armd_info', 'autoarmd_info', 'defview'),
(x'06BD6145D662F64287D642045DD04BC3', 'partmenu', 'part', 'parent'),
(x'085EB4D2044D8542970A123D3AC6C9D6', 'the_session', 'autothe_session', 'defview'),
(x'09566E7F3C1CE948B9181B73CBE83DDD', 'rptfields', 'rptstruct', 'parent'),
(x'097F716EC89BEE46A6566581A8B3B353', 'epfilterlink', 'entrypoints', 'parent'),
(x'0A5B9702FB0E1043802C76AA5F1BA5E9', 'iu_rcfg_docmode', 'autoiu_rcfg_docmode', 'defview'),
(x'0D8713B8147DC144A4237021580B7927', 'users', 'mtzusers', 'struct_type'),
(x'0DEBCD0CF66387448C03B97FF9524D93', 'armd_info', 'autoarmd_info', 'defview'),
(x'0E1FB1BF53A9FB489C1860ACAA0A43EA', 'methodrestriction', 'objectmode', 'parent'),
(x'0F1B650332A79A41B85887CF253946ED', 'fieldtypemap', 'fieldtype', 'parent'),
(x'0F4BBAC3D39DB34080A3B2E3846C70D5', 'field', 'mtzmetamodel', 'struct_type'),
(x'0F6F4393F574FD4BA0B5726FA9C38785', 'constraintfield', 'autoconstraintfield', 'defview'),
(x'0FB6C1933117F340B88E9F138E0DDDE8', 'methodrestriction', 'mtzmetamodel', 'struct_type'),
(x'113A5B3AB6021C4285E58F1827D6F3FF', 'arc_md', 'autoarc_md', 'defview'),
(x'12D19FBB30890D41B32025E921E93A66', 'arsms_data', 'autoarsms_data', 'defview'),
(x'139F4BFBF286B448ACB04A07DD045342', 'reports', 'mtzrprt', 'struct_type'),
(x'13AC0B1B9EFFB245A7EEE09C695157B2', 'partview_lnk', 'mtzmetamodel', 'struct_type'),
(x'13EADF71B32B2044A4B184684314DEAA', 'arsms_data', 'autoarsms_data', 'defview'),
(x'14C4006D257CF74C9208C2D0D601CF23', 'armjrnladd', 'armjournal', 'parent'),
(x'1508638A7F28BB4E85742398F019013D', 'genreference', 'autogenreference', 'defview'),
(x'15C33E07870AB74F9842CE60EE5B34F5', 'objectmode', 'autoobjectmode', 'defview'),
(x'15C878F238FE4742A36DE537850813F5', '6c6e6daa-5cd2-48c3-a2aa-a24539b45a49', 'getservertime', 'methodname'),
(x'1633025768B57E43946D4CE073A6D8FF', '477b8d25-4ff7-491a-a0b0-d3437ec16957', 'makenewfolderec', 'methodname'),
(x'179721D32A36E141A183B848A7EEF8A1', 'bpc_info', 'bpc', 'struct_type'),
(x'17C3B023DA143D47B1AD99EFC84CD196', 'genmanualcode', 'generator_target', 'parent'),
(x'181E059BD8B91C4480A9CF19BEE9218C', '0c9985af-27ee-4ad5-a564-635e0bffc9d5', 'testnumber', 'methodname'),
(x'19B3A61A4720064CA7947AC792B7F351', 'extenderinterface', 'autoextenderinterface', 'defview'),
(x'19BB2C2C63FED54FB063C72A374CB948', 'groupuser', 'groups', 'parent'),
(x'1A180C293A0416419B947FAEA3027B63', 'arc_chanel', 'arc', 'struct_type'),
(x'1A5723D0E7A8204BA5906C358A4BCFB1', 'objstatus', 'objecttype', 'parent'),
(x'1DB3C47796967C4EA290FA97281B93F4', 'arc_chanel', 'autoarc_chanel', 'defview'),
(x'1E74B0243384434CAF17AE1DA675FE8D', '2b0cee5c-7ffa-490d-9f5a-b5e8692551dd', 'erasenumber', 'methodname'),
(x'21C6FAA6FC9D0B41BC66780731536286', 'arc_md', 'arc', 'struct_type'),
(x'22FA8B11436D124EB596F7117EC035E5', 'armjrnlrun', 'mtzwp', 'struct_type'),
(x'23284BFEF320F34ABEB9B1290971C284', 'armjrnlrep', 'mtzwp', 'struct_type'),
(x'238ED7DFD9865541861A47547EEE75C1', 'validator', 'autovalidator', 'defview'),
(x'23AD21B4A723764B8B53505DF49EA5D0', 'iu_rcfg_def', 'autoiu_rcfg_def', 'defview'),
(x'256D966FAB808047A6B6095E37C6EC82', 'arc_info', 'autoarc_info', 'defview'),
(x'257633D619BC9646B801AC3C33C07535', '5b376af5-339b-4365-ba80-785e28bcf4da', 'vbupdatesymmetricobjref', 'methodname'),
(x'25EBD95488C6F04388FDA57A943377FE', 'd49a40b9-6174-4946-a81d-b7fe105c3546', 'adminunlock', 'methodname'),
(x'26AA0B2354A33C4AB07DFBF422AD4F16', 'epfilterlink', 'mtzwp', 'struct_type'),
(x'2A0AE6489C0D074890A57093E6975C04', 'sharedmethod', 'autosharedmethod', 'defview'),
(x'2B06466637F1BB4BB68743CD0AA269BC', 'groupuser', 'mtzusers', 'struct_type'),
(x'2BA798623B243E43985120430408CC60', 'fieldrestriction', 'autofieldrestriction', 'defview'),
(x'2EF7540737FE2D4DBFEF7A760821751E', 'fieldvalidator', 'mtzmetamodel', 'struct_type'),
(x'2F11DDF55F6AA8499409B789D1D2D9AF', 'armd_type', 'armd', 'struct_type'),
(x'2F2C88FFDF13544BA96D1CCB78F75A04', 'validator', 'mtzmetamodel', 'struct_type'),
(x'2FFEAB4FA8729F46AC56D48B4A1522CC', 'objstatus', 'mtzmetamodel', 'struct_type'),
(x'32AD4CBDD472A640B8BFE163E2DBD948', 'part', 'mtzmetamodel', 'struct_type'),
(x'32B2A1B994BB2C46A984DFD0C9C19FAE', 'parameters', 'script', 'parent'),
(x'334EA554D331E146BC4E9AE9B60B6661', 'fieldmenu', 'autofieldmenu', 'defview'),
(x'33D27D2C532E2640894825A8435EA21A', 'arc_info', 'autoarc_info', 'defview'),
(x'3534FCB265190C42A4282929308447AC', 'the_session', 'mtzsystem', 'struct_type'),
(x'358BBE8660942B49B2453FBA4209215B', 'arc_chanel', 'arc', 'struct_type'),
(x'36A5A0BD49619647836BA8B3D4FF8051', 'iu_crole', 'autoiu_crole', 'defview'),
(x'37DE473A43B07742A9B36D7AE228B78D', 'generator_target', 'autogenerator_target', 'defview'),
(x'380563AA953AA64C95B67C9BE1C5DE10', 'armd_type', 'armd', 'struct_type'),
(x'38430166CD365C48A8B901C2220E51E4', 'dinamicfilterscript', 'autodinamicfilterscript', 'defview'),
(x'385AF6CFCAFC0B4FA66033D4A6388405', 'script', 'sharedmethod', 'parent'),
(x'388E77924C055F46BED7237654942DA9', 'jcolumnsource', 'autojcolumnsource', 'defview'),
(x'38C1002D9A71DE47B7A069689E240659', 'genreference', 'generator_target', 'parent'),
(x'3A4D3E6CAFA3E841B590F0E1A4D9E055', 'arsms_data', 'arsms', 'struct_type'),
(x'3B599BA4C211CF4A87CF9C1141CA4FD8', 'typemenu', 'mtzmetamodel', 'struct_type'),
(x'3B79775AD62130489311EEDB61476B95', '73be205e-f7ea-4a5a-a41f-85e25ca6511e', 'sessioncheckpoint', 'methodname'),
(x'3C1E6991EDFCE344AD051269E5A04BA4', 'armd_info', 'armd', 'struct_type'),
(x'3DAC1CF087E04C46B3670802CC2717B4', 'armd_info', 'armd', 'struct_type'),
(x'3E3F17B6D282544EB7ACD1D07D7AE9B6', 'dinamicfilterscript', 'mtzmetamodel', 'struct_type'),
(x'3E8181F546CD2F4C9827CB5E6B76C7CA', 'objecttype', 'mtzmetamodel', 'struct_type'),
(x'3EBE89C8CDA9B540A2A323B917FEAEBD', 'arc_chanel', 'arc', 'struct_type'),
(x'3F07B05D8D4A8C479DF24ACF5F17D89A', 'fieldtype', 'mtzmetamodel', 'struct_type'),
(x'40BA3B2CCA47774384ECD17262021159', 'mtzapp', 'mtzmetamodel', 'struct_type'),
(x'40F1B0F2020AF34A8F28F58618C97903', 'filters', 'mtzfltr', 'struct_type'),
(x'413C09280E695547B538654B7806899D', 'typemenu', 'objecttype', 'parent'),
(x'42FC8BA60BBA9F4EB43CC22F6A887134', 'sharedmethod', 'mtzmetamodel', 'struct_type'),
(x'43108A8DF079BD42820644CAD39C4B6E', 'users', 'autousers', 'defview'),
(x'433091C2D1212A47AD5002D5FC03AFE7', 'sysrefcache', 'mtzsystem', 'struct_type'),
(x'4448DF63FDE5874F9476FE864FCE7848', 'genmanualcode', 'autogenmanualcode', 'defview'),
(x'4500C86FF940AA40A95EF6227C63D3EE', 'armjrnladd', 'autoarmjrnladd', 'defview'),
(x'45B53A21744CAF469A55B2E227517CFB', 'a2eee876-54d8-4aed-b124-775f5da2d911', 'vbaddobjbyref', 'methodname'),
(x'46971980066C7446847C6828F00652EC', 'armjrnlrep', 'autoarmjrnlrep', 'defview'),
(x'47F806C965657840BB5D5E2679C670EE', 'validator', 'part', 'parent'),
(x'4863BB6C35F8574298CB829B1493E6D3', '49a49ae8-db4b-4329-80fb-801a24c9d7af', 'clearnumerators', 'methodname'),
(x'487508E1E414AC4E9F404A0E7082A2F6', 'arc_chanel', 'arc_md', 'parent'),
(x'4A9ED17FC4D45147BA6ED2C6DEBAEB83', 'armd_chaneltype', 'armd', 'struct_type'),
(x'4AAC6E337EB3404EBA4C79E3FB7ED53E', '069956dc-3305-45ef-9331-91ce323b5942', 'wfdefname', 'methodname'),
(x'4B382BC2333A0D4B98756E073676323F', 'fieldtypemap', 'mtzmetamodel', 'struct_type'),
(x'4B4FDE782F992B4796CA2CC506B8736D', 'fieldmenu', 'field', 'parent'),
(x'4CE153DEB4DEA04E858901AC3FC4016F', 'instancevalidator', 'objecttype', 'parent'),
(x'4DC24BE367E57647A46CF597BA854A43', 'objecttype', 'autoobjecttype', 'defview'),
(x'4DD55629A170C444ABE644C6CD407337', 'arsms_data', 'autoarsms_data', 'defview'),
(x'4E8DD4466F2B9648B7C5364F99ED481A', 'iu_crole', 'bpdr', 'struct_type'),
(x'50573F205D0E2E4EB74B30C866A75E1F', 'constraintfield', 'uniqueconstraint', 'parent'),
(x'5174E52984F39046A183A694FCAC75FE', 'arc_chanel', 'arc_md', 'parent'),
(x'526F224F74431941812FF38D5B38521B', 'armd_info', 'autoarmd_info', 'defview'),
(x'52B34D19C647B446960542EA3807EE16', 'armjournal', 'mtzwp', 'struct_type'),
(x'534286A73FA06F418605E1FAFD21DF50', 'num_head', 'stdnumerator', 'struct_type'),
(x'53555C4C818B874BB63A0AE9D1D93761', 'iu_rcfg_mod', 'bprcfg', 'struct_type'),
(x'537FC34F123D754D9E202EFAD88BD726', 'sysrefcache', 'autosysrefcache', 'defview'),
(x'54AB3C1C31DD544CBA2F6FF5E3439A42', 'fieldrestriction', 'objectmode', 'parent'),
(x'54DF0CF8D5747841BD8116ED99EB01CC', 'partparammap', 'mtzmetamodel', 'struct_type'),
(x'5522AF64564BD44C9CDA8871A7AEAA47', 'armd_chaneltype', 'autoarmd_chaneltype', 'defview'),
(x'5638E6E233AB5740B34B7B9BB6857D2A', 'arsms_data', 'arsms', 'struct_type'),
(x'565B8F2FF477C3459C5C991677BF009C', 'fieldtypemap', 'autofieldtypemap', 'defview'),
(x'56CE939F98588047B760FDCA4ED2DAB4', '0454d6f0-8624-4887-94b0-64fbc74775e6', 'sessionverify', 'methodname'),
(x'588BAE34B75BE344A6C5735223814596', 'fieldexpression', 'mtzmetamodel', 'struct_type'),
(x'59C7CCFA6A7C3A4AA5B2C9CE835E1C0A', 'objectmode', 'mtzmetamodel', 'struct_type'),
(x'5A6637CB5574134C9EB16CA15DB04D22', 'rptformula', 'mtzrprt', 'struct_type'),
(x'5A875EA5716C074DAFB93580EC643380', 'fieldparammap', 'autofieldparammap', 'defview'),
(x'5BB074E9E439A34E973DB8DF7A4BF33A', 'arc_chanel', 'autoarc_chanel', 'defview'),
(x'5BBECF4FC5A3994786B5CFDD78580A9A', 'structrestriction', 'objectmode', 'parent'),
(x'5C46EA420197294DBF2FFE7C090911E1', 'armd_type', 'autoarmd_type', 'defview'),
(x'5D1894F0E6073344927CE8161D4C42C5', 'fieldmenu', 'mtzmetamodel', 'struct_type'),
(x'5D92C2849FB2794487789A32AB18CE55', 'partmenu', 'mtzmetamodel', 'struct_type'),
(x'5DCC5B28D1DA2A478AA6FAF06C684063', 'uniqueconstraint', 'part', 'parent'),
(x'5DDF5DED6834FD499A9F6BC231A24A42', 'fileterfield', 'autofileterfield', 'defview'),
(x'5E2CF03E518A434A9D0C8E75E00D2F79', '79ded4fd-045c-45f8-ac79-2e5a3d956d97', 'vbmigrateright', 'methodname'),
(x'5E571B0E5F2CE643A601EEA8AE0BDB84', 'syslog', 'autosyslog', 'defview'),
(x'5E742430B69C0A408645CA1A7AA188BC', 'partview_lnk', 'autopartview_lnk', 'defview'),
(x'5F6F139C07B5714E9DF0F461AD10106C', 'num_zones', 'autonum_zones', 'defview'),
(x'5FFD36F4768C7F4C9A9450536A58E3A4', 'structrestriction', 'mtzmetamodel', 'struct_type'),
(x'60A78D87BE09A740B2CBCB14224EDF20', 'localizeinfo', 'mtzmetamodel', 'struct_type'),
(x'6170384B263D4D4D873156311687D963', 'bpc_info', 'autobpc_info', 'defview'),
(x'61C8DD91B1DAD541AA7D832802CF0D4E', 'armd_chaneltype', 'armd', 'struct_type'),
(x'61F9FB37D1D61240B4584DC7C27EE021', 'fieldsrcdef', 'autofieldsrcdef', 'defview'),
(x'65124352FDECEF4A944861A1BFCC8785', 'filters', 'autofilters', 'defview'),
(x'6614FEC09C41A0499F8E427EDCA46E48', '31ec6cf7-8dbd-4efe-bf12-4d168f653d34', 'vbapplysecurity', 'methodname'),
(x'6632E13277984C449DFB993836F87F5C', '074e33b9-1ec9-4aa1-8300-e98c73d55fe2', 'login', 'methodname'),
(x'679554EB28E2F140B55C7F75E09EB2FA', 'arc_md', 'arc', 'struct_type'),
(x'687F6C898ADE3549834A44F35068D57C', 'armd_chaneltype', 'armd', 'struct_type'),
(x'690DAE55B46B564F86B43E6833B0379F', 'journalsrc', 'autojournalsrc', 'defview'),
(x'6BF2DC3C61E77245901C8FF16C0BA7FE', 'arc_md', 'autoarc_md', 'defview'),
(x'6C2F8B4FE51BAA4A9D615CD444BD2453', 'partmenu', 'autopartmenu', 'defview'),
(x'6DF2BC5936E9BE4399D243661ADEA40C', 'rptstruct', 'mtzrprt', 'struct_type'),
(x'6ED035E06AD0E34DB5FDE2BEBF878C0A', 'num_values', 'num_zones', 'parent'),
(x'6FABE0EAE4624544AA63826EFA5AE219', '5b8fb7b9-d8b1-4ca0-90af-55f83d1a6e5d', 'vbmakereport', 'methodname'),
(x'6FAF2BC038624D41B5275A7387772BDC', 'fieldvalidator', 'autofieldvalidator', 'defview'),
(x'71D2657F3A5EE84B92D2D26C56E35F94', 'localizeinfo', 'autolocalizeinfo', 'defview'),
(x'72DB4CEC5FFBD848B98DD28E9200633E', 'fieldexpression', 'autofieldexpression', 'defview'),
(x'73162D4E2AA729479688A21B075EAD28', 'uniqueconstraint', 'mtzmetamodel', 'struct_type'),
(x'741FA4F19FD8264486B2C126BA8C6E50', 'iu_rcfg_docmode', 'bprcfg', 'struct_type'),
(x'7431544532AFC8488BD93D59BA0D04CD', 'parentpackage', 'mtzapp', 'parent'),
(x'75A728162FA1C24BA777D4688FA7D6BC', 'fldextenders', 'autofldextenders', 'defview'),
(x'76F496EF4E600B4BB5F9AEC7EBFAF5D5', 'methodrestriction', 'automethodrestriction', 'defview'),
(x'790800FF51364C4C8F43CA89812BB074', 'fieldsrcdef', 'mtzmetamodel', 'struct_type'),
(x'79B0850A4493BD4F9E0CB39B73D3491C', 'rptfields', 'mtzrprt', 'struct_type'),
(x'7A6AB1E1648EF64D9376B17CFA9F1FD9', 'groupuser', 'autogroupuser', 'defview'),
(x'7B10F3196F7E2A43B13FE56B5282A943', 'd8914fb4-6b5d-491a-a72f-985617727583', 'wffuncname', 'methodname'),
(x'7C64E7A70B4B5249ACFE251F6D2B1604', 'gencontrols', 'mtzmetamodel', 'struct_type'),
(x'7CF8E9ECF5B4DD44B5E3159089332D53', 'genmanualcode', 'mtzmetamodel', 'struct_type'),
(x'7EB443A3E5D71742A73C2FFA67BB0879', 'fldextenders', 'field', 'parent'),
(x'7FFBE191A22487459FF3A6F306B104FE', 'fieldvalidator', 'field', 'parent'),
(x'7FFDB0CC1DFB6A4C99C71A8565ABF123', 'parameters', 'mtzmetamodel', 'struct_type'),
(x'804FAD43D8DCB0448EEC43921F30DF00', 'arc_info', 'arc', 'struct_type'),
(x'8274E78BC2D5714BB32E5279E431EA06', 'mtzextrel', 'automtzextrel', 'defview'),
(x'862F13016901E949AC2483AA43601D71', 'iu_rcfg_mod', 'autoiu_rcfg_mod', 'defview'),
(x'87A64FB8E41AC64C81571D259FE9D894', 'armtypes', 'mtzwp', 'struct_type'),
(x'8C36A3985617B8459E3B26535557518B', '7929d795-41c5-4a5c-bff2-a4e677a62143', 'sessiontouch', 'methodname'),
(x'8C771A52021D1A418AF58971DEF082A7', 'script', 'mtzmetamodel', 'struct_type'),
(x'8CAC0F03F97F6347A1758FC227FD5250', 'bpc_info', 'autobpc_info', 'defview'),
(x'8CE2FF0EA49AE2499B81E92478311592', 'arc_md', 'arc', 'struct_type'),
(x'8EB863787874BB4EA9E6EEB795560199', 'bpc_info', 'autobpc_info', 'defview'),
(x'8F243727883E0246990DA345B3145BD0', 'enumitem', 'autoenumitem', 'defview'),
(x'8FA76BC9A94B91469F38E650FC2B60B6', 'arc_md', 'arc', 'struct_type'),
(x'902D68A7819F2A429D2C4FFFA57DAF55', 'arc_chanel', 'arc', 'struct_type'),
(x'9058FEE345350C49B1FC418BD2B92EA9', '2bb30818-90ed-4627-8abb-85b3fba46750', 'vbnewpayout', 'methodname'),
(x'90F151471D6BE2488B7FB50ADC81DBD3', 'fieldtype', 'autofieldtype', 'defview'),
(x'91C3CE4807574A4AA5673DB25E66A9FE', 'typemenu', 'autotypemenu', 'defview'),
(x'91F9FF18B3EB804B851453146D46F1D6', 'objectmode', 'objecttype', 'parent'),
(x'92F52654D2E8C1448CEFF6FECC621FDA', 'genpackage', 'autogenpackage', 'defview'),
(x'93175FF9A210094C8384FFE09844B2E5', 'fieldexpression', 'field', 'parent'),
(x'932D6444695C024ABC7BCADFC586D4B8', 'field', 'part', 'parent'),
(x'93E0FD7D50F41547967AF2BA9E9AEDC3', '42a1a436-8aa2-4f1f-999b-6680dff514de', 'vbsavehistory', 'methodname'),
(x'9552E2B603572A4399372A336864B817', 'arlog_data', 'autoarlog_data', 'defview'),
(x'9772C1467907D946986C28F0EFEB1102', 'iu_int_modules', 'autoiu_int_modules', 'defview'),
(x'9B1FEC4BFC89D84188CBA953FA4E706C', 'workplace', 'mtzwp', 'struct_type'),
(x'9D2A6DFFC72B0944A24986A512CFBA7A', 'num_zones', 'stdnumerator', 'struct_type'),
(x'A147DF0A9F6F864E983F20046C09A8DE', 'entrypoints', 'mtzwp', 'struct_type'),
(x'A2AA27AFE5528840835D6AF1BC6EC098', 'armd_type', 'autoarmd_type', 'defview'),
(x'A3E162FB4F7B3C4A9ACACC1F92BDF540', 'mtzapp', 'automtzapp', 'defview'),
(x'A5D7B63FD71B104496B0DD92E38033C9', 'arlog_data', 'autoarlog_data', 'defview'),
(x'A663B2FBE743D545A48476D05F2B8C99', 'jcolumnsource', 'mtzjrnl', 'struct_type'),
(x'A6CB0F9E4E98364E89F0F48C4AEF7B64', 'armd_info', 'armd', 'struct_type'),
(x'A6ED58713D98444C810F215384920D5E', 'partview', 'part', 'parent'),
(x'A7CAC0F7F6E61A4AA5D020DEC6D849E0', 'partparammap', 'autopartparammap', 'defview'),
(x'A8CE89A8C491254A8AE44CEDFAC28500', 'armd_type', 'armd', 'struct_type'),
(x'A9A09B381898824B90309E83A336826A', 'armd_type', 'autoarmd_type', 'defview'),
(x'A9C0ACC8BFEB3C4D90BD8B2AFF66AF1E', 'extenderinterface', 'part', 'parent'),
(x'AA237BD106FFD64CBF68523814DF248C', 'epfilterlink', 'autoepfilterlink', 'defview'),
(x'ACAF0B622558384B869757374889B729', 'parentpackage', 'mtzmetamodel', 'struct_type'),
(x'AD60899A6136124EB070CF86416D1273', '8d492a94-7078-4b7d-9847-aefc27b4855d', 'rowtoinstance', 'methodname'),
(x'ADB3DE3BE805C14D8BED8AEAECBF3360', 'part', 'objecttype', 'parent'),
(x'ADE68DFF241084489EF3D0C7A32EAD1B', 'gencontrols', 'generator_target', 'parent'),
(x'AEBA04BEAAFD0141ACFB203C213487A6', 'fieldparammap', 'fieldmenu', 'parent'),
(x'B018CA1DD078F14AA8CCE53846AFBA59', 'constraintfield', 'mtzmetamodel', 'struct_type'),
(x'B36CB6BFA0209A43A5DAD78C5E6D123D', 'gencontrols', 'autogencontrols', 'defview'),
(x'B36CE090518C0146B7372B7CCBAFE161', '73e7cf77-e6ba-42b4-a03b-4f67eedef4f1', 'adminunlockall', 'methodname'),
(x'B4845580FC71F346BF4346BCBA8F0398', 'a87a3a65-ecd1-414f-8fdf-91e53aced1ba', 'rowstoinstances', 'methodname'),
(x'B50720F7D0925A48BAD857C87F22C1E2', 'arlog_data', 'arlog', 'struct_type'),
(x'B6203B9834641042A6CD7F295015D8E6', 'fileterfield', 'mtzfltr', 'struct_type'),
(x'B73DD1A93BF1784C8790D263D5A970ED', 'genpackage', 'mtzmetamodel', 'struct_type'),
(x'B772B003F7FBDF46852CD098101C638C', 'arc_chanel', 'autoarc_chanel', 'defview'),
(x'B8A5116D03816D4EB9ABE3D47CB362C5', 'partview_lnk', 'partview', 'parent'),
(x'BA9A671AC425434D977DD3B66AFBFABA', 'filterfieldgroup', 'autofilterfieldgroup', 'defview'),
(x'BB5CBB0364B4AD45A37148CD9DC8DB8C', 'partparammap', 'partmenu', 'parent'),
(x'BBAD9908DBC66D49913C33D31FDF1D1C', '61393545-abf7-46f7-82f3-9b7e610dd9c0', 'vbupdateobjname', 'methodname'),
(x'BBF7DCF3D8B91E4293995E77BFF2678A', 'armjrnlrep', 'armjournal', 'parent'),
(x'BC67B7A0DEC2EC4F8100040FCED983E3', 'iu_int_modules', 'bpdi', 'struct_type'),
(x'BC6A31C7F0870A44BE14BC5800E9CA83', '897d3b55-6599-42db-aa1c-54bab3d2f597', 'getnewnumber', 'methodname'),
(x'BC8B79F7F30B0F4DAA7EA89DADC64370', '8d3b38b4-c4f9-45ac-8ece-bf3be39d8100', 'logout', 'methodname'),
(x'BD89BEF6150D5C45AD1B708F0F942F39', 'parentpackage', 'autoparentpackage', 'defview'),
(x'BD8CED0EB69A164D9D46B1E0F7F82E0A', 'armd_type', 'autoarmd_type', 'defview'),
(x'BE57E51C9F07F345B39615CFEADF301B', 'filterfieldgroup', 'mtzfltr', 'struct_type'),
(x'C1D6BBC1F0DE48488C311646E349FCAD', 'armd_type', 'armd', 'struct_type'),
(x'C3379653D1D26548B1AD794A7E151B2C', '9181af0d-f0d0-4539-8cdb-67cdb500c41e', 'getfreenumber', 'methodname'),
(x'C37EC05E3D7EE642A488EE26AF3FEABA', 'partview', 'autopartview', 'defview'),
(x'C404F6D7002F5440BF291CDD83BB20EC', 'bpc_info', 'bpc', 'struct_type'),
(x'C5CB32B8EA39384B9E8161AFA71196EC', 'mtzextrel', 'mtzext', 'struct_type'),
(x'C6774D544C48554E9DDD7462CBCADDC2', 'num_head', 'autonum_head', 'defview'),
(x'C71D319D91074E4CB13F6C26ECC9A605', 'mtzext_def', 'automtzext_def', 'defview'),
(x'C7B9392F1035824689DA749056AA2688', 'armjrnladd', 'mtzwp', 'struct_type'),
(x'C7D284BD44101F43BBEA7318E9FEFFB3', 'arc_info', 'arc', 'struct_type'),
(x'C818A1D1A18BF2459BC7C4C3C4BF1A1E', 'fileterfield', 'filterfieldgroup', 'parent'),
(x'C905C79D30362141AA63E5C2ABBA055B', 'fieldparammap', 'mtzmetamodel', 'struct_type'),
(x'C912025A5C2DD943A89B38733FD2767D', 'groups', 'autogroups', 'defview'),
(x'C939B21107DA38449BFD7B47CC9E6D66', 'nextstate', 'objstatus', 'parent'),
(x'C9C5CEE79251B34F80C7374EB7EC81FE', '4fb59d1a-0123-47d3-9f4f-e12085c5d074', 'vbupdateitemname', 'methodname'),
(x'C9F6FFBBCA36D045BB25F062B731AD32', 'arc_md', 'autoarc_md', 'defview'),
(x'CA56633665DCB94EB620D692F8F4C380', 'bpc_info', 'bpc', 'struct_type'),
(x'CBCFE64B9ACE7F498CE77CA155584D08', 'journalsrc', 'mtzjrnl', 'struct_type'),
(x'CD7A4ED2F9DCB045BDA9157B5638CB56', 'fieldsrcdef', 'field', 'parent'),
(x'CD8BA41FBC3F604791569FBB1678BABF', 'parameters', 'autoparameters', 'defview'),
(x'CD9366449CA1D84D8EEC618D08363868', 'mtzext_def', 'mtzext', 'struct_type'),
(x'CE5DA7A7AF6E6444BB5F65E9D604C8A4', 'structrestriction', 'autostructrestriction', 'defview'),
(x'CEBC0D183027FF42B05849271D147789', 'jcolumnsource', 'journalcolumn', 'parent'),
(x'CF6F3BA174554F4B9E28C4EB6F066373', '79e6bdeb-91d5-4b2e-81f7-3e091fb65e3a', 'vbcheckdescrs', 'methodname'),
(x'D0BCB8AB6930714FA51450DE44D53BFE', 'arc_chanel', 'arc_md', 'parent'),
(x'D139E930C6F2224F911D3BF182749BA2', 'viewcolumn', 'autoviewcolumn', 'defview'),
(x'D271D5B4C77CE74B81782A8B747A329E', 'rptformula', 'autorptformula', 'defview'),
(x'D281150A2D8C9B4E81E5CF432E28F4AA', 'workplace', 'autoworkplace', 'defview'),
(x'D2F648D85929CE438F647155AE119A05', 'syslog', 'mtzsystem', 'struct_type'),
(x'D36FF8743C29EC4F906756EFA66B3B54', 'rptfields', 'autorptfields', 'defview'),
(x'D47EFAB32CBA1A478051C76512B8CED6', 'armd_chaneltype', 'autoarmd_chaneltype', 'defview'),
(x'D5592900F891354983B08BB1BF76EFA2', 'arc_info', 'arc', 'struct_type'),
(x'D6CAB957D8457F4E91CD78B7CD944054', 'arc_chanel', 'arc_md', 'parent'),
(x'DA45F2DEAE30764AB58D32C8D11B60D7', 'genreference', 'mtzmetamodel', 'struct_type'),
(x'DB2CD67B34F72C4FA2A672A30CDE9D47', 'armjournal', 'autoarmjournal', 'defview'),
(x'DB3466D89FAB8947876D9FBCEF1E274E', 'fldextenders', 'mtzmetamodel', 'struct_type'),
(x'DC8EFAF9900A694D9CD67659A7D62C75', 'armd_info', 'autoarmd_info', 'defview'),
(x'DCC0C3124D295F409E199C4F59729084', 'fieldrestriction', 'mtzmetamodel', 'struct_type'),
(x'DCCF915A1DE7BA4CAA272E7187285E89', 'arc_info', 'arc', 'struct_type'),
(x'DD60307C85072943801E0FE211DA8744', 'instancevalidator', 'autoinstancevalidator', 'defview'),
(x'DD9DBC64EBA6B1448196F4756B5E64AD', 'enumitem', 'fieldtype', 'parent'),
(x'DE371E872E341D4F99009485950E2B09', 'iu_rcfg_def', 'bprcfg', 'struct_type'),
(x'DF0F906BE6AF5344AF47541F49808C02', 'aa4085e6-745b-4a37-8ec4-65d99a653966', 'vbremovesymmetricobjref', 'methodname'),
(x'DF14BA326404774D88AC5C6055A35C99', 'journal', 'autojournal', 'defview'),
(x'DF716D5F04066349AA0FCCFE3FAF47DB', 'arsms_data', 'arsms', 'struct_type'),
(x'DFA157ABB691494F9312FF7C70EB8297', 'journal', 'mtzjrnl', 'struct_type'),
(x'E116B969A871CE41B738BC180FF61EE9', 'arc_info', 'autoarc_info', 'defview'),
(x'E160C315B062B0408AF92888713FB658', 'nextstate', 'mtzmetamodel', 'struct_type'),
(x'E365C90BF99AD64DAE610419D2816CD8', 'enumitem', 'mtzmetamodel', 'struct_type'),
(x'E45C847C846B6446AB301472BD5FF0F7', 'journalcolumn', 'mtzjrnl', 'struct_type'),
(x'E491838B7C833D4A9547838D115D13AA', 'armjrnlrun', 'armjournal', 'parent'),
(x'E62634C61C12AB41B77167AD3BC6D535', 'extenderinterface', 'mtzmetamodel', 'struct_type'),
(x'E679C8690358664FB9B0AE4347C53CE1', 'generator_target', 'genpackage', 'parent'),
(x'E6C5D10AA5B69443AEB6A6F014C52907', '6fb1873a-45a9-420f-90ce-cde34b5aee19', 'autoclosesession', 'methodname'),
(x'E808605648A03441AD245772144517D4', 'arc_md', 'autoarc_md', 'defview'),
(x'E89CCCD3BBFE244F9687C578ADA0FC4D', '94e8f6db-106a-44dc-9483-86c801798ff0', 'vbopenref', 'methodname'),
(x'E91A6D5AD7DF2340BBB33BF183ADD956', 'iu_u_def', 'autoiu_u_def', 'defview'),
(x'EC30A510FD7BD948A5B70E93AC164D45', 'dinamicfilterscript', 'field', 'parent'),
(x'ECE906E298242B4AA3B5790306E5F04F', 'armd_info', 'armd', 'struct_type'),
(x'ED3A9A2B2C3B484C8C15954FD5996112', 'viewcolumn', 'mtzmetamodel', 'struct_type'),
(x'EDD99730B829C94CB41462312D302A8E', 'viewcolumn', 'partview', 'parent'),
(x'EE23728345B8CE4A8B5F91171AC54113', 'groups', 'mtzusers', 'struct_type'),
(x'EEC1ACC48A08BC4BB31FDAEAB956FD45', 'objstatus', 'autoobjstatus', 'defview'),
(x'EFE0225B22B5FE4696BF6B2996EFE98A', 'arlog_data', 'arlog', 'struct_type'),
(x'EFED56F49CD6EB408902C49B68855731', 'instancevalidator', 'mtzmetamodel', 'struct_type'),
(x'F002A387C4B77F4AAC6612C0F0BD7CC1', 'bpc_info', 'autobpc_info', 'defview'),
(x'F053EFBCEA9BFE4982C5AEC66ABFE6A2', 'script', 'autoscript', 'defview'),
(x'F0D1E61BBF73C740ADC6D0103E148238', '68bd7f75-ad54-4837-a6a7-a8dde3b2992a', 'mtzlogin', 'methodname'),
(x'F10D2D6EDAC2484F897118E0B69E7DC8', 'armd_chaneltype', 'armd', 'struct_type'),
(x'F1AE1BD8A2B64144A861A9F66293163D', 'generator_target', 'mtzmetamodel', 'struct_type'),
(x'F2434AC4A7E5AA47BF8F30C74F0D284C', 'reports', 'autoreports', 'defview'),
(x'F3E05AE7A1ABFC45936AAB4C66D7B9B0', 'num_values', 'stdnumerator', 'struct_type'),
(x'F40818FA2E6FB540BFD0BAD6A1520C84', 'armjrnlrun', 'autoarmjrnlrun', 'defview'),
(x'F521307088B51440AFE32B60A82F837B', 'arlog_data', 'arlog', 'struct_type'),
(x'F5A157BDC6A80E418E41BAE7CB35D007', 'journalcolumn', 'autojournalcolumn', 'defview'),
(x'F6FA8B4FDEEDB24CA6B13430549380C0', 'arlog_data', 'autoarlog_data', 'defview'),
(x'F8A8C044C375E44290366300A9AB3AF9', 'arc_chanel', 'autoarc_chanel', 'defview'),
(x'F96531A75C9C83408C985DB7CCC3096E', 'num_values', 'autonum_values', 'defview'),
(x'F96A1F7EE2EEE0419D887E973C0F447A', 'armtypes', 'autoarmtypes', 'defview'),
(x'FB0AB31D1B20AC46B98965639140295E', 'nextstate', 'autonextstate', 'defview'),
(x'FB335F23A1C5374C9FB13EBAD719909A', 'arsms_data', 'autoarsms_data', 'defview'),
(x'FD456FB287AF2D4CA4955E67B6AF0539', 'uniqueconstraint', 'autouniqueconstraint', 'defview'),
(x'FE7038407BC6804BA41B9FA2D90EC81A', 'field', 'autofield', 'defview'),
(x'FEC6509A4815E74D9ED8DDC673B6C22C', 'partview', 'mtzmetamodel', 'struct_type'),
(x'FF63ED38053C43478F3A710B1B761DF4', 'armd_chaneltype', 'autoarmd_chaneltype', 'defview'),
(x'FFAC8CC0427AD94FB3B7C601C9E42A5E', 'arc_info', 'autoarc_info', 'defview');

-- 
-- Вывод данных для таблицы typelist
--
INSERT INTO typelist VALUES
(x'1BBF39F45965E711997C001E673EF734', 'mtzext', NULL, 'mtzext_register', 'mtzext_delete', 'mtzext_hcl', 'mtzext_propagate'),
(x'3B6F2AF45965E711997C001E673EF734', 'mtzusers', NULL, 'mtzusers_register', 'mtzusers_delete', 'mtzusers_hcl', 'mtzusers_propagate'),
(x'48D0FDF35965E711997C001E673EF734', 'mtzjrnl', NULL, 'mtzjrnl_register', 'mtzjrnl_delete', 'mtzjrnl_hcl', 'mtzjrnl_propagate'),
(x'548754F45965E711997C001E673EF734', 'bpdi', NULL, 'bpdi_register', 'bpdi_delete', 'bpdi_hcl', 'bpdi_propagate'),
(x'70E75AF45965E711997C001E673EF734', 'armd', NULL, 'armd_register', 'armd_delete', 'armd_hcl', 'armd_propagate'),
(x'721E40F45965E711997C001E673EF734', 'bprcfg', NULL, 'bprcfg_register', 'bprcfg_delete', 'bprcfg_hcl', 'bprcfg_propagate'),
(x'75E04CF45965E711997C001E673EF734', 'mtzfltr', NULL, 'mtzfltr_register', 'mtzfltr_delete', 'mtzfltr_hcl', 'mtzfltr_propagate'),
(x'8B4961F45965E711997C001E673EF734', 'mtzrprt', NULL, 'mtzrprt_register', 'mtzrprt_delete', 'mtzrprt_hcl', 'mtzrprt_propagate'),
(x'9186EEF35965E711997C001E673EF734', 'bpu', NULL, 'bpu_register', 'bpu_delete', 'bpu_hcl', 'bpu_propagate'),
(x'9BC414F45965E711997C001E673EF734', 'mtzwp', NULL, 'mtzwp_register', 'mtzwp_delete', 'mtzwp_hcl', 'mtzwp_propagate'),
(x'AF5B33F45965E711997C001E673EF734', 'stdnumerator', NULL, 'stdnumerator_register', 'stdnumerator_delete', 'stdnumerator_hcl', 'stdnumerator_propagate'),
(x'BB6C9D82686DE71190D3001E673EF734', 'arlog', NULL, 'arlog_register', 'arlog_delete', 'arlog_hcl', 'arlog_propagate'),
(x'C7A967F45965E711997C001E673EF734', 'arsms', NULL, 'arsms_register', 'arsms_delete', 'arsms_hcl', 'arsms_propagate'),
(x'C88221F45965E711997C001E673EF734', 'bpdr', NULL, 'bpdr_register', 'bpdr_delete', 'bpdr_hcl', 'bpdr_propagate'),
(x'D81B0DF45965E711997C001E673EF734', 'mtzsystem', NULL, 'mtzsystem_register', 'mtzsystem_delete', 'mtzsystem_hcl', 'mtzsystem_propagate'),
(x'E17E46F45965E711997C001E673EF734', 'arc', NULL, 'arc_register', 'arc_delete', 'arc_hcl', 'arc_propagate'),
(x'F8BD06F45965E711997C001E673EF734', 'bpc', NULL, 'bpc_register', 'bpc_delete', 'bpc_hcl', 'bpc_propagate'),
(x'FA71F7F35965E711997C001E673EF734', 'mtzmetamodel', NULL, 'mtzmetamodel_register', 'mtzmetamodel_delete', 'mtzmetamodel_hcl', 'mtzmetamodel_propagate');

-- 
-- Вывод данных для таблицы arc_info
--
INSERT INTO arc_info VALUES
(x'AAD6C6D88C65E7119A61001E673EF734', x'2F92D3D88C65E7119A61001E673EF734', '2017-07-10 19:43:28', '2017-07-21 09:56:35', NULL, NULL, NULL, '?????????', '????', '11111111', NULL, NULL, 'dron128', 0),
(x'F57213126A6DE71190D3001E673EF734', x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 19:39:59', '2017-07-20 19:39:59', NULL, NULL, NULL, '????????????', '????????', NULL, '-', 'test@areal.xyz', 'test', 0),
(x'F4247773D34AE711B02EA81E843486A3', x'5B798473D34AE711B02EA81E843486A3', '2017-07-10 18:20:30', '2017-07-21 09:56:35', NULL, NULL, NULL, '??????', '????', 'shmoogle', NULL, '1@3.ru', 'petrosport', 0),
(x'66E6A1469C4AE711B02EA81E843486A3', x'85F0AC469C4AE711B02EA81E843486A3', '2018-04-02 15:22:47', '2018-04-02 15:22:47', NULL, NULL, NULL, '???????', '??????', 'areal-test', '22233344', 'bami@nm.ru', 'supervisor', -1),
(x'BA0AB8087870E71190D3001E673EF734', x'A22FAC087870E71190D3001E673EF734', '2017-12-11 11:44:47', '2017-12-11 11:44:47', NULL, NULL, NULL, '???? 2', '?????? ????????', NULL, '????????', 'mvsh@inbox.ru', 'test2', 0),
(x'1C5B5B4E8781E711B25D001E673EF734', x'AA414F4E8781E711B25D001E673EF734', '2017-08-15 11:00:54', '2017-08-15 11:00:54', NULL, NULL, NULL, '????????????', '???????', '????? ???', '+79670482843', 'semenov@topol-eco.ru', '???', 0),
(x'4CC8BA018F65E7119A61001E673EF734', x'BCF9CA018F65E7119A61001E673EF734', '2017-07-10 19:44:30', '2017-07-21 09:56:35', NULL, NULL, NULL, 'qwerty', 'asdfg', NULL, NULL, NULL, 'zxcvbnm', 0),
(x'78221231FD6EE71190D3001E673EF734', x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 12:53:50', '2017-07-25 12:53:50', NULL, NULL, NULL, '????????', '???????', '??? ??? "?-????"', '+79219225921', 'sadmitry@yandex.ru', 'sadmitry', 0),
(x'DDCB4E7D8365E7119A61001E673EF734', x'C9065B7D8365E7119A61001E673EF734', '2017-07-10 19:37:52', '2017-07-21 09:57:00', NULL, NULL, NULL, '????????', '??????', '?-????', '2223334455', 'test@a-real.ru', 'areal', -1);

-- 
-- Вывод данных для таблицы arc_md
--
INSERT INTO arc_md VALUES
(x'DDCB4E7D8365E7119A61001E673EF734', x'02ACEEB99265E7119A61001E673EF734', '2017-07-20 19:38:03', '2017-08-30 13:54:08', NULL, NULL, NULL, x'2CEFA2AA9265E7119A61001E673EF734', 'test', NULL, NULL, NULL, '123456789012', 0, -1, 0),
(x'DDCB4E7D8365E7119A61001E673EF734', x'0976F7309081E711B25D001E673EF734', '2017-08-15 11:03:15', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '???????? ?????? 2', NULL, NULL, NULL, '123456789013', 0, 0, 0),
(x'1C5B5B4E8781E711B25D001E673EF734', x'310D0B068B81E711B25D001E673EF734', '2017-08-23 08:53:01', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '?????', NULL, '?????, ???????? 104 ', '??????? ?.?.', '123456789013', 0, 0, 0),
(x'78221231FD6EE71190D3001E673EF734', x'32BC5B1D1F71E71190D3001E673EF734', '2017-07-25 12:53:30', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '????????', '???????? ?????', '?????????? ??????????, 55', '???????? ???????', '123456789013', 0, 0, 0),
(x'1C5B5B4E8781E711B25D001E673EF734', x'336358D78781E711B25D001E673EF734', '2017-08-15 11:00:47', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '?????', NULL, '?????, ???????? 104 ', '???????????? ?.?.', '123456789013', 0, 0, 0),
(x'66E6A1469C4AE711B02EA81E843486A3', x'3B5F2D71D9CEE71197E7A81E843486A3', '2017-11-21 19:31:32', '2017-11-21 19:31:32', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '123456789013', NULL, NULL, NULL, '123456789013', 0, 0, 0),
(x'1C5B5B4E8781E711B25D001E673EF734', x'9277B3B8C987E711B25D001E673EF734', '2017-08-23 09:10:11', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '?????', '??????', '?????', '??????? ?.', '123456789013', 0, 0, 0),
(x'F4247773D34AE711B02EA81E843486A3', x'B39609B4D54AE711B02EA81E843486A3', '2017-06-06 21:54:45', '2017-08-30 15:11:50', NULL, NULL, NULL, x'6F52CA5BA04AE711B02EA81E843486A3', 'hgjdhjdgh', NULL, NULL, NULL, NULL, 0, 0, 0),
(x'66E6A1469C4AE711B02EA81E843486A3', x'B5379859AF4AE711B02EA81E843486A3', '2017-08-30 13:54:08', '2017-08-30 13:54:08', NULL, NULL, NULL, x'2CEFA2AA9265E7119A61001E673EF734', '???????????? ?? ...', '???????????', NULL, NULL, '123456789012', 0, -1, 0),
(x'F57213126A6DE71190D3001E673EF734', x'ED48ED216F6DE71190D3001E673EF734', '2017-07-20 20:17:24', '2017-08-30 15:11:50', NULL, NULL, NULL, x'96552E3C6F6DE71190D3001E673EF734', '?????? 2', NULL, NULL, NULL, '123456789013', 0, 0, 0),
(x'F57213126A6DE71190D3001E673EF734', x'FAD941216A6DE71190D3001E673EF734', '2017-07-20 19:40:25', '2017-08-30 13:54:08', NULL, NULL, NULL, x'2CEFA2AA9265E7119A61001E673EF734', '?????? 1', NULL, NULL, NULL, '123456789012', 0, -1, 0);

-- 
-- Вывод данных для таблицы arlog_data
--
INSERT INTO arlog_data VALUES
(x'12726B41EFB973419A38E215B75A2103', x'0037FF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:01', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-22 14:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'00BDB1562078E711B25D001E673EF734', '2017-08-03 10:49:54', '2017-08-03 10:50:01', NULL, NULL, NULL, x'72AAB1562078E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 10:50:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'00C2BC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:01', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 11:05:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'01090CE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'015006EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:01', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 10:58:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'01F046888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'C8DF46888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'023706EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'02431E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:03', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'026544888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'245044888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'0280C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'02F30C816377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:03', NULL, NULL, NULL, x'4CE30C816377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:19:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'03014A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'BCF049888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'035FB8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:09', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'037BC5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'03CB46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:16', NULL, NULL, NULL, x'53C146888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:16', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'04144A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'4D0A4A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'043877A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'046848888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'CF5A48888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'04704A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'BD5F4A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'04C85FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:02', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-28 11:01:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'04E0CA806377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:01', NULL, NULL, NULL, x'5CCDCA806377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:19:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'050D02E68E70E71190D3001E673EF734', '2017-07-24 19:41:10', '2017-07-24 19:41:10', NULL, NULL, NULL, x'710002E68E70E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'05214B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'50174B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'052B1E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:03', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0598C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:01', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-23 08:57:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'05EEBAC78F70E71190D3001E673EF734', '2017-07-24 19:47:29', '2017-07-24 20:22:02', NULL, NULL, NULL, x'AEDFBAC78F70E71190D3001E673EF734', x'0BDC457C8F70E71190D3001E673EF734', '2017-07-24 20:22:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'067973A03C78E711B25D001E673EF734', '2017-08-03 14:12:24', '2017-08-03 14:13:01', NULL, NULL, NULL, x'826673A03C78E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 14:13:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'069FB5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'06EF98515274E711B25D001E673EF734', '2017-07-29 14:37:36', '2017-07-29 14:38:01', NULL, NULL, NULL, x'69DC98515274E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-29 14:38:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'07194C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'DA0B4C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'074F2E01607BE711B25D001E673EF734', '2017-08-07 14:03:12', '2017-08-07 14:04:01', NULL, NULL, NULL, x'90312E01607BE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-07 14:04:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0770637F2E71E71190D3001E673EF734', '2017-07-25 14:43:37', '2017-07-25 14:44:01', NULL, NULL, NULL, x'D563637F2E71E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 14:44:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'08B6862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'09714B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:32', NULL, NULL, NULL, x'5A674B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:32', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'09724E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:01', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 10:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'09B022933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:01', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-22 14:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0A10F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:10', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0A3AFF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:02', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0A594D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'534F4D888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0B3CC73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0BCE0140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:01', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 10:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0D734D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:39', NULL, NULL, NULL, x'61694D888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:39', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0E4443888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:05', NULL, NULL, NULL, x'B33443888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0F41C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:01', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-29 07:13:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0F7842888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'916842888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0F8D1BC55A74E711B25D001E673EF734', '2017-07-29 15:38:06', '2017-07-29 15:39:02', NULL, NULL, NULL, x'867A1BC55A74E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-29 15:39:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0FAA44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'50A044888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'0FB74A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'D8AC4A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'101144888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'950144888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1032C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'10B131AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:46:01', NULL, NULL, NULL, x'A68631AC8D81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 10:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'11B00140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:02', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 10:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'125142888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'984142888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'126967ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:10', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1288E6BF4078E711B25D001E673EF734', '2017-08-03 14:41:55', '2017-08-03 14:42:01', NULL, NULL, NULL, x'2975E6BF4078E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 14:42:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'12BAFC876377E711B25D001E673EF734', '2017-08-02 12:18:22', '2017-08-02 12:19:02', NULL, NULL, NULL, x'D8ADFC876377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:19:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1303BDA0AF72E71190D3001E673EF734', '2017-07-27 12:40:29', '2017-07-27 12:41:02', NULL, NULL, NULL, x'3BEFBCA0AF72E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-27 12:41:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'13364C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'C8254C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1372767ED275E711B25D001E673EF734', '2017-07-31 12:27:38', '2017-07-31 12:28:02', NULL, NULL, NULL, x'975E767ED275E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 12:28:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'13B498786377E711B25D001E673EF734', '2017-08-02 12:17:56', '2017-08-02 12:18:02', NULL, NULL, NULL, x'4EA098786377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:18:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'13B52A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:02', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'13F642888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:05', NULL, NULL, NULL, x'B2E642888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'13F847888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'E9EA47888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'1474C5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:01', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-28 21:34:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'14AC42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'359742888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'14C247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:19', NULL, NULL, NULL, x'5EB847888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:19', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'153169863371E71190D3001E673EF734', '2017-07-25 15:19:37', '2017-07-25 15:20:02', NULL, NULL, NULL, x'3B0F69863371E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-25 15:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'153206EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'15834A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:29', NULL, NULL, NULL, x'6F794A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:29', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'15E0A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:03', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1640FF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:02', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'16F44A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'CCE04A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'17B44C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'62AA4C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'17EC9D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:01', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 13:00:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'182F31ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:05', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'184C9AADFC71E71190D3001E673EF734', '2017-07-26 15:19:31', '2017-07-26 15:20:02', NULL, NULL, NULL, x'19399AADFC71E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-26 15:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'18AB4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'D39A4B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'18E44B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'9ACE4B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'19AC31AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:46:01', NULL, NULL, NULL, x'A68631AC8D81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 10:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1A5AB8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:11', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1A5FEE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:03', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-22 14:53:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1C65FF665974E711B25D001E673EF734', '2017-07-29 15:28:18', '2017-07-29 15:29:02', NULL, NULL, NULL, x'114DFF665974E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-29 15:29:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1C6913A36377E711B25D001E673EF734', '2017-08-02 12:19:07', '2017-08-02 12:20:01', NULL, NULL, NULL, x'034B13A36377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:20:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1CDBA8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1D1448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'3C0448888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'1D2D44D18A70E71190D3001E673EF734', '2017-07-24 19:11:57', '2017-07-24 19:12:01', NULL, NULL, NULL, x'141744D18A70E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 19:12:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1D8D4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:39', NULL, NULL, NULL, x'6F834D888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:39', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1DB94199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:01', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-23 09:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1DF343888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'60D943888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1DFCBCA0AF72E71190D3001E673EF734', '2017-07-27 12:40:29', '2017-07-27 12:41:02', NULL, NULL, NULL, x'3BEFBCA0AF72E71190D3001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-27 12:41:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1E0947888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'E3F846888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1E6E79D73371E71190D3001E673EF734', '2017-07-25 15:21:53', '2017-07-25 15:22:01', NULL, NULL, NULL, x'665A79D73371E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-25 15:22:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1EDB0BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:01', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 11:05:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1F1D43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'AC0D43888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1F2C45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:10', NULL, NULL, NULL, x'ED1B45888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'1F6047888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'E45247888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'1F9C45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'6A8645888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'20E749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'69DD49888870E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'213CEA8B8F70E71190D3001E673EF734', '2017-07-24 19:45:48', '2017-07-24 19:46:01', NULL, NULL, NULL, x'121EEA8B8F70E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 19:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'21FF4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'DDF14B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'223558283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:01', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-22 16:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'226B48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:22', NULL, NULL, NULL, x'CF5A48888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:22', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'22B373A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:10', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'22B873A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:06', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'239A4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'5E904C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'244506EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'245046888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F34246888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'24B9862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:01', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 11:11:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'24EF18273078E711B25D001E673EF734', '2017-08-03 12:43:06', '2017-08-03 12:44:01', NULL, NULL, NULL, x'E5DB18273078E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 12:44:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'24F444888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:10', NULL, NULL, NULL, x'63EA44888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'256946888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'FF5B46888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'25CF42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'24BE42888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'266AFAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:08', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'268F47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:19', NULL, NULL, NULL, x'698547888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:19', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'26C644888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'09B944888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'271858283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:02', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-22 16:10:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2723F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:03', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'277643888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:06', NULL, NULL, NULL, x'A85B43888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'27D44A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'13C74A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'28B622933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:01', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-22 14:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'28CBCD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:02', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'29352EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:01', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-23 08:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2969EE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:02', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'297F2CA96377E711B25D001E673EF734', '2017-08-02 12:19:18', '2017-08-02 12:20:01', NULL, NULL, NULL, x'D86A2CA96377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:20:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'29EB0A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'29EE3030EB75E711B25D001E673EF734', '2017-07-31 15:24:24', '2017-07-31 15:25:02', NULL, NULL, NULL, x'2B6C2E30EB75E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 15:25:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2A5D8E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:01', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:07:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2A77B8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:05', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2A99BB007377E711B25D001E673EF734', '2017-08-02 14:09:07', '2017-08-02 14:10:01', NULL, NULL, NULL, x'8A86BB007377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2AB322933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:02', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-22 14:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2ABA43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:06', NULL, NULL, NULL, x'AEAA43888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2B364A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'782C4A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2B3BFAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:10', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2B7F4D05EB75E711B25D001E673EF734', '2017-07-31 15:23:12', '2017-07-31 15:24:01', NULL, NULL, NULL, x'A06C4D05EB75E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 15:24:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2BC0F65A3078E711B25D001E673EF734', '2017-08-03 12:44:33', '2017-08-03 12:45:02', NULL, NULL, NULL, x'E3B2F65A3078E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 12:45:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2BEB4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:37', NULL, NULL, NULL, x'6EE14C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:37', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2C030CE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2C1631ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:07', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2C1C47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'741247888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2C2CC73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2C927E1B7377E711B25D001E673EF734', '2017-08-02 14:09:52', '2017-08-02 14:10:01', NULL, NULL, NULL, x'C57B7E1B7377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2CE79D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2CF8BAC78F70E71190D3001E673EF734', '2017-07-24 19:47:29', '2017-07-24 20:22:02', NULL, NULL, NULL, x'AEDFBAC78F70E71190D3001E673EF734', x'DB51504C8D70E71190D3001E673EF734', '2017-07-24 20:22:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2D1C4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:34', NULL, NULL, NULL, x'DA0B4C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:34', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2D4445888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'B63445888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'2D76767ED275E711B25D001E673EF734', '2017-07-31 12:27:38', '2017-07-31 12:28:02', NULL, NULL, NULL, x'975E767ED275E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 12:28:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2DB545888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F6A745888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'2DDF7E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:02', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2EAE73A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:11', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2EBEA8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2F438A834478E711B25D001E673EF734', '2017-08-03 15:08:51', '2017-08-03 15:09:01', NULL, NULL, NULL, x'C6248A834478E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 15:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'2F8149888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'797349888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'2F9D2A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:03', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'30CA48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:23', NULL, NULL, NULL, x'79C048888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:23', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'30CE45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'FEC045888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'313265B87677E711B25D001E673EF734', '2017-08-02 14:35:44', '2017-08-02 14:36:01', NULL, NULL, NULL, x'F01E65B87677E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 14:36:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'315CCCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:01', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'316749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'175A49888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'31AC249C6377E711B25D001E673EF734', '2017-08-02 12:18:56', '2017-08-02 12:19:02', NULL, NULL, NULL, x'799E249C6377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:19:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'323746888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'1C2A46888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'3272B8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:09', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'32890A597177E711B25D001E673EF734', '2017-08-02 13:57:16', '2017-08-02 13:58:02', NULL, NULL, NULL, x'0F710A597177E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 13:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'32EE43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'60D943888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'33442E01607BE711B25D001E673EF734', '2017-08-07 14:03:12', '2017-08-07 14:04:01', NULL, NULL, NULL, x'90312E01607BE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-07 14:04:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3361894B687BE711B25D001E673EF734', '2017-08-07 15:02:33', '2017-08-07 15:03:01', NULL, NULL, NULL, x'A74E894B687BE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-07 15:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'33D75FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:02', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-28 11:01:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'33F5BAC78F70E71190D3001E673EF734', '2017-07-24 19:47:29', '2017-07-24 19:48:01', NULL, NULL, NULL, x'AEDFBAC78F70E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 19:48:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'33FB47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:20', NULL, NULL, NULL, x'E9EA47888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:20', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'343535FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:01', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:17:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'34E3CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:01', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'353344D18A70E71190D3001E673EF734', '2017-07-24 19:11:57', '2017-07-24 19:11:57', NULL, NULL, NULL, x'141744D18A70E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'354BC73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'35534A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'FF454A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'369144888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'6D7744888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'36B448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F6A648888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'36D50BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'370E0CE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'371748888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'3C0448888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'37BFC7531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'380760FDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:01', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-28 11:01:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'382F33BCAE72E71190D3001E673EF734', '2017-07-27 12:34:06', '2017-07-27 12:35:02', NULL, NULL, NULL, x'741C33BCAE72E71190D3001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-27 12:35:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'38D6A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:03', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3954EE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:03', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-22 14:53:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'39B02A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:03', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3AA244386477E711B25D001E673EF734', '2017-08-02 12:23:18', '2017-08-02 12:24:02', NULL, NULL, NULL, x'277D44386477E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:24:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3AD99D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3B3E1E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:02', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 11:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3BC673A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:09', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3BE448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'D6D948888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3C054D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'81FB4C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3C2258283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:01', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-22 16:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3C8E4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'21814B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'3CC68AA72E71E71190D3001E673EF734', '2017-07-25 14:44:45', '2017-07-25 14:45:01', NULL, NULL, NULL, x'C4B28AA72E71E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 14:45:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3CCB73A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:05', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3D854E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:01', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 10:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3DAF862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3DCF3D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3EAC47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'969E47888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'3FC944888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'09B944888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'3FF37E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'40074B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'86FD4A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'401F4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'85154D888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'402535FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:02', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:17:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'40261E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:02', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 11:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'405346888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:14', NULL, NULL, NULL, x'F34246888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:14', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'406C4E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'41024C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:34', NULL, NULL, NULL, x'DDF14B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:34', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'419F45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'6A8645888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'41FF45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'83F545888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'426C46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'FF5B46888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'42AD1CB06377E711B25D001E673EF734', '2017-08-02 12:19:29', '2017-08-02 12:20:02', NULL, NULL, NULL, x'DF9A1CB06377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'42D441888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'CAC441888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'42D74A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'13C74A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'431D58283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:02', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-22 16:10:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'433449888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'152749888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'43B098786377E711B25D001E673EF734', '2017-08-02 12:17:56', '2017-08-02 12:18:02', NULL, NULL, NULL, x'4EA098786377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:18:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'440149888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F6F348888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'447745888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:11', NULL, NULL, NULL, x'896D45888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'44A22A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:04', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:04:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'44E818273078E711B25D001E673EF734', '2017-08-03 12:43:06', '2017-08-03 12:44:01', NULL, NULL, NULL, x'E5DB18273078E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 12:44:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'457143888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'A85B43888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'46ABB619687BE711B25D001E673EF734', '2017-08-07 15:01:09', '2017-08-07 15:02:02', NULL, NULL, NULL, x'6B9BB619687BE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-07 15:02:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'473A46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:14', NULL, NULL, NULL, x'1C2A46888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:14', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'47A72A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:02', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'47D0CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:02', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'481E46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'830E46888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'48564A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'FF454A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4874C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'488C44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'6D7744888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'499748888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:22', NULL, NULL, NULL, x'918D48888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:22', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'49E74B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'9ACE4B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4A6347888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'E45247888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4A6AFF665974E711B25D001E673EF734', '2017-07-29 15:28:18', '2017-07-29 15:29:02', NULL, NULL, NULL, x'114DFF665974E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-29 15:29:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4B574B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'F44A4B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4B9C46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'2B8F46888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'4BB546888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'26A846888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'4BD44C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'4DC44C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'4C2942888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'CC1942888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4C4E43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:05', NULL, NULL, NULL, x'B33443888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4C9D43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:06', NULL, NULL, NULL, x'8A8343888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4CA231AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:46:01', NULL, NULL, NULL, x'A68631AC8D81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 10:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4CF4CA806377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:02', NULL, NULL, NULL, x'5CCDCA806377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:19:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4CF60C816377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:01', NULL, NULL, NULL, x'4CE30C816377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:19:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4D2B4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'85154D888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4D55B8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:07', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4D7D4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'95734C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4DD5CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:01', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4E8449888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:25', NULL, NULL, NULL, x'797349888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:25', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4EA664B9B476E711B25D001E673EF734', '2017-08-01 15:27:03', '2017-08-01 15:28:01', NULL, NULL, NULL, x'1D8E64B9B476E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-01 15:28:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4EADB5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:03', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-23 08:58:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4EE33030EB75E711B25D001E673EF734', '2017-07-31 15:24:24', '2017-07-31 15:25:02', NULL, NULL, NULL, x'2B6C2E30EB75E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 15:25:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4F201E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:04', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 11:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4F2B65B87677E711B25D001E673EF734', '2017-08-02 14:35:44', '2017-08-02 14:36:01', NULL, NULL, NULL, x'F01E65B87677E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 14:36:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4F3844888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'DE2844888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4F388A834478E711B25D001E673EF734', '2017-08-03 15:08:51', '2017-08-03 15:09:01', NULL, NULL, NULL, x'C6248A834478E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 15:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'4F6A49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:26', NULL, NULL, NULL, x'175A49888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:26', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'504348888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'8D3948888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'504745888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:11', NULL, NULL, NULL, x'B63445888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5161ADDB5174E711B25D001E673EF734', '2017-07-29 14:34:18', '2017-07-29 14:35:01', NULL, NULL, NULL, x'C346ADDB5174E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-29 14:35:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'519749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:25', NULL, NULL, NULL, x'888D49888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:25', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'51A922933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:02', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-22 14:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'51C7F65A3078E711B25D001E673EF734', '2017-08-03 12:44:33', '2017-08-03 12:45:02', NULL, NULL, NULL, x'E3B2F65A3078E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 12:45:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'528346888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'297646888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'52B845888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'F6A745888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'53A04A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'0D934A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'55914B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:32', NULL, NULL, NULL, x'21814B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:32', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'55D84B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'9ACE4B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5613F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:10', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'56C173A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:02', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'56D145888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'FEC045888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'574CE36C5A74E711B25D001E673EF734', '2017-07-29 15:35:38', '2017-07-29 15:36:02', NULL, NULL, NULL, x'4A34E36C5A74E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-29 15:36:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'57888C87EC75E711B25D001E673EF734', '2017-07-31 15:34:00', '2017-07-31 15:34:01', NULL, NULL, NULL, x'2C708C87EC75E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 15:34:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'580260FDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:02', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-28 11:01:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'581031ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:10', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'582D06EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'58934E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5899C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:01', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 12:59:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'58BD43D14C78E711B25D001E673EF734', '2017-08-03 16:08:18', '2017-08-03 16:09:01', NULL, NULL, NULL, x'21A543D14C78E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 16:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'591749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'8D0D49888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'59424D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'2E354D888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'597947888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'366C47888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'59B748888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:23', NULL, NULL, NULL, x'F6A648888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:23', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5A3547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'9F2B47888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5A8148888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'337448888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'5B634C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'9D594C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5C040B4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5C2E77A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5C8642888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'916842888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5C8B7E1B7377E711B25D001E673EF734', '2017-08-02 14:09:52', '2017-08-02 14:10:01', NULL, NULL, NULL, x'C57B7E1B7377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5CCD40DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5CDC5FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:02', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-28 11:01:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5CE645888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'8CDC45888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5D3749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'152749888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5D3E4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'39314B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'5D64EE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:01', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-22 14:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5D9843888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'8A8343888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'5E3844D18A70E71190D3001E673EF734', '2017-07-24 19:11:57', '2017-07-24 19:12:01', NULL, NULL, NULL, x'141744D18A70E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 19:12:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5EC83D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:04', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:04:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5F1045888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'430345888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'5FB8A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'5FC7C7531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'600242888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'84F241888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'604A49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:25', NULL, NULL, NULL, x'8D4049888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:25', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6051D0ABEA71E71190D3001E673EF734', '2017-07-26 13:10:37', '2017-07-26 13:11:02', NULL, NULL, NULL, x'6244D0ABEA71E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-26 13:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'606DB8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:04', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'61494C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'A93F4C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'61AD41888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:01', NULL, NULL, NULL, x'F99A41888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'61D43D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:02', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'622146888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'830E46888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'622706EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'622D48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'3D2048888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'62B43D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'63A973A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:06', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'63BE4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'A1B44B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'648E4E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'64DB47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:20', NULL, NULL, NULL, x'A4D147888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:20', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'65254D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'85154D888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'655B42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'984142888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'65DECD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:02', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'660449888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'F6F348888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'669F46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'2B8F46888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'66AF47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:19', NULL, NULL, NULL, x'969E47888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:19', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'66E5CA806377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:03', NULL, NULL, NULL, x'5CCDCA806377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:19:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'673F776BEB75E711B25D001E673EF734', '2017-07-31 15:26:03', '2017-07-31 15:27:02', NULL, NULL, NULL, x'F026776BEB75E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 15:27:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'674943888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'B33443888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'67D49D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6A0043888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:05', NULL, NULL, NULL, x'B2E642888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6A8646888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'297646888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6B39776BEB75E711B25D001E673EF734', '2017-07-31 15:26:03', '2017-07-31 15:27:01', NULL, NULL, NULL, x'F026776BEB75E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 15:27:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6C5E13A36377E711B25D001E673EF734', '2017-08-02 12:19:07', '2017-08-02 12:20:02', NULL, NULL, NULL, x'034B13A36377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6CB7BC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:01', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 11:05:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6CDB44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'BED144888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6E1345888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:10', NULL, NULL, NULL, x'430345888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6EE29D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'6F1B44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'950144888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'702B2EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:02', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-23 08:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'704FB8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:09', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'70FA49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'BCF049888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'712743888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:05', NULL, NULL, NULL, x'AC0D43888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7201665BEC75E711B25D001E673EF734', '2017-07-31 15:32:46', '2017-07-31 15:33:02', NULL, NULL, NULL, x'E7F0655BEC75E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 15:33:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'723442888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'CC1942888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'727D42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'916842888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'72B540DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'72B846888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:16', NULL, NULL, NULL, x'26A846888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:16', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'72E041888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'CAC441888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'737EC5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'73A34A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:29', NULL, NULL, NULL, x'0D934A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:29', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'73A353014B78E711B25D001E673EF734', '2017-08-03 15:55:19', '2017-08-03 15:56:01', NULL, NULL, NULL, x'7A9353014B78E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 15:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'73AF4199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'748E0A597177E711B25D001E673EF734', '2017-08-02 13:57:16', '2017-08-02 13:58:01', NULL, NULL, NULL, x'0F710A597177E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 13:58:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'74C840DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'74E15FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:01', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-28 11:01:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'756A7144C672E71190D3001E673EF734', '2017-07-27 15:22:33', '2017-07-27 15:23:02', NULL, NULL, NULL, x'E84F7144C672E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-27 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'75744B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'5A674B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'768267ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:08', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'76FE0BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'775642888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'984142888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'775C4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'534F4D888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'783D8D196B7BE711B25D001E673EF734', '2017-08-07 15:22:37', '2017-08-07 15:23:02', NULL, NULL, NULL, x'51258D196B7BE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-07 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'787C47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'366C47888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'79302EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:01', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-23 08:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'79C2B1562078E711B25D001E673EF734', '2017-08-03 10:49:54', '2017-08-03 10:50:01', NULL, NULL, NULL, x'72AAB1562078E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 10:50:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'79E946888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:16', NULL, NULL, NULL, x'C8DF46888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:16', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7A1644888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'950144888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'7A8448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:22', NULL, NULL, NULL, x'337448888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:22', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7B454D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'2E354D888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7B718E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:02', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:07:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7B72EE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:02', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7B764D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'61694D888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'7BAD44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'50A044888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'7C2243888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'AC0D43888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'7C290D813178E711B25D001E673EF734', '2017-08-03 12:52:47', '2017-08-03 12:53:01', NULL, NULL, NULL, x'8E190D813178E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 12:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7C3533BCAE72E71190D3001E673EF734', '2017-07-27 12:34:06', '2017-07-27 12:35:02', NULL, NULL, NULL, x'741C33BCAE72E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-27 12:35:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7C84EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7CB44199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7CCF9D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7CFD5FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:01', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-28 11:01:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7DBA4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'D8AC4A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'7DD31EB76377E711B25D001E673EF734', '2017-08-02 12:19:41', '2017-08-02 12:20:02', NULL, NULL, NULL, x'74BB1EB76377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7E4C251E2971E71190D3001E673EF734', '2017-07-25 14:05:07', '2017-07-25 14:06:01', NULL, NULL, NULL, x'CA3A251E2971E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 14:06:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7E7041A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:02', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7EE9DAE27277E711B25D001E673EF734', '2017-08-02 14:08:17', '2017-08-02 14:09:01', NULL, NULL, NULL, x'5BD1DAE27277E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 14:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7F414B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'39314B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7F694A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'BD5F4A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'7FFC7E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'801258283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:01', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-22 16:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'802B35FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:02', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:17:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'802E35FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:01', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:17:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'804C77A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'80BDFC876377E711B25D001E673EF734', '2017-08-02 12:18:22', '2017-08-02 12:19:03', NULL, NULL, NULL, x'D8ADFC876377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:19:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'80D942888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'24BE42888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'80FB42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'B2E642888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'81120B4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'812F4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'C8254C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'81864A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'6F794A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'822977A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'822F42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'CC1942888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'8266ADDB5174E711B25D001E673EF734', '2017-07-29 14:34:18', '2017-07-29 14:35:01', NULL, NULL, NULL, x'C346ADDB5174E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-29 14:35:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'82921BC55A74E711B25D001E673EF734', '2017-07-29 15:38:06', '2017-07-29 15:39:02', NULL, NULL, NULL, x'867A1BC55A74E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-29 15:39:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'829EBB007377E711B25D001E673EF734', '2017-08-02 14:09:07', '2017-08-02 14:10:01', NULL, NULL, NULL, x'8A86BB007377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8393C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'83A373A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:10', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'83A731AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:46:01', NULL, NULL, NULL, x'A68631AC8D81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 10:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'83B0B5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'83C049888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:26', NULL, NULL, NULL, x'A4B649888870E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-24 18:56:26', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'83F498515274E711B25D001E673EF734', '2017-07-29 14:37:36', '2017-07-29 14:38:01', NULL, NULL, NULL, x'69DC98515274E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-29 14:38:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8446C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'848341888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'266B41888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'84A44B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'D39A4B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'84BF40DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8557CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:04', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'85B922933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:02', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-22 14:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'865945888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:11', NULL, NULL, NULL, x'D34F45888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'865D41A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:10', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'86A522933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:01', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-22 14:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'86C547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'5EB847888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'87174A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'4D0A4A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'89262EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:02', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-23 08:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'893048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'3D2048888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'89A8C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:01', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 12:59:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8A7541A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:09', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8A8DE6BF4078E711B25D001E673EF734', '2017-08-03 14:41:55', '2017-08-03 14:42:01', NULL, NULL, NULL, x'2975E6BF4078E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 14:42:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8AB74C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'62AA4C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'8B87EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8BE541888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'CAC441888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8C9D4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'5E904C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'8EAA4199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8EED4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'CCE04A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8F0247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'E3F846888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8F77C5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'8FEF0C816377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:19:02', NULL, NULL, NULL, x'4CE30C816377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:19:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'903E2EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:02', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-23 08:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'904777A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'906ACCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:06', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'90C90140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:01', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 10:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'91AB64B9B476E711B25D001E673EF734', '2017-08-01 15:27:03', '2017-08-01 15:28:01', NULL, NULL, NULL, x'1D8E64B9B476E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-01 15:28:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'91BA40DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'927E73A03C78E711B25D001E673EF734', '2017-08-03 14:12:24', '2017-08-03 14:13:01', NULL, NULL, NULL, x'826673A03C78E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 14:13:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9351E36C5A74E711B25D001E673EF734', '2017-07-29 15:35:38', '2017-07-29 15:36:02', NULL, NULL, NULL, x'4A34E36C5A74E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-29 15:36:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9352CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:10', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'944244888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'DE2844888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'94904D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'6F834D888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'952A31ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:08', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'95394A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'782C4A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'956448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'CF5A48888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'95BF0140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:02', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 10:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'95F744888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'63EA44888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'969247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'698547888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'96D442888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'24BE42888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'970391F38E70E71190D3001E673EF734', '2017-07-24 19:41:33', '2017-07-24 19:42:02', NULL, NULL, NULL, x'DAE590F38E70E71190D3001E673EF734', x'DB51504C8D70E71190D3001E673EF734', '2017-07-24 19:42:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'971F47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'741247888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'9765CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:10', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'97774B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:32', NULL, NULL, NULL, x'5A674B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:32', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'97B044888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'50A044888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'982835FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:01', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:17:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'985F4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:39', NULL, NULL, NULL, x'534F4D888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:39', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9930FF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:03', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-22 14:53:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'999699F82971E71190D3001E673EF734', '2017-07-25 14:11:13', '2017-07-25 14:12:02', NULL, NULL, NULL, x'9A8399F82971E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 14:12:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'99C3C7531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9A244B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'50174B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'9A6DEE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:02', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9A7A41A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:02', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9AD74C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:37', NULL, NULL, NULL, x'4DC44C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:37', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9B154C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:34', NULL, NULL, NULL, x'DA0B4C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:34', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9B16F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:04', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9B4947888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'9F2B47888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9B5F44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'245044888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9C1802E68E70E71190D3001E673EF734', '2017-07-24 19:41:10', '2017-07-24 19:42:02', NULL, NULL, NULL, x'710002E68E70E71190D3001E673EF734', x'DB51504C8D70E71190D3001E673EF734', '2017-07-24 19:42:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9C2545888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:10', NULL, NULL, NULL, x'ED1B45888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9C280D2F3471E71190D3001E673EF734', '2017-07-25 15:24:19', '2017-07-25 15:24:19', NULL, NULL, NULL, x'2A180D2F3471E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'9C804E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9C8AEE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9D391E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:02', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 11:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9DAEB619687BE711B25D001E673EF734', '2017-08-07 15:01:09', '2017-08-07 15:02:01', NULL, NULL, NULL, x'6B9BB619687BE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-07 15:02:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9DC24199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9E1048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:20', NULL, NULL, NULL, x'3C0448888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:20', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9E2059133271E71190D3001E673EF734', '2017-07-25 15:09:14', '2017-07-25 15:10:02', NULL, NULL, NULL, x'0E0D59133271E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 15:10:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9E44776BEB75E711B25D001E673EF734', '2017-07-31 15:26:03', '2017-07-31 15:27:02', NULL, NULL, NULL, x'F026776BEB75E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 15:27:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9E894A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:29', NULL, NULL, NULL, x'6F794A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:29', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9F75EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'9FD2BC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:02', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A14DCCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:10', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A1794D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:39', NULL, NULL, NULL, x'61694D888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:39', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A1BA4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'62AA4C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A1C5CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:02', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A206B217FD71E71190D3001E673EF734', '2017-07-26 15:22:29', '2017-07-26 15:23:01', NULL, NULL, NULL, x'84F3B117FD71E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-26 15:23:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A24006EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A25FFF665974E711B25D001E673EF734', '2017-07-29 15:28:18', '2017-07-29 15:29:02', NULL, NULL, NULL, x'114DFF665974E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-29 15:29:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A2830A597177E711B25D001E673EF734', '2017-08-02 13:57:16', '2017-08-02 13:58:02', NULL, NULL, NULL, x'0F710A597177E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 13:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A2844D05EB75E711B25D001E673EF734', '2017-07-31 15:23:12', '2017-07-31 15:24:01', NULL, NULL, NULL, x'A06C4D05EB75E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 15:24:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A28841888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'266B41888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A2C847888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:19', NULL, NULL, NULL, x'5EB847888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:19', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A3EE4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'6EE14C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'A40D0B4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A44277A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A51CF0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:06', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A57B2CA96377E711B25D001E673EF734', '2017-08-02 12:19:18', '2017-08-02 12:20:02', NULL, NULL, NULL, x'D86A2CA96377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A57D67ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:08', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A6428D196B7BE711B25D001E673EF734', '2017-08-07 15:22:37', '2017-08-07 15:23:02', NULL, NULL, NULL, x'51258D196B7BE711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-07 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A66145888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'D34F45888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'A67867ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:09', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A6F447888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:20', NULL, NULL, NULL, x'E9EA47888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:20', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A765FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:03', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A766894B687BE711B25D001E673EF734', '2017-08-07 15:02:33', '2017-08-07 15:03:01', NULL, NULL, NULL, x'A74E894B687BE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-07 15:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A7A4DF85F971E71190D3001E673EF734', '2017-07-26 14:56:56', '2017-07-26 14:57:01', NULL, NULL, NULL, x'D790DF85F971E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-26 14:57:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A7CD48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'79C048888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'A83D44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'DE2844888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'A878EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A8894E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:01', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 10:54:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'A99067ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:05', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AAAC98786377E711B25D001E673EF734', '2017-08-02 12:17:56', '2017-08-02 12:18:02', NULL, NULL, NULL, x'4EA098786377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:18:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AAC7BC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:02', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ABBFB5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AC0246888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'83F545888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'AC084D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'81FB4C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'AC0C42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'84F241888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ACBD4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:29', NULL, NULL, NULL, x'D8AC4A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:29', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ACF998515274E711B25D001E673EF734', '2017-07-29 14:37:36', '2017-07-29 14:38:01', NULL, NULL, NULL, x'69DC98515274E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-29 14:38:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ACFE90F38E70E71190D3001E673EF734', '2017-07-24 19:41:33', '2017-07-24 19:42:02', NULL, NULL, NULL, x'DAE590F38E70E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 19:42:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ADBD4199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ADFB4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:34', NULL, NULL, NULL, x'DDF14B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:34', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AE3C4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'782C4A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AEA04C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'5E904C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AEC243D14C78E711B25D001E673EF734', '2017-08-03 16:08:18', '2017-08-03 16:09:01', NULL, NULL, NULL, x'21A543D14C78E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 16:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AF19F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:07', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AF934D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:39', NULL, NULL, NULL, x'6F834D888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:39', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AF9845888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'6A8645888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AFD1A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'AFF77E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:01', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:04:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B0212EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:02', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-23 08:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B0392EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:01', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-23 08:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B07A45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'896D45888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B09547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'698547888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B09C31AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:46:01', NULL, NULL, NULL, x'A68631AC8D81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 10:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B0FF0A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:02', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 11:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B10A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'86FD4A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B1240D2F3471E71190D3001E673EF734', '2017-07-25 15:24:19', '2017-07-25 15:25:01', NULL, NULL, NULL, x'2A180D2F3471E71190D3001E673EF734', x'0BDC457C8F70E71190D3001E673EF734', '2017-07-25 15:25:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B17D41888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:03', NULL, NULL, NULL, x'266B41888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B1A642888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'359742888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B2274B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'50174B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B2478D196B7BE711B25D001E673EF734', '2017-08-07 15:22:37', '2017-08-07 15:23:02', NULL, NULL, NULL, x'51258D196B7BE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-07 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B281EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B2971BC55A74E711B25D001E673EF734', '2017-07-29 15:38:06', '2017-07-29 15:39:01', NULL, NULL, NULL, x'867A1BC55A74E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-29 15:39:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B2CA9D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B32569863371E71190D3001E673EF734', '2017-07-25 15:19:37', '2017-07-25 15:20:02', NULL, NULL, NULL, x'3B0F69863371E71190D3001E673EF734', x'0BDC457C8F70E71190D3001E673EF734', '2017-07-25 15:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B35C47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'E45247888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B3E47E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B46D767ED275E711B25D001E673EF734', '2017-07-31 12:27:38', '2017-07-31 12:28:02', NULL, NULL, NULL, x'975E767ED275E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 12:28:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B47D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:26', NULL, NULL, NULL, x'797349888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:26', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B4FA0A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B5A2C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B5D346888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'53C146888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B5D70140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:01', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 10:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B5E748888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'D6D948888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B67B4E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B6972A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:02', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B7667144C672E71190D3001E673EF734', '2017-07-27 15:22:33', '2017-07-27 15:23:02', NULL, NULL, NULL, x'E84F7144C672E71190D3001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-27 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B77FC9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B781C5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:01', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-28 21:34:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B7AC22933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:54:02', NULL, NULL, NULL, x'389522933087E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-22 14:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B7BA0140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:02', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 10:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B7FFBCA0AF72E71190D3001E673EF734', '2017-07-27 12:40:29', '2017-07-27 12:41:02', NULL, NULL, NULL, x'3BEFBCA0AF72E71190D3001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-27 12:41:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B84748888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'8D3948888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B85BADDB5174E711B25D001E673EF734', '2017-07-29 14:34:18', '2017-07-29 14:35:01', NULL, NULL, NULL, x'C346ADDB5174E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-29 14:35:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B87BEE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B88FC2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B89A48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'918D48888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'B8A2B5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B946E36C5A74E711B25D001E673EF734', '2017-07-29 15:35:38', '2017-07-29 15:36:01', NULL, NULL, NULL, x'4A34E36C5A74E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-29 15:36:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B9A3BB007377E711B25D001E673EF734', '2017-08-02 14:09:07', '2017-08-02 14:10:01', NULL, NULL, NULL, x'8A86BB007377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'B9FA44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'63EA44888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BA6546888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'FF5B46888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BAB145888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'F6A745888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BABE862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BBD04A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'13C74A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BC4EEE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:53:02', NULL, NULL, NULL, x'113CEE6F3087E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-22 14:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BC5A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F44A4B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'BCBCB5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BD04665BEC75E711B25D001E673EF734', '2017-07-31 15:32:46', '2017-07-31 15:33:02', NULL, NULL, NULL, x'E7F0655BEC75E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 15:33:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BD2247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:17', NULL, NULL, NULL, x'741247888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:17', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BE94C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BEB21CB06377E711B25D001E673EF734', '2017-08-02 12:19:29', '2017-08-02 12:20:02', NULL, NULL, NULL, x'DF9A1CB06377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BEEE7E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:02', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:04:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BF492E01607BE711B25D001E673EF734', '2017-08-07 14:03:12', '2017-08-07 14:04:01', NULL, NULL, NULL, x'90312E01607BE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-07 14:04:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BFAB2A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:04', NULL, NULL, NULL, x'F5842A20BA81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:04:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'BFC2B5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:02', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-23 08:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C09A49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'888D49888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C0AF40DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C0D048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:23', NULL, NULL, NULL, x'79C048888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:23', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C14F4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:28', NULL, NULL, NULL, x'FF454A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:28', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C18A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:33', NULL, NULL, NULL, x'21814B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:33', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C18B67ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:10', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C19C4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:29', NULL, NULL, NULL, x'0D934A888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:29', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C1F14C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:37', NULL, NULL, NULL, x'6EE14C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:37', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C260CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:03', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C2627144C672E71190D3001E673EF734', '2017-07-27 15:22:33', '2017-07-27 15:23:02', NULL, NULL, NULL, x'E84F7144C672E71190D3001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-27 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C2804C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'95734C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C2C244888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'09B944888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C33847888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'9F2B47888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C34C46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:14', NULL, NULL, NULL, x'F34246888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:14', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C3B048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:23', NULL, NULL, NULL, x'F6A648888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:23', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C3E90BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C44045888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:11', NULL, NULL, NULL, x'B63445888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C57367ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:10', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C58AC2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C5A7B619687BE711B25D001E673EF734', '2017-08-07 15:01:09', '2017-08-07 15:02:02', NULL, NULL, NULL, x'6B9BB619687BE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-07 15:02:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C5BEBC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:02', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C5E945888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'8CDC45888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C684C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C6E97E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:04:04', NULL, NULL, NULL, x'A3CC7E20BA81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:04:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C76349888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:26', NULL, NULL, NULL, x'175A49888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:26', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C7F85FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:02', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-28 11:01:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C81235FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:01', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-15 16:17:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C82477A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C8664C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'9D594C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C8A064B9B476E711B25D001E673EF734', '2017-08-01 15:27:03', '2017-08-01 15:28:01', NULL, NULL, NULL, x'1D8E64B9B476E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-01 15:28:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C8CA45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'FEC045888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C8D23EA2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:10', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C8EEDAE27277E711B25D001E673EF734', '2017-08-02 14:08:17', '2017-08-02 14:09:01', NULL, NULL, NULL, x'5BD1DAE27277E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 14:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C90742888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'84F241888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'C9764E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:54:02', NULL, NULL, NULL, x'6E594E5EA188E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 10:54:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C9B743D14C78E711B25D001E673EF734', '2017-08-03 16:08:18', '2017-08-03 16:09:01', NULL, NULL, NULL, x'21A543D14C78E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 16:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'C9C7B1562078E711B25D001E673EF734', '2017-08-03 10:49:54', '2017-08-03 10:50:01', NULL, NULL, NULL, x'72AAB1562078E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 10:50:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CA8D8C87EC75E711B25D001E673EF734', '2017-07-31 15:34:00', '2017-07-31 15:34:01', NULL, NULL, NULL, x'2C708C87EC75E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 15:34:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CAC0FC876377E711B25D001E673EF734', '2017-08-02 12:18:22', '2017-08-02 12:19:02', NULL, NULL, NULL, x'D8ADFC876377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:19:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CB0546888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'83F545888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CB7D45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:12', NULL, NULL, NULL, x'896D45888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:12', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CBF890F38E70E71190D3001E673EF734', '2017-07-24 19:41:33', '2017-07-24 19:41:33', NULL, NULL, NULL, x'DAE590F38E70E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'CC0B4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:37', NULL, NULL, NULL, x'81FB4C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:37', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CC71EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CCE843888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'60D943888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CD1B31ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:09', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CD7EEE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:52:02', NULL, NULL, NULL, x'5365EE13A188E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 10:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CDDE47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'A4D147888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'CDEB18273078E711B25D001E673EF734', '2017-08-03 12:43:06', '2017-08-03 12:44:01', NULL, NULL, NULL, x'E5DB18273078E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 12:44:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CE6FC5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:34:02', NULL, NULL, NULL, x'DA61C5531F8CE711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-28 21:34:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CF1A49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'8D0D49888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'CFB93D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:04', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:04:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'CFD83EA2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:05', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D0B2862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D0C49D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:02', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 13:00:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D192E6BF4078E711B25D001E673EF734', '2017-08-03 14:41:55', '2017-08-03 14:42:01', NULL, NULL, NULL, x'2975E6BF4078E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 14:42:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D1D20140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:02', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 10:53:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D21FF0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:10', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D230EA8B8F70E71190D3001E673EF734', '2017-07-24 19:45:48', '2017-07-24 19:46:01', NULL, NULL, NULL, x'121EEA8B8F70E71190D3001E673EF734', x'0BDC457C8F70E71190D3001E673EF734', '2017-07-24 19:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D23346888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:14', NULL, NULL, NULL, x'1C2A46888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:14', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D24D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'8D4049888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'D2A653014B78E711B25D001E673EF734', '2017-08-03 15:55:19', '2017-08-03 15:56:01', NULL, NULL, NULL, x'7A9353014B78E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 15:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D2B741888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:02', NULL, NULL, NULL, x'F99A41888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D2BC73A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:08:07', NULL, NULL, NULL, x'DF9073A5C889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D32E65B87677E711B25D001E673EF734', '2017-08-02 14:35:44', '2017-08-02 14:36:01', NULL, NULL, NULL, x'F01E65B87677E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 14:36:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D38F44386477E711B25D001E673EF734', '2017-08-02 12:23:18', '2017-08-02 12:24:01', NULL, NULL, NULL, x'277D44386477E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:24:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D3A847888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:19', NULL, NULL, NULL, x'969E47888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:19', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D3C1862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D44C4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'A93F4C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'D45541A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:10', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D4C14B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'A1B44B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'D4FD48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'F6F348888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D53CFF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:01', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-22 14:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D5C3F65A3078E711B25D001E673EF734', '2017-08-03 12:44:33', '2017-08-03 12:45:02', NULL, NULL, NULL, x'E3B2F65A3078E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 12:45:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D5DE44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'BED144888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'D5EC45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:13', NULL, NULL, NULL, x'8CDC45888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:13', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D63049888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:25', NULL, NULL, NULL, x'152749888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:25', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D6628E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:02', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:07:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D66A79D73371E71190D3001E673EF734', '2017-07-25 15:21:53', '2017-07-25 15:21:53', NULL, NULL, NULL, x'665A79D73371E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'D6A744386477E711B25D001E673EF734', '2017-08-02 12:23:18', '2017-08-02 12:24:02', NULL, NULL, NULL, x'277D44386477E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:24:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D72C0D813178E711B25D001E673EF734', '2017-08-03 12:52:47', '2017-08-03 12:53:01', NULL, NULL, NULL, x'8E190D813178E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 12:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D75BFAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:11', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D7AD271D3171E71190D3001E673EF734', '2017-07-25 15:02:21', '2017-07-25 15:03:02', NULL, NULL, NULL, x'5E9D271D3171E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-25 15:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D845FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:09', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D8C40140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:01', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 10:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D96679D73371E71190D3001E673EF734', '2017-07-25 15:21:53', '2017-07-25 15:22:01', NULL, NULL, NULL, x'665A79D73371E71190D3001E673EF734', x'0BDC457C8F70E71190D3001E673EF734', '2017-07-25 15:22:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D98373A03C78E711B25D001E673EF734', '2017-08-03 14:12:24', '2017-08-03 14:13:01', NULL, NULL, NULL, x'826673A03C78E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-03 14:13:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D98EC9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D99D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:26', NULL, NULL, NULL, x'888D49888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:26', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'D9C33D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DA2F58283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:01', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-22 16:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DA33FF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:03', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-22 14:53:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DA5D4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:32', NULL, NULL, NULL, x'F44A4B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:32', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DAA54199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:01', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-23 09:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DB0D4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:30', NULL, NULL, NULL, x'86FD4A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:30', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DB1A46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:14', NULL, NULL, NULL, x'830E46888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:14', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DB1E77A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:03', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 20:52:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DB3D8A834478E711B25D001E673EF734', '2017-08-03 15:08:51', '2017-08-03 15:09:01', NULL, NULL, NULL, x'C6248A834478E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-03 15:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DB9DC2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:02', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 12:59:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBB146888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:16', NULL, NULL, NULL, x'26A846888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:16', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBD349888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'2ACA49888870E71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBD9CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:03:02', NULL, NULL, NULL, x'C9B2CD01BA81E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 16:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBEA48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:23', NULL, NULL, NULL, x'D6D948888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:23', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBF50A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:04', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 11:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DBFD655BEC75E711B25D001E673EF734', '2017-07-31 15:32:46', '2017-07-31 15:33:02', NULL, NULL, NULL, x'E7F0655BEC75E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-31 15:33:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DC8E7E1B7377E711B25D001E673EF734', '2017-08-02 14:09:52', '2017-08-02 14:10:01', NULL, NULL, NULL, x'C57B7E1B7377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 14:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DD1002E68E70E71190D3001E673EF734', '2017-07-24 19:41:10', '2017-07-24 19:42:01', NULL, NULL, NULL, x'710002E68E70E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 19:42:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DD1E35FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:17:02', NULL, NULL, NULL, x'4E0635FEBB81E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 16:17:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DD2031ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:10', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DD2658283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:10:01', NULL, NULL, NULL, x'47FA57283B87E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-22 16:10:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DD89C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DDB3249C6377E711B25D001E673EF734', '2017-08-02 12:18:56', '2017-08-02 12:19:03', NULL, NULL, NULL, x'799E249C6377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:19:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DDDF0BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DDE40BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:05:02', NULL, NULL, NULL, x'5AC20BE1A288E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DDFD49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'BCF049888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'DE6B43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:06', NULL, NULL, NULL, x'A85B43888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DE8644888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'6D7744888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DE9D48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:22', NULL, NULL, NULL, x'918D48888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:22', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DE9F53014B78E711B25D001E673EF734', '2017-08-03 15:55:19', '2017-08-03 15:56:01', NULL, NULL, NULL, x'7A9353014B78E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 15:56:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'DEB241888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'F99A41888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'DFEC46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'C8DF46888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'E02B69863371E71190D3001E673EF734', '2017-07-25 15:19:37', '2017-07-25 15:19:37', NULL, NULL, NULL, x'3B0F69863371E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'E068B8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:07', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E1080B4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:03', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E13331ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:10', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E16313A36377E711B25D001E673EF734', '2017-08-02 12:19:07', '2017-08-02 12:20:02', NULL, NULL, NULL, x'034B13A36377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E17A8E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:01', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-15 16:07:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E34A48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'8D3948888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E37D48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:22', NULL, NULL, NULL, x'337448888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:22', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E3E83030EB75E711B25D001E673EF734', '2017-07-31 15:24:24', '2017-07-31 15:25:02', NULL, NULL, NULL, x'2B6C2E30EB75E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-31 15:25:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E42531ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:01', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E43D77A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:52:02', NULL, NULL, NULL, x'F40B77A72B88E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-23 20:52:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E4894D05EB75E711B25D001E673EF734', '2017-07-31 15:23:12', '2017-07-31 15:24:01', NULL, NULL, NULL, x'A06C4D05EB75E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 15:24:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E49F4199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:03:02', NULL, NULL, NULL, x'348C4199C887E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 09:03:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E4CD1EB76377E711B25D001E673EF734', '2017-08-02 12:19:41', '2017-08-02 12:20:01', NULL, NULL, NULL, x'74BB1EB76377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:20:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E542CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:10', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E548CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:08:03', NULL, NULL, NULL, x'4830CCADC889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E56B894B687BE711B25D001E673EF734', '2017-08-07 15:02:33', '2017-08-07 15:03:01', NULL, NULL, NULL, x'A74E894B687BE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-07 15:03:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E59846888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'2B8F46888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E60CF0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:05', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:05', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E62CFF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:53:01', NULL, NULL, NULL, x'0720FF683087E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-22 14:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E62F1E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:04', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-24 11:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E66C4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'BD5F4A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'E685C2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:59:01', NULL, NULL, NULL, x'1A6DC2FB7B89E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 12:59:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E6B50140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:01', NULL, NULL, NULL, x'579D0140A188E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 10:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E6C643888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'AEAA43888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'E6E144888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:09', NULL, NULL, NULL, x'BED144888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E72948888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:21', NULL, NULL, NULL, x'3D2048888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:21', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E7BE3D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:04:03', NULL, NULL, NULL, x'A2A13D19BA81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:04:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E7C4BC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:02', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E83E4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:38', NULL, NULL, NULL, x'2E354D888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:38', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E840EA8B8F70E71190D3001E673EF734', '2017-07-24 19:45:48', '2017-07-24 19:46:01', NULL, NULL, NULL, x'121EEA8B8F70E71190D3001E673EF734', x'DB51504C8D70E71190D3001E673EF734', '2017-07-24 19:46:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E86944888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:08', NULL, NULL, NULL, x'245044888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E8772CA96377E711B25D001E673EF734', '2017-08-02 12:19:18', '2017-08-02 12:20:02', NULL, NULL, NULL, x'D86A2CA96377E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E8E147888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:20', NULL, NULL, NULL, x'A4D147888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:20', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E93A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:31', NULL, NULL, NULL, x'39314B888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:31', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E9CB43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:07', NULL, NULL, NULL, x'AEAA43888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'E9DD9D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 13:00:01', NULL, NULL, NULL, x'E1B19D207C89E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 13:00:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EA5049888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:25', NULL, NULL, NULL, x'8D4049888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:25', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB08F0ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'BCFBEFACC889E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB1D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:24', NULL, NULL, NULL, x'8D0D49888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:24', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB224A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:27', NULL, NULL, NULL, x'4D0A4A888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:27', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB3B06EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB60FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:07', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:07', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB6C8E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:01', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-15 16:07:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EB834C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:36', NULL, NULL, NULL, x'95734C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:36', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EBA9B5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:58:03', NULL, NULL, NULL, x'9092B5F6C787E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-23 08:58:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EBC7A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:09', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-25 22:08:09', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EBF1BAC78F70E71190D3001E673EF734', '2017-07-24 19:47:29', '2017-07-24 19:47:29', NULL, NULL, NULL, x'AEDFBAC78F70E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'EC36C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EC7547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:18', NULL, NULL, NULL, x'366C47888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:18', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'ED6445888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:11', NULL, NULL, NULL, x'D34F45888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:11', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EF250D813178E711B25D001E673EF734', '2017-08-03 12:52:47', '2017-08-03 12:53:01', NULL, NULL, NULL, x'8E190D813178E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-03 12:53:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'EFD646888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:16', NULL, NULL, NULL, x'53C146888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:16', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F0341E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:03', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-24 11:08:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F0694C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'9D594C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F12B0D2F3471E71190D3001E673EF734', '2017-07-25 15:24:19', '2017-07-25 15:25:01', NULL, NULL, NULL, x'2A180D2F3471E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-25 15:25:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F16741A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:02', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F17F46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:15', NULL, NULL, NULL, x'297646888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:15', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F2324C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'C8254C888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'F28667ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:04', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'FB697F54C181E711B25D001E673EF734', '2017-08-25 22:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F2A74B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'D39A4B888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'F2CD5FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:01:01', NULL, NULL, NULL, x'BEB45FFDC68BE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-28 11:01:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F3378D196B7BE711B25D001E673EF734', '2017-08-07 15:22:37', '2017-08-07 15:23:02', NULL, NULL, NULL, x'51258D196B7BE711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-07 15:23:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F36EFAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:10', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F3D91EB76377E711B25D001E673EF734', '2017-08-02 12:19:41', '2017-08-02 12:20:02', NULL, NULL, NULL, x'74BB1EB76377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F40C45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:10', NULL, NULL, NULL, x'430345888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F436EA8B8F70E71190D3001E673EF734', '2017-07-24 19:45:48', '2017-07-24 19:45:48', NULL, NULL, NULL, x'121EEA8B8F70E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'F4678E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:02', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 16:07:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F46E67ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:08:06', NULL, NULL, NULL, x'6A5667ACC889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F4758E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:07:02', NULL, NULL, NULL, x'484A8E82BA81E711B25D001E673EF734', x'AF841663697BE711B25D001E673EF734', '2017-08-15 16:07:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F4BB862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:11:02', NULL, NULL, NULL, x'C1A2862D9181E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 11:11:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F54A06EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:58:02', NULL, NULL, NULL, x'991406EEA188E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-24 10:58:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F5B71CB06377E711B25D001E673EF734', '2017-08-02 12:19:29', '2017-08-02 12:20:02', NULL, NULL, NULL, x'DF9A1CB06377E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-02 12:20:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F5C2A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:10', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-25 22:08:10', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F654C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F674FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:08', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F69243888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:06', NULL, NULL, NULL, x'8A8343888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F6C340DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:16:02', NULL, NULL, NULL, x'4CA340DD9181E711B25D001E673EF734', x'59A889B38F81E711B25D001E673EF734', '2017-08-15 11:16:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F73831ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:08:02', NULL, NULL, NULL, x'B9FD30ADC889E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F74FC73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:13:02', NULL, NULL, NULL, x'6719C73B708CE711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-29 07:13:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F89CC9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:57:02', NULL, NULL, NULL, x'8561C9C4C787E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-23 08:57:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F8B042888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:04', NULL, NULL, NULL, x'359742888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F8E3DAE27277E711B25D001E673EF734', '2017-08-02 14:08:17', '2017-08-02 14:09:01', NULL, NULL, NULL, x'5BD1DAE27277E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-02 14:09:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'F94F4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:35', NULL, NULL, NULL, x'A93F4C888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:35', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FA1A2EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:56:02', NULL, NULL, NULL, x'09082EB5C787E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 08:56:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FAAF249C6377E711B25D001E673EF734', '2017-08-02 12:18:56', '2017-08-02 12:19:03', NULL, NULL, NULL, x'799E249C6377E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-02 12:19:03', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FAF04A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'CCE04A888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'FB2845888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'ED1B45888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'FB928C87EC75E711B25D001E673EF734', '2017-07-31 15:34:00', '2017-07-31 15:34:01', NULL, NULL, NULL, x'2C708C87EC75E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-07-31 15:34:01', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FBBABC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:05:02', NULL, NULL, NULL, x'F8AABC579081E711B25D001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-08-15 11:05:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FBC44B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:34', NULL, NULL, NULL, x'A1B44B888870E71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 18:56:34', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FBCD4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:56:37', NULL, NULL, NULL, x'4DC44C888870E71190D3001E673EF734', x'CA544E707870E71190D3001E673EF734', '2017-07-24 18:56:37', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FC0547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, x'E3F846888870E71190D3001E673EF734', x'7E750268AF4AE711B02EA81E843486A3', NULL, '', 0, 0),
(x'12726B41EFB973419A38E215B75A2103', x'FC471E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:08:02', NULL, NULL, NULL, x'870D1E45A388E711B25D001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2017-08-24 11:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FC63B8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:08:04', NULL, NULL, NULL, x'CA3CB8A4C889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:04', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FD6241A2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:08:06', NULL, NULL, NULL, x'14C03EA2C889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:06', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FF40FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:08:08', NULL, NULL, NULL, x'8828FAA4C889E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-25 22:08:08', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FFCCA8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:08:02', NULL, NULL, NULL, x'AAA5A8ACC889E711B25D001E673EF734', x'01E573D50F81E711B25D001E673EF734', '2017-08-25 22:08:02', '', 0, -1),
(x'12726B41EFB973419A38E215B75A2103', x'FFF00A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:08:02', NULL, NULL, NULL, x'8CD80A4CA388E711B25D001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-08-24 11:08:02', '', 0, -1);

-- 
-- Вывод данных для таблицы armd_chaneltype
--
INSERT INTO armd_chaneltype VALUES
(x'23CCFE44B4350749A2B21FA0A5790A92', x'2633B544A04AE711B02EA81E843486A3', '2017-06-06 13:09:46', '2017-07-10 15:40:13', NULL, NULL, NULL, 'e-mail'),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'2E60F33BA04AE711B02EA81E843486A3', '2017-06-06 13:09:31', '2017-07-10 15:40:14', NULL, NULL, NULL, 'viber'),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'4E9A6340A04AE711B02EA81E843486A3', '2017-06-06 13:09:39', '2017-07-10 15:40:14', NULL, NULL, NULL, 'skype'),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'F316A1CD8870E71190D3001E673EF734', '2017-07-24 18:57:32', '2017-07-24 18:57:32', NULL, NULL, NULL, 'sms');

-- 
-- Вывод данных для таблицы armd_info
--
INSERT INTO armd_info VALUES
(x'23CCFE44B4350749A2B21FA0A5790A92', x'21A89A3BAF4AE711B02EA81E843486A3', '2017-08-30 14:08:59', '2017-08-30 14:08:59', NULL, NULL, NULL, x'C03A15A91B4AE711B34AA81E843486A3', '10001000', '2017-06-06', '+7 999 1112234', 0, -1, 0),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'2CEFA2AA9265E7119A61001E673EF734', '2017-07-10 23:08:14', '2017-08-30 13:54:08', NULL, NULL, NULL, x'C03A15A91B4AE711B34AA81E843486A3', '123456789012', '2017-06-01', '79213993784', 0, -1, 0),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'6F52CA5BA04AE711B02EA81E843486A3', '2017-06-06 13:10:25', '2017-08-30 15:12:44', NULL, NULL, NULL, x'C03A15A91B4AE711B34AA81E843486A3', '1000010000', '2017-06-06', '+7 999 1112233', 0, 0, 0),
(x'23CCFE44B4350749A2B21FA0A5790A92', x'96552E3C6F6DE71190D3001E673EF734', '2017-07-20 20:16:57', '2017-08-30 15:12:44', NULL, NULL, NULL, x'C03A15A91B4AE711B34AA81E843486A3', '123456789013', '2017-07-09', '111111111111111111', 0, 0, 0);

-- 
-- Вывод данных для таблицы armd_type
--
INSERT INTO armd_type VALUES
(x'23CCFE44B4350749A2B21FA0A5790A92', x'C03A15A91B4AE711B34AA81E843486A3', '2017-06-05 21:20:32', '2017-07-10 15:40:13', NULL, NULL, NULL, 'a1');

-- 
-- Вывод данных для таблицы armjournal
--
-- Таблица areal_cli.armjournal не содержит данных

-- 
-- Вывод данных для таблицы armtypes
--
-- Таблица areal_cli.armtypes не содержит данных

-- 
-- Вывод данных для таблицы arsms_data
--
INSERT INTO arsms_data VALUES
(x'5AAAA43AA14AE711B02EA81E843486A3', x'034B13A36377E711B25D001E673EF734', '2017-08-02 12:19:07', '2017-08-02 12:19:07', NULL, NULL, NULL, '2017-08-02 12:19:00', '79110829123', '123456789013', '2', '147', 51, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'0720FF683087E711B25D001E673EF734', '2017-08-22 14:52:44', '2017-08-22 14:52:44', NULL, NULL, NULL, '2017-08-22 14:52:00', '79218587251', '123456789013', '2', '180', 44, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'09082EB5C787E711B25D001E673EF734', '2017-08-23 08:55:46', '2017-08-23 08:55:46', NULL, NULL, NULL, '2017-08-23 08:55:00', '79218587251', '123456789013', '2', '184', 33, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'09B944888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:07:00', '79213993784', '123456789012', '1', '22', 22, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'0D934A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 14:02:00', '79213993784', '123456789012', '2', '80', -15, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'0E0D59133271E71190D3001E673EF734', '2017-07-25 15:09:14', '2017-07-25 15:09:14', NULL, NULL, NULL, '2017-07-25 15:09:00', '79110829123', '123456789013', '4', '119', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'0F710A597177E711B25D001E673EF734', '2017-08-02 13:57:16', '2017-08-02 13:57:16', NULL, NULL, NULL, '2017-08-02 13:57:00', '79110829123', '123456789013', '1', '152', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'113CEE6F3087E711B25D001E673EF734', '2017-08-22 14:52:56', '2017-08-22 14:52:56', NULL, NULL, NULL, '2017-08-22 14:52:00', '79218587251', '123456789013', '2', '181', 44, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'114DFF665974E711B25D001E673EF734', '2017-07-29 15:28:18', '2017-07-29 15:28:18', NULL, NULL, NULL, '2017-07-29 15:28:00', '79110829123', '123456789013', '1', '132', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'121EEA8B8F70E71190D3001E673EF734', '2017-07-24 19:45:48', '2017-07-24 19:45:48', NULL, NULL, NULL, '2017-07-24 19:45:00', '79213993784', '123456789012', '2', '112', 22, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'12A749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 14:22:00', '79110829123', '', '0', '70', 0, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'13C74A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 14:08:00', '79213993784', '123456789012', '2', '82', 15, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'141744D18A70E71190D3001E673EF734', '2017-07-24 19:11:57', '2017-07-24 19:11:57', NULL, NULL, NULL, '2017-07-24 19:11:00', '79213993784', '123456789012', '1', '109', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'14C03EA2C889E711B25D001E673EF734', '2017-08-25 22:07:26', '2017-08-25 22:07:26', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '198', 26, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'152749888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-18 12:23:00', '79213993784', '123456789012', '2', '65', 22, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'175A49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 13:26:00', '79213993784', '123456789012', '2', '67', 22, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'19399AADFC71E71190D3001E673EF734', '2017-07-26 15:19:31', '2017-07-26 15:19:31', NULL, NULL, NULL, '2017-07-26 15:19:00', '79110829123', '123456789013', '1', '125', 24, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'1A6DC2FB7B89E711B25D001E673EF734', '2017-08-25 12:58:45', '2017-08-25 12:58:45', NULL, NULL, NULL, '2017-08-25 12:58:00', '79218587251', '123456789013', '2', '196', 35, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'1C2A46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 11:55:00', '79213993784', '123456789012', '1', '36', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'1D8E64B9B476E711B25D001E673EF734', '2017-08-01 15:27:03', '2017-08-01 15:27:03', NULL, NULL, NULL, '2017-08-01 15:27:00', '79110829123', '123456789013', '2', '141', 27, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'21814B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:29:00', '79213993784', '123456789012', '2', '89', 8, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'21A543D14C78E711B25D001E673EF734', '2017-08-03 16:08:18', '2017-08-03 16:08:18', NULL, NULL, NULL, '2017-08-03 16:08:00', '79110829123', '123456789013', '1', '165', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'245044888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:00:00', '79213993784', '123456789012', '1', '19', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'24BE42888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:28:00', '79213993784', '123456789012', '1', '9', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'266B41888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-04 14:50:16', '+79219225921', '123456789012', '1', '1', -3, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'26A846888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 12:58:00', '79213993784', '123456789012', '1', '41', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'277D44386477E711B25D001E673EF734', '2017-08-02 12:23:18', '2017-08-02 12:23:18', NULL, NULL, NULL, '2017-08-02 12:23:00', '79110829123', '123456789013', '1', '151', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2975E6BF4078E711B25D001E673EF734', '2017-08-03 14:41:55', '2017-08-03 14:41:55', NULL, NULL, NULL, '2017-08-03 14:41:00', '79110829123', '123456789013', '1', '162', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'297646888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 12:29:00', '79213993784', '123456789012', '2', '39', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2A180D2F3471E71190D3001E673EF734', '2017-07-25 15:24:19', '2017-07-25 15:24:19', NULL, NULL, NULL, '2017-07-25 15:24:00', '79213993784', '123456789012', '2', '122', 23, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2ACA49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 15:06:00', '79110829123', '123456789013', '1', '72', 25, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2B6C2E30EB75E711B25D001E673EF734', '2017-07-31 15:24:24', '2017-07-31 15:24:24', NULL, NULL, NULL, '2017-07-31 15:24:00', '79110829123', '123456789013', '4', '137', 26, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2B8F46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 12:52:00', '79213993784', '123456789012', '1', '40', 0, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2C708C87EC75E711B25D001E673EF734', '2017-07-31 15:34:00', '2017-07-31 15:34:00', NULL, NULL, NULL, '2017-07-31 15:34:00', '79110829123', '123456789013', '4', '140', 26, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'2E354D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 17:39:00', '79213993784', '123456789012', '2', '105', 1, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'337448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-13 14:12:00', '79213993784', '123456789012', '2', '58', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'348C4199C887E711B25D001E673EF734', '2017-08-23 09:02:09', '2017-08-23 09:02:09', NULL, NULL, NULL, '2017-08-23 09:02:00', '79218587251', '123456789013', '2', '187', 35, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'359742888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:18:00', '79213993784', '123456789012', '1', '8', 23, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'366C47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 14:48:00', '79213993784', '123456789012', '4', '48', 25, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'389522933087E711B25D001E673EF734', '2017-08-22 14:53:55', '2017-08-22 14:53:55', NULL, NULL, NULL, '2017-08-22 14:53:00', '79218587251', '123456789013', '2', '182', 43, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'39314B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:20:00', '79213993784', '123456789012', '2', '86', 22, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'3B0F69863371E71190D3001E673EF734', '2017-07-25 15:19:37', '2017-07-25 15:19:37', NULL, NULL, NULL, '2017-07-25 15:19:00', '79213993784', '123456789012', '2', '120', 22, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'3BEFBCA0AF72E71190D3001E673EF734', '2017-07-27 12:40:29', '2017-07-27 12:40:29', NULL, NULL, NULL, '2017-07-27 12:40:00', '79110829123', '123456789013', '2', '128', 24, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'3C0448888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:12:00', '79213993784', '123456789012', '1', '54', 27, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'3D2048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:14:00', '79213993784', '123456789012', '2', '55', 27, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'430345888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 18:33:00', '79213993784', '123456789012', '1', '25', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'47FA57283B87E711B25D001E673EF734', '2017-08-22 16:09:40', '2017-08-22 16:09:40', NULL, NULL, NULL, '2017-08-22 16:09:00', '79218587251', '123456789013', '2', '183', 44, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4830CCADC889E711B25D001E673EF734', '2017-08-25 22:07:46', '2017-08-25 22:07:46', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '206', 28, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'484A8E82BA81E711B25D001E673EF734', '2017-08-15 16:06:11', '2017-08-15 16:06:11', NULL, NULL, NULL, '2017-08-15 16:06:00', '79218587251', '123456789013', '2', '178', 35, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4A34E36C5A74E711B25D001E673EF734', '2017-07-29 15:35:38', '2017-07-29 15:35:38', NULL, NULL, NULL, '2017-07-29 15:35:00', '79110829123', '123456789013', '1', '133', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4CA340DD9181E711B25D001E673EF734', '2017-08-15 11:15:14', '2017-08-15 11:15:14', NULL, NULL, NULL, '2017-08-15 11:15:00', '79218587251', '123456789013', '2', '173', 37, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4CE30C816377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:18:10', NULL, NULL, NULL, '2017-08-02 12:18:00', '79110829123', '123456789013', '2', '144', 0, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4D0A4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:31:00', '79213993784', '123456789012', '1', '75', 23, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4DC44C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 14:53:00', '79213993784', '123456789012', '1', '101', 23, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4E0635FEBB81E711B25D001E673EF734', '2017-08-15 16:16:48', '2017-08-15 16:16:48', NULL, NULL, NULL, '2017-08-15 16:16:00', '79218587251', '123456789013', '2', '179', 36, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'4EA098786377E711B25D001E673EF734', '2017-08-02 12:17:56', '2017-08-02 12:17:56', NULL, NULL, NULL, '2017-08-02 12:17:00', '79110829123', '123456789013', '1', '142', 0, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'50174B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-23 14:09:00', '79213993784', '123456789012', '1', '85', 22, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'50A044888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:06:00', '79213993784', '123456789012', '1', '21', 22, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'51258D196B7BE711B25D001E673EF734', '2017-08-07 15:22:37', '2017-08-07 15:22:37', NULL, NULL, NULL, '2017-08-07 15:22:00', '79218587251', '123456789013', '1', '169', 23, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'534F4D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 17:39:00', '79213993784', '123456789012', '2', '106', 9, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5365EE13A188E711B25D001E673EF734', '2017-08-24 10:51:46', '2017-08-24 10:51:46', NULL, NULL, NULL, '2017-08-24 10:51:00', '79218587251', '123456789013', '2', '189', 34, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'53C146888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 12:59:00', '79213993784', '123456789012', '2', '42', 25, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'579D0140A188E711B25D001E673EF734', '2017-08-24 10:53:00', '2017-08-24 10:53:00', NULL, NULL, NULL, '2017-08-24 10:53:00', '79218587251', '123456789013', '2', '190', 33, 0, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5A674B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:28:00', '79213993784', '123456789012', '2', '88', 5, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5AC20BE1A288E711B25D001E673EF734', '2017-08-24 11:04:39', '2017-08-24 11:04:39', NULL, NULL, NULL, '2017-08-24 11:04:00', '79218587251', '123456789013', '2', '193', 33, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5BD1DAE27277E711B25D001E673EF734', '2017-08-02 14:08:17', '2017-08-02 14:08:17', NULL, NULL, NULL, '2017-08-02 14:08:00', '79110829123', '123456789013', '2', '153', 25, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5CCDCA806377E711B25D001E673EF734', '2017-08-02 12:18:10', '2017-08-02 12:18:10', NULL, NULL, NULL, '2017-08-02 12:18:00', '79110829123', '123456789013', '2', '143', 49, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5E904C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 13:20:00', '79213993784', '123456789012', '2', '99', 20, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5E9D271D3171E71190D3001E673EF734', '2017-07-25 15:02:21', '2017-07-25 15:02:21', NULL, NULL, NULL, '2017-07-25 15:02:00', '79110829123', '123456789013', '2', '118', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'5EB847888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:00:00', '79213993784', '123456789012', '2', '51', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'60D943888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 15:41:00', '79213993784', '123456789012', '1', '16', 23, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'61694D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 18:06:00', '79213993784', '123456789012', '2', '107', 22, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6244D0ABEA71E71190D3001E673EF734', '2017-07-26 13:10:37', '2017-07-26 13:10:37', NULL, NULL, NULL, '2017-07-26 13:10:00', '79110829123', '123456789013', '1', '123', 24, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'62AA4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 14:28:00', '79213993784', '123456789012', '1', '100', 22, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'63EA44888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:12:00', '79213993784', '123456789012', '4', '24', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'665A79D73371E71190D3001E673EF734', '2017-07-25 15:21:53', '2017-07-25 15:21:53', NULL, NULL, NULL, '2017-07-25 15:21:00', '79213993784', '123456789012', '2', '121', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6719C73B708CE711B25D001E673EF734', '2017-08-29 07:12:12', '2017-08-29 07:12:12', NULL, NULL, NULL, '2017-08-29 07:12:00', '79218587251', '123456789013', '2', '209', 33, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'698547888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 14:58:00', '79213993784', '123456789012', '1', '49', 27, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'69DC98515274E711B25D001E673EF734', '2017-07-29 14:37:36', '2017-07-29 14:37:36', NULL, NULL, NULL, '2017-07-29 14:37:00', '79110829123', '123456789013', '1', '131', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'69DD49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 15:10:00', '79110829123', '123456789013', '1', '73', 25, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6A5667ACC889E711B25D001E673EF734', '2017-08-25 22:07:43', '2017-08-25 22:07:43', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '202', 33, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6A8645888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-07 14:28:00', '79213993784', '123456789012', '1', '30', 21, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6B9BB619687BE711B25D001E673EF734', '2017-08-07 15:01:09', '2017-08-07 15:01:09', NULL, NULL, NULL, '2017-08-07 15:01:00', '79110829123', '123456789013', '1', '167', 24, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6D7744888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:01:00', '79213993784', '123456789012', '1', '20', 23, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6E594E5EA188E711B25D001E673EF734', '2017-08-24 10:53:51', '2017-08-24 10:53:51', NULL, NULL, NULL, '2017-08-24 10:53:00', '79218587251', '123456789013', '2', '191', 32, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6EE14C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 14:54:00', '79213993784', '123456789012', '2', '102', 23, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6F794A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:50:00', '79213993784', '123456789012', '2', '79', 21, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'6F834D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 18:09:00', '79213993784', '123456789012', '1', '108', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'710002E68E70E71190D3001E673EF734', '2017-07-24 19:41:10', '2017-07-24 19:41:10', NULL, NULL, NULL, '2017-07-24 19:41:00', '79213993784', '123456789012', '2', '110', 22, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'72AAB1562078E711B25D001E673EF734', '2017-08-03 10:49:54', '2017-08-03 10:49:54', NULL, NULL, NULL, '2017-08-03 10:49:00', '79110829123', '123456789013', '2', '157', 24, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'741247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 13:40:00', '79213993784', '123456789012', '1', '45', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'741C33BCAE72E71190D3001E673EF734', '2017-07-27 12:34:06', '2017-07-27 12:34:06', NULL, NULL, NULL, '2017-07-27 12:34:00', '79110829123', '123456789013', '2', '127', 24, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'74BB1EB76377E711B25D001E673EF734', '2017-08-02 12:19:41', '2017-08-02 12:19:41', NULL, NULL, NULL, '2017-08-02 12:19:00', '79110829123', '123456789013', '2', '150', 0, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'782C4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:44:00', '79213993784', '123456789012', '2', '76', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'797349888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 13:26:00', '79213993784', '123456789012', '2', '68', 22, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'799E249C6377E711B25D001E673EF734', '2017-08-02 12:18:56', '2017-08-02 12:18:56', NULL, NULL, NULL, '2017-08-02 12:18:00', '79110829123', '123456789013', '2', '146', 0, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'79C048888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-14 11:45:00', '79213993784', '123456789012', '2', '61', 27, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'7A9353014B78E711B25D001E673EF734', '2017-08-03 15:55:19', '2017-08-03 15:55:19', NULL, NULL, NULL, '2017-08-03 15:55:00', '79110829123', '123456789013', '1', '164', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'81FB4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 17:05:00', '79213993784', '123456789012', '1', '103', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'826673A03C78E711B25D001E673EF734', '2017-08-03 14:12:24', '2017-08-03 14:12:24', NULL, NULL, NULL, '2017-08-03 14:12:00', '79110829123', '123456789013', '2', '161', 25, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'830E46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 11:44:00', '79213993784', '123456789012', '1', '35', 21, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'83F545888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-09 04:58:00', '79213993784', '123456789012', '1', '34', 21, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'84F241888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:00:00', '79213993784', '123456789012', '1', '4', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'84F3B117FD71E71190D3001E673EF734', '2017-07-26 15:22:29', '2017-07-26 15:22:29', NULL, NULL, NULL, '2017-07-26 15:22:00', '79110829123', '123456789013', '2', '126', 24, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'85154D888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 17:37:00', '79213993784', '123456789012', '2', '104', 2, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8561C9C4C787E711B25D001E673EF734', '2017-08-23 08:56:12', '2017-08-23 08:56:12', NULL, NULL, NULL, '2017-08-23 08:56:00', '79218587251', '123456789013', '2', '185', 33, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'867A1BC55A74E711B25D001E673EF734', '2017-07-29 15:38:06', '2017-07-29 15:38:06', NULL, NULL, NULL, '2017-07-29 15:38:00', '79110829123', '123456789013', '1', '134', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'86FD4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-22 15:18:00', '79213993784', '123456789012', '1', '84', 22, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'870D1E45A388E711B25D001E673EF734', '2017-08-24 11:07:27', '2017-08-24 11:07:27', NULL, NULL, NULL, '2017-08-24 11:07:00', '79218587251', '123456789013', '2', '194', 33, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8828FAA4C889E711B25D001E673EF734', '2017-08-25 22:07:31', '2017-08-25 22:07:31', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '200', 26, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'888D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 13:26:00', '79213993784', '123456789012', '2', '69', 22, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'896D45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-07 11:57:00', '79213993784', '123456789012', '1', '29', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8A8343888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:35:00', '79213993784', '123456789012', '1', '14', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8A86BB007377E711B25D001E673EF734', '2017-08-02 14:09:07', '2017-08-02 14:09:07', NULL, NULL, NULL, '2017-08-02 14:09:00', '79110829123', '123456789013', '2', '154', 25, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8CD80A4CA388E711B25D001E673EF734', '2017-08-24 11:07:39', '2017-08-24 11:07:39', NULL, NULL, NULL, '2017-08-24 11:07:00', '79218587251', '123456789013', '2', '195', 33, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8CDC45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-08 09:47:00', '79213993784', '123456789012', '1', '33', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8D0D49888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-17 12:24:00', '79213993784', '123456789012', '2', '64', 24, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8D3948888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 16:18:00', '79213993784', '123456789012', '1', '56', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8D4049888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-18 12:23:00', '79213993784', '123456789012', '2', '66', 22, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'8E190D813178E711B25D001E673EF734', '2017-08-03 12:52:47', '2017-08-03 12:52:47', NULL, NULL, NULL, '2017-08-03 12:52:00', '79110829123', '123456789013', '1', '160', 24, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'90312E01607BE711B25D001E673EF734', '2017-08-07 14:03:12', '2017-08-07 14:03:12', NULL, NULL, NULL, '2017-08-07 14:03:00', '79110829123', '123456789013', '1', '166', 24, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'9092B5F6C787E711B25D001E673EF734', '2017-08-23 08:57:36', '2017-08-23 08:57:36', NULL, NULL, NULL, '2017-08-23 08:57:00', '79218587251', '123456789013', '1', '186', 33, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'916842888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:12:00', '79213993784', '123456789012', '1', '7', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'918D48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-13 14:20:00', '79213993784', '123456789012', '2', '59', 27, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'950144888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 15:43:00', '79213993784', '123456789012', '1', '17', 23, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'95734C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 13:18:00', '79213993784', '123456789012', '2', '98', 15, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'969E47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:00:00', '79213993784', '123456789012', '2', '50', 27, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'975E767ED275E711B25D001E673EF734', '2017-07-31 12:27:38', '2017-07-31 12:27:38', NULL, NULL, NULL, '2017-07-31 12:27:00', '79110829123', '123456789013', '1', '135', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'984142888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '0000-00-00 00:00:00', '79213993784', '123456789012', '1', '6', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'991406EEA188E711B25D001E673EF734', '2017-08-24 10:57:52', '2017-08-24 10:57:52', NULL, NULL, NULL, '2017-08-24 10:57:00', '79218587251', '123456789013', '2', '192', 32, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'9A8399F82971E71190D3001E673EF734', '2017-07-25 14:11:13', '2017-07-25 14:11:13', NULL, NULL, NULL, '2017-07-25 14:11:00', '79110829123', '123456789013', '2', '115', 24, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'9ACE4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:42:00', '79213993784', '123456789012', '2', '92', 4, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'9D594C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 13:16:00', '79213993784', '123456789012', '2', '97', 8, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'9F2B47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 13:41:00', '79213993784', '123456789012', '2', '46', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A06C4D05EB75E711B25D001E673EF734', '2017-07-31 15:23:12', '2017-07-31 15:23:12', NULL, NULL, NULL, '2017-07-31 15:23:00', '79110829123', '123456789013', '1', '136', 26, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A1B44B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:42:00', '79213993784', '123456789012', '2', '91', 7, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A2A13D19BA81E711B25D001E673EF734', '2017-08-15 16:03:14', '2017-08-15 16:03:14', NULL, NULL, NULL, '2017-08-15 16:03:00', '79218587251', '123456789013', '2', '175', 38, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A3CC7E20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:03:26', NULL, NULL, NULL, '2017-08-15 16:03:00', '79218587251', '123456789013', '2', '177', 37, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A4B649888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-20 14:57:00', '79110829123', '123456789013', '1', '71', 127, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A4D147888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:05:00', '79213993784', '123456789012', '2', '52', 27, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A68631AC8D81E711B25D001E673EF734', '2017-08-15 10:45:13', '2017-08-15 10:45:13', NULL, NULL, NULL, '2017-08-15 10:45:00', '79218587251', '123456789013', '1', '170', 34, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A74E894B687BE711B25D001E673EF734', '2017-08-07 15:02:33', '2017-08-07 15:02:33', NULL, NULL, NULL, '2017-08-07 15:02:00', '79110829123', '123456789013', '1', '168', 24, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A85B43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:33:00', '79213993784', '123456789012', '1', '13', 23, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'A93F4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 13:14:00', '79213993784', '123456789012', '2', '96', 3, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'AAA5A8ACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:07:44', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '203', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'AC0D43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:30:00', '79213993784', '123456789012', '1', '11', 23, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'AEAA43888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 09:45:00', '79213993784', '123456789012', '1', '15', 24, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'AEDFBAC78F70E71190D3001E673EF734', '2017-07-24 19:47:29', '2017-07-24 19:47:29', NULL, NULL, NULL, '2017-07-24 19:47:00', '79213993784', '123456789012', '2', '113', 22, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'B2E642888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:30:00', '79213993784', '123456789012', '1', '10', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'B33443888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-05 14:31:00', '79213993784', '123456789012', '1', '12', 23, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'B63445888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 18:54:00', '79213993784', '123456789012', '1', '27', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'B9FD30ADC889E711B25D001E673EF734', '2017-08-25 22:07:45', '2017-08-25 22:07:45', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '205', 28, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'BCF049888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:26:00', '79213993784', '123456789012', '1', '74', 22, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'BCFBEFACC889E711B25D001E673EF734', '2017-08-25 22:07:44', '2017-08-25 22:07:44', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '204', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'BD5F4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:49:00', '79213993784', '123456789012', '2', '78', 22, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'BEB45FFDC68BE711B25D001E673EF734', '2017-08-28 11:00:42', '2017-08-28 11:00:42', NULL, NULL, NULL, '2017-08-28 11:00:00', '79218587251', '123456789013', '2', '207', 34, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'BED144888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 17:10:00', '79213993784', '123456789012', '2', '23', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C1A2862D9181E711B25D001E673EF734', '2017-08-15 11:10:19', '2017-08-15 11:10:19', NULL, NULL, NULL, '2017-08-15 11:10:00', '79218587251', '123456789013', '1', '172', 37, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C346ADDB5174E711B25D001E673EF734', '2017-07-29 14:34:18', '2017-07-29 14:34:18', NULL, NULL, NULL, '2017-07-29 14:34:00', '79110829123', '123456789013', '1', '130', 26, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C4B28AA72E71E71190D3001E673EF734', '2017-07-25 14:44:45', '2017-07-25 14:44:45', NULL, NULL, NULL, '2017-07-25 14:44:00', '79110829123', '123456789013', '2', '117', 25, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C57B7E1B7377E711B25D001E673EF734', '2017-08-02 14:09:52', '2017-08-02 14:09:52', NULL, NULL, NULL, '2017-08-02 14:09:00', '79110829123', '123456789013', '2', '155', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C6248A834478E711B25D001E673EF734', '2017-08-03 15:08:51', '2017-08-03 15:08:51', NULL, NULL, NULL, '2017-08-03 15:08:00', '79110829123', '123456789013', '1', '163', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C8254C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 13:12:00', '79213993784', '123456789012', '1', '95', 22, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C8DF46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 13:02:00', '79213993784', '123456789012', '1', '43', 25, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'C9B2CD01BA81E711B25D001E673EF734', '2017-08-15 16:02:35', '2017-08-15 16:02:35', NULL, NULL, NULL, '2017-08-15 16:02:00', '79218587251', '123456789013', '2', '174', 39, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CA3A251E2971E71190D3001E673EF734', '2017-07-25 14:05:07', '2017-07-25 14:05:07', NULL, NULL, NULL, '2017-07-25 14:05:00', '79110829123', '123456789013', '2', '114', 23, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CA3CB8A4C889E711B25D001E673EF734', '2017-08-25 22:07:30', '2017-08-25 22:07:30', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '199', 29, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CAC441888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '0000-00-00 00:00:00', '79213993784', '123456789012', '1', '3', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CC1942888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '0000-00-00 00:00:00', '79213993784', '123456789012', '1', '5', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CCE04A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 14:09:00', '79213993784', '123456789012', '2', '83', 16, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'CF5A48888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-12 10:12:00', '79213993784', '123456789012', '2', '57', 27, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D34F45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 18:55:00', '79213993784', '123456789012', '1', '28', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D39A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:32:00', '79213993784', '123456789012', '2', '90', 16, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D563637F2E71E71190D3001E673EF734', '2017-07-25 14:43:37', '2017-07-25 14:43:37', NULL, NULL, NULL, '2017-07-25 14:43:00', '79110829123', '123456789013', '1', '116', 25, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D6D948888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-14 11:45:00', '79213993784', '123456789012', '2', '62', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D790DF85F971E71190D3001E673EF734', '2017-07-26 14:56:56', '2017-07-26 14:56:56', NULL, NULL, NULL, '2017-07-26 14:56:00', '79110829123', '123456789013', '2', '124', 24, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D86A2CA96377E711B25D001E673EF734', '2017-08-02 12:19:18', '2017-08-02 12:19:18', NULL, NULL, NULL, '2017-08-02 12:19:00', '79110829123', '123456789013', '2', '148', 0, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D8AC4A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 14:04:00', '79213993784', '123456789012', '2', '81', -15, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'D8ADFC876377E711B25D001E673EF734', '2017-08-02 12:18:22', '2017-08-02 12:18:22', NULL, NULL, NULL, '2017-08-02 12:18:00', '79110829123', '123456789013', '2', '145', 46, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DA0B4C888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:44:00', '79213993784', '123456789012', '2', '94', 8, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DA61C5531F8CE711B25D001E673EF734', '2017-08-28 21:33:03', '2017-08-28 21:33:03', NULL, NULL, NULL, '2017-08-28 21:33:00', '79218587251', '123456789013', '2', '208', 31, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DAE590F38E70E71190D3001E673EF734', '2017-07-24 19:41:33', '2017-07-24 19:41:33', NULL, NULL, NULL, '2017-07-24 19:41:00', '79213993784', '123456789012', '2', '111', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DDF14B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:44:00', '79213993784', '123456789012', '2', '93', 6, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DE2844888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 15:53:00', '79213993784', '123456789012', '1', '18', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DF9073A5C889E711B25D001E673EF734', '2017-08-25 22:07:32', '2017-08-25 22:07:32', NULL, NULL, NULL, '2017-08-25 22:07:00', '79218587251', '123456789013', '2', '201', 34, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'DF9A1CB06377E711B25D001E673EF734', '2017-08-02 12:19:29', '2017-08-02 12:19:29', NULL, NULL, NULL, '2017-08-02 12:19:00', '79110829123', '123456789013', '2', '149', 51, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E1B19D207C89E711B25D001E673EF734', '2017-08-25 12:59:47', '2017-08-25 12:59:47', NULL, NULL, NULL, '2017-08-25 12:59:00', '79218587251', '123456789013', '2', '197', 35, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E3B2F65A3078E711B25D001E673EF734', '2017-08-03 12:44:33', '2017-08-03 12:44:33', NULL, NULL, NULL, '2017-08-03 12:44:00', '79110829123', '123456789013', '1', '159', 25, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E3F846888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 13:29:00', '79213993784', '123456789012', '2', '44', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E45247888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 13:41:00', '79213993784', '123456789012', '2', '47', 25, 0, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E5DB18273078E711B25D001E673EF734', '2017-08-03 12:43:06', '2017-08-03 12:43:06', NULL, NULL, NULL, '2017-08-03 12:43:00', '79110829123', '123456789013', '1', '158', 25, -1, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E7F0655BEC75E711B25D001E673EF734', '2017-07-31 15:32:46', '2017-07-31 15:32:46', NULL, NULL, NULL, '2017-07-31 15:32:00', '79110829123', '123456789013', '4', '139', 26, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E84F7144C672E71190D3001E673EF734', '2017-07-27 15:22:33', '2017-07-27 15:22:33', NULL, NULL, NULL, '2017-07-27 15:22:00', '79110829123', '123456789013', '2', '129', 25, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'E9EA47888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-11 15:07:00', '79213993784', '123456789012', '2', '53', 27, -1, -1, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'ED1B45888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-06 18:51:00', '79213993784', '123456789012', '1', '26', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F01E65B87677E711B25D001E673EF734', '2017-08-02 14:35:44', '2017-08-02 14:35:44', NULL, NULL, NULL, '2017-08-02 14:35:00', '79110829123', '123456789013', '1', '156', 25, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F026776BEB75E711B25D001E673EF734', '2017-07-31 15:26:03', '2017-07-31 15:26:03', NULL, NULL, NULL, '2017-07-31 15:26:00', '79110829123', '123456789013', '2', '138', 26, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F34246888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 11:57:00', '79213993784', '123456789012', '1', '37', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F40B77A72B88E711B25D001E673EF734', '2017-08-23 20:51:13', '2017-08-23 20:51:13', NULL, NULL, NULL, '2017-08-23 20:51:00', '79218587251', '123456789013', '2', '188', 36, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F44A4B888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-24 12:23:00', '79213993784', '123456789012', '2', '87', 4, 0, 0, 0),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F5842A20BA81E711B25D001E673EF734', '2017-08-15 16:03:26', '2017-08-15 16:03:26', NULL, NULL, NULL, '2017-08-15 16:03:00', '79218587251', '123456789013', '2', '176', 37, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F6A648888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-13 14:46:00', '79213993784', '123456789012', '2', '60', 27, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F6A745888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-08 09:42:00', '79213993784', '123456789012', '1', '31', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F6F348888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-17 12:24:00', '79213993784', '123456789012', '2', '63', 24, -1, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F8AABC579081E711B25D001E673EF734', '2017-08-15 11:04:20', '2017-08-15 11:04:20', NULL, NULL, NULL, '2017-08-15 11:04:00', '79218587251', '123456789013', '2', '171', 36, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'F99A41888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '0000-00-00 00:00:00', '79213993784', '123456789012', '1', '2', 23, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'FEC045888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-08 09:44:00', '79213993784', '123456789012', '1', '32', 22, -1, -1, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'FF454A888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-21 13:46:00', '79213993784', '123456789012', '2', '77', 22, 0, 0, -1),
(x'5AAAA43AA14AE711B02EA81E843486A3', x'FF5B46888870E71190D3001E673EF734', '2017-07-24 18:55:36', '2017-07-24 18:55:36', NULL, NULL, NULL, '2017-07-10 12:05:00', '79213993784', '123456789012', '2', '38', 22, -1, -1, 0);

-- 
-- Вывод данных для таблицы bpc_info
--
-- Таблица areal_cli.bpc_info не содержит данных

-- 
-- Вывод данных для таблицы entrypoints
--
-- Таблица areal_cli.entrypoints не содержит данных

-- 
-- Вывод данных для таблицы fieldtype
--
INSERT INTO fieldtype VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'070587C891D14D4D855DC392CC0F9AE7', '2012-01-20 14:40:21', '2017-07-20 19:30:23', NULL, NULL, NULL, 'RTF', 0, 'RTF ?????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0DFD5D53226AC2469BAD3826D9BA4590', '2012-01-20 14:40:19', '2017-07-20 19:30:23', NULL, NULL, NULL, 'StructType', 2, '??? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0E0E9768303AE34BBF7B07BD26194226', '2012-01-20 14:40:19', '2017-07-20 19:30:23', NULL, NULL, NULL, 'MULTIREF', 4, '????????????? ??????', -1, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0E966C3308625946A524419EFD682B68', '2012-01-20 14:40:19', '2017-07-20 19:30:23', NULL, NULL, NULL, 'Image', 0, '??????????? (????????)', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'119CFDAF7CA1A3469DB157D627D33DF1', '2012-01-20 14:40:20', '2017-07-20 19:30:23', NULL, NULL, NULL, 'WFFuncParam', 2, '??????? ??????????? ????????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'12EEAA312481754EBD16698F4235234B', '2012-01-20 14:40:20', '2017-07-20 19:30:23', NULL, NULL, NULL, 'ReportType', 2, '??????? ??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'130ED29361B9474DBEEEDCEEBAFCAC62', '2012-01-20 14:40:21', '2017-07-20 19:30:23', NULL, NULL, NULL, 'Education', 2, '???????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'14AFD3A4DCC1514D969C8CB52FA64346', '2013-07-10 18:50:53', '2017-07-20 19:30:23', NULL, NULL, NULL, 'CustomControl', 5, '??????????? ???????  ??? ?????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'18153A059FCAC94E99311C4AB23C54CE', '2012-01-20 14:40:19', '2017-07-20 19:30:23', NULL, NULL, NULL, 'Integer', 0, '????? ?????', 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'208F8A9E26619940B23E30426F9BDC04', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'URL', 0, '????? ??????? ? ????????', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'24B86D7EF796A443A9D60CB89A66FE20', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'TypeStyle', 2, '??????? ????????? ???? ????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'28375783F0580E40A5A6F407682050ED', '2012-01-20 14:40:22', '2017-07-20 19:30:24', NULL, NULL, NULL, 'Days', 3, '????? ??? ? ??????', 0, '1', '31', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'2B9FC453B8526A44BBF4F90A068EA396', '2012-01-20 14:40:22', '2017-07-20 19:30:24', NULL, NULL, NULL, 'ReplicationType', 2, '??????? ?????????? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'2F775E9F99BF5F44AF3FFD18EDDA92C5', '2012-01-20 14:40:22', '2017-07-20 19:30:24', NULL, NULL, NULL, 'Numeric', 0, '?????', 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'382838929000504DB8E3262D094E3DFE', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'NumerationRule', 2, '??????? ?????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'39CFD2BFEB805342A64A24C116D26991', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'WFProcessState', 2, '????????? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'3A3878A9883FD34787A231AF949E53B1', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'MenuActionType', 2, '??????? ???????? ??? ?????? ?????? ????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'40D06AC61A2F4441AD0F483A99E89F0C', '2012-01-20 14:40:20', '2017-07-20 19:30:24', NULL, NULL, NULL, 'WFShortcutType', 2, '???????? ???????, ??????? ????? ????????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'48E476E732F57D41B8D77D5B47FCCD6F', '2012-01-20 14:40:20', '2017-07-20 19:30:24', NULL, NULL, NULL, 'String', 0, '?????? ???????????? ?????', -1, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'49C996F8B1BADA43BB19007C00353C42', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'Seconds', 3, '????? ??????', 0, '0', '59', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'4E199AA330CFC04F92980FFD1A7B0707', '2012-01-20 14:40:19', '2017-07-20 19:30:24', NULL, NULL, NULL, 'VHAlignment', 2, '????????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'4E5C4BC769C18B48AD39568F8061E4A0', '2012-01-20 14:40:20', '2017-07-20 19:30:24', NULL, NULL, NULL, 'Memo', 0, '????????????? ???? ??? ????? ??????????', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5DBA9EA722D3CD4598BA73511319CE19', '2012-01-20 14:40:20', '2017-07-20 19:30:24', NULL, NULL, NULL, 'MasterString', 0, '?????? ?????', -1, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E820B7D3C8CA244AC6EE53812337737', '2012-01-20 14:40:21', '2017-07-20 19:30:24', NULL, NULL, NULL, 'CurrencyType', 2, '?????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E9603EC041094438B81FAA4AADEBC4A', '2012-01-20 14:40:22', '2017-07-20 19:30:25', NULL, NULL, NULL, 'InfoStoreType', 2, '??? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'62A2627C8D09A546AFDCC0286C87EDCC', '2012-01-20 14:40:21', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Date', 0, '????', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'63D6B9F8FA25734797AF43C663D098C8', '2012-01-20 14:40:19', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Autoincrement', 0, NULL, 0, NULL, NULL, 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'6531AF860CC4E14188E2DE89D2C1BF84', '2012-01-20 14:40:21', '2017-07-20 19:30:25', NULL, NULL, NULL, 'DevelopmentBase', 2, '????????? ??????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'65348B4111516148B4C5E9535B3FD7B3', '2013-01-28 13:13:46', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Quarter', 2, '???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'661E7836D4C89B4C9F4109D999E4CFB0', '2012-01-20 14:40:19', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Months', 2, '??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'728E3461855DE34892C434841FA1AA8F', '2012-01-20 14:40:19', '2017-07-20 19:30:25', NULL, NULL, NULL, 'ColumnSortType', 2, '??????? ????????? ?????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'794061085D25D54FABBEDE9BC7987090', '2012-01-20 14:40:21', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Boolean', 2, '?? / ???', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7A49AD62E1F3494A80A0A5E19E9BE068', '2012-01-20 14:40:20', '2017-07-20 19:30:25', NULL, NULL, NULL, 'JournalLinkType', 2, '??? ????? ???????? ???? ? ??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7B8AB80EDCF2524F9B7D3D4E61B55C81', '2012-01-20 14:40:19', '2017-07-20 19:30:25', NULL, NULL, NULL, 'TargetType', 2, '??????? ?????? ??????????, ???? ????? ?????????????? ???', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8608384640BAA948AAF5B8B138FB38C8', '2012-01-20 14:40:21', '2017-07-20 19:30:25', NULL, NULL, NULL, 'E-MAIL', 0, '???????? ?????', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'875B1E3EC05C2B4E91D257077FD2CDBB', '2012-01-20 14:40:20', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Time', 0, '?????', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', '2014-08-27 12:13:12', '2017-07-20 19:30:25', NULL, NULL, NULL, 'ParityType', 2, '????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8F47A07A0CA8254B9425A540399C6705', '2012-01-20 14:40:20', '2017-07-20 19:30:25', NULL, NULL, NULL, 'DateTime', 0, '???? ? ?????', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'91A380866B51DD46B994A3A74F3BCEE3', '2012-01-20 14:40:20', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Minutes', 3, '????? ??????', 0, '0', '59', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9243EDA963BAE84CB2B1BB0047848ED3', '2012-01-20 14:40:21', '2017-07-20 19:30:25', NULL, NULL, NULL, 'Hours', 3, '????? ????', 0, '0', '23', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9313F4BAD350454D96AF56B8415569D8', '2012-01-20 14:40:20', '2017-07-20 19:30:25', NULL, NULL, NULL, 'MesureFormat', 2, '?????? ??????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'961085CC094CE749A541D00372E6D444', '2013-06-11 13:02:16', '2017-07-20 19:30:25', NULL, NULL, NULL, 'ExportType', 2, '??? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9BAEE12ABF21B44BA554096D5B959903', '2012-01-20 14:40:19', '2017-07-20 19:30:26', NULL, NULL, NULL, 'WFStepClass', 2, '??? ???? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9DF4659492B4B34D8052290BEC7E9E2B', '2012-01-20 14:40:19', '2017-07-20 19:30:26', NULL, NULL, NULL, 'Reference', 4, '??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A265C1406720474BA7A0624218DC70B2', '2014-04-15 11:45:12', '2017-07-20 19:30:26', NULL, NULL, NULL, 'Birthday', 0, '???? ? ?????', 0, NULL, NULL, 0, 2, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A97386691DC5164C8EED7D8810FFF900', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'DayInWeek', 2, '???? ??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AC992E5363D5D44BAC7A66DD6D7DD243', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'GeneratorStyle', 2, 'GeneratorStyle', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B02DEF620198924FBDD07F52BA87CEE6', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'PlatType', 2, '??? ???????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B0D7CA66564368479AED471FFB780C23', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'msgState', 2, '????????? ??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B40D6B5ED7B42E44AEB5B2B35F51FA54', '2012-01-20 14:40:21', '2017-07-20 19:30:26', NULL, NULL, NULL, 'OnJournalRowClick', 2, '???????? ??? ???????? ?????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B736F5EE412A1048B1ED7FB8557C25B9', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'PartType', 2, 'PartType', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B7E0814A6D0F1547942EC38398FC9EA2', '2012-01-20 14:40:21', '2017-07-20 19:30:26', NULL, NULL, NULL, 'MultiLanguage Memo', 0, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B8FD39DBA4C2534AA357281F13BD16AE', '2012-01-20 14:40:19', '2017-07-20 19:30:26', NULL, NULL, NULL, 'HTML', 0, '???????? ? ??????? HTML', 0, NULL, NULL, -1, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BB4E2D1305A56849BC1C50716757A2C5', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'ReferenceType', 2, 'ReferenceType', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BBD7C8B4A25D1B48B6F9406635CC0ADF', '2012-01-20 14:40:19', '2017-07-20 19:30:26', NULL, NULL, NULL, 'stateNomen', 2, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BE284B2A37ECFF42BE74A891808C4361', '2012-01-20 14:40:20', '2017-07-20 19:30:26', NULL, NULL, NULL, 'ConditionType', 2, '???????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', '2012-01-20 14:40:19', '2017-07-20 19:30:26', NULL, NULL, NULL, 'FolderType', 2, '??? ?????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C00BE4D87950314B8CD5BBC66BAFA683', '2012-01-20 14:40:21', '2017-07-20 19:30:26', NULL, NULL, NULL, 'Button', 5, NULL, 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C2DE53F44B73964DBF2F89A0B0332CB9', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'ID', 0, '?????????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C340EA421CD62F46AF6F314D2F0000E1', '2012-01-20 14:40:19', '2017-07-20 19:30:27', NULL, NULL, NULL, 'File', 0, '????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C48D9EC186B1F547B49F644C8C795459', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'msgResult', 2, '?????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C608D44CBE64964787E545A26D3B3DDA', '2012-01-20 14:40:19', '2017-07-20 19:30:27', NULL, NULL, NULL, 'PartAddBehaivor', 2, '????????? ??? ?????????? ?????? ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'C7FEC37988B7224E8BE3F34759F1190C', '2012-01-20 14:40:22', '2017-07-20 19:30:27', NULL, NULL, NULL, 'ExtentionType', 2, '??? ??????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'D2A8289A6E0CBF4FAF397EA43298B2F9', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'OrgPrefix', 3, '??????? ???. ??????', 0, '0', '49', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DF53B3432350CD48AC0F5142BB4F1330', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'Sex', 2, '??????? / ???????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E0280E0D19D66A49BF995F9F28321C74', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'YesNo', 2, '?? / ??? (0 ??? 1)', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E15AE3F962B892419FB50F7DD6A5BF03', '2012-01-20 14:40:19', '2017-07-20 19:30:27', NULL, NULL, NULL, 'AggregationType', 2, '??????? ????????? ?? ????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E47F3330E2A570448B995F37A5F1947D', '2012-01-20 14:40:20', '2017-07-20 19:30:27', NULL, NULL, NULL, 'Percent', 3, '0-100 %', 0, '0', '100', 0, 1, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E5FEA67D39955749BBBCCA7C4E34FF21', '2012-01-20 14:40:21', '2017-07-20 19:30:28', NULL, NULL, NULL, 'Password', 0, '??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E8905A69C55FFC4081B8E84551EF4DDF', '2012-01-20 14:40:21', '2017-07-20 19:30:28', NULL, NULL, NULL, 'WFFuncState', 2, '????????? ??????? ? ?????? ????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, 'Employment', 2, '?????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F7819EB0736C144EB977F40CEC9B200C', '2012-01-20 14:40:22', '2017-07-20 19:30:28', NULL, NULL, NULL, 'ReferenceSQL', 4, '?????? ?? ???????? ?????? - SQL ??????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F7A946DE1BD2FB43BD3EDF6E82BD9477', '2012-01-20 14:40:21', '2017-07-20 19:30:28', NULL, NULL, NULL, 'TriState', 2, '?? / ??? / ?? ??????????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F9C1F4F3C381A64598755A31414D9CA7', '2013-05-06 12:13:04', '2017-07-20 19:30:28', NULL, NULL, NULL, 'Panel', 5, '???? ??? ??????????? ?????????????? ?????? ? ??? ?????', 0, NULL, NULL, 0, 0, 0),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FE94C47845AC134AB677A0BB3FDD793E', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, 'MultiLanguage String', 0, '?????? ? ?????????? ??????????????', -1, NULL, NULL, 0, 0, 0);

-- 
-- Вывод данных для таблицы filterfieldgroup
--
INSERT INTO filterfieldgroup VALUES
(x'24DFB005D858294BAD90CA9C426A99D8', x'0D32CF6416AF7849931DEC69871EEEBA', '2017-06-05 17:27:10', '2017-07-20 19:29:46', NULL, NULL, NULL, 0, 'fGroup', '????????', 0),
(x'2D158DEE75A1ED4696EC2E0B19F13088', x'1179A8C9C1790846B7E664346683475F', '2017-06-05 17:27:11', '2017-07-20 19:29:46', NULL, NULL, NULL, 0, 'fGroup', '???', 0),
(x'05579817DD4C91498B464AA503560B22', x'2552160EC4C5C646BD0E9601CD7B0BA9', '2017-06-05 17:27:10', '2017-07-20 19:29:46', NULL, NULL, NULL, 0, 'fGroup', '?????? ??????????', 0),
(x'702C3CFDBCB3954A98311DB91ED6FF59', x'278C1C39D9AA29479877DD87D2A9404E', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 0, 'fGroup', '??????????', 0),
(x'41E45A120C09504F858CF04C03DFB877', x'57FA1F00CC2B8B4287011B1125821231', '2017-06-05 17:27:11', '2017-07-20 19:29:46', NULL, NULL, NULL, 0, 'fGroup', '????????', 0),
(x'0752D68639D4B84FA618E16AA4B9C7B3', x'62E2529A29D5674B936E3E134FA5F15D', '2017-06-05 17:27:10', '2017-07-20 19:29:46', NULL, NULL, NULL, 0, 'fGroup', '??????????', 0),
(x'0BD43AD9C2CDFF48B64203D74D2AD26C', x'69AA6209ABFD104E890A4CFA4DABFD75', '2017-07-20 17:58:38', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????????', 0),
(x'FAE3E6A670A7644783805809EFAD7EB1', x'70815FC102386640B24987366F387513', '2017-07-20 17:58:39', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '???????? ???', 0),
(x'13C4DB7814202741BC0AA73A4C48E1A0', x'8A50201216FDA94B9B781C5B94F98964', '2017-07-20 17:58:39', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '??? ??????', 0),
(x'8B381BA09D21284C9DAD1EB0AD335175', x'8D7CFFF9F55C3A4698FBA3F7485E24E2', '2017-06-05 17:27:11', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '??????', 0),
(x'FE38AEB336CF27419A6290CA5C342314', x'9266BB9B34FBAC409492AEF9F7869DBB', '2017-06-05 17:27:11', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????????????', 0),
(x'08AED59498D66B49BDCCCCAA48DB7BBA', x'9C18B18609187F4FB7DEDE5788A873C7', '2017-06-05 17:27:09', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '??????', 0),
(x'DF472CDCDDA6BC4C9C464D9323257B3C', x'C2E574F94A673540B49C9C4680CBC5EA', '2017-06-05 17:27:10', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????????', 0),
(x'BE482BF13E897043936D9ADCEC0792F0', x'DF80F3A618824E4DBC60B687D23AE66B', '2017-06-05 17:27:10', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????', 0),
(x'8A9B23A5D46DDC4580E8254EDB431172', x'E5508977D4EDFC42B8AC015EC668C6FC', '2017-06-05 17:27:10', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '?????? ????????????', 0),
(x'B0E71995CEDA9542B766E5A25153D048', x'E805028F60736C4E973FE517C65AF65D', '2017-06-05 17:27:11', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????????', 0),
(x'5C81F22DEB16F84CB3976E91B25F9A21', x'ECBBCEE1E134A94991746737BA21932C', '2017-06-05 17:27:10', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '????', 0),
(x'B833633DB7CA85449C53855D214B0239', x'FCC22FE6655A4F44AD7E27B025E27794', '2017-06-05 17:27:11', '2017-07-20 19:29:47', NULL, NULL, NULL, 0, 'fGroup', '??????', 0);

-- 
-- Вывод данных для таблицы filters
--
INSERT INTO filters VALUES
(x'FAE3E6A670A7644783805809EFAD7EB1', x'25A0E446218B154A8CE7D425ABD357B5', '2017-07-20 17:58:39', '2017-07-20 19:29:55', NULL, NULL, NULL, 'arsms', '?????? ??? ???', NULL),
(x'24DFB005D858294BAD90CA9C426A99D8', x'2D0CD5040C162148BB3402306CB8A1DA', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'bpc', '?????? ??? ??????', NULL),
(x'5C81F22DEB16F84CB3976E91B25F9A21', x'3AD3A87BB33EC14F9A3DD8A480E52DB2', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'bprcfg', '?????? ??? ????????? ????', NULL),
(x'05579817DD4C91498B464AA503560B22', x'4EF5BA71DFEE9241BFA672352555F927', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'bpu', '?????? ??? ?????????', NULL),
(x'8A9B23A5D46DDC4580E8254EDB431172', x'5080ECE6944E17428857A0AFD148A62F', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZSystem', '?????? ??? ????.: ????????? ??????', '???????? ??????????? ???????? ?????????????. ?? ???????? ?????? ?????????? ????????????? ???????, ? ??????? ????????? ??? ?????????? ? ????????? ?????????????.'),
(x'FE38AEB336CF27419A6290CA5C342314', x'55F634C583306740ACDA9E807965EE3C', '2017-06-05 17:27:11', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZUsers', '?????? ??? ??????????: ????????????', '???????? ???????? ?????? ????????????? ? ?????? ????? ????????????? ???????.'),
(x'0BD43AD9C2CDFF48B64203D74D2AD26C', x'5B07EAC574B6ED42BE1A1E497BFC01E6', '2017-07-20 17:58:38', '2017-07-20 19:29:56', NULL, NULL, NULL, 'arlog', '?????? ??? ???????? ??????? ??????????', NULL),
(x'2D158DEE75A1ED4696EC2E0B19F13088', x'80110CFB3370C941833146C5BC38B4CD', '2017-06-05 17:27:11', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZwp', '?????? ??? ???????? ???', '???????? ????????? ????????? ??????????????????? ???????? ????? ? ??????????? ??? ????????????????.'),
(x'DF472CDCDDA6BC4C9C464D9323257B3C', x'9CB33F80F7971F4C9BFA4FD91147D0D6', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'STDNumerator', '?????? ??? ?????????', NULL),
(x'B833633DB7CA85449C53855D214B0239', x'A4E4B35C97430B4BB99EFA795047B025', '2017-06-05 17:27:11', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZJrnl', '?????? ??? ???????? ???????', '???????? ????????? ??????, ??????? ???????????? ??? ?????? ? ?????????? ??????????. ? ??????? ????? ???????????? ????????? ??????, ??? ?????????? ?????.'),
(x'13C4DB7814202741BC0AA73A4C48E1A0', x'A9078DADC4ADE84B865E88E975E61BB1', '2017-07-20 17:58:39', '2017-07-20 19:29:56', NULL, NULL, NULL, 'armd', '?????? ??? ??????????', NULL),
(x'B0E71995CEDA9542B766E5A25153D048', x'A9C54D30641176468F5BC08EFD98ABBD', '2017-06-05 17:27:11', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZExt', '?????? ??? ?????????? ????????????????', '??????? ?????????????? ?????????? ??????? (ADDINS). '),
(x'0752D68639D4B84FA618E16AA4B9C7B3', x'B39538B6E3B1084EBB2B80FBBBBB06D1', '2017-06-05 17:27:10', '2017-07-20 19:29:56', NULL, NULL, NULL, 'MTZMetaModel', '?????? ??? ????.: ?????????? ???????', '????????, ??????? ???????? ????????????? ?????????? ? ??????????? ???????????? ? ??????? ????????? ??????????.'),
(x'41E45A120C09504F858CF04C03DFB877', x'BF5860A41CE94F4CB40C149CFE6A9E3B', '2017-06-05 17:27:11', '2017-07-20 19:29:57', NULL, NULL, NULL, 'MTZRprt', '?????? ??? ???????? ??????', '???????? ????????? ???????? ?????, ??????? ???????????? ? ???.'),
(x'702C3CFDBCB3954A98311DB91ED6FF59', x'C0099976F0BD0A45BB5CB2D587754487', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 'arc', '?????? ??? ??????', NULL),
(x'BE482BF13E897043936D9ADCEC0792F0', x'E52BCA00B03BC0458EF4F53AA167D1AC', '2017-06-05 17:27:10', '2017-07-20 19:29:57', NULL, NULL, NULL, 'bpdr', '?????? ??? ???? ??????????', NULL),
(x'8B381BA09D21284C9DAD1EB0AD335175', x'F74DFC28FEE4564186189BC97D9CA3E4', '2017-06-05 17:27:11', '2017-07-20 19:29:57', NULL, NULL, NULL, 'MTZFltr', '?????? ??? ???????? ???????', '???????? ????????? ????????? ???????, ??????? ???????????? ??? ??????????? ????????? ??????????, ??????? ???????????? ? ??????? , ?????? ? ?.?.'),
(x'08AED59498D66B49BDCCCCAA48DB7BBA', x'F88339811CBB87478EB29B921E1B134C', '2017-06-05 17:27:09', '2017-07-20 19:29:57', NULL, NULL, NULL, 'bpdi', '?????? ??? ?????????', '????????? ???? ??????????');

-- 
-- Вывод данных для таблицы genpackage
--
INSERT INTO genpackage VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8C53A112A8EE714A9C8E525C175FC1EB', '2012-01-20 14:40:23', '2017-07-20 19:30:18', NULL, NULL, NULL, '??????? ????????');

-- 
-- Вывод данных для таблицы groups
--
-- Таблица areal_cli.groups не содержит данных

-- 
-- Вывод данных для таблицы iu_crole
--
INSERT INTO iu_crole VALUES
(x'4A812E80DC98274DAFD6EC9AA85CFCE2', x'4697339E44864B49BD45ADC99885493A', '2017-06-06 20:59:35', '2017-07-10 15:40:14', NULL, NULL, NULL, 0, '????????????', 0),
(x'4A812E80DC98274DAFD6EC9AA85CFCE2', x'4F7BF9AD8E467B46BBA37D9EE6640205', '2017-06-06 20:59:27', '2017-07-10 15:40:14', NULL, NULL, NULL, 0, '?????????????', 0);

-- 
-- Вывод данных для таблицы iu_int_modules
--
-- Таблица areal_cli.iu_int_modules не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_def
--
-- Таблица areal_cli.iu_rcfg_def не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_docmode
--
-- Таблица areal_cli.iu_rcfg_docmode не содержит данных

-- 
-- Вывод данных для таблицы iu_rcfg_mod
--
-- Таблица areal_cli.iu_rcfg_mod не содержит данных

-- 
-- Вывод данных для таблицы iu_u_def
--
-- Таблица areal_cli.iu_u_def не содержит данных

-- 
-- Вывод данных для таблицы journal
--
INSERT INTO journal VALUES
(x'EA3CF2635E109342AD567FFE854E0C0C', x'022A5BFF15052148B94CADC98311E0E2', '2017-06-05 17:27:10', '2017-07-20 19:30:16', NULL, NULL, NULL, '?????????', '?????????', '?????? ??? ?????????? ????: ', 'icon-user', 0),
(x'C86383A90863714595D733F2B7B19A7A', x'030D7B74CAF2EE4791FEB74C6AB69ADC', '2017-06-05 17:27:10', '2017-07-20 19:30:16', NULL, NULL, NULL, '?????????', '?????????', '?????? ??? ?????????? ????: ????????? ???? ??????????', 'icon-application_side_tree', 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'0AE21DCF079D7F46BEBBD5346DEBE634', '2017-07-20 17:58:38', '2017-07-20 19:30:16', NULL, NULL, NULL, '???????? ??????? ??????????', '???????? ??????? ??????????', '?????? ??? ?????????? ????: ', NULL, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'149FE49103F1CA4FB0C2EA74FBB07C7E', '2017-06-05 17:27:11', '2017-07-20 19:30:16', NULL, NULL, NULL, '????.: ????????? ??????', '????.: ????????? ??????', '?????? ??? ?????????? ????: ???????? ??????????? ???????? ?????????????. ?? ???????? ?????? ?????????? ????????????? ???????, ? ??????? ????????? ??? ?????????? ? ????????? ?????????????.', NULL, 0),
(x'5FE24E9785AAAE4696C8E7CEAC10D881', x'1FB96BF5B003DB4C945789DFECB5F1C0', '2017-07-20 17:58:39', '2017-07-20 19:30:16', NULL, NULL, NULL, '??????????', '??????????', '?????? ??? ?????????? ????: ', 'icon-book', 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'21F714CBE2EC604AAE60B28DFB88C0E6', '2017-07-20 17:58:39', '2017-07-20 19:30:17', NULL, NULL, NULL, '???', '???', '?????? ??? ?????????? ????: ', 'icon-comments', 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'477A60FD3CD7074E8A74979A9CDADC13', '2017-06-05 17:27:11', '2017-07-20 19:30:17', NULL, NULL, NULL, '???????? ???????', '???????? ???????', '?????? ??? ?????????? ????: ???????? ????????? ??????, ??????? ???????????? ??? ?????? ? ?????????? ??????????. ? ??????? ????? ???????????? ????????? ??????, ??? ?????????? ?????.', NULL, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'51B56174DF2365418481E1A56B146922', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, '??????', '??????', '?????? ??? ?????????? ????: ', 'icon-user', 0),
(x'A3669D7F7C239C4AAFB4787081A17353', x'5206F8A2364D3A44B3644FDC53E603EB', '2017-06-05 17:27:11', '2017-07-20 19:30:17', NULL, NULL, NULL, '???????? ???????', '???????? ???????', '?????? ??? ?????????? ????: ???????? ????????? ????????? ???????, ??????? ???????????? ??? ??????????? ????????? ??????????, ??????? ???????????? ? ??????? , ?????? ? ?.?.', NULL, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'66FCEA871F75EC458A46D6AEB48827E7', '2017-06-05 17:27:11', '2017-07-20 19:30:17', NULL, NULL, NULL, '??????????: ????????????', '??????????: ????????????', '?????? ??? ?????????? ????: ???????? ???????? ?????? ????????????? ? ?????? ????? ????????????? ???????.', NULL, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'6BAB4ECB4FBDB24A8BBC740CCA7E994E', '2017-06-05 17:27:11', '2017-07-20 19:30:17', NULL, NULL, NULL, '???????? ??????', '???????? ??????', '?????? ??? ?????????? ????: ???????? ????????? ???????? ?????, ??????? ???????????? ? ???.', NULL, 0),
(x'C841F119F05EA04D8A7AC95C55006D3B', x'6EEFC8AD03F699408A1215E4212D34DD', '2017-06-05 17:27:12', '2017-07-20 19:30:17', NULL, NULL, NULL, '?????????? ????????????????', '?????????? ????????????????', '?????? ??? ?????????? ????: ??????? ?????????????? ?????????? ??????? (ADDINS). ', NULL, 0),
(x'53D2EF80ACAE7F41873F49757B64EEED', x'70E80F66690A8E429E5F86953C087054', '2017-06-05 17:27:10', '2017-07-20 19:30:17', NULL, NULL, NULL, '???? ??????????', '???? ??????????', '?????? ??? ?????????? ????: ', 'icon-chart_org_inverted', 0),
(x'065BBC35D9EE7142B2377D2414971C04', x'83C887AB8EDD98489F9AE21BC4B74668', '2017-06-05 17:27:10', '2017-07-20 19:30:17', NULL, NULL, NULL, '?????????', '?????????', '?????? ??? ?????????? ????: ', NULL, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', x'987B1C92B6D19C4E87941CAF3D6378DD', '2017-06-05 17:27:11', '2017-07-20 19:30:17', NULL, NULL, NULL, '???????? ???', '???????? ???', '?????? ??? ?????????? ????: ???????? ????????? ????????? ??????????????????? ???????? ????? ? ??????????? ??? ????????????????.', NULL, 0),
(x'436B5C57FE19E14696E964BA2C6492F8', x'E1B2D3389AE9DA409CABDFC7670D36F2', '2017-06-05 17:27:10', '2017-07-20 19:30:18', NULL, NULL, NULL, '????.: ?????????? ???????', '????.: ?????????? ???????', '?????? ??? ?????????? ????: ????????, ??????? ???????? ????????????? ?????????? ? ??????????? ???????????? ? ??????? ????????? ??????????.', NULL, 0),
(x'E8EB8EACF3AA184FAD8201F785FFC308', x'FCC9B1795DFDE444A626B3436753ACE6', '2017-06-05 17:27:10', '2017-07-20 19:30:18', NULL, NULL, NULL, '????????? ????', '????????? ????', '?????? ??? ?????????? ????: ', 'icon-folder_user', 0);

-- 
-- Вывод данных для таблицы journalcolumn
--
INSERT INTO journalcolumn VALUES
(x'9D0C607C7020B84086FA6D646D1605F6', x'020AA59EF5801045967475134543C762', '2017-06-05 17:27:11', '2017-07-20 19:29:58', NULL, NULL, NULL, 2, '?????????', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'03D2BC4DA9EB2F45AFE915627C84D81D', '2017-06-05 17:27:11', '2017-07-20 19:29:58', NULL, NULL, NULL, 5, '???????? ???', 0, 0, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'06886DC4C5A7244980DE6E6FC5A5CC8D', '2017-06-05 17:27:11', '2017-07-20 19:29:58', NULL, NULL, NULL, 2, '?????????', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'0AAC561559C4294EBBA1BBBC6D123C3F', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 3, '???????????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'0EA37503E3A9CB438CD54842210087FA', '2017-06-05 17:27:10', '2017-07-20 19:29:58', NULL, NULL, NULL, 3, '???', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'1423E45C11F78449AD8B74DB951C9D31', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 5, 'E-Mail', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'143931ACB5CDD94E871E44A564258C3B', '2017-06-05 17:27:11', '2017-07-20 19:29:58', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'C841F119F05EA04D8A7AC95C55006D3B', x'1535FBE23A824841AC772EDE68E3F0B2', '2017-06-05 17:27:12', '2017-07-20 19:29:58', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'16C700FF86952249AB926F52C59D7CC7', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'19AA36E128E3A948A7282F977858C342', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 6, 'e-mail', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'1B5196631245C346B73FCD7B7F0EEF80', '2017-06-05 17:27:10', '2017-07-20 19:29:59', NULL, NULL, NULL, 4, '????????', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'1DDE3C811F2C5E4FAFA7F0E07C599433', '2017-07-20 17:58:39', '2017-07-20 19:29:59', NULL, NULL, NULL, 6, '?????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'1ECCF5B7ABF44A4596B11F11C7D5DC3A', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 8, '????????', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'1FA2FD0C1502BB4CBFAEDC74DF9FEC9D', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 4, '???????', 0, 0, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'2176BBC453FA1B4AAB353CF1F88DE9E9', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 4, '?????? ???????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'2520CB39B0FA974FA8DFCE81408AD82F', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 6, '????????? ?????????????', 0, 2, 0),
(x'A3669D7F7C239C4AAFB4787081A17353', x'2C71CF759AC16448BBCDA321956CFECB', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'2CAA5AE876C7D4448CB5E9D49BBA0746', '2017-06-05 17:27:11', '2017-07-20 19:29:59', NULL, NULL, NULL, 4, '???????', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'2ECA75C17947824B9B082947DFD71D15', '2017-06-05 17:27:10', '2017-07-20 19:30:00', NULL, NULL, NULL, 3, '???? ???????? ???????', 0, 0, 0),
(x'1A8497E7032A8247BDC21D7D8C36FDAC', x'3146C38BFDEC7C41A6116DCBEA8A518B', '2017-06-05 17:27:10', '2017-07-20 19:30:00', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'365085D5C7D5CA4DA4CA171D3578BFE0', '2017-06-05 17:27:11', '2017-07-20 19:30:00', NULL, NULL, NULL, 2, '???? ??????', 0, 0, 0),
(x'53D2EF80ACAE7F41873F49757B64EEED', x'39B643D839E59449999330821F0AF684', '2017-06-05 17:27:10', '2017-07-20 19:30:00', NULL, NULL, NULL, 2, '??????? ?????? ??????????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'3A931F57E3B61742AA22B4317688D535', '2017-07-20 17:58:39', '2017-07-20 19:30:00', NULL, NULL, NULL, 1, '???? ? ????? ???', 0, 2, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'3DBE3550B6720649B90B76F9333C978A', '2017-06-05 17:27:11', '2017-07-20 19:30:00', NULL, NULL, NULL, 1, '??????????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'3EF59B446FD02143AB63075F3F9C283F', '2017-06-05 17:27:11', '2017-07-20 19:30:00', NULL, NULL, NULL, 7, '?????? ????????', 0, 2, 0),
(x'A3669D7F7C239C4AAFB4787081A17353', x'3F3BF6B9D1378247BBB22F853C98E154', '2017-06-05 17:27:11', '2017-07-20 19:30:00', NULL, NULL, NULL, 2, '?????????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'41498A8895D3564C8F990E889DD09AAA', '2017-07-20 17:58:39', '2017-07-20 19:30:00', NULL, NULL, NULL, 3, '???????? ?????', 0, 0, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'417CF87FC1D1E24EB75A26FD056D1DC8', '2017-06-05 17:27:11', '2017-07-20 19:30:00', NULL, NULL, NULL, 3, '????????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'461934421FA73D4DB768C8CCB9423288', '2017-06-05 17:27:10', '2017-07-20 19:30:01', NULL, NULL, NULL, 5, '???? ? ????????????', 0, 0, 0),
(x'065BBC35D9EE7142B2377D2414971C04', x'471987397F08F24DB36CFE73CF498F9C', '2017-06-05 17:27:10', '2017-07-20 19:30:01', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'47AD836B74B3634A901ECE82BBDE6039', '2017-07-20 17:58:39', '2017-07-20 19:30:01', NULL, NULL, NULL, 5, '????? ???????', 0, 1, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'4A449FBC424C9B49A4A31B88CDA69B9D', '2017-06-05 17:27:11', '2017-07-20 19:30:01', NULL, NULL, NULL, 7, '???????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'4CA4AE77B9549A41BC6FA7E4D0664530', '2017-06-05 17:27:11', '2017-07-20 19:30:01', NULL, NULL, NULL, 5, '????????????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'4D7CB56DF55117458F4505001EA05EE2', '2017-07-20 17:58:39', '2017-07-20 19:30:01', NULL, NULL, NULL, 8, '?????? ???????', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'4FF89FAA41D6A048B98E0F55C2C1FA73', '2017-06-05 17:27:10', '2017-07-20 19:30:01', NULL, NULL, NULL, 6, '?????????? ??????????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'5135E9AB6954BC4FB94D4D05F3502912', '2017-06-05 17:27:10', '2017-07-20 19:30:01', NULL, NULL, NULL, 9, '???????', 0, 0, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', x'533F9C78DED5B14E9C2B67D5ED3F6644', '2017-06-05 17:27:11', '2017-07-20 19:30:01', NULL, NULL, NULL, 3, '??????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'54E62508D0BAD2469316FDCA8302CA22', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 3, '?????? ????????', 0, 2, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'5D79E4AF266C6247B600669E2ED24D2E', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 3, '????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'605B588E5E535E4898B0A3F39CF1669A', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 3, '?????????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'633FA9143D16ED4A8A98C3EAC31DBF3B', '2017-07-20 17:58:39', '2017-07-20 19:30:02', NULL, NULL, NULL, 7, '????????-?????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'648B957C1C42204A94B0B19BB8280352', '2017-06-05 17:27:10', '2017-07-20 19:30:02', NULL, NULL, NULL, 7, '????????? ??????', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'6F5EBD235F241847A26FB2C42A22B1D8', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 2, '???', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'7863CAD241AF454186E693DC3AF5AE8C', '2017-07-20 17:58:39', '2017-07-20 19:30:02', NULL, NULL, NULL, 4, '?????????', 0, 0, 0),
(x'436B5C57FE19E14696E964BA2C6492F8', x'7AE358AB838A9849B91EEEB287624BBF', '2017-06-05 17:27:10', '2017-07-20 19:30:02', NULL, NULL, NULL, 2, '???? ??????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'7DAA2F7427DF32479E781906FE797672', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 8, '???????????', 0, 0, 0),
(x'A3669D7F7C239C4AAFB4787081A17353', x'7DB46B418521A54FAE2AE8F6D0209529', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 3, '????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'8006FD5524D8D64C9022D80B75F0DF30', '2017-06-05 17:27:11', '2017-07-20 19:30:02', NULL, NULL, NULL, 7, '??????? ??????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'82B4D64648226B45BB88D55702CBB9F7', '2017-06-05 17:27:10', '2017-07-20 19:30:03', NULL, NULL, NULL, 6, '????????? ?? ?????', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'831399F8208A8349B7AD996F8DF5EC2D', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 6, '?????', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'84C94A31E0C67B4790998A18FEA44091', '2017-06-05 17:27:11', '2017-07-20 19:30:03', NULL, NULL, NULL, 4, '??? ??? ?????', 0, 0, 0),
(x'C841F119F05EA04D8A7AC95C55006D3B', x'86C9ACF2DD597E4E86B36768CB10F821', '2017-06-05 17:27:12', '2017-07-20 19:30:03', NULL, NULL, NULL, 2, '??? ??????????', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'882EEAAA9A4F1B45959D2CFCA022C22D', '2017-06-05 17:27:10', '2017-07-20 19:30:03', NULL, NULL, NULL, 4, '???????? ????', 0, 0, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'9119D10CACA1DA478BA6B3C52D66D077', '2017-06-05 17:27:11', '2017-07-20 19:30:03', NULL, NULL, NULL, 9, 'Login', 0, 0, 0),
(x'436B5C57FE19E14696E964BA2C6492F8', x'974DD7BE81BB7A4FA10531E4E15FA3C5', '2017-06-05 17:27:10', '2017-07-20 19:30:03', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', x'97558C485C176B45A18A68952098BFC4', '2017-06-05 17:27:11', '2017-07-20 19:30:03', NULL, NULL, NULL, 4, '????????? ??????????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'9DCE59806D078E438981A2A05700F2F9', '2017-06-05 17:27:10', '2017-07-20 19:30:03', NULL, NULL, NULL, 1, '??????', 0, 0, 0),
(x'5FE24E9785AAAE4696C8E7CEAC10D881', x'A3B519B22DF0F74B92B6E1CD6F4F9AAB', '2017-07-20 17:58:39', '2017-07-20 19:30:04', NULL, NULL, NULL, 1, '????????  ????', 0, 0, 0),
(x'C841F119F05EA04D8A7AC95C55006D3B', x'AED38AE954F3AA4DB4D8461100E93F04', '2017-06-05 17:27:12', '2017-07-20 19:30:04', NULL, NULL, NULL, 3, '????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'AF0FFB37360ABC469E0DB4FE02476AA3', '2017-06-05 17:27:11', '2017-07-20 19:30:04', NULL, NULL, NULL, 6, '?????????? ??? ???????? ??????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'B5CBBF301FC17B44ABFAEE3FDE6DB978', '2017-06-05 17:27:10', '2017-07-20 19:30:04', NULL, NULL, NULL, 2, '???????', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'B6B011973AF48B4D87A2D5C9BE1074CA', '2017-07-20 17:58:39', '2017-07-20 19:30:04', NULL, NULL, NULL, 1, '???', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'BDBDCEAE485F924E9FE43388F83C9CD6', '2017-06-05 17:27:11', '2017-07-20 19:30:04', NULL, NULL, NULL, 8, '??????? ???????', 0, 0, 0),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'BDD8CA659D9C054D98D89E43C8E81319', '2017-06-05 17:27:11', '2017-07-20 19:30:04', NULL, NULL, NULL, 5, '???????? ?????????', 0, 0, 0),
(x'EBE854658069B34F9E73440B7BF23A3A', x'BE309D876FFA9A4E8BF89ABB5A363B0A', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 1, '???????', 0, 0, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', x'C71D7831D1C8C643833D6FEA8FAD4142', '2017-06-05 17:27:11', '2017-07-20 19:30:04', NULL, NULL, NULL, 5, '??????????', 0, 0, 0),
(x'436B5C57FE19E14696E964BA2C6492F8', x'C8CC22B8EB588B4DA29A5EE174AD77C5', '2017-06-05 17:27:10', '2017-07-20 19:30:04', NULL, NULL, NULL, 3, '????????', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'D6449EF3500DD64A9BAB63306216A3A1', '2017-07-20 17:58:39', '2017-07-20 19:30:04', NULL, NULL, NULL, 2, '?????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'D6C83F8055208F409C5A524761041601', '2017-07-20 17:58:39', '2017-07-20 19:30:04', NULL, NULL, NULL, 6, '???????????', 0, 1, 0),
(x'091E4CC6089495458C938FB65DCE1597', x'D6D2579E2407C341A20421C328A9A9D2', '2017-06-05 17:27:11', '2017-07-20 19:30:04', NULL, NULL, NULL, 2, '??????? ???? ????????????', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'D7EC93C9F5D1184EA8E15C0F6FBF1192', '2017-06-05 17:27:10', '2017-07-20 19:30:04', NULL, NULL, NULL, 2, '??????', 0, 0, 0),
(x'53D2EF80ACAE7F41873F49757B64EEED', x'D96E4AB732F9F54D899E5693C6CC8613', '2017-06-05 17:27:10', '2017-07-20 19:30:05', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'DDE7CAA6BD1B684A821AD99C0C1B7843', '2017-06-05 17:27:11', '2017-07-20 19:30:05', NULL, NULL, NULL, 5, '??? ??????', 0, 0, 0),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'E1072D7AEDA761499B3CC5580251F837', '2017-06-05 17:27:11', '2017-07-20 19:30:05', NULL, NULL, NULL, 4, '????? ??? ????????????', 0, 0, 0),
(x'9D0C607C7020B84086FA6D646D1605F6', x'E30743A16C60804A96867EB86DA5C8E3', '2017-06-05 17:27:11', '2017-07-20 19:30:06', NULL, NULL, NULL, 1, '????????', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'E8B790E5D856424B906D2634048FE615', '2017-06-05 17:27:11', '2017-07-20 19:30:06', NULL, NULL, NULL, 2, '???', 0, 0, 0),
(x'FD3E999A096CB745BFA2C5963678D0FE', x'E91B1DF33149A846924AC96C939F06B8', '2017-06-05 17:27:11', '2017-07-20 19:30:06', NULL, NULL, NULL, 1, '???????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'EFB45C8B4299A64896F8E9A445A298A5', '2017-06-05 17:27:10', '2017-07-20 19:30:06', NULL, NULL, NULL, 10, '??? ??? ?????', 0, 0, 0),
(x'E8EB8EACF3AA184FAD8201F785FFC308', x'F13D058C43CE9043B8E12850D883C659', '2017-06-05 17:27:10', '2017-07-20 19:30:06', NULL, NULL, NULL, 1, '????', 0, 0, 0),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'F21B8514E9D0AB45B309C885D7942FFB', '2017-07-20 17:58:39', '2017-07-20 19:30:06', NULL, NULL, NULL, 9, '??????? ? ?????', 0, 0, 0),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'F2B7FBBB3548614C9D42A2C92147509D', '2017-06-05 17:27:10', '2017-07-20 19:30:06', NULL, NULL, NULL, 8, 'e-mail', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'F3A364D28AE59E4F8DE0F183B3DFEBDE', '2017-06-05 17:27:10', '2017-07-20 19:30:06', NULL, NULL, NULL, 5, '???????', 0, 0, 0),
(x'42DE6524B9BEDC41A71902F924701AA8', x'F6C4E791C00D0742B49B6B3494DC3330', '2017-07-20 17:58:39', '2017-07-20 19:30:06', NULL, NULL, NULL, 3, '????? ???????', 0, 2, 0),
(x'065BBC35D9EE7142B2377D2414971C04', x'F710191A2FC4AF428C733A2D897D7B68', '2017-06-05 17:27:10', '2017-07-20 19:30:07', NULL, NULL, NULL, 2, '????? ?????????', 0, 0, 0),
(x'C86383A90863714595D733F2B7B19A7A', x'FACAF8CDB3708C468348218674F99B8D', '2017-06-05 17:27:10', '2017-07-20 19:30:07', NULL, NULL, NULL, 1, '? ?/?', 0, 1, 0);

-- 
-- Вывод данных для таблицы journalsrc
--
INSERT INTO journalsrc VALUES
(x'FD3E999A096CB745BFA2C5963678D0FE', x'0BB8769114EB534DA56DE38CF4E251F6', '2017-06-05 17:27:11', '2017-07-20 19:30:14', NULL, NULL, NULL, NULL, 2, NULL, 'autousers', '318c4552-da0e-4cc7-b45f-3822a66f0c58'),
(x'C841F119F05EA04D8A7AC95C55006D3B', x'0E3ABBEF655C0342BAD2B0AFCD332F87', '2017-06-05 17:27:12', '2017-07-20 19:30:14', NULL, NULL, NULL, NULL, 2, NULL, 'automtzext_def', 'd7e06740-2609-4aa1-8158-63ce6334a13d'),
(x'091E4CC6089495458C938FB65DCE1597', x'22FBAF97490D264496EDF0D1388F8A4B', '2017-06-05 17:27:11', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autothe_session', '55094657-fd30-42d7-be76-71a86ef8006c'),
(x'53D2EF80ACAE7F41873F49757B64EEED', x'239A970BEAC21243A96AA754E69D4AE1', '2017-06-05 17:27:10', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoiu_crole', '10e29b84-8155-471e-a84c-c8fc045e5202'),
(x'436B5C57FE19E14696E964BA2C6492F8', x'2BB92750CDDBE941B7A4276449000243', '2017-06-05 17:27:10', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'automtzapp', '8525028d-c353-4b10-83a8-48eb4d1c854b'),
(x'C86383A90863714595D733F2B7B19A7A', x'39D78BAF1543ED499BC0C3122B9E4F79', '2017-06-05 17:27:10', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoiu_int_modules', 'e64721a9-bff6-4b6f-87f9-4630b063d759'),
(x'A2298262E09B9F49806AF71F3BB3CA60', x'5EADB9F926327549A17BB6C75CFB3BB4', '2017-06-05 17:27:11', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoreports', '2f762d10-17fa-4ce9-a1fd-ed6b801a43ca'),
(x'A3669D7F7C239C4AAFB4787081A17353', x'70BA95FDC48DCB4BB1EB9CA2ECD192A2', '2017-06-05 17:27:11', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autofilters', '013ec551-5511-41dc-afce-4cb79e0998c4'),
(x'B0A86374DF26E6459BBEE35BDC45555D', x'742D7BD3B9122749802B9C240CE93143', '2017-07-20 17:58:39', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoarsms_data', '3ed3bdd1-2b94-481a-b87e-0bf049b48ed8'),
(x'EBE854658069B34F9E73440B7BF23A3A', x'75CB575A4D8A8540BA2E148A8FB15D9A', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, NULL, 2, NULL, 'autoarc_info', 'cb83e743-55aa-4b0c-8fa8-c1750f8879ea'),
(x'5FE24E9785AAAE4696C8E7CEAC10D881', x'784294B5D922EF478998165D0676425E', '2017-07-20 17:58:39', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoarmd_type', 'bf75b980-ab4b-47b1-a42e-ca7586043de5'),
(x'F0A7D18D993B004BB5F82835EF2E0191', x'827AEA99150CA54892F8D7217B9D7DBE', '2017-06-05 17:27:11', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autojournal', '86b320b0-0d9d-4714-ad02-5fab18b96c2e'),
(x'42DE6524B9BEDC41A71902F924701AA8', x'944808BBE4C24243AF08F80CCC039C37', '2017-07-20 17:58:38', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoarlog_data', '95ae8313-65d3-4cad-a7eb-3e2997e2e973'),
(x'E8EB8EACF3AA184FAD8201F785FFC308', x'A121378B05B50245B918F168025DCDF4', '2017-06-05 17:27:10', '2017-07-20 19:30:15', NULL, NULL, NULL, NULL, 2, NULL, 'autoiu_rcfg_def', '0c50c089-3ba6-4f23-bd3a-fa5fddad5028'),
(x'1A8497E7032A8247BDC21D7D8C36FDAC', x'A454F3EBDB9A714180B323448C3E7D14', '2017-06-05 17:27:10', '2017-07-20 19:30:16', NULL, NULL, NULL, NULL, 2, NULL, 'autobpc_info', '7b5c4572-5229-4780-8e80-b4465aab1709'),
(x'9D0C607C7020B84086FA6D646D1605F6', x'ADDC90D1A692A04D8C546BF78B7C9692', '2017-06-05 17:27:11', '2017-07-20 19:30:16', NULL, NULL, NULL, NULL, 2, NULL, 'autoworkplace', '2adacefa-fd0d-4526-b4d9-1001fc02d14a'),
(x'065BBC35D9EE7142B2377D2414971C04', x'B8CF8B9164BF2D458C0135883BFC14FD', '2017-06-05 17:27:10', '2017-07-20 19:30:16', NULL, NULL, NULL, NULL, 2, NULL, 'autonum_head', '1452b729-9ed3-407c-b342-af87089ca104'),
(x'EA3CF2635E109342AD567FFE854E0C0C', x'ED7105AD517BCE4598A414DC291877BA', '2017-06-05 17:27:10', '2017-07-20 19:30:16', NULL, NULL, NULL, NULL, 2, NULL, 'autoiu_u_def', 'cc4b11af-870a-4d9b-9200-242bd3d95d3d');

-- 
-- Вывод данных для таблицы localizeinfo
--
INSERT INTO localizeinfo VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'21F2858B2A00BC4ABD83F366B8ADFD0B', '2012-01-20 14:40:23', '2017-07-20 19:30:23', NULL, NULL, NULL, '???????', 'ru_ru'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FBDD86968C86B84A843A2077A830FEBD', '2012-01-20 14:40:23', '2017-07-20 19:30:23', NULL, NULL, NULL, 'English (us)', 'en_us');

-- 
-- Вывод данных для таблицы mtzapp
--
INSERT INTO mtzapp VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'14420EFF0DA74C488B800FF708B1837C', '2012-01-20 14:39:57', '2017-07-20 19:35:20', NULL, NULL, NULL, '?????????????????', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'64B14FD9C7DB244CB6AD5D2DEBFA2011', '2017-06-05 12:10:15', '2017-07-20 19:35:20', NULL, NULL, NULL, 'AREAL', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'64B719A7A2609040BF9B0CA9501B8DA8', '2012-01-20 14:39:57', '2017-07-20 19:35:21', NULL, NULL, NULL, '????', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'9FE99002EC6212409FED3589D8FD1590', '2013-11-08 13:50:49', '2017-07-20 19:35:21', NULL, NULL, NULL, 'BP3', NULL, '????? ???????? ???????????????? V3'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'CE9E6F9481728F4899D03A4F64DA5C1D', '2012-01-20 14:39:57', '2017-07-20 19:35:21', NULL, NULL, NULL, '???', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '2012-01-20 14:39:57', '2017-07-20 19:35:21', NULL, NULL, NULL, '????2', NULL, NULL);

-- 
-- Вывод данных для таблицы mtzext_def
--
-- Таблица areal_cli.mtzext_def не содержит данных

-- 
-- Вывод данных для таблицы mtzextrel
--
-- Таблица areal_cli.mtzextrel не содержит данных

-- 
-- Вывод данных для таблицы num_head
--
-- Таблица areal_cli.num_head не содержит данных

-- 
-- Вывод данных для таблицы num_zones
--
-- Таблица areal_cli.num_zones не содержит данных

-- 
-- Вывод данных для таблицы objecttype
--
INSERT INTO objecttype VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'13CDBEEE009A434999B34EAC1A9A95AC', '2014-08-26 15:41:41', '2017-07-20 19:32:19', NULL, NULL, NULL, x'9FE99002EC6212409FED3589D8FD1590', '?????????', 'bpu', 0, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, -1, -1, 'icon-user'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'15AD6D8C2238804FA381D9EA19FEAC06', '2012-01-20 14:40:15', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', '????.: ?????????? ???????', 'MTZMetaModel', -1, NULL, NULL, NULL, NULL, 0, 0, 2, '????????, ??????? ???????? ????????????? ?????????? ? ??????????? ???????????? ? ??????? ????????? ??????????.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'16319A32B3ACC24E93CE5920E84AD8E8', '2012-01-20 14:40:03', '2017-07-20 19:32:20', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '???????? ???????', 'MTZJrnl', 0, NULL, NULL, NULL, NULL, -1, 0, 2, '???????? ????????? ??????, ??????? ???????????? ??? ?????? ? ?????????? ??????????. ? ??????? ????? ???????????? ????????? ??????, ??? ?????????? ?????.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'2DDF63C79797B74AB059513B5A993734', '2014-08-26 15:41:05', '2017-07-20 19:32:20', NULL, NULL, NULL, x'9FE99002EC6212409FED3589D8FD1590', '??????', 'bpc', 0, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'37C0E0E9467C274D009D085EA9279CD2', '2012-01-20 14:39:58', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', '????.: ????????? ??????', 'MTZSystem', -1, NULL, NULL, NULL, NULL, 0, 0, 2, '???????? ??????????? ???????? ?????????????. ?? ???????? ?????? ?????????? ????????????? ???????, ? ??????? ????????? ??? ?????????? ? ????????? ?????????????.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'40B745DAF4C6974BB4EB3DE0A6C480B5', '2012-01-20 14:40:02', '2017-07-20 19:32:20', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '???????? ???', 'MTZwp', 0, NULL, NULL, NULL, NULL, -1, 0, 2, '???????? ????????? ????????? ??????????????????? ???????? ????? ? ??????????? ??? ????????????????.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'41130A55426465419A94D36FA3AA19D6', '2014-08-26 15:41:53', '2017-07-20 19:32:20', NULL, NULL, NULL, x'9FE99002EC6212409FED3589D8FD1590', '???? ??????????', 'bpdr', -1, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, 'icon-chart_org_inverted'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'709BDD25DFFD584894E5F5D6575AACB9', '2017-07-20 10:42:47', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B14FD9C7DB244CB6AD5D2DEBFA2011', '???????? ??????? ??????????', 'arlog', -1, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'7E5B4FC4C09F1443B24407235EE1E7E3', '2012-01-20 14:39:58', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B719A7A2609040BF9B0CA9501B8DA8', '??????????: ????????????', 'MTZUsers', -1, NULL, NULL, NULL, NULL, 0, -1, 2, '???????? ???????? ?????? ????????????? ? ?????? ????? ????????????? ???????.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'882F32DE48CA014E8ACDBEC71338D8CC', '2012-01-20 14:40:13', '2017-07-20 19:32:20', NULL, NULL, NULL, x'CE9E6F9481728F4899D03A4F64DA5C1D', '?????????', 'STDNumerator', 0, NULL, NULL, NULL, NULL, -1, -1, 2, NULL, 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'8FB8F3BE916E2941BAD51BA076BDE3BD', '2012-01-20 14:40:02', '2017-07-20 19:32:20', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '?????????? ????????????????', 'MTZExt', 0, NULL, NULL, NULL, NULL, -1, 0, 2, '??????? ?????????????? ?????????? ??????? (ADDINS). ', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'A308C616DEA89C40900E35D38241550D', '2014-08-26 15:42:06', '2017-07-20 19:32:20', NULL, NULL, NULL, x'9FE99002EC6212409FED3589D8FD1590', '????????? ????', 'bprcfg', 0, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, 'icon-folder_user'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'D2ED3F74E530824A8A5B9935613859C4', '2017-06-06 19:05:30', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B14FD9C7DB244CB6AD5D2DEBFA2011', '??????', 'arc', 0, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, -1, -1, 0, 'icon-user'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DD6ECA18A1559045974FA973B8762638', '2012-01-20 14:40:13', '2017-07-20 19:32:20', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '???????? ???????', 'MTZFltr', 0, NULL, NULL, NULL, NULL, -1, 0, 2, '???????? ????????? ????????? ???????, ??????? ???????????? ??? ??????????? ????????? ??????????, ??????? ???????????? ? ??????? , ?????? ? ?.?.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DDD7A30A733776488A8E52513FB49641', '2014-08-26 15:41:35', '2017-07-20 19:32:20', NULL, NULL, NULL, x'9FE99002EC6212409FED3589D8FD1590', '?????????', 'bpdi', -1, NULL, NULL, NULL, NULL, 0, 0, 0, '????????? ???? ??????????', 0, 0, 0, 'icon-application_side_tree'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E1917C473A9E1747B6D56DC9F0D7D5B5', '2017-06-06 19:05:55', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B14FD9C7DB244CB6AD5D2DEBFA2011', '??????????', 'armd', -1, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, 'icon-book'),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F925E1F51486CF4AA5281690B3C2040E', '2012-01-20 14:39:59', '2017-07-20 19:32:20', NULL, NULL, NULL, x'EB73B42E86A8AD47ABAB4E4B3642DCF2', '???????? ??????', 'MTZRprt', 0, NULL, NULL, NULL, NULL, -1, 0, 2, '???????? ????????? ???????? ?????, ??????? ???????????? ? ???.', 0, 0, NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FFEFEB7728EB0A4EA4AAAE56ACECFE6C', '2017-06-06 20:53:30', '2017-07-20 19:32:20', NULL, NULL, NULL, x'64B14FD9C7DB244CB6AD5D2DEBFA2011', '???', 'arsms', 0, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, 0, 0, 0, 'icon-comments');

-- 
-- Вывод данных для таблицы reports
--
-- Таблица areal_cli.reports не содержит данных

-- 
-- Вывод данных для таблицы rptformula
--
-- Таблица areal_cli.rptformula не содержит данных

-- 
-- Вывод данных для таблицы rptstruct
--
-- Таблица areal_cli.rptstruct не содержит данных

-- 
-- Вывод данных для таблицы sharedmethod
--
INSERT INTO sharedmethod VALUES
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'0DAF8191D0F039458CDB67CDB500C41E', '2012-01-20 14:40:22', '2017-07-20 19:31:54', NULL, NULL, NULL, 'GetFreeNumber', '????????? ????? ?? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'1808B32BED9027468ABB85B3FBA46750', '2012-01-20 14:40:23', '2017-07-20 19:31:54', NULL, NULL, NULL, 'VBNewPayOut', '??????? ????? ?????? ?? ???????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'1A9DB54F2301D3479F4FE12085C5D074', '2012-01-20 14:40:23', '2017-07-20 19:31:54', NULL, NULL, NULL, 'VBUpdateItemName', '???????? ???????? ???????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'258D7B47F74F1A49A0B0D3437EC16957', '2012-01-20 14:40:23', '2017-07-20 19:31:54', NULL, NULL, NULL, 'MakeNewFolderEC', '????? ??????? ????? ??????? ? ???????? ????????????? ?????????? (?????????? RealEstate)\r\n??? ???????? ?????? ???????? ? ???? ????????? ?????? ??, ????? ???????? ? ?????????? ?? ??????????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'36A4A142A28A1F4F999B6680DFF514DE', '2012-01-20 14:40:22', '2017-07-20 19:31:54', NULL, NULL, NULL, 'VBSaveHistory', '??????? ???????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'3A87B16FA9450F4290CECDE34B5AEE19', '2012-01-20 14:40:23', '2017-07-20 19:31:54', NULL, NULL, NULL, 'AutoCloseSession', '?????????????? ???????? ????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'45353961F7ABF74682F39B7E610DD9C0', '2012-01-20 14:40:23', '2017-07-20 19:31:54', NULL, NULL, NULL, 'VBUpdateObjName', '?????????? ????? ???????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'553B7D899965DB42AA1C54BAB3D2F597', '2012-01-20 14:40:22', '2017-07-20 19:31:54', NULL, NULL, NULL, 'GetNewNumber', '????????? ????? ?? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5CEE0C2BFA7F0D499F5AB5E8692551DD', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'EraseNumber', '??????? ????? ?? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'5E20BE73EAF75A4AA41F85E25CA6511E', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'SessionCheckPoint', '?????????????? ???????? "?????????" ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'653A7AA8D1EC4F418FDF91E53ACED1BA', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'RowsToInstances', '???????? ?????? ????????, ??????? ???????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'68DD82A28891404CB0F2BE69CAEE3DEA', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'CheckVerbRight', '???????? ???? ?? ????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'757FBD6854AD3748A6A7A8DDE3B2992A', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'MTZLogin', '???????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'76E8EEA2D854ED4AB124775F5DA2D911', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'VBAddObjByRef', '??? ???????, ? ??????? ???? ???? - ??????, ???????/???????? ?????? ??? ???????? ???? ?????????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'77CFE773BAE6B442A03B4F67EEDEF4F1', '2012-01-20 14:40:22', '2017-07-20 19:31:55', NULL, NULL, NULL, 'AdminUnlockAll', '???????????????? ??????? ??? \r\n????????????? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'942A498D78707D4B9847AEFC27B4855D', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'RowToInstance', '????? ??????? ??? ????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'95D72979C5415C4ABFF2A4E677A62143', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'SessionTouch', '??????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AA6D6E6CD25CC348A2AAA24539B45A49', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'GetServerTime', '??????? ????? ???????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'AF85990CEE27D54AA564635E0BFFC9D5', '2012-01-20 14:40:22', '2017-07-20 19:31:55', NULL, NULL, NULL, 'TestNumber', '????????? ??????? ?????? ? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B4383B8DF9C4AC458ECEBF3BE39D8100', '2012-01-20 14:40:23', '2017-07-20 19:31:55', NULL, NULL, NULL, 'Logout', '?????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B44F91D85D6B1A49A72F985617727583', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'WFFuncName', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9334E07C91EA14A8300E98C73D55FE2', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'Login', '???????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9409AD474614649A81DB7FE105C3546', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'AdminUnlock', '???????????????? ??????? ??? \r\n????????????? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'B9B78F5BB1D8A04C90AF55F83D1A6E5D', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBMakeReport', '???????? ?????? ?? ?????? ????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DBF6E8946A10DC44948386C801798FF0', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBOpenRef', '???????? ???????? ?? ??????????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'DC5699060533EF45933191CE323B5942', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'WFDefName', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E68540AA5B74374A8EC465D99A653966', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBRemoveSymmetricObjRef', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'E89AA4494BDB294380FB801A24C9D7AF', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'ClearNumerators', '??????? ?????????? ?????? ?? ??????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'EBBDE679D5912E4B81F73E091FB65E3A', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBCheckDescrs', '???????? ??????? ????????? ?????????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F0D654042486874894B064FBC74775E6', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'SessionVerify', '???????? ????????? ??????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F56A375B9B336543BA80785E28BCF4DA', '2012-01-20 14:40:23', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBUpdateSymmetricObjRef', NULL, NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'F76CEC31BD8DFE4EBF124D168F653D34', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBApplySecurity', '????????? ????? ?????? ??? ???????\r\n???????????? ???  ???????? ????????', NULL),
(x'A4EBDE88B1694A45992AFAE3CEBFBCA1', x'FDD4DE795C04F845AC792E5A3D956D97', '2012-01-20 14:40:22', '2017-07-20 19:31:56', NULL, NULL, NULL, 'VBMigrateRight', '???????? ????? ??????? ?????????? ????\r\n?? ??????? ??????', NULL);

-- 
-- Вывод данных для таблицы syslog
--
-- Таблица areal_cli.syslog не содержит данных

-- 
-- Вывод данных для таблицы sysrefcache
--
-- Таблица areal_cli.sysrefcache не содержит данных

-- 
-- Вывод данных для таблицы the_session
--
INSERT INTO the_session VALUES
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'0073E73AD88BE711B25D001E673EF734', '2017-08-28 13:04:07', '2017-08-28 13:04:07', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-28 13:04:07', '2017-08-28 13:04:07', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'00A1E3BD65DEE711A40BA81E843486A3', '2017-12-11 14:23:38', '2017-12-11 14:23:38', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 14:23:38', '2017-12-11 14:23:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'01DF6C51418EE71182EDA81E843486A3', '2017-08-31 14:41:22', '2017-08-31 14:41:22', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 14:41:22', '2017-08-31 14:41:22', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'024D4FA8418EE71182EDA81E843486A3', '2017-08-31 14:43:48', '2017-08-31 14:43:48', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 14:43:48', '2017-08-31 14:43:48', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'06B8B7298D70E71190D3001E673EF734', '2017-07-24 19:28:45', '2017-07-24 19:28:45', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-24 19:28:45', '2017-07-24 19:28:45', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'0A48E1FEDB72E71190D3001E673EF734', '2017-07-27 17:58:05', '2017-07-27 17:58:05', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-27 17:58:05', '2017-07-27 17:58:05', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'0BA681AC572FE8119E29A81E843486A3', '2018-03-24 14:37:03', '2018-03-24 14:37:03', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:37:03', '2018-03-24 14:37:03', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'0C9E6E4E552FE8119E29A81E843486A3', '2018-03-24 14:20:06', '2018-03-24 14:20:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:20:06', '2018-03-24 14:20:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'14BF24888D70E71190D3001E673EF734', '2017-07-24 19:31:23', '2017-07-24 19:31:23', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-07-24 19:31:23', '2017-07-24 19:31:23', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'16205253B188E711B25D001E673EF734', '2017-08-24 12:48:04', '2017-08-24 12:48:04', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-24 12:48:04', '2017-08-24 12:48:04', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'17660D3C696DE71190D3001E673EF734', '2017-07-20 19:35:09', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, '2017-07-20 19:35:09', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-20 19:34:00', '2017-07-20 19:34:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'196639520276E711B25D001E673EF734', '2017-07-31 18:09:59', '2017-07-31 18:09:59', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-07-31 18:09:59', '2017-07-31 18:09:59', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'19B868D076DEE711A40BA81E843486A3', '2017-12-11 16:43:47', '2017-12-11 16:43:47', NULL, NULL, NULL, NULL, NULL, '2017-12-11 16:43:47', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-12-11 16:25:51', '2017-12-11 16:25:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'19E5CDF98336E8119E29A81E843486A3', '2018-04-02 17:49:02', '2018-04-02 17:49:02', NULL, NULL, NULL, NULL, NULL, '2018-04-02 17:49:02', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 17:41:38', '2018-04-02 17:41:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'19FB76E9AB7DE711B25D001E673EF734', '2017-08-10 12:11:36', '2017-08-10 12:11:36', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-10 12:11:36', '2017-08-10 12:11:36', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'1B12C3A6C7A1E711B172A81E843486A3', '2017-09-25 11:00:04', '2017-09-25 11:00:04', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-09-25 11:00:04', '2017-09-25 11:00:04', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'1D49158C9439E8119E29A81E843486A3', '2018-04-06 15:17:51', '2018-04-06 15:17:51', NULL, NULL, NULL, NULL, NULL, '2018-04-06 15:17:51', 1, x'2F92D3D88C65E7119A61001E673EF734', '2018-04-06 15:17:45', '2018-04-06 15:17:45', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'1DAB2F8EA865E7119A61001E673EF734', '2017-07-10 22:56:03', '2017-07-10 22:56:03', NULL, NULL, NULL, NULL, NULL, '2017-07-10 22:56:03', 1, x'186DE10B8E65E7119A61001E673EF734', '2017-07-10 22:47:07', '2017-07-10 22:47:07', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'1FBA85A9D975E711B25D001E673EF734', '2017-07-31 13:18:57', '2017-07-31 13:18:57', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-31 13:18:57', '2017-07-31 13:18:57', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'221AAEDD56DEE711A40BA81E843486A3', '2017-12-11 14:21:42', '2017-12-11 14:21:42', NULL, NULL, NULL, NULL, NULL, '2017-12-11 14:21:42', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 12:37:09', '2017-12-11 12:37:09', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'22E8FC0B4CDEE711A40BA81E843486A3', '2017-12-11 12:36:16', '2017-12-11 12:36:16', NULL, NULL, NULL, NULL, NULL, '2017-12-11 12:36:16', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 11:19:42', '2017-12-11 11:19:42', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'244FF0A98370E71190D3001E673EF734', '2017-07-24 18:20:45', '2017-07-24 18:20:45', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-24 18:20:45', '2017-07-24 18:20:45', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'263E536F7177E711B25D001E673EF734', '2017-08-02 13:57:54', '2017-08-02 13:57:54', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-02 13:57:54', '2017-08-02 13:57:54', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'266315CB9573E71190D3001E673EF734', '2017-07-28 16:08:05', '2017-07-28 16:08:05', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-28 16:08:05', '2017-07-28 16:08:05', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'26A40741577CE711B25D001E673EF734', '2017-08-08 19:33:23', '2017-08-08 19:33:23', NULL, NULL, NULL, NULL, NULL, '2017-08-08 19:33:23', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-08 19:33:05', '2017-08-08 19:33:05', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'278D5EC4A281E711B25D001E673EF734', '2017-08-15 13:16:13', '2017-08-15 13:16:13', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-15 13:16:13', '2017-08-15 13:16:13', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'281268E72E66E7119A61001E673EF734', '2017-07-11 14:48:49', '2017-07-11 14:48:49', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-11 14:48:49', '2017-07-11 14:48:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'28980A9E5D8DE7119496A81E843486A3', '2017-08-30 11:31:18', '2017-08-30 11:31:18', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 11:31:18', '2017-08-30 11:31:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'299D90F9AB7AE711B25D001E673EF734', '2017-08-06 16:34:30', '2017-08-06 16:34:30', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-06 16:34:30', '2017-08-06 16:34:30', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2B3D08F8887EE711B25D001E673EF734', '2017-08-11 14:34:00', '2017-08-11 14:34:00', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-11 14:34:00', '2017-08-11 14:34:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2BD68E9D6271E71190D3001E673EF734', '2017-07-25 20:56:42', '2017-07-25 20:56:42', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 20:56:42', '2017-07-25 20:56:42', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2C63B2C76BDEE711A40BA81E843486A3', '2017-12-11 15:08:22', '2017-12-11 15:08:22', NULL, NULL, NULL, NULL, NULL, '2017-12-11 15:08:22', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 15:06:52', '2017-12-11 15:06:52', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2D4067578039E8119E29A81E843486A3', '2018-04-06 14:34:31', '2018-04-06 14:34:31', NULL, NULL, NULL, NULL, NULL, '2018-04-06 14:34:31', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 12:53:06', '2018-04-06 12:53:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2E2AD68A582FE8119E29A81E843486A3', '2018-03-24 14:43:16', '2018-03-24 14:43:16', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:43:16', '2018-03-24 14:43:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'2E521EEDE16DE71190D3001E673EF734', '2017-07-21 09:57:57', '2017-07-21 09:57:57', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-21 09:57:57', '2017-07-21 09:57:57', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'304B7F06A789E711B25D001E673EF734', '2017-08-25 18:06:51', '2017-08-25 18:06:51', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-25 18:06:51', '2017-08-25 18:06:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'304BEA52C48BE711B25D001E673EF734', '2017-08-28 10:41:37', '2017-08-28 10:41:37', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-28 10:41:37', '2017-08-28 10:41:37', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'32A120126A6DE71190D3001E673EF734', '2017-07-20 19:41:27', '2017-07-20 19:41:27', NULL, NULL, NULL, NULL, NULL, '2017-07-20 19:41:27', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 19:39:59', '2017-07-20 19:39:59', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'339B14E31C75E711B25D001E673EF734', '2017-07-30 14:47:38', '2017-07-30 14:47:38', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-30 14:47:38', '2017-07-30 14:47:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'343E4F7B7E8DE71182EDA81E843486A3', '2017-08-30 15:26:43', '2017-08-30 15:26:43', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 15:26:43', '2017-08-30 15:26:43', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'34716810572FE8119E29A81E843486A3', '2018-03-24 14:32:41', '2018-03-24 14:32:41', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:32:41', '2018-03-24 14:32:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'350697A62B6EE71190D3001E673EF734', '2017-07-21 18:45:41', '2017-07-21 18:45:41', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-21 18:45:41', '2017-07-21 18:45:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3545C7B4696DE71190D3001E673EF734', '2017-07-20 19:39:13', '2017-07-20 19:39:13', NULL, NULL, NULL, NULL, NULL, '2017-07-20 19:39:13', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-20 19:37:23', '2017-07-20 19:37:23', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3548DE888E39E8119E29A81E843486A3', '2018-04-06 14:38:49', '2018-04-06 14:38:49', NULL, NULL, NULL, NULL, NULL, '2018-04-06 14:38:49', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 14:34:42', '2018-04-06 14:34:42', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'379010E93671E71190D3001E673EF734', '2017-07-25 15:43:51', '2017-07-25 15:43:51', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-25 15:43:51', '2017-07-25 15:43:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'38173A975536E8119E29A81E843486A3', '2018-04-02 12:36:17', '2018-04-02 12:36:17', NULL, NULL, NULL, NULL, NULL, '2018-04-02 12:36:17', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 12:09:36', '2018-04-02 12:09:36', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3A30BBC28F81E711B25D001E673EF734', '2017-08-15 11:00:10', '2017-08-15 11:00:10', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-08-15 11:00:10', '2017-08-15 11:00:10', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3AB0067D2E71E71190D3001E673EF734', '2017-07-25 14:43:33', '2017-07-25 14:43:33', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 14:43:33', '2017-07-25 14:43:33', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3B532D82BD8BE711B25D001E673EF734', '2017-08-28 09:52:50', '2017-08-28 09:52:50', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-08-28 09:52:50', '2017-08-28 09:52:50', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3D4F3189686DE71190D3001E673EF734', '0000-00-00 00:00:00', '2017-07-20 19:29:00', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2017-07-20 19:29:00', '2017-07-20 19:29:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3D6424DE1E71E71190D3001E673EF734', '2017-07-25 12:51:44', '2017-07-25 12:51:44', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 12:51:44', '2017-07-25 12:51:44', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3DCA992E6E36E8119E29A81E843486A3', '2018-04-02 17:16:11', '2018-04-02 17:16:11', NULL, NULL, NULL, NULL, NULL, '2018-04-02 17:16:11', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 15:05:38', '2018-04-02 15:05:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3E18E6D6A965E7119A61001E673EF734', '2017-07-10 22:56:18', '2017-07-10 22:56:18', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-10 22:56:18', '2017-07-10 22:56:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'3F94F3E0C687E711B25D001E673EF734', '2017-08-23 08:49:50', '2017-08-23 08:49:50', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-23 08:49:50', '2017-08-23 08:49:50', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4008ED97C489E711B25D001E673EF734', '2017-08-25 21:38:31', '2017-08-25 21:38:31', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-08-25 21:38:31', '2017-08-25 21:38:31', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'404BB3629368E7119A61001E673EF734', '2017-07-14 15:53:08', '2017-07-14 15:53:08', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-14 15:53:08', '2017-07-14 15:53:08', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'409A64BFBE81E711B25D001E673EF734', '2017-08-15 16:36:31', '2017-08-15 16:36:31', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-15 16:36:31', '2017-08-15 16:36:31', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'40EE11B1EA71E71190D3001E673EF734', '2017-07-26 13:10:46', '2017-07-26 13:10:46', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-26 13:10:46', '2017-07-26 13:10:46', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'430A2B33728DE71182EDA81E843486A3', '2017-08-30 14:01:05', '2017-08-30 14:01:05', NULL, NULL, NULL, NULL, NULL, '2017-08-30 14:01:05', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 13:58:48', '2017-08-30 13:58:48', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'447B7282D484E711B25D001E673EF734', '2017-08-19 14:49:51', '2017-08-19 14:49:51', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-19 14:49:51', '2017-08-19 14:49:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'478914DD7F73E71190D3001E673EF734', '2017-07-28 13:31:06', '2017-07-28 13:31:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-28 13:31:06', '2017-07-28 13:31:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'48A3717BAA85E711B25D001E673EF734', '2017-08-20 16:21:32', '2017-08-20 16:21:32', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-20 16:21:32', '2017-08-20 16:21:32', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'49A1E80C5E7BE711B25D001E673EF734', '2017-08-07 13:49:13', '2017-08-07 13:49:13', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-07 13:49:13', '2017-08-07 13:49:13', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4AA71A7B708EE71182EDA81E843486A3', '2017-08-31 20:18:58', '2017-08-31 20:18:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:18:58', '2017-08-31 20:18:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4B09A7B16E65E7119A61001E673EF734', '2017-07-10 15:52:55', '2017-07-10 15:52:55', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 15:52:55', '2017-07-10 15:52:55', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4B32FB6B5A2FE8119E29A81E843486A3', '2018-03-24 14:56:43', '2018-03-24 14:56:43', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:56:43', '2018-03-24 14:56:43', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4BADF5857178E711B25D001E673EF734', '2017-08-03 20:31:03', '2017-08-03 20:31:03', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-03 20:31:03', '2017-08-03 20:31:03', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4DA0233E718EE71182EDA81E843486A3', '2017-08-31 20:24:25', '2017-08-31 20:24:25', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:24:25', '2017-08-31 20:24:25', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4E244E4DA073E71190D3001E673EF734', '2017-07-28 17:23:18', '2017-07-28 17:23:18', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-07-28 17:23:18', '2017-07-28 17:23:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4FBC4B544671E71190D3001E673EF734', '2017-07-25 17:34:13', '2017-07-25 17:34:13', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-25 17:34:13', '2017-07-25 17:34:13', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'4FD789F30480E711B25D001E673EF734', '2017-08-13 11:54:17', '2017-08-13 11:54:17', NULL, NULL, NULL, NULL, NULL, '2017-08-13 11:54:17', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-13 11:54:01', '2017-08-13 11:54:01', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'53473171DB7EE711B25D001E673EF734', '2017-08-12 00:24:22', '2017-08-12 00:24:22', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-12 00:24:22', '2017-08-12 00:24:22', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5392C293546DE71190D3001E673EF734', '2017-07-20 17:06:08', '2017-07-20 17:06:08', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-20 17:06:08', '2017-07-20 17:06:08', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'54AB09695EDEE711A40BA81E843486A3', '2017-12-11 13:32:01', '2017-12-11 13:32:01', NULL, NULL, NULL, NULL, NULL, '2017-12-11 13:32:01', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 13:31:09', '2017-12-11 13:31:09', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'55882E768365E7119A61001E673EF734', '2017-07-10 18:21:35', '2017-07-10 18:21:35', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 18:21:35', '2017-07-10 18:21:35', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5606AB85572FE8119E29A81E843486A3', '2018-03-24 14:35:58', '2018-03-24 14:35:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:35:58', '2018-03-24 14:35:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'568FAC477B8EE71182EDA81E843486A3', '2017-08-31 21:36:16', '2017-08-31 21:36:16', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 21:36:16', '2017-08-31 21:36:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'58570715658DE7119496A81E843486A3', '2017-08-30 12:24:44', '2017-08-30 12:24:44', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 12:24:44', '2017-08-30 12:24:44', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'59EE6614F180E711B25D001E673EF734', '2017-08-14 16:05:16', '2017-08-14 16:05:16', NULL, NULL, NULL, NULL, NULL, '2017-08-14 16:05:16', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-14 16:04:17', '2017-08-14 16:04:17', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5B57E57475DEE711A40BA81E843486A3', '2017-12-11 16:16:08', '2017-12-11 16:16:08', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 16:16:08', '2017-12-11 16:16:08', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5C240934D9CEE71197E7A81E843486A3', '2017-11-21 19:29:49', '2017-11-21 19:29:49', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-11-21 19:29:49', '2017-11-21 19:29:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5D3078376071E71190D3001E673EF734', '2017-07-25 20:43:23', '2017-07-25 20:43:23', NULL, NULL, NULL, NULL, NULL, '2017-07-25 20:43:23', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 20:39:31', '2017-07-25 20:39:31', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5D54142B9939E8119E29A81E843486A3', '2018-04-06 15:51:04', '2018-04-06 15:51:04', NULL, NULL, NULL, NULL, NULL, '2018-04-06 15:51:04', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 15:50:49', '2018-04-06 15:50:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'5D91CA569239E8119E29A81E843486A3', '2018-04-06 15:01:56', '2018-04-06 15:01:56', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 15:01:56', '2018-04-06 15:01:56', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6137D0258F39E8119E29A81E843486A3', '2018-04-06 14:59:14', '2018-04-06 14:59:14', NULL, NULL, NULL, NULL, NULL, '2018-04-06 14:59:14', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 14:39:06', '2018-04-06 14:39:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6223AF39BE67E7119A61001E673EF734', '2017-07-13 14:27:16', '2017-07-13 14:27:16', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-13 14:27:16', '2017-07-13 14:27:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'62EF330D6D65E7119A61001E673EF734', '2017-07-10 15:41:10', '2017-07-10 15:41:10', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 15:41:10', '2017-07-10 15:41:10', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6326EDB8F07CE711B25D001E673EF734', '2017-08-09 13:51:39', '2017-08-09 13:51:39', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-09 13:51:39', '2017-08-09 13:51:39', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'636B81B5582FE8119E29A81E843486A3', '2018-03-24 14:44:28', '2018-03-24 14:44:28', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:44:28', '2018-03-24 14:44:28', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6503B5F27068E7119A61001E673EF734', '2017-07-14 11:46:37', '2017-07-14 11:46:37', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-14 11:46:37', '2017-07-14 11:46:37', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'65E7DC30AF89E711B25D001E673EF734', '2017-08-25 19:05:19', '2017-08-25 19:05:19', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-25 19:05:19', '2017-08-25 19:05:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6743C5087870E71190D3001E673EF734', '2017-07-24 16:58:07', '2017-07-24 16:58:07', NULL, NULL, NULL, NULL, NULL, '2017-07-24 16:58:07', 1, x'A22FAC087870E71190D3001E673EF734', '2017-07-24 16:57:30', '2017-07-24 16:57:30', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6A4413C7C389E711B25D001E673EF734', '2017-08-25 21:32:40', '2017-08-25 21:32:40', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-25 21:32:40', '2017-08-25 21:32:40', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6CDCE86B67DEE711A40BA81E843486A3', '2017-12-11 14:40:34', '2017-12-11 14:40:34', NULL, NULL, NULL, NULL, NULL, '2017-12-11 14:40:34', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 14:35:40', '2017-12-11 14:35:40', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6E1DF278D9D8E71197C5A81E843486A3', '2017-12-04 12:56:23', '2017-12-04 12:56:23', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-04 12:56:23', '2017-12-04 12:56:23', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6E2FDD975F36E8119E29A81E843486A3', '2018-04-02 13:22:14', '2018-04-02 13:22:14', NULL, NULL, NULL, NULL, NULL, '2018-04-02 13:22:14', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 13:21:12', '2018-04-02 13:21:12', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'6FF2C2D95B2FE8119E29A81E843486A3', '2018-03-24 15:06:57', '2018-03-24 15:06:57', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 15:06:57', '2018-03-24 15:06:57', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'72073D54777EE711B25D001E673EF734', '2017-08-11 12:27:54', '2017-08-11 12:27:54', NULL, NULL, NULL, NULL, NULL, '2017-08-11 12:27:54', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-11 12:27:43', '2017-08-11 12:27:43', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'73CD5A316A8EE71182EDA81E843486A3', '2017-08-31 19:33:58', '2017-08-31 19:33:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 19:33:58', '2017-08-31 19:33:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'74C465C52078E711B25D001E673EF734', '2017-08-03 10:53:00', '2017-08-03 10:53:00', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-03 10:53:00', '2017-08-03 10:53:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7680E8FA5965E711997C001E673EF734', '0000-00-00 00:00:00', '2017-07-10 13:24:39', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2017-07-10 13:24:39', '2017-07-10 13:24:39', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'768854859239E8119E29A81E843486A3', '2018-04-06 15:09:10', '2018-04-06 15:09:10', NULL, NULL, NULL, NULL, NULL, '2018-04-06 15:09:10', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 15:03:14', '2018-04-06 15:03:14', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'76CEB6A574DFE71187F9A81E843486A3', '2017-12-12 22:42:54', '2017-12-12 22:42:54', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-12-12 22:42:54', '2017-12-12 22:42:54', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'784096146F65E7119A61001E673EF734', '2017-07-10 16:02:42', '2017-07-10 16:02:42', NULL, NULL, NULL, NULL, NULL, '2017-07-10 16:02:42', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 15:55:41', '2017-07-10 15:55:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'789A6B5DF081E711B25D001E673EF734', '2017-08-15 22:31:41', '2017-08-15 22:31:41', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-15 22:31:41', '2017-08-15 22:31:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'797B9C537571E71190D3001E673EF734', '2017-07-25 23:15:37', '2017-07-25 23:15:37', NULL, NULL, NULL, NULL, NULL, '2017-07-25 23:15:37', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-25 23:10:38', '2017-07-25 23:10:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'799273D45174E711B25D001E673EF734', '2017-07-29 14:34:06', '2017-07-29 14:34:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-29 14:34:06', '2017-07-29 14:34:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7A59A046AE72E71190D3001E673EF734', '2017-07-27 12:30:49', '2017-07-27 12:30:49', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-27 12:30:49', '2017-07-27 12:30:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7AED92078436E8119E29A81E843486A3', '2018-04-02 17:51:28', '2018-04-02 17:51:28', NULL, NULL, NULL, NULL, NULL, '2018-04-02 17:51:28', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 17:42:01', '2018-04-02 17:42:01', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7DE036FD698EE71182EDA81E843486A3', '2017-08-31 19:32:30', '2017-08-31 19:32:30', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 19:32:30', '2017-08-31 19:32:30', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7E5D51157065E7119A61001E673EF734', '2017-07-10 16:02:52', '2017-07-10 16:02:52', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 16:02:52', '2017-07-10 16:02:52', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7EA8C40F5A8DE7119496A81E843486A3', '2017-08-30 11:54:55', '2017-08-30 11:54:55', NULL, NULL, NULL, NULL, NULL, '2017-08-30 11:54:55', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 11:05:51', '2017-08-30 11:05:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'7F33A0D77A8EE71182EDA81E843486A3', '2017-08-31 21:33:08', '2017-08-31 21:33:08', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 21:33:08', '2017-08-31 21:33:08', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8230CB5AD873E71190D3001E673EF734', '2017-07-29 00:04:33', '2017-07-29 00:04:33', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-29 00:04:33', '2017-07-29 00:04:33', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'829DE6135B87E711B25D001E673EF734', '2017-08-22 19:58:10', '2017-08-22 19:58:10', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-22 19:58:10', '2017-08-22 19:58:10', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8538A2F37B70E71190D3001E673EF734', '2017-07-24 17:25:32', '2017-07-24 17:25:32', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-24 17:25:32', '2017-07-24 17:25:32', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'86A4051A2A71E71190D3001E673EF734', '2017-07-25 14:13:08', '2017-07-25 14:13:08', NULL, NULL, NULL, NULL, NULL, '2017-07-25 14:13:08', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-25 14:12:09', '2017-07-25 14:12:09', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'87581F31FD6EE71190D3001E673EF734', '2017-07-22 19:46:10', '2017-07-22 19:46:10', NULL, NULL, NULL, NULL, NULL, '2017-07-22 19:46:10', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-22 19:45:38', '2017-07-22 19:45:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8916B8F25F82E711B25D001E673EF734', '2017-08-16 11:50:26', '2017-08-16 11:50:26', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-16 11:50:26', '2017-08-16 11:50:26', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'89349D4FD275E711B25D001E673EF734', '2017-07-31 12:26:19', '2017-07-31 12:26:19', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-31 12:26:19', '2017-07-31 12:26:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'89B69CB35EDEE711A40BA81E843486A3', '2017-12-11 13:33:14', '2017-12-11 13:33:14', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 13:33:14', '2017-12-11 13:33:14', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'89FA6280EB75E711B25D001E673EF734', '2017-07-31 15:26:38', '2017-07-31 15:26:38', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-31 15:26:38', '2017-07-31 15:26:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8C207BD1667EE711B25D001E673EF734', '2017-08-11 10:29:32', '2017-08-11 10:29:32', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-11 10:29:32', '2017-08-11 10:29:32', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8C234C0363DEE711A40BA81E843486A3', '2017-12-11 14:04:06', '2017-12-11 14:04:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 14:04:06', '2017-12-11 14:04:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'8E9FB038697BE711B25D001E673EF734', '2017-08-07 15:09:11', '2017-08-07 15:09:11', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-07 15:09:11', '2017-08-07 15:09:11', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'911F34CA9D65E7119A61001E673EF734', '2017-07-10 21:30:03', '2017-07-10 21:30:03', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-10 21:30:03', '2017-07-10 21:30:03', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'92B537AF6270E71190D3001E673EF734', '2017-07-24 14:24:40', '2017-07-24 14:24:40', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-24 14:24:40', '2017-07-24 14:24:40', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'92F6725879DEE711A40BA81E843486A3', '2017-12-11 16:43:58', '2017-12-11 16:43:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-12-11 16:43:58', '2017-12-11 16:43:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'944DD608DE88E711B25D001E673EF734', '2017-08-24 18:08:07', '2017-08-24 18:08:07', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-24 18:08:07', '2017-08-24 18:08:07', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'9534FCAD542FE8119E29A81E843486A3', '2018-03-24 14:15:37', '2018-03-24 14:15:37', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:15:37', '2018-03-24 14:15:37', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'966E601E3A87E711B25D001E673EF734', '2017-08-22 16:02:14', '2017-08-22 16:02:14', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-22 16:02:14', '2017-08-22 16:02:14', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'984A7F068F81E711B25D001E673EF734', '2017-08-15 10:56:22', '2017-08-15 10:56:22', NULL, NULL, NULL, NULL, NULL, '2017-08-15 10:56:22', 1, x'186DE10B8E65E7119A61001E673EF734', '2017-08-15 10:54:54', '2017-08-15 10:54:54', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'98BC04CB2983E711B25D001E673EF734', '2017-08-17 11:55:18', '2017-08-17 11:55:18', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-17 11:55:18', '2017-08-17 11:55:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'9962AC456F6DE71190D3001E673EF734', '2017-07-20 20:43:51', '2017-07-20 20:43:51', NULL, NULL, NULL, NULL, NULL, '2017-07-20 20:43:51', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 20:17:13', '2017-07-20 20:17:13', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'9C1FF2915EDEE711A40BA81E843486A3', '2017-12-11 13:32:18', '2017-12-11 13:32:18', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 13:32:18', '2017-12-11 13:32:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'9C9BF08465DEE711A40BA81E843486A3', '2017-12-11 14:30:45', '2017-12-11 14:30:45', NULL, NULL, NULL, NULL, NULL, '2017-12-11 14:30:45', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 14:22:03', '2017-12-11 14:22:03', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A0FAE1A5592FE8119E29A81E843486A3', '2018-03-24 14:51:11', '2018-03-24 14:51:11', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:51:11', '2018-03-24 14:51:11', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A25F68DF587BE711B25D001E673EF734', '2017-08-07 13:12:09', '2017-08-07 13:12:09', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-07 13:12:09', '2017-08-07 13:12:09', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A26CBBD28C65E7119A61001E673EF734', '2017-07-10 19:45:42', '2017-07-10 19:45:42', NULL, NULL, NULL, NULL, NULL, '2017-07-10 19:45:42', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 19:28:36', '2017-07-10 19:28:36', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A775182D5B8DE7119496A81E843486A3', '2017-08-30 11:13:50', '2017-08-30 11:13:50', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 11:13:50', '2017-08-30 11:13:50', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A7AD3CEF582FE8119E29A81E843486A3', '2018-03-24 14:46:05', '2018-03-24 14:46:05', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:46:05', '2018-03-24 14:46:05', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A81BC2A9748DE71182EDA81E843486A3', '2017-08-30 15:26:06', '2017-08-30 15:26:06', NULL, NULL, NULL, NULL, NULL, '2017-08-30 15:26:06', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-30 14:16:26', '2017-08-30 14:16:26', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'A834A04A6477E711B25D001E673EF734', '2017-08-02 12:23:49', '2017-08-02 12:23:49', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-02 12:23:49', '2017-08-02 12:23:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'AB5BE5C76ADFE71187F9A81E843486A3', '2017-12-12 22:37:11', '2017-12-12 22:37:11', NULL, NULL, NULL, NULL, NULL, '2017-12-12 22:37:11', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-12-12 21:32:16', '2017-12-12 21:32:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'ACEEC0074B78E711B25D001E673EF734', '2017-08-03 15:55:30', '2017-08-03 15:55:30', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-03 15:55:30', '2017-08-03 15:55:30', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'B3779D01C989E711B25D001E673EF734', '2017-08-25 22:10:06', '2017-08-25 22:10:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-25 22:10:06', '2017-08-25 22:10:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'B4068FA88439E8119E29A81E843486A3', '2018-04-06 13:24:13', '2018-04-06 13:24:13', NULL, NULL, NULL, NULL, NULL, '2018-04-06 13:24:13', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 13:24:00', '2018-04-06 13:24:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'B8F3540E006FE71190D3001E673EF734', '2017-07-22 20:06:51', '2017-07-22 20:06:51', NULL, NULL, NULL, NULL, NULL, '2017-07-22 20:06:51', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-22 20:06:08', '2017-07-22 20:06:08', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BAD96A0D768EE71182EDA81E843486A3', '2017-08-31 20:58:51', '2017-08-31 20:58:51', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:58:51', '2017-08-31 20:58:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BB6AC9BF8439E8119E29A81E843486A3', '2018-04-06 13:24:39', '2018-04-06 13:24:39', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 13:24:39', '2018-04-06 13:24:39', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BC9BC5C37B36E8119E29A81E843486A3', '2018-04-02 17:17:52', '2018-04-02 17:17:52', NULL, NULL, NULL, NULL, NULL, '2018-04-02 17:17:52', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 16:42:51', '2018-04-02 16:42:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BCBB71497870E71190D3001E673EF734', '2017-07-24 17:23:31', '2017-07-24 17:23:31', NULL, NULL, NULL, NULL, NULL, '2017-07-24 17:23:31', 1, x'A22FAC087870E71190D3001E673EF734', '2017-07-24 16:59:18', '2017-07-24 16:59:18', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BF82B2E966DEE711A40BA81E843486A3', '2017-12-11 14:32:01', '2017-12-11 14:32:01', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 14:32:01', '2017-12-11 14:32:01', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'BFEFC3309565E7119A61001E673EF734', '2017-07-10 20:28:30', '2017-07-10 20:28:30', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 20:28:30', '2017-07-10 20:28:30', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C1AAC41E5336E8119E29A81E843486A3', '2018-04-02 12:09:24', '2018-04-02 12:09:24', NULL, NULL, NULL, NULL, NULL, '2018-04-02 12:09:24', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 11:51:55', '2018-04-02 11:51:55', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C3F0B9B5708EE71182EDA81E843486A3', '2017-08-31 20:20:37', '2017-08-31 20:20:37', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:20:37', '2017-08-31 20:20:37', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C473EC80F766E7119A61001E673EF734', '2017-07-12 14:44:46', '2017-07-12 14:44:46', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-12 14:44:46', '2017-07-12 14:44:46', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C4B9A18A0239E8119E29A81E843486A3', '2018-04-05 21:52:36', '2018-04-05 21:52:36', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-05 21:52:36', '2018-04-05 21:52:36', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C60F082A5E70E71190D3001E673EF734', '2017-07-24 13:53:02', '2017-07-24 13:53:02', NULL, NULL, NULL, NULL, NULL, '2017-07-24 13:53:02', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-24 13:52:19', '2017-07-24 13:52:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C628F1CD6D6DE71190D3001E673EF734', '2017-07-20 20:16:20', '2017-07-20 20:16:20', NULL, NULL, NULL, NULL, NULL, '2017-07-20 20:16:20', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 20:06:43', '2017-07-20 20:06:43', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C71A713CCAA1E711B172A81E843486A3', '2017-09-25 11:22:45', '2017-09-25 11:22:45', NULL, NULL, NULL, NULL, NULL, '2017-09-25 11:22:45', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-09-25 11:18:34', '2017-09-25 11:18:34', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'C9FE85909781E711B25D001E673EF734', '2017-08-15 11:56:02', '2017-08-15 11:56:02', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-15 11:56:02', '2017-08-15 11:56:02', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'CA2AE754697BE711B25D001E673EF734', '2017-08-07 15:09:58', '2017-08-07 15:09:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-07 15:09:58', '2017-08-07 15:09:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'CDA974209C8CE711B25D001E673EF734', '2017-08-29 12:26:37', '2017-08-29 12:26:37', NULL, NULL, NULL, NULL, NULL, '2017-08-29 12:26:37', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-29 12:26:24', '2017-08-29 12:26:24', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'CDDC43C57965E7119A61001E673EF734', '2017-07-10 18:20:35', '2017-07-10 18:20:35', NULL, NULL, NULL, NULL, NULL, '2017-07-10 18:20:35', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 17:12:13', '2017-07-10 17:12:13', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'CFD69A655F78E711B25D001E673EF734', '2017-08-03 18:21:17', '2017-08-03 18:21:17', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-03 18:21:17', '2017-08-03 18:21:17', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'D0617FE87FDEE711A40BA81E843486A3', '2017-12-11 17:30:57', '2017-12-11 17:30:57', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-12-11 17:30:57', '2017-12-11 17:30:57', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'D230C8CF9E76E711B25D001E673EF734', '2017-08-01 12:50:12', '2017-08-01 12:50:12', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-01 12:50:12', '2017-08-01 12:50:12', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'D6AABB247870E71190D3001E673EF734', '2017-07-24 16:59:04', '2017-07-24 16:59:04', NULL, NULL, NULL, NULL, NULL, '2017-07-24 16:59:04', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-24 16:58:17', '2017-07-24 16:58:17', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'D751632F6C65E7119A61001E673EF734', '2017-07-10 15:34:58', '2017-07-10 15:34:58', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-10 15:34:58', '2017-07-10 15:34:58', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'D82CF070906DE71190D3001E673EF734', '2017-07-21 00:14:39', '2017-07-21 00:14:39', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-21 00:14:39', '2017-07-21 00:14:39', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DA873E6FBE72E71190D3001E673EF734', '2017-07-27 14:26:29', '2017-07-27 14:26:29', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-27 14:26:29', '2017-07-27 14:26:29', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DA891198776DE71190D3001E673EF734', '2017-07-20 21:16:47', '2017-07-20 21:16:47', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 21:16:47', '2017-07-20 21:16:47', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DA9FFF053B7CE711B25D001E673EF734', '2017-08-08 16:11:00', '2017-08-08 16:11:00', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-08 16:11:00', '2017-08-08 16:11:00', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DCF7E53B8F65E7119A61001E673EF734', '2017-07-10 20:28:22', '2017-07-10 20:28:22', NULL, NULL, NULL, NULL, NULL, '2017-07-10 20:28:22', 1, x'186DE10B8E65E7119A61001E673EF734', '2017-07-10 19:45:51', '2017-07-10 19:45:51', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DD00BE11696DE71190D3001E673EF734', '0000-00-00 00:00:00', '2017-07-20 19:32:49', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-20 19:32:49', '2017-07-20 19:32:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DE28B6409439E8119E29A81E843486A3', '2018-04-06 15:17:28', '2018-04-06 15:17:28', NULL, NULL, NULL, NULL, NULL, '2018-04-06 15:17:28', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 15:15:38', '2018-04-06 15:15:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'DE9152BAD38BE711B25D001E673EF734', '2017-08-28 12:31:53', '2017-08-28 12:31:53', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-08-28 12:31:53', '2017-08-28 12:31:53', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E0479FA68065E7119A61001E673EF734', '0000-00-00 00:00:00', '2017-07-10 18:01:28', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2017-07-10 18:01:28', '2017-07-10 18:01:28', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E0F358F48239E8119E29A81E843486A3', '2018-04-06 13:21:07', '2018-04-06 13:21:07', NULL, NULL, NULL, NULL, NULL, '2018-04-06 13:21:07', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 13:11:49', '2018-04-06 13:11:49', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E3B32152572FE8119E29A81E843486A3', '2018-03-24 14:34:32', '2018-03-24 14:34:32', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:34:32', '2018-03-24 14:34:32', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E3D5B29D8C73E71190D3001E673EF734', '2017-07-28 15:02:23', '2017-07-28 15:02:23', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-28 15:02:23', '2017-07-28 15:02:23', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E3E20BD1582FE8119E29A81E843486A3', '2018-03-24 14:45:14', '2018-03-24 14:45:14', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:45:14', '2018-03-24 14:45:14', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E4964E191B8BE711B25D001E673EF734', '2017-08-27 14:30:54', '2017-08-27 14:30:54', NULL, NULL, NULL, NULL, NULL, '2017-08-27 14:30:54', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-27 14:30:16', '2017-08-27 14:30:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E505DEB98636E8119E29A81E843486A3', '2018-04-02 19:43:46', '2018-04-02 19:43:46', NULL, NULL, NULL, NULL, NULL, '2018-04-02 19:43:46', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-02 18:01:19', '2018-04-02 18:01:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E5382A455A2FE8119E29A81E843486A3', '2018-03-24 14:55:38', '2018-03-24 14:55:38', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:55:38', '2018-03-24 14:55:38', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E5A5088A0F81E711B25D001E673EF734', '2017-08-14 19:42:19', '2017-08-14 19:42:19', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-14 19:42:19', '2017-08-14 19:42:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E6A5C2BA268CE711B25D001E673EF734', '2017-08-28 22:26:02', '2017-08-28 22:26:02', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-28 22:26:02', '2017-08-28 22:26:02', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E77AF8A59B81E711B25D001E673EF734', '2017-08-15 12:26:43', '2017-08-15 12:26:43', NULL, NULL, NULL, NULL, NULL, '2017-08-15 12:26:43', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-15 12:25:16', '2017-08-15 12:25:16', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E81CDE0E7671E71190D3001E673EF734', '2017-07-25 23:15:52', '2017-07-25 23:15:52', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'3A6F08126A6DE71190D3001E673EF734', '2017-07-25 23:15:52', '2017-07-25 23:15:52', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E8941044016EE71190D3001E673EF734', '2017-07-21 13:42:17', '2017-07-21 13:42:17', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-21 13:42:17', '2017-07-21 13:42:17', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'E9554A9C8D77E711B25D001E673EF734', '2017-08-02 17:19:35', '2017-08-02 17:19:35', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C8C10631FD6EE71190D3001E673EF734', '2017-08-02 17:19:35', '2017-08-02 17:19:35', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'EB03DC086CDEE711A40BA81E843486A3', '2017-12-11 16:25:41', '2017-12-11 16:25:41', NULL, NULL, NULL, NULL, NULL, '2017-12-11 16:25:41', 1, x'3A6F08126A6DE71190D3001E673EF734', '2017-12-11 15:08:41', '2017-12-11 15:08:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'EB770832618DE7119496A81E843486A3', '0000-00-00 00:00:00', '2017-08-30 11:56:55', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2017-08-30 11:56:55', '2017-08-30 11:56:55', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'ED7C04F9C081E711B25D001E673EF734', '2017-08-15 16:52:26', '2017-08-15 16:52:26', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-08-15 16:52:26', '2017-08-15 16:52:26', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'EE5A0F401A76E711B25D001E673EF734', '2017-07-31 21:01:33', '2017-07-31 21:01:33', NULL, NULL, NULL, NULL, NULL, '2017-07-31 21:01:33', 1, x'C8C10631FD6EE71190D3001E673EF734', '2017-07-31 21:01:17', '2017-07-31 21:01:17', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'EE80D6B6718EE71182EDA81E843486A3', '2017-08-31 20:27:48', '2017-08-31 20:27:48', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:27:48', '2017-08-31 20:27:48', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'EEF7CBF4728EE71182EDA81E843486A3', '2017-08-31 20:36:41', '2017-08-31 20:36:41', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2017-08-31 20:36:41', '2017-08-31 20:36:41', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F1541602582FE8119E29A81E843486A3', '2018-03-24 14:39:27', '2018-03-24 14:39:27', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 14:39:27', '2018-03-24 14:39:27', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F294FED1302FE8119E29A81E843486A3', '2018-03-24 09:58:56', '2018-03-24 09:58:56', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'C154CF76F04B1E4FAE49035C433782D7', '2018-03-24 09:58:56', '2018-03-24 09:58:56', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F40AFE6A696DE71190D3001E673EF734', '2017-07-20 19:37:15', '2017-07-20 19:37:15', NULL, NULL, NULL, NULL, NULL, '2017-07-20 19:37:15', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-20 19:35:19', '2017-07-20 19:35:19', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F45C59015D8DE7119496A81E843486A3', '0000-00-00 00:00:00', '2017-08-30 11:26:55', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2017-08-30 11:26:55', '2017-08-30 11:26:55', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F563784DD175E711B25D001E673EF734', '2017-07-31 12:19:06', '2017-07-31 12:19:06', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'A22FAC087870E71190D3001E673EF734', '2017-07-31 12:19:06', '2017-07-31 12:19:06', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F59797F30667E7119A61001E673EF734', '2017-07-12 16:35:21', '2017-07-12 16:35:21', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'186DE10B8E65E7119A61001E673EF734', '2017-07-12 16:35:21', '2017-07-12 16:35:21', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F6166B4E8781E711B25D001E673EF734', '2017-08-15 09:59:39', '2017-08-15 09:59:39', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'AA414F4E8781E711B25D001E673EF734', '2017-08-15 09:59:39', '2017-08-15 09:59:39', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F65E646A8981E711B25D001E673EF734', '2017-08-15 10:39:31', '2017-08-15 10:39:31', NULL, NULL, NULL, NULL, NULL, '2017-08-15 10:39:31', 1, x'A22FAC087870E71190D3001E673EF734', '2017-08-15 10:14:45', '2017-08-15 10:14:45', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F708E22D6F6DE71190D3001E673EF734', '2017-07-20 20:17:06', '2017-07-20 20:17:06', NULL, NULL, NULL, NULL, NULL, '2017-07-20 20:17:06', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-20 20:16:33', '2017-07-20 20:16:33', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'F9036C488F81E711B25D001E673EF734', '2017-08-15 10:59:55', '2017-08-15 10:59:55', NULL, NULL, NULL, NULL, NULL, '2017-08-15 10:59:55', 1, x'A22FAC087870E71190D3001E673EF734', '2017-08-15 10:56:45', '2017-08-15 10:56:45', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'FD2B53768439E8119E29A81E843486A3', '0000-00-00 00:00:00', '2018-04-06 13:22:36', NULL, NULL, NULL, NULL, NULL, NULL, 0, x'6AF8DE381E19A849963B63E0C94F4F99', '2018-04-06 13:22:36', '2018-04-06 13:22:36', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'FD31D1A58870E71190D3001E673EF734', '2017-07-24 19:28:38', '2017-07-24 19:28:38', NULL, NULL, NULL, NULL, NULL, '2017-07-24 19:28:38', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2017-07-24 18:56:25', '2017-07-24 18:56:25', NULL, NULL),
(x'EFBFBD74EFBFBDEFBFBD011DEFBFBD43', x'FD49765EF438E8119E29A81E843486A3', '2018-04-05 23:03:34', '2018-04-05 23:03:34', NULL, NULL, NULL, NULL, NULL, '2018-04-05 23:03:34', 1, x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-05 20:11:09', '2018-04-05 20:11:09', NULL, NULL);

-- 
-- Вывод данных для таблицы users
--
INSERT INTO users VALUES
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'186DE10B8E65E7119A61001E673EF734', '0000-00-00 00:00:00', '2017-07-10 19:37:52', NULL, NULL, NULL, '????????', '??????', NULL, 'areal', '5478ac47cdc2cbf6814a684ca3270956', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'2F92D3D88C65E7119A61001E673EF734', '2017-07-10 19:43:28', '2018-04-06 15:16:48', NULL, NULL, NULL, '?????????', '????', ' ', 'dron128', '25f9e794323b453885f5181f1b624d0b', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'3A6F08126A6DE71190D3001E673EF734', '2017-07-20 19:39:59', '2017-07-20 19:39:59', NULL, NULL, NULL, '????????????', '????????', ' ', 'test', '098f6bcd4621d373cade4e832627b4f6', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'5B798473D34AE711B02EA81E843486A3', '2017-07-21 09:56:35', '2017-07-21 09:56:35', NULL, NULL, NULL, '??????', '????', ' ', 'petrosport', 'f779521a2131282e213e0ecaab1c7622', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'A22FAC087870E71190D3001E673EF734', '2017-07-24 16:57:30', '2017-08-08 16:11:36', NULL, NULL, NULL, '???? 2', '?????? ????????', ' ', 'test2', '098f6bcd4621d373cade4e832627b4f6', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'AA414F4E8781E711B25D001E673EF734', '2017-08-15 09:59:39', '2017-08-15 10:02:12', NULL, NULL, NULL, '????????????', '???????', ' ', '???', '23191b271d2a651092d5ab71ca91081f', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'BCF9CA018F65E7119A61001E673EF734', '2017-07-10 19:44:30', '2017-07-10 19:44:30', NULL, NULL, NULL, 'qwerty', 'asdfg', ' ', 'zxcvbnm', '02c75fb22c75b23dc963c7eb91a062cc', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'C154CF76F04B1E4FAE49035C433782D7', '2018-04-06 13:22:36', '2018-04-06 14:36:49', NULL, NULL, NULL, NULL, '?????????????', NULL, 'supervisor', 'eb9c78de9ae3335d5a9d93ce23044182', NULL, NULL, NULL, NULL),
(x'EFBFBD5EEFBFBDEFBFBD0E052243EFBF', x'C8C10631FD6EE71190D3001E673EF734', '2017-07-22 19:45:38', '2017-07-22 19:45:38', NULL, NULL, NULL, '????????', '???????', ' ', 'sadmitry', '9e05ed30572d5062ec7528a0fee1fbe6', NULL, NULL, NULL, NULL);

-- 
-- Вывод данных для таблицы workplace
--
-- Таблица areal_cli.workplace не содержит данных

-- 
-- Вывод данных для таблицы arc_chanel
--
INSERT INTO arc_chanel VALUES
(x'32BC5B1D1F71E71190D3001E673EF734', x'25615191AF72E71190D3001E673EF734', '2017-07-27 12:40:04', '2017-07-27 12:40:04', NULL, NULL, NULL, x'2633B544A04AE711B02EA81E843486A3', 'sadmitry@yandex.ru', -1, -1, -1, NULL, NULL),
(x'310D0B068B81E711B25D001E673EF734', x'491276538B81E711B25D001E673EF734', '2017-08-23 08:50:43', '2017-08-23 08:50:43', NULL, NULL, NULL, x'F316A1CD8870E71190D3001E673EF734', '+79629444810', -1, -1, -1, NULL, NULL),
(x'32BC5B1D1F71E71190D3001E673EF734', x'58B93AA7AE72E71190D3001E673EF734', '2017-07-27 12:33:31', '2017-07-27 12:33:31', NULL, NULL, NULL, x'F316A1CD8870E71190D3001E673EF734', '+79219225921', -1, -1, -1, NULL, NULL),
(x'336358D78781E711B25D001E673EF734', x'6E4D970C8881E711B25D001E673EF734', '2017-08-15 10:04:58', '2017-08-15 10:04:58', NULL, NULL, NULL, x'F316A1CD8870E71190D3001E673EF734', '+79670482843', -1, -1, -1, NULL, NULL),
(x'FAD941216A6DE71190D3001E673EF734', x'726E530A7D70E71190D3001E673EF734', '2017-07-24 17:33:20', '2017-07-24 17:33:20', NULL, NULL, NULL, x'2633B544A04AE711B02EA81E843486A3', 'mvsh@inbox.ru', -1, -1, -1, NULL, NULL),
(x'B5379859AF4AE711B02EA81E843486A3', x'7E750268AF4AE711B02EA81E843486A3', '2017-06-06 14:58:08', '2017-07-10 15:40:13', NULL, NULL, NULL, x'2E60F33BA04AE711B02EA81E843486A3', '????2???', -1, -1, -1, NULL, NULL),
(x'FAD941216A6DE71190D3001E673EF734', x'888F98A7776DE71190D3001E673EF734', '2017-07-24 17:33:32', '2017-07-24 17:33:32', NULL, NULL, NULL, x'2633B544A04AE711B02EA81E843486A3', 'bami@nm.ru', 0, -1, -1, NULL, NULL),
(x'ED48ED216F6DE71190D3001E673EF734', x'B1983CB3776DE71190D3001E673EF734', '2018-04-06 13:36:17', '2018-04-06 13:36:17', NULL, NULL, NULL, x'2633B544A04AE711B02EA81E843486A3', 'bami@nm.ru', -1, -1, -1, NULL, NULL),
(x'FAD941216A6DE71190D3001E673EF734', x'DB51504C8D70E71190D3001E673EF734', '2017-07-24 20:34:09', '2017-07-24 20:34:09', NULL, NULL, NULL, x'F316A1CD8870E71190D3001E673EF734', '79213746485', 0, -1, -1, NULL, NULL),
(x'9277B3B8C987E711B25D001E673EF734', x'E1C37AF2C987E711B25D001E673EF734', '2017-08-23 09:11:48', '2017-08-23 09:11:48', NULL, NULL, NULL, x'F316A1CD8870E71190D3001E673EF734', '+79776589180', -1, -1, -1, NULL, NULL),
(x'B39609B4D54AE711B02EA81E843486A3', x'F0A6CDD8D94AE711B02EA81E843486A3', '2017-06-06 20:01:56', '2017-07-10 15:40:13', NULL, NULL, NULL, x'2633B544A04AE711B02EA81E843486A3', 'test@test.ru', -1, -1, 0, NULL, NULL);

-- 
-- Вывод данных для таблицы armjrnladd
--
-- Таблица areal_cli.armjrnladd не содержит данных

-- 
-- Вывод данных для таблицы armjrnlrep
--
-- Таблица areal_cli.armjrnlrep не содержит данных

-- 
-- Вывод данных для таблицы armjrnlrun
--
-- Таблица areal_cli.armjrnlrun не содержит данных

-- 
-- Вывод данных для таблицы enumitem
--
INSERT INTO enumitem VALUES
(x'9BAEE12ABF21B44BA554096D5B959903', x'009559227425124CB4658F03C797BC1A', '2012-01-20 14:40:19', '2017-07-20 19:30:28', NULL, NULL, NULL, 'PeriodicFunction', 3, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'01535044EC3B0546ABF6A0C737EB4EB6', '2012-01-20 14:40:19', '2017-07-20 19:30:28', NULL, NULL, NULL, '???', 5, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'0518A41B32F8614985826AD7A5F174A2', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, '????', 8, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'0551019ED6548F499AA1D3AF6F1FFE5E', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, '???????? ????????', 1, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'05999BBF92BC734BAF0F7EA28CE982B9', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, 'Document', 0, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'084215ABBA680149B60F92E0E4EF07B6', '2012-01-20 14:40:19', '2017-07-20 19:30:28', NULL, NULL, NULL, 'As String', 0, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'09F1C3221A7CC942BADD70CF60CDB449', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, 'Process', 2, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'0D6ADB8F228F004C8926C2D335A865BA', '2012-01-20 14:40:21', '2017-07-20 19:30:28', NULL, NULL, NULL, 'OTHER', 3, 'OTHER'),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'0DDA40E52BD74143A3ED675441DAE885', '2012-01-20 14:40:19', '2017-07-20 19:30:28', NULL, NULL, NULL, '??????', 4, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'0E142804CF9BAC43BB4276E75A8B5230', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, '??????????', 1, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'0EF46AC9845D6240B77CB913826FE469', '2012-01-20 14:40:20', '2017-07-20 19:30:28', NULL, NULL, NULL, '??????? ?? Excel ???????', 4, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'1209CA4A83B80945BD8A2C2B558D7C81', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, 'SUM', 3, NULL),
(x'E0280E0D19D66A49BF995F9F28321C74', x'12AD44C8A1A7A143B65079E7005829E5', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '??', 1, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'12C8C2F832AB804EAADBFD0C472C4D8F', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '?????????', 3, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'1337DBA1D9124943A77E32EFBBCE928B', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, '????', 0, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'13C9AF73FD92BF4BA6EA2FF0CA899600', '2012-01-20 14:40:21', '2017-07-20 19:30:29', NULL, NULL, NULL, '?? ???????????', -1, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'1605A9D704F60C4B97BF5E17646538C0', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, '?? ????????', 2, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'16252324026FAE48ADF0C3A628E9887C', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '?????', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'16744BAB2327E14199703EDA70279DB2', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '?????????', 2, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'17AD5B366D72A6468789144A41A3B399', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, 'AVG', 1, NULL),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'1936685FBF1E044C91BD2EDE895DA4B0', '2012-01-20 14:40:21', '2017-07-20 19:30:29', NULL, NULL, NULL, '??????? ????????', 2, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'19A4796EA759A34AB5C6DB629960571F', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '???????', 4, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'1A5703B160AB4C44BDA406B2A3965206', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '????', 1, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'1C20F2C04B3F8342ADA85988D89D00D9', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, '????????', 9, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'1DCC25ECA3A77945999A635103771D4E', '2012-01-20 14:40:20', '2017-07-20 19:30:29', NULL, NULL, NULL, '??????', 4, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'1ED8AA0BA686594A94CEDAB69358C111', '2012-01-20 14:40:21', '2017-07-20 19:30:29', NULL, NULL, NULL, 'DOTNET', 1, 'DOTNET'),
(x'65348B4111516148B4C5E9535B3FD7B3', x'1F20294966672D43B895B03DE079CC94', '2013-01-28 13:14:00', '2017-07-20 19:30:29', NULL, NULL, NULL, 'I', 1, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'2294747B39B92543A87BD2CE13450A1C', '2012-01-20 14:40:19', '2017-07-20 19:30:29', NULL, NULL, NULL, 'CUSTOM', 6, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'254E9E0D04A82A4C858104C9C67301F2', '2012-01-20 14:40:20', '2017-07-20 19:30:30', NULL, NULL, NULL, '????????', 5, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'25B5850C826230429DE2C8259A053944', '2012-01-20 14:40:20', '2017-07-20 19:30:30', NULL, NULL, NULL, '?? ???????????', 0, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'2645E0B05DA13B4485DF49BE14A9635B', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '???????', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'28CC47203248504996AFB28B488D4296', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '???', 0, 'LNK_NO'),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'29824BF487BF12408822DB02AB157F52', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '?????? ?????????', 0, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'2A6D2B6749D5864AAF2049494C50300C', '2013-05-06 12:13:04', '2017-07-20 19:30:31', NULL, NULL, NULL, 'IV', 4, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'2B093A6A674FA548B3D99736548A8B7F', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '?????????', 1, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'2C043ED4BB47164C9CA62B0FBB162A14', '2012-01-20 14:40:22', '2017-07-20 19:30:31', NULL, NULL, NULL, 'Processed', 8, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2C49CEFF814355438E066B4F0ACEA451', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '????????', 1, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'2DB889EDBA5E264294635F7B7367E7A8', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '??????? ?? WORD ???????', 3, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'2F2BF29663DAC14491523DBE0DA89B3C', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '?????????', 1, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'337B7817FDE28242BDE2124693B0BEA1', '2015-07-06 16:47:47', '2017-07-20 19:30:31', NULL, NULL, NULL, 'Space', 4, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'35578CD79B86D04280B93227489427AF', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '?????????', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'355CA17083150D479CB59AED1C5C4F7E', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '????????? ???', 4, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'35BAE722580ABD448E8CD2C98E814E40', '2012-01-20 14:40:20', '2017-07-20 19:30:31', NULL, NULL, NULL, '<', 6, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'37522C1E10BCC44E92F3B2A1224D0023', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '??????????', 4, NULL),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'38775ECD6C9DDF41BB62B5EE98E6A054', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '?????????', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'39A40BB22DE34E4A8185400831E8C4C9', '2012-01-20 14:40:19', '2017-07-20 19:30:31', NULL, NULL, NULL, '????????? ?????', 2, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'39D144E249630E4482ACAECB60D2A92C', '2012-01-20 14:40:19', '2017-07-20 19:30:32', NULL, NULL, NULL, '??????????', 9, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'3C002ADB1E050345A4F2B787FD485C5B', '2012-01-20 14:40:20', '2017-07-20 19:30:32', NULL, NULL, NULL, '???????', 6, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'4007624AA4B2A643BB70B03B00551BB8', '2012-01-20 14:40:19', '2017-07-20 19:30:32', NULL, NULL, NULL, '??????', 4, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'41C59E21A77A58429DA17036D95B6037', '2012-01-20 14:40:20', '2017-07-20 19:30:32', NULL, NULL, NULL, '?? ???????? ??????', 3, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'41DFF6516FC4F7498FBD2EE812D38B55', '2012-01-20 14:40:19', '2017-07-20 19:30:32', NULL, NULL, NULL, 'Pause', 3, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'42151CD45C265140B0F59D1CCE44E14A', '2012-01-20 14:40:19', '2017-07-20 19:30:32', NULL, NULL, NULL, 'Right Top', 6, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'42AAA4B51982B44686DF299D9165914C', '2012-01-20 14:40:21', '2017-07-20 19:30:32', NULL, NULL, NULL, '?? ?????', -1, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'4431D2D719EE8F4BA3736F73ADCC3CDF', '2012-01-20 14:40:19', '2017-07-20 19:30:32', NULL, NULL, NULL, '????????????', 3, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'446B7EF06ED2574AB0DAEFB731C9C8C9', '2015-07-06 16:47:47', '2017-07-20 19:30:32', NULL, NULL, NULL, 'Mark', 3, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'44C03E0B8A0A224FA0EC8FDCBB1E36D7', '2012-01-20 14:40:20', '2017-07-20 19:30:32', NULL, NULL, NULL, '??????????', 2, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'47D9CD988353124C90316797E96E6C26', '2012-01-20 14:40:19', '2017-07-20 19:30:33', NULL, NULL, NULL, '????', 6, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'48F6CB7245C78141008700676E54DF1F', '2012-01-20 14:40:20', '2017-07-20 19:30:33', NULL, NULL, NULL, '???????????', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'49612793DDC5DF428DA89B51F7B2F995', '2012-01-20 14:40:20', '2017-07-20 19:30:33', NULL, NULL, NULL, '>=', 4, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'49945C7126D7F4468F78F79CEFC23AED', '2012-01-20 14:40:19', '2017-07-20 19:30:33', NULL, NULL, NULL, '???????', 2, NULL),
(x'C608D44CBE64964787E545A26D3B3DDA', x'4AE42C432D9CA54783651B33CB9F6286', '2012-01-20 14:40:19', '2017-07-20 19:30:33', NULL, NULL, NULL, 'AddForm', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'4C62B4147628DB48B96C214CDD997791', '2012-01-20 14:40:21', '2017-07-20 19:30:33', NULL, NULL, NULL, '???????', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'4E42AE0A7585204498798DD8B95F2A20', '2012-01-20 14:40:21', '2017-07-20 19:30:33', NULL, NULL, NULL, '????', 2, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'503BBB35F361B74B9DC3CF3282E1A3FD', '2012-01-20 14:40:20', '2017-07-20 19:30:33', NULL, NULL, NULL, '??????', 2, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'50DA56CEFB4259439AB174700AB9F971', '2012-01-20 14:40:22', '2017-07-20 19:30:33', NULL, NULL, NULL, '?????????', 2, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'547DAC8316B73543BCC5A66377FC5700', '2012-01-20 14:40:20', '2017-07-20 19:30:33', NULL, NULL, NULL, '<=', 7, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'59F37C9F8708854C882A8EF3EB844FF3', '2012-01-20 14:40:22', '2017-07-20 19:30:33', NULL, NULL, NULL, '?????????', 1, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'5A110E39E629044B8244430CAB062DEA', '2015-12-20 13:27:35', '2017-07-20 19:30:33', NULL, NULL, NULL, '???????', 2, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'5B2E6176C5391847B1F84CC2F9A89F09', '2012-01-20 14:40:21', '2017-07-20 19:30:33', NULL, NULL, NULL, '??????', 4, NULL),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'5C46F59F7139F641800345E540EDEC59', '2012-01-20 14:40:20', '2017-07-20 19:30:33', NULL, NULL, NULL, 'Function', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'5DDB95B1E6915B4186D57A5DFE233377', '2012-01-20 14:40:22', '2017-07-20 19:30:34', NULL, NULL, NULL, 'VerifyRowExt', 6, 'VerifyRowExt'),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'5E7392CC89322C43B8347651A8F15265', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, '????', 7, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'5ED92E02DC348B479BDE11BFF069D140', '2012-01-20 14:40:19', '2017-07-20 19:30:34', NULL, NULL, NULL, 'Active', 2, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'5FE15E9FE865FC47006FF27C3CE966E6', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, '???????????', 7, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'614EE9F764F7B14EAB7095A5526A5359', '2012-01-20 14:40:19', '2017-07-20 19:30:34', NULL, NULL, NULL, '?? ??????', 3, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'61B01F00C51C894D8A83F321ED72B5D4', '2012-01-20 14:40:22', '2017-07-20 19:30:34', NULL, NULL, NULL, ' ?????', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'622BBE6A41A43944BE0CAA3D1256691E', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, '?????? ParentStructRowID  (? ???????? ???????)', 4, 'LNK_ParentStructRowID'),
(x'3A3878A9883FD34787A231AF949E53B1', x'624B5B0C8D6B3E4DAD6410F8F4815284', '2012-01-20 14:40:19', '2017-07-20 19:30:34', NULL, NULL, NULL, '??????? ?????', 5, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'627B83F384BA36419CF9DB82EC2F930C', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, 'none', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'63CDDF731B807F449B123836F6B5F0AD', '2012-01-20 14:40:22', '2017-07-20 19:30:34', NULL, NULL, NULL, 'CodeGenerator', 7, 'CodeGenerator'),
(x'12EEAA312481754EBD16698F4235234B', x'65D18D4389DFCA4DB3E62168A0BCA934', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, '????????? ???????', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'660528DCCFEBCC44874DBE3B5B049372', '2012-01-20 14:40:22', '2017-07-20 19:30:34', NULL, NULL, NULL, 'DefaultExt', 5, 'DefaultExt'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'6658722B88427E448EB92960736C3EA1', '2012-01-20 14:40:19', '2017-07-20 19:30:34', NULL, NULL, NULL, '???????', 12, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'6725ED721AD44A47ACF925D7A9D09DF9', '2013-05-06 12:13:04', '2017-07-20 19:30:34', NULL, NULL, NULL, '?', 0, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'68C9D24AE62EB04F9A7DD863606922D5', '2012-01-20 14:40:20', '2017-07-20 19:30:34', NULL, NULL, NULL, '????????? ???? ( ?? ??????)', 0, NULL),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'6CD7A5BE7B3E54459E09ECA7BC4EBE53', '2016-01-04 14:21:34', '2017-07-20 19:30:34', NULL, NULL, NULL, '???????', 1, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'6DBBF989DDA07A40BA99804CF8BD1AD7', '2012-01-20 14:40:19', '2017-07-20 19:30:35', NULL, NULL, NULL, '??????', 1, NULL),
(x'961085CC094CE749A541D00372E6D444', x'71D49C1F24DC9C4D875314DCDB85D68E', '2013-06-11 13:36:33', '2017-07-20 19:30:35', NULL, NULL, NULL, '???? ? ??', 3, NULL),
(x'794061085D25D54FABBEDE9BC7987090', x'73B7D6EE9A161E40837A3D513EE40161', '2012-01-20 14:40:21', '2017-07-20 19:30:35', NULL, NULL, NULL, '??', -1, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'741D12C8DC98B94ABA56844E863CC89C', '2012-01-20 14:40:20', '2017-07-20 19:30:35', NULL, NULL, NULL, '??????', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'77324C102C3AE54EB21EB2D136750CF7', '2012-01-20 14:40:22', '2017-07-20 19:30:35', NULL, NULL, NULL, 'StatusExt', 0, 'StatusExt'),
(x'A97386691DC5164C8EED7D8810FFF900', x'780B11D24230144FAB1667B726ACCD80', '2012-01-20 14:40:20', '2017-07-20 19:30:35', NULL, NULL, NULL, '???????', 2, NULL),
(x'961085CC094CE749A541D00372E6D444', x'782D33CDF8382A4ABC0B6351D03FF01C', '2013-06-11 13:36:18', '2017-07-20 19:30:35', NULL, NULL, NULL, '????', 1, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'78A3BEE221889E4C9B6AF50751E03434', '2012-01-20 14:40:20', '2017-07-20 19:30:35', NULL, NULL, NULL, '?? ?????', -1, NULL),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'792DA10D515D91448475A2169998F2CA', '2012-01-20 14:40:19', '2017-07-20 19:30:36', NULL, NULL, NULL, '??????', 2, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'7A0276E1DFA5B249A151657FD176F5CD', '2012-01-20 14:40:21', '2017-07-20 19:30:36', NULL, NULL, NULL, 'JAVA', 2, 'JAVA'),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'7BC5C6CCBCD5154BB1BAB95D17513874', '2012-01-20 14:40:21', '2017-07-20 19:30:36', NULL, NULL, NULL, '???????? ??????', 3, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'7D6CAD9F6CA0B842A2DEB3850F2D3AEE', '2012-01-20 14:40:19', '2017-07-20 19:30:36', NULL, NULL, NULL, '? ????????', 3, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'7E14A4F6BE146F4AAA3B1DF80E700721', '2012-01-20 14:40:19', '2017-07-20 19:30:36', NULL, NULL, NULL, '?????? ????', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'7E99CC1ED81ACF4DB10BF7B059EF8CE9', '2012-01-20 14:40:20', '2017-07-20 19:30:36', NULL, NULL, NULL, '??? ?????????', 9, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'813B97BD84E7E7448D96186245DA8BE3', '2012-01-20 14:40:19', '2017-07-20 19:30:36', NULL, NULL, NULL, '?????????', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'82013ED7FECBA64293251D49E3C5F249', '2012-01-20 14:40:19', '2017-07-20 19:30:36', NULL, NULL, NULL, 'SimpleFunction', 0, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'8370BCE7FAD1A44E89C9CEBEF9B65730', '2012-01-20 14:40:19', '2017-07-20 19:30:37', NULL, NULL, NULL, '??????????', 2, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'8471C8CC2A4DB7498434076857134504', '2012-01-20 14:40:19', '2017-07-20 19:30:37', NULL, NULL, NULL, '?????????????', 6, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'8478E6663F086649B595A44FB0E3ACD4', '2012-01-20 14:40:20', '2017-07-20 19:30:37', NULL, NULL, NULL, '???????', 5, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'85296531BC53E94DA92EAA8C06DB7EBA', '2012-01-20 14:40:19', '2017-07-20 19:30:37', NULL, NULL, NULL, 'Right Center', 7, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'880235EA33937D4A822422CC302BAE70', '2012-01-20 14:40:20', '2017-07-20 19:30:37', NULL, NULL, NULL, '????????', 0, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'88B61E8F25CE3447AD6C1BBFF486C0B5', '2012-01-20 14:40:19', '2017-07-20 19:30:38', NULL, NULL, NULL, '?????? ?? ??????', 0, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'8967AB8FA14AC34884ABB4121F992AB6', '2012-01-20 14:40:20', '2017-07-20 19:30:38', NULL, NULL, NULL, '??????', 6, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'89A4BDAC5E086645B36B4D6EE1983D4B', '2012-01-20 14:40:22', '2017-07-20 19:30:38', NULL, NULL, NULL, 'InWork', 3, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'89CD19982D797A428C2653E44CC39A06', '2012-01-20 14:40:19', '2017-07-20 19:30:38', NULL, NULL, NULL, '??????? ??????????', 5, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'8B74CE3E17137E4AA26B52C36FCC2AD3', '2014-08-27 12:14:18', '2017-07-20 19:30:38', NULL, NULL, NULL, 'Odd', 2, NULL),
(x'12EEAA312481754EBD16698F4235234B', x'8BF04099E2E1514A9C1490BD0B78AC63', '2012-01-20 14:40:20', '2017-07-20 19:30:38', NULL, NULL, NULL, '?????? ??????', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'8CA054EDE3204F45BAC29F94EA75AADF', '2012-01-20 14:40:19', '2017-07-20 19:30:38', NULL, NULL, NULL, 'Right Bottom', 8, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'8EC8A7B6E1499A4FB90C723D11333FD2', '2012-01-20 14:40:19', '2017-07-20 19:30:38', NULL, NULL, NULL, 'Done', 4, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'8EDBE7B2FF8A8841AFEFF156885E4696', '2012-01-20 14:40:20', '2017-07-20 19:30:38', NULL, NULL, NULL, '????????????? ?????', 3, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9053AA1BDEF6C84B9EB2E66414219AD5', '2012-01-20 14:40:22', '2017-07-20 19:30:38', NULL, NULL, NULL, 'JrnlRunExt', 4, 'JrnlRunExt'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9086B41DFEEC00479335575EC294ACBE', '2012-01-20 14:40:19', '2017-07-20 19:30:38', NULL, NULL, NULL, '??????', 1, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'9131EDE4432D4042AE3E560C5C344000', '2012-01-20 14:40:20', '2017-07-20 19:30:38', NULL, NULL, NULL, '?????????', 2, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'91F148E2377F7949B5FE8B2ACEA8319B', '2012-01-20 14:40:20', '2017-07-20 19:30:39', NULL, NULL, NULL, '? ??????', 1, NULL),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'9325A9462E609540988EB760C874EBA7', '2012-01-20 14:40:21', '2017-07-20 19:30:39', NULL, NULL, NULL, '?????? ?? ??????', 0, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'946290D2F4E8824500C8A8C8BF6229B9', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '??????', 8, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'94681C2F1E72FD4C987E5044F395C2EA', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '????????', 3, NULL),
(x'961085CC094CE749A541D00372E6D444', x'95957657D464F24AB651A8BF99AF646E', '2013-06-11 13:36:12', '2017-07-20 19:30:39', NULL, NULL, NULL, '???', 0, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'96558B8D253A1447A23540BC6F3CF6C9', '2012-01-20 14:40:22', '2017-07-20 19:30:39', NULL, NULL, NULL, '???? ????????', 0, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'97EEDDD82490C44D8F0F36948D1AFB0E', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '?? ???', 4, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'99453A0DD852D4449B1C5FEFA9BBBAE2', '2012-01-20 14:40:22', '2017-07-20 19:30:39', NULL, NULL, NULL, 'Pause', 4, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9D1AD5FFACFA6B42A63B94E77EAB6857', '2012-01-20 14:40:20', '2017-07-20 19:30:39', NULL, NULL, NULL, '=', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9D97202CE63987438622D2AB9425CC45', '2012-01-20 14:40:22', '2017-07-20 19:30:39', NULL, NULL, NULL, 'CustomExt', 2, 'CustomExt'),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'9DD9A340EEB37D41B4CA86448C9D2518', '2012-01-20 14:40:21', '2017-07-20 19:30:39', NULL, NULL, NULL, '??????? ??????', 1, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'9EA6178A9B9CBF4A8AE469F8E2D02718', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '????????????', 2, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'9F54F3E5829DE142BDA84F43CD58D1ED', '2012-01-20 14:40:20', '2017-07-20 19:30:39', NULL, NULL, NULL, '????????? ??????', 0, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'A03844186983CB4C9840E72CB29BE179', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '?????????', 7, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'A03AA8F4F0E9DC40B276313E93AC80BE', '2012-01-20 14:40:20', '2017-07-20 19:30:39', NULL, NULL, NULL, '???????? ????????', 4, NULL),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'A1E06BAC66E1CC44AE3C5E583799070D', '2012-01-20 14:40:19', '2017-07-20 19:30:39', NULL, NULL, NULL, '????????? ???', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'A3485723C0C5AB4D9570B1D90E494617', '2012-01-20 14:40:21', '2017-07-20 19:30:40', NULL, NULL, NULL, '???????? ???????', 0, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'A415B97A5B1DCA47A2FCBBFA00CA46C9', '2012-01-20 14:40:22', '2017-07-20 19:30:40', NULL, NULL, NULL, 'ARMGenerator', 8, 'ARMGenerator'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'A617FF8395523D4FB5732332918EAB3E', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, '???????', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'AA8FCD7F113A5B4A8F177D5B326B6D79', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, 'Center Top', 3, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'ABE79CB5181F234B93BA7B148D00EDD4', '2012-01-20 14:40:21', '2017-07-20 19:30:40', NULL, NULL, NULL, '??', 1, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'AD063B13CFACB0469918DA53A9B3007D', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, '??????', 4, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'AD7BF297629B6246B42F81C7D4A311B9', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, '??????? ????????', 1, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'ADF11B6B6C35674CA8EBE80A2A16C82F', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, '????????????', 6, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'AFADAFACD537574FB28BF45920D0B397', '2012-01-20 14:40:19', '2017-07-20 19:30:40', NULL, NULL, NULL, 'none', 0, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'AFD3E671A7E5C340931C864D5B038308', '2012-01-20 14:40:22', '2017-07-20 19:30:40', NULL, NULL, NULL, 'InControl', 6, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'B0BF2E4105E1F645B12468CFB5319DEE', '2012-01-20 14:40:20', '2017-07-20 19:30:41', NULL, NULL, NULL, '?????? InstanceID (? ???????? ???????)', 3, 'LNK_InstanceID'),
(x'39CFD2BFEB805342A64A24C116D26991', x'B17067B17BF1FB4B8677D11D1D1284BE', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, 'Prepare', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'B1E79C988D519C488575486C888563AD', '2012-01-20 14:40:21', '2017-07-20 19:30:41', NULL, NULL, NULL, '?????', 0, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'B360B484D849BF47ACB5AE5111297FA0', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, '???????????', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'B401EA329193EE4193E4F29A7693A7DC', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, 'Left Top', 0, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'B5F2CC92E6AC85488B7576736BE816E6', '2014-08-27 12:14:02', '2017-07-20 19:30:41', NULL, NULL, NULL, 'None', 0, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'B7AA45176F81814D849FF04C6A3CB0DA', '2012-01-20 14:40:22', '2017-07-20 19:30:41', NULL, NULL, NULL, 'Active', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'B7B1AD8B45589B489BF774413B7DE679', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, 'StopFunction', 2, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'B8B0468C5DBF56468FB637357A196764', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, 'COUNT', 2, NULL),
(x'382838929000504DB8E3262D094E3DFE', x'B8F103B6917CB84FA33128DC9EF1E547', '2012-01-20 14:40:19', '2017-07-20 19:30:41', NULL, NULL, NULL, '?? ????', 1, NULL),
(x'5E820B7D3C8CA244AC6EE53812337737', x'BA0B25544174B741BF51EC2B849FE8F3', '2012-01-20 14:40:21', '2017-07-20 19:30:41', NULL, NULL, NULL, '??????', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'BA1C0F743D8C2D45B634CE55D5D68632', '2012-01-20 14:40:20', '2017-07-20 19:30:42', NULL, NULL, NULL, 'like', 8, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'BB806427972C1744ABB51169422C078D', '2012-01-20 14:40:22', '2017-07-20 19:30:42', NULL, NULL, NULL, 'OnFormExt', 1, 'OnFormExt'),
(x'382838929000504DB8E3262D094E3DFE', x'BF42B8AA674F294AB88ECC0C6657574D', '2012-01-20 14:40:19', '2017-07-20 19:30:42', NULL, NULL, NULL, '???????????? ????', 10, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'BF98A944E3CE7F48A99620F18DEDF958', '2012-01-20 14:40:20', '2017-07-20 19:30:42', NULL, NULL, NULL, '?? ?????? ???????', 2, NULL),
(x'794061085D25D54FABBEDE9BC7987090', x'BFD37F22FA43BF49924A8E8E151F91DC', '2012-01-20 14:40:21', '2017-07-20 19:30:42', NULL, NULL, NULL, '???', 0, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'BFE521A734DFD64B991ADE4BF374111B', '2012-01-20 14:40:21', '2017-07-20 19:30:42', NULL, NULL, NULL, '????????? ??????', 5, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C0F6B5A73202314C8A297DB1820B2486', '2012-01-20 14:40:22', '2017-07-20 19:30:42', NULL, NULL, NULL, 'Ready', 5, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'C21AF3DBEB2EA4499CAF6C9E963E74D4', '2012-01-20 14:40:20', '2017-07-20 19:30:42', NULL, NULL, NULL, '?????', 3, NULL),
(x'C48D9EC186B1F547B49F644C8C795459', x'C22869AA772CAD4BBDDCD52909E73B5F', '2012-01-20 14:40:20', '2017-07-20 19:30:42', NULL, NULL, NULL, '?????????', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'C300B4A587E77B41BBFF3E061DDC5107', '2012-01-20 14:40:19', '2017-07-20 19:30:42', NULL, NULL, NULL, 'Center Center', 4, NULL),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'C32CFC3FD709014BB987A403AC8B4124', '2012-01-20 14:40:22', '2017-07-20 19:30:42', NULL, NULL, NULL, '????????????', 1, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C3358F086683FC4EA310658F27D97005', '2012-01-20 14:40:20', '2017-07-20 19:30:42', NULL, NULL, NULL, '>', 3, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'C465E5A56115DF478403DE8A3E28F6EC', '2012-01-20 14:40:19', '2017-07-20 19:30:42', NULL, NULL, NULL, '? ??????', 8, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'C61819AED7BC924294B813782318B4CD', '2012-01-20 14:40:19', '2017-07-20 19:30:43', NULL, NULL, NULL, 'MAX', 5, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'C676CD74358C904FAC962B6BD0974B17', '2012-01-20 14:40:19', '2017-07-20 19:30:43', NULL, NULL, NULL, '?????????', 5, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'C6E6F44B3B225A49AB48B01E9AF4F3B9', '2012-01-20 14:40:19', '2017-07-20 19:30:43', NULL, NULL, NULL, 'As Numeric', 1, NULL),
(x'A97386691DC5164C8EED7D8810FFF900', x'C783255CF444D64C8BA53195E3B1ACD4', '2012-01-20 14:40:20', '2017-07-20 19:30:43', NULL, NULL, NULL, '?????', 3, NULL),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C7B08E3853F08B48B9D422504CFD3025', '2012-01-20 14:40:20', '2017-07-20 19:30:43', NULL, NULL, NULL, '<>', 2, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C84A7814233FED4FA6E8F36384ACC8CA', '2012-01-20 14:40:22', '2017-07-20 19:30:43', NULL, NULL, NULL, 'Done', 7, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'CA125E0CD7DC814895D1F786EFAD1788', '2012-01-20 14:40:19', '2017-07-20 19:30:43', NULL, NULL, NULL, 'Initial', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'CA2354BD7DC0F14CA543B7E58ABB4865', '2012-01-20 14:40:19', '2017-07-20 19:30:43', NULL, NULL, NULL, 'Left Center', 1, NULL),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CC835814A7A20542938843B53BC1E341', '2012-01-20 14:40:22', '2017-07-20 19:30:44', NULL, NULL, NULL, 'JrnlAddExt', 3, 'JrnlAddExt'),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'CE404E6339B847408CB23D588054E33A', '2012-01-20 14:40:20', '2017-07-20 19:30:44', NULL, NULL, NULL, '?????? ?? ??????', 1, 'LNK_OBJECT'),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'D10FE088B7872243A14F24FFB4234ED7', '2012-01-20 14:40:19', '2017-07-20 19:30:44', NULL, NULL, NULL, '???????????', 10, NULL),
(x'9313F4BAD350454D96AF56B8415569D8', x'D18C6461398DB54098FA12C0A0D52345', '2012-01-20 14:40:20', '2017-07-20 19:30:44', NULL, NULL, NULL, '?????', 5, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D2D4F44B9A825141B7D5C9061EFFBB00', '2012-01-20 14:40:19', '2017-07-20 19:30:44', NULL, NULL, NULL, '????', 7, NULL),
(x'C608D44CBE64964787E545A26D3B3DDA', x'D39843410C262A41AE2A4A8F6000E9F2', '2012-01-20 14:40:19', '2017-07-20 19:30:44', NULL, NULL, NULL, 'RunAction', 2, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'D39DFF55453BA1418FC4AC5E1C7ED9A2', '2012-01-20 14:40:19', '2017-07-20 19:30:44', NULL, NULL, NULL, 'Center Bottom', 5, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'D43C7FFCE758784E8032D4759E554CC2', '2012-01-20 14:40:20', '2017-07-20 19:30:44', NULL, NULL, NULL, '?????????? ? ???????', 4, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'D46A6ACD79F9D245A2CAD6F0590DC199', '2012-01-20 14:40:22', '2017-07-20 19:30:45', NULL, NULL, NULL, 'Prepare', 1, NULL),
(x'3A3878A9883FD34787A231AF949E53B1', x'D77F1255C06E1A45A66FBAC47F2B5A7F', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, '??????? ??????', 3, NULL),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'D7B80E55680E7144A0AAAFB82992B62E', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, 'MIN', 4, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D8D071C53E90E84882A77BEE63B40532', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, '???????', 10, NULL),
(x'E0280E0D19D66A49BF995F9F28321C74', x'DB0FA4FEAEAB524298C0D749CA186958', '2012-01-20 14:40:20', '2017-07-20 19:30:45', NULL, NULL, NULL, '???', 0, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'DC98F9BF8BDFA6428CEC1536142C4E7C', '2012-01-20 14:40:20', '2017-07-20 19:30:45', NULL, NULL, NULL, '???????????', 0, NULL),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DD176D4122D5EC4B93AB5C4DADBD350C', '2012-01-20 14:40:20', '2017-07-20 19:30:45', NULL, NULL, NULL, '???? ???', 0, NULL),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'E2256C3EFEE83B47814ADE6FFD764382', '2012-01-20 14:40:20', '2017-07-20 19:30:45', NULL, NULL, NULL, '??????', 2, NULL),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'E367C06804767842B6E2033CCB53F694', '2012-01-20 14:40:20', '2017-07-20 19:30:45', NULL, NULL, NULL, '??????????', 3, NULL),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E3E4A84AE4D1B042B598D2B46B61604C', '2014-08-27 12:14:12', '2017-07-20 19:30:45', NULL, NULL, NULL, 'Even', 1, NULL),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'E56A043523F6EC45952D2B2F84AB001B', '2012-01-20 14:40:21', '2017-07-20 19:30:45', NULL, NULL, NULL, '???', 0, NULL),
(x'728E3461855DE34892C434841FA1AA8F', x'E5BB816944538A459E80FE8F22C41956', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, 'As Date', 2, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'E64535603EFD3A458874C4D27B4D5B17', '2013-01-28 13:14:07', '2017-07-20 19:30:45', NULL, NULL, NULL, 'II', 2, NULL),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'E6DA6346ED859B44A0AC51D626BC128C', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, '???', 4, NULL),
(x'39CFD2BFEB805342A64A24C116D26991', x'E728FAB6A08629498BA15B3694FFDAB2', '2012-01-20 14:40:19', '2017-07-20 19:30:45', NULL, NULL, NULL, 'Processed', 5, NULL),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'E89DB166708D3442B8502E454CBA8D5D', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, '????', 3, NULL),
(x'B0D7CA66564368479AED471FFB780C23', x'E9CB6F7CBCC0E04D98ABDD4CA158DD0A', '2012-01-20 14:40:20', '2017-07-20 19:30:46', NULL, NULL, NULL, '??????? ?? ???????', 2, NULL),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'E9F79F093B3C094B92C0972C1BD50E42', '2012-01-20 14:40:20', '2017-07-20 19:30:46', NULL, NULL, NULL, '??? ???? ?????', 1, NULL),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'EC2F6B789448E34A9A64DC855EADB818', '2012-01-20 14:40:21', '2017-07-20 19:30:46', NULL, NULL, NULL, 'VB6', 0, 'VB6'),
(x'C608D44CBE64964787E545A26D3B3DDA', x'EC815D0F90E5B0408CEE6CEB0B689299', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, 'RefreshOnly', 1, NULL),
(x'65348B4111516148B4C5E9535B3FD7B3', x'ED28561485509540B4BC7515B9309E9B', '2013-01-28 13:14:14', '2017-07-20 19:30:46', NULL, NULL, NULL, 'III', 3, NULL),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'EE15993801C44F4E8F6F5B688BB61DA4', '2012-01-20 14:40:22', '2017-07-20 19:30:46', NULL, NULL, NULL, '?????????', 2, NULL),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'F055BC8039E136428E4C26AAD488C064', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, 'cls__', 0, NULL),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'F1ABE170891F9E41B07D32D9C0F896FC', '2012-01-20 14:40:20', '2017-07-20 19:30:46', NULL, NULL, NULL, '?????? ?? ??????', 2, 'LNK_ROW'),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'F227F8A1B5B06C43AEFA0098FC6D70DB', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, '??????', 11, NULL),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'F27A70EEAB629A4792DE21336FFB978D', '2012-01-20 14:40:21', '2017-07-20 19:30:46', NULL, NULL, NULL, '??????? ???????????', 2, NULL),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F3850937529B304F806D3534CE1ABD9C', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, 'StartFunction', 1, NULL),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'F83AC30500509D44BFF9BEC2DCEC164D', '2012-01-20 14:40:19', '2017-07-20 19:30:46', NULL, NULL, NULL, '???????', 5, NULL),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'F9F70767622992409DD1FD2C7CC43313', '2012-01-20 14:40:22', '2017-07-20 19:30:46', NULL, NULL, NULL, 'Initial', 0, NULL),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'FA91227AE95A6D4098F2D904B12BB32F', '2012-01-20 14:40:20', '2017-07-20 19:30:46', NULL, NULL, NULL, '?? ?????? ', 1, NULL),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'FB1121156C564145BD743B942B6B4AAF', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, '??????', 0, NULL),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'FC8EA9C17ECAF7478E10A6CD41D8F3FA', '2012-01-20 14:40:19', '2017-07-20 19:30:47', NULL, NULL, NULL, 'Left Bottom', 2, NULL),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'FFFAF68FD485D745805D9B1A3F192168', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, '???????? ?? ?????????', 1, NULL);

-- 
-- Вывод данных для таблицы epfilterlink
--
-- Таблица areal_cli.epfilterlink не содержит данных

-- 
-- Вывод данных для таблицы fieldtypemap
--
INSERT INTO fieldtypemap VALUES
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'003724EF4164E24090766ABEC8BC3B4E', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'007AAFC5BEAC1E44A955737D6F6B68E7', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'00C1FA5E53185A439F89BA359F0DBE28', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'013F584D778C5A408ECC9FB887DA8903', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'01470EF9DDC63340B0877C0144E0C741', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'12EEAA312481754EBD16698F4235234B', x'0165153C8ECDD6408ABAB2E1280B4CC3', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'01B8C8781C530C488F147E4C9281B92A', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'01CBA6FCC9575341AC22BABAA1BAD0E5', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'PASSWORD', 80),
(x'E0280E0D19D66A49BF995F9F28321C74', x'020B4937D15BA442BCF2EDAA7DFF8E1B', '2012-01-20 14:40:20', '2017-07-20 19:30:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'02BD7CE3787AA34FAC44949D67E9A44F', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'02C8F70B0559A24CAE5E9EABE61062ED', '2012-01-20 14:40:21', '2017-07-20 19:30:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'0329CCC2C0238547B7DBD4385271318B', '2012-01-20 14:40:20', '2017-07-20 19:30:48', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'035F8A91EAFBF04587833F8DC3B32B00', '2012-01-20 14:40:21', '2017-07-20 19:30:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'03BE96A24CEB064089D5368AA8B4C6D1', '2012-01-20 14:40:19', '2017-07-20 19:30:48', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'048588B2FAA6D941A7E2C07ECB81C86F', '2012-01-20 14:40:19', '2017-07-20 19:30:48', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'04C66FABEF0843488A34A2CEAF3FD935', '2012-01-20 14:40:19', '2017-07-20 19:30:48', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'058E171D5641A245A1315F2EBD150140', '2012-01-20 14:40:21', '2017-07-20 19:30:48', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'067845F73956884E920F712072CC8C54', '2012-01-20 14:40:20', '2017-07-20 19:30:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'961085CC094CE749A541D00372E6D444', x'068BABD19BC2A9448DA70BA6F043CFE7', '2012-01-20 14:40:21', '2017-07-20 19:30:48', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'06B3BDA468FFAF4F80975FD7645FBE86', '2012-01-20 14:40:20', '2017-07-20 19:30:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'06F37517198E344A91A3D7D76C917CF2', '2012-01-20 14:40:21', '2017-07-20 19:30:48', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'06FCCC84DB7C0744BB857CC9C62AE3CA', '2012-01-20 14:40:22', '2017-07-20 19:30:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'078A9A808F54744E8E0297AF179FF20C', '2012-01-20 14:40:20', '2017-07-20 19:30:48', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'07CE65331A7C694D8672064C13CB9095', '2012-01-20 14:40:21', '2017-07-20 19:30:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'0871E8A42E00C74CB8D1EEFBAFC77CAB', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'08A0C224AF7FAD4AA8F05607092B7908', '2012-01-20 14:40:21', '2017-07-20 19:30:49', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 255),
(x'B0D7CA66564368479AED471FFB780C23', x'094301A4D4787444BA6A6A6191CF9C73', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'0A2ABDAC6505C04F9F60036F941DFF7C', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'0AA6D18BF4CF084B9C76B482472636B1', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'0AA71258A5417E41B915AE3040ED348E', '2012-01-20 14:40:19', '2017-07-20 19:30:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'0AC71F954FCB664CBD3209C56623D411', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'0E966C3308625946A524419EFD682B68', x'0ACEFDB7B445524CB05BEF58B5C0598E', '2012-01-20 14:40:19', '2017-07-20 19:30:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'IMAGE', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'0B404B678B0AE942A2EED4925B50FFF2', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'0BE6E26BE6CA4C4488D567B2C718DDA3', '2012-01-20 14:40:22', '2017-07-20 19:30:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'0C8999E152819044B2F9A24C40264067', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'0CA10B8D85D3A548BB66E983A1F0882A', '2012-01-20 14:40:19', '2017-07-20 19:30:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'0DA6F9F74D791A43A2F3787D9E2A7D42', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'0DED46E63315AC439816DFFA70047F34', '2012-01-20 14:40:20', '2017-07-20 19:30:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'0E0A32D4008A084D8789E55851F0EC0F', '2012-01-20 14:40:21', '2017-07-20 19:30:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'0E525A1697F19E4B93257C5D4F9AD40D', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TIME', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'0E93D90C73695744A53B48D9325205C3', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'0F37E1821899754E8A3CEE0D503C635C', '2012-01-20 14:40:21', '2017-07-20 19:30:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'0F855B4651ECFE45BE7B942B43F7F76C', '2012-01-20 14:40:21', '2017-07-20 19:30:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'0FB24BA7F70B934CAC99F12E19CE6875', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'uniqueidentifier', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'0FEC848BF9C33C49BDB1207AD7999301', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'107D13A98DD0024898148F1A957F25A2', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'10AA9CCEA8BA8C4FAEDC870B5F47C066', '2012-01-20 14:40:22', '2017-07-20 19:30:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'10B453ED0C6F864989089E2C02E4132B', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'10BCCBA188A3964BA452A1316BD8B47B', '2012-01-20 14:40:21', '2017-07-20 19:30:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'10D8DC2BBFF28F4692F9AEE4AC48EADA', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'DATETIME', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'10E31191789B274CB1BF39B3136E2DCD', '2012-01-20 14:40:21', '2017-07-20 19:30:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'1123FA4A2251DE45A07A2DBC360968EE', '2012-01-20 14:40:20', '2017-07-20 19:30:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'116B422600E0844EB0979BDABCCDB46C', '2012-01-20 14:40:21', '2017-07-20 19:30:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'button', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'11AA270EAD471C47B17E63E0D7C9DE07', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'121064D92ECE7B48924070862B3BEE6F', '2012-01-20 14:40:22', '2017-07-20 19:30:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'NUMERIC', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'125057C62A275C41A86FF66C8A6A60FF', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'GUID', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'1293F9894E5C064E9267219F4105CEDA', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'1349D364F7C55A4183712A9DA0675C49', '2013-07-10 18:50:53', '2017-07-20 19:30:51', NULL, NULL, NULL, x'6D7D8396C49AF74788AFCE375153C200', 'xtype', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'1361BF2DDF70DC4CAFB308E271BA9E81', '2012-01-20 14:40:21', '2017-07-20 19:30:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'button', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'13901ABC26F60448A71DC6DFE444EE43', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Object', 0),
(x'0E966C3308625946A524419EFD682B68', x'1400E64471891D47AE06E07EE697B22B', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'9313F4BAD350454D96AF56B8415569D8', x'140F805F6773544E8BFD2BF3FEEC9FF6', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'1478D0F35D023F48AFF807F79C266E36', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'CHAR', 38),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'14CD81A07497BC49AFE23E3E6F5D0157', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'GUID', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'14ECB1A19BDBBB42AFFEFA42488DF4F4', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'151C9E8FE55D624AA73F068ECCF29A2A', '2012-01-20 14:40:19', '2017-07-20 19:30:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'15A5910C2946064B9C1ACB555CFB4976', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'15AF0EA55D569E4098B63B16DB7ACD42', '2012-01-20 14:40:21', '2017-07-20 19:30:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'15BB13224F01144D800259F7A5A33DEF', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'167275BCECD04F4F950EF257A9F1F130', '2012-01-20 14:40:21', '2017-07-20 19:30:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'172E658AAE428445A272113D2115AB79', '2012-01-20 14:40:20', '2017-07-20 19:30:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'1742003ECD862147B9119725AFB346D6', '2012-01-20 14:40:21', '2017-07-20 19:30:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'PASSWORD', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'174305D883AEBD44A0F7744A13C11D41', '2012-01-20 14:40:22', '2017-07-20 19:30:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'1773627665D1D74700DBA5FC9BB7D855', '2012-01-20 14:40:20', '2017-07-20 19:30:52', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'17CC8546D1366B4A8616972BF1E454C2', '2012-01-20 14:40:21', '2017-07-20 19:30:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'RTF', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'17EA102B73D3A54AB3EF2811F7BF6156', '2012-01-20 14:40:22', '2017-07-20 19:30:52', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'18316FE9BC5D4340A536612CF0570098', '2012-01-20 14:40:19', '2017-07-20 19:30:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'189DE24778D8B24D97B66AFE7A34ECB9', '2012-01-20 14:40:19', '2017-07-20 19:30:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'197A04D44B16BB4E96626EB218A7BF87', '2012-01-20 14:40:19', '2017-07-20 19:30:52', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'1980A7DA5042C040BA6A3A906696C05E', '2012-01-20 14:40:19', '2017-07-20 19:30:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'System.Guid', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'19C2BBBDAA0A2941B20200316D11D654', '2012-01-20 14:40:20', '2017-07-20 19:30:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'1A07925B26D172468A4503B170DF5612', '2012-01-20 14:40:19', '2017-07-20 19:30:52', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'bytea', 0),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'1B1B4E929AF2894E88E48E8E16044E22', '2013-05-06 12:13:04', '2017-07-20 19:30:53', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'null', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'1B918C480E556F4A9B238D75140D6121', '2012-01-20 14:40:22', '2017-07-20 19:30:53', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'1BE413776EAD8549A1A903C5F97188A2', '2012-01-20 14:40:19', '2017-07-20 19:30:53', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'1C8D8E7503E3264F903953A9D4ACC581', '2012-01-20 14:40:19', '2017-07-20 19:30:53', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'1C94A949A459994C8AB488C73F3DC9FF', '2012-01-20 14:40:20', '2017-07-20 19:30:53', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'1D553BF4FB07BC4489C27EE1E1DAEF41', '2012-01-20 14:40:20', '2017-07-20 19:30:53', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'1DB7BBA4F0B92749AEFCC2488810370C', '2012-01-20 14:40:19', '2017-07-20 19:30:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1E4CA22BBA3DCF4FA20CD9A4B2837030', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'1E6C2EABC95F96418B85BFF9F808E8D1', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'1E972C52312D4E419EBC42E638657C21', '2012-01-20 14:40:19', '2017-07-20 19:30:54', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'URL', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'1EDC169F8F0C7F439AF8CB357E63C5A8', '2012-01-20 14:40:19', '2017-07-20 19:30:54', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1F49FBF19CC5C541A6C5835EF27F5284', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'1F9EE73CC780224F9B7743ABF9E17698', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'1FE8E6B08D701B45AEADCDF765ACF64D', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'200CC54C1D02C544BFFE13D2CDD7C79F', '2012-01-20 14:40:21', '2017-07-20 19:30:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'20F84ED299CCCB4AB5AA233FDC5F565E', '2012-01-20 14:40:22', '2017-07-20 19:30:54', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'20FF6063DE31AE4DBD3D0481B524E23A', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'220C14E59713EA49AC42EA553D1619E8', '2012-01-20 14:40:22', '2017-07-20 19:30:54', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'2215919D3EEDCA489082C914AB35D6CD', '2012-01-20 14:40:20', '2017-07-20 19:30:54', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'2256ED34DB508B459A0C50B641D64DF1', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'22CE03C2F7478943A4BF9F0B5513046D', '2012-01-20 14:40:21', '2017-07-20 19:30:55', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'22EC7793104CBC4798FFEF5AA25F5BCE', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2336910AE0972B459660C9A13F2339EF', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'233F338DC4266049A5D950B774CC9D45', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'28375783F0580E40A5A6F407682050ED', x'2389439F8229EC448AD6A66E74809297', '2012-01-20 14:40:22', '2017-07-20 19:30:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'241D9B83AF07F049B6EF2F0053B4E411', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'244016E0464EE343811499ACC659528D', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'2466E954D2C88749ABB15F62E5BCF3C1', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'251D7CF895F4FF479FCA115B855F91C6', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'25280242D096E74EAE665A0262B844E5', '2012-01-20 14:40:22', '2017-07-20 19:30:55', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'255135AF67CB6C47B0121AE19611B67D', '2012-01-20 14:40:22', '2017-07-20 19:30:55', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'25AB5868DB4FA0408A7389403F32C56D', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'0E966C3308625946A524419EFD682B68', x'26479DFD66F0044D8B9D645CAC9E405F', '2012-01-20 14:40:19', '2017-07-20 19:30:55', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'IMAGE', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'264B9617B8931946A9D8A0306BE1533D', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'265A0390DAF41546B3E5B4AAA619610F', '2012-01-20 14:40:21', '2017-07-20 19:30:55', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'PASSWORD', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'268D9B4D6317344583A87EE4B49D5CFD', '2012-01-20 14:40:20', '2017-07-20 19:30:55', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'26EE04FB1D335249BF8F882E256081B0', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'2714FB39752F9549A1DB1E3B89FA29D3', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'FILE', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'27DC01F557134C48B951DF0F55B55CB7', '2012-01-20 14:40:20', '2017-07-20 19:30:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'2812536D2B28B446AF2CB25606EB13DC', '2012-01-20 14:40:20', '2017-07-20 19:30:56', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'28400B39E524F741810115B2D6F50F5C', '2012-01-20 14:40:20', '2017-07-20 19:30:56', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'28682CA552772348B25F2947CF18429A', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'28827EE7913C7D4D8ADF1ECE233EFBDB', '2012-01-20 14:40:22', '2017-07-20 19:30:56', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'290A433E733B324C93F7B20AE9E9FB5B', '2012-01-20 14:40:20', '2017-07-20 19:30:56', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'2917DEBFAEEB2C4689677E5F26420185', '2012-01-20 14:40:21', '2017-07-20 19:30:56', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'29F66253F6D9F744BCF246C3FE52AE5F', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'28375783F0580E40A5A6F407682050ED', x'2A5DDC585B4CB3429C27043D83E81F94', '2012-01-20 14:40:22', '2017-07-20 19:30:56', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'2A611A80183483448925BC70EDC8F63C', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'2AA70E5A7CB57946BE056FAF22D23631', '2012-01-20 14:40:22', '2017-07-20 19:30:56', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'2AA950DF5D95AC4DBADCCEE676EABC35', '2012-01-20 14:40:19', '2017-07-20 19:30:56', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'2AAAE5F913C9084CAE59610755341E7F', '2012-01-20 14:40:20', '2017-07-20 19:30:57', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'DATETIME', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'2B055C97106C944F9BD8587404BB26D0', '2012-01-20 14:40:21', '2017-07-20 19:30:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'8F47A07A0CA8254B9425A540399C6705', x'2BA206F1D6FAFA429599E90DA089CE49', '2012-01-20 14:40:20', '2017-07-20 19:30:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DATETIME', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'2BE917CFE5774044AA474F4411BD203A', '2012-01-20 14:40:19', '2017-07-20 19:30:57', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'2C8806CE94A0DB458032E223E5B38707', '2012-01-20 14:40:20', '2017-07-20 19:30:57', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'2CC7C4265E83874DA14B12A24D9CE41C', '2012-01-20 14:40:21', '2017-07-20 19:30:57', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'2CCA25F5C04E8847B318AA58880D8998', '2012-01-20 14:40:22', '2017-07-20 19:30:57', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'2D8A797C2B72F944AF01EC39C6FEB9DC', '2012-01-20 14:40:20', '2017-07-20 19:30:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'2DAEC05AA0EC3543AECBE173E60DC42F', '2012-01-20 14:40:21', '2017-07-20 19:30:57', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'DATE', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'2DB6A3F19E09E64A870AF81BB8D6F5A7', '2012-01-20 14:40:19', '2017-07-20 19:30:57', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'2E07696105DFED40A327D785983F8FFB', '2012-01-20 14:40:19', '2017-07-20 19:30:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'2EB7D2FC6199E645A517384EF090CA92', '2012-01-20 14:40:20', '2017-07-20 19:30:58', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'2F112EA64D3DD14A808EF151ADE95075', '2012-01-20 14:40:19', '2017-07-20 19:30:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'2F399ABCBE633142998921DEEE5600A2', '2012-01-20 14:40:21', '2017-07-20 19:30:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'2F415BE983FADE4FAEEAC616BDCE4F18', '2012-01-20 14:40:19', '2017-07-20 19:30:58', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'2F7A4C0032FDCB48A9067DDD65FDE3ED', '2012-01-20 14:40:19', '2017-07-20 19:30:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'2FD82BA5A8FC2445BB86B27BF340A8EC', '2012-01-20 14:40:21', '2017-07-20 19:30:58', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'2FEC9D08878CAA41923A8D6299AFA707', '2012-01-20 14:40:22', '2017-07-20 19:30:58', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'317DBA8A050D22439082A23D45E316C6', '2012-01-20 14:40:19', '2017-07-20 19:30:58', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'317FD3717DCE62478D5C105678156C23', '2012-01-20 14:40:21', '2017-07-20 19:30:58', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'3188A83F7CB289489C2B67307E82B24C', '2012-01-20 14:40:20', '2017-07-20 19:30:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'32343DD49F18464E9CCDD0EC1A1705C9', '2012-01-20 14:40:20', '2017-07-20 19:30:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'3257116E04117C43B92FA850679D61BC', '2012-01-20 14:40:22', '2017-07-20 19:30:58', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'3266D1D2A434A64BA33383D1D1CF1D18', '2012-01-20 14:40:22', '2017-07-20 19:30:59', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'961085CC094CE749A541D00372E6D444', x'32A13254550B1A4EBA92F4CB6BBBC181', '2012-01-20 14:40:21', '2017-07-20 19:30:59', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'33138DB6B4EA96458D792C145B31466E', '2012-01-20 14:40:22', '2017-07-20 19:30:59', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'3374FEC527EAE74A88A1E36363009039', '2012-01-20 14:40:21', '2017-07-20 19:30:59', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'DATE', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'339AD3BC851FAB489AF6331E035CEB80', '2012-01-20 14:40:19', '2017-07-20 19:30:59', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'343C78E7D688464D9C9C3DF7690DF31F', '2012-01-20 14:40:19', '2017-07-20 19:30:59', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'346692E240DA144BBAF07666E7DAE354', '2014-04-15 11:45:12', '2017-07-20 19:30:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'3519EEB85F1F26498E11BA61842DC5DC', '2012-01-20 14:40:20', '2017-07-20 19:30:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'35C224874B20FF47995904A139F42BAE', '2012-01-20 14:40:20', '2017-07-20 19:30:59', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'961085CC094CE749A541D00372E6D444', x'35EBAB2F06924D4081D59DE08F86A835', '2012-01-20 14:40:21', '2017-07-20 19:30:59', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'3612E314682B8B44B7FA63A468034F8C', '2012-01-20 14:40:19', '2017-07-20 19:30:59', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 255),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'363D4E724321534F8E75F147F06F780E', '2012-01-20 14:40:22', '2017-07-20 19:30:59', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'366BB5F8F4D01446939AC433931C6B5C', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'3673E9F1AC85A244A7EEC1DD48917544', '2012-01-20 14:40:19', '2017-07-20 19:31:00', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'961085CC094CE749A541D00372E6D444', x'367D4DC389AFBD478AD97DCF3A2D84CA', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'36B363DE1882494198F707E8DF7B75C8', '2012-01-20 14:40:20', '2017-07-20 19:31:00', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'3792DC4B9AF6A84AB3EFE8993AB56723', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'12EEAA312481754EBD16698F4235234B', x'37A5FDB043F05E4294821005276CCADC', '2012-01-20 14:40:20', '2017-07-20 19:31:00', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'37A91F064CC53D4A84E06DE44203D8B9', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'37F579E17A5C6E47BCE071050D364F1B', '2012-01-20 14:40:19', '2017-07-20 19:31:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'3862BAF800AB854FBAA36FA50F167309', '2012-01-20 14:40:19', '2017-07-20 19:31:00', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'392E659746BBD1499E5F5F503F027E03', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'39420EF4D8188C4EABD1301BA03A048B', '2012-01-20 14:40:21', '2017-07-20 19:31:00', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'button', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'395342520BCD084281A62D0B955058C8', '2012-01-20 14:40:22', '2017-07-20 19:31:01', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'39881434C48103409CDF3E2C5EE68416', '2012-01-20 14:40:20', '2017-07-20 19:31:01', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'39CDE3E0AEF6AA42AAA4A4959262C815', '2012-01-20 14:40:21', '2017-07-20 19:31:01', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'button', 0),
(x'382838929000504DB8E3262D094E3DFE', x'39F3B7F6D42D3245BD7DD1F85CCFF8C3', '2012-01-20 14:40:19', '2017-07-20 19:31:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'39F78E9D670B944684FA1D1CBA3D1337', '2012-01-20 14:40:20', '2017-07-20 19:31:01', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'3A919456862EB44890B7896A3DF76267', '2012-01-20 14:40:20', '2017-07-20 19:31:01', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'3ABD9113F28CDA41AF06B249E6E15D08', '2012-01-20 14:40:22', '2017-07-20 19:31:01', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'3AD53B0E56254248985098439D5ED7BB', '2012-01-20 14:40:20', '2017-07-20 19:31:01', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TIME', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'3AD825B7823111448517ABB53D5D8BF4', '2012-01-20 14:40:20', '2017-07-20 19:31:01', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'3B00E6514B8E5340B4319AB7889A0935', '2012-01-20 14:40:21', '2017-07-20 19:31:01', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'3B13685909BED848B7FDE7B5FF2C45BF', '2012-01-20 14:40:22', '2017-07-20 19:31:01', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'3BCCEF9DADDE254E8311D50F3CBD94F0', '2012-01-20 14:40:19', '2017-07-20 19:31:01', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'3C01ACD3C2A7834DAB08AF4D4B4C4525', '2012-01-20 14:40:22', '2017-07-20 19:31:01', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'3C173EDFE906F34EA4621344BF5D8290', '2012-01-20 14:40:19', '2017-07-20 19:31:02', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'3C836B494013C04B99E6F53407D81BFC', '2012-01-20 14:40:20', '2017-07-20 19:31:02', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'3CE401971BA7A245BB9D64E02A085E22', '2012-01-20 14:40:20', '2017-07-20 19:31:02', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'3CF48378EA9EB64A8936CD9C91F9B68D', '2012-01-20 14:40:21', '2017-07-20 19:31:02', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'3D9B6E48D55CCD4E9897A811488DD8EF', '2012-01-20 14:40:21', '2017-07-20 19:31:02', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'3DB16322DB965B48BECE3FD5F863952D', '2012-01-20 14:40:19', '2017-07-20 19:31:02', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'long', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'3E223711A80AB34F8C6FB25DF9C11457', '2012-01-20 14:40:21', '2017-07-20 19:31:02', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'3E2A5C029466E94586CABA68C0826FDF', '2012-01-20 14:40:19', '2017-07-20 19:31:02', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'3E536AE3637B53438292B93E66AD6D11', '2012-01-20 14:40:21', '2017-07-20 19:31:02', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'3F834B9C16E1534FB66D93421F4E41E4', '2012-01-20 14:40:21', '2017-07-20 19:31:02', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'3FB4FC47DCEAD149BC66EFBA1AEB3AD7', '2012-01-20 14:40:20', '2017-07-20 19:31:02', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'GUID', 0),
(x'961085CC094CE749A541D00372E6D444', x'4026054C39D2E54597706F2DFEFFE297', '2012-01-20 14:40:21', '2017-07-20 19:31:03', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'410BD7F77828BB40BD71038EC173AAE8', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'414E05630AC22644B59AC17CC3D035DA', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'4150883B7C8E484CB28F31511BB71282', '2012-01-20 14:40:20', '2017-07-20 19:31:03', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TIME', 0),
(x'0E966C3308625946A524419EFD682B68', x'416E964CAA12574B927A52492296EA6A', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Object', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'4195559EE88BF947839D9D072D188F4F', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'FILE', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'420C05F83E14F24EB5EB0E2C990AFBF0', '2012-01-20 14:40:21', '2017-07-20 19:31:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'4214FFBF279C2445925974727AE08FD3', '2012-01-20 14:40:20', '2017-07-20 19:31:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'426D1FB85EE30540B485ABDF32B85C01', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'4271348C380904498E463A5B7246DC25', '2012-01-20 14:40:22', '2017-07-20 19:31:03', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'42F3697F1D751D4AA04A7916FF96D94C', '2012-01-20 14:40:22', '2017-07-20 19:31:03', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'42F94446AB0ABA4C9F72CFD39E92461B', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'431C5E08DE46F045B53AA39CC833E9ED', '2012-01-20 14:40:19', '2017-07-20 19:31:03', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'43768CD13C13654E949461D91248B60D', '2012-01-20 14:40:20', '2017-07-20 19:31:04', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'43787028A89A6743A2DF04B543D2D315', '2012-01-20 14:40:21', '2017-07-20 19:31:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'43D314DE605480458E01EE8FE1CAE609', '2012-01-20 14:40:22', '2017-07-20 19:31:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'C608D44CBE64964787E545A26D3B3DDA', x'43DE7D6B4042AD448DE267EB1BECA282', '2012-01-20 14:40:19', '2017-07-20 19:31:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'441EA9410E894E41B8EBB73FDFBA15E3', '2012-01-20 14:40:22', '2017-07-20 19:31:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'444770DD96FFF74A84E5C933CFD8AA75', '2012-01-20 14:40:22', '2017-07-20 19:31:04', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'444D0D6F25C0D34CA391289182F457B6', '2012-01-20 14:40:20', '2017-07-20 19:31:04', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'4476C34307E61B42840E3DF4FDC31D88', '2012-01-20 14:40:19', '2017-07-20 19:31:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'44B1862225AC574398B448B2BE9DEAAB', '2012-01-20 14:40:19', '2017-07-20 19:31:04', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'long', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'4647E8183310334693C5E96D339B431D', '2012-01-20 14:40:21', '2017-07-20 19:31:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'46B2D89FD7C22E4286D7491A26C0C292', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'46C78243211EC443AD62D7BF23DB425B', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'46DD2D738ADD154291392FB4EEA322F6', '2012-01-20 14:40:22', '2017-07-20 19:31:05', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'46E881897DE36F4792BADBED59C34E4B', '2012-01-20 14:40:20', '2017-07-20 19:31:05', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'476AF8F1D7C35844BC2CD4EF595BE0FC', '2014-03-12 10:17:16', '2017-07-20 19:31:05', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'8608384640BAA948AAF5B8B138FB38C8', x'47C31E42CD41704FA24E33F82DF36566', '2012-01-20 14:40:21', '2017-07-20 19:31:05', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'EMAIL', 80),
(x'39CFD2BFEB805342A64A24C116D26991', x'481C718429F1CA4D8EF719793356D8D5', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'48A26D27C55BE6438A4BC8DA6F5B8185', '2012-01-20 14:40:20', '2017-07-20 19:31:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'48E48090AEE3904CB5B8809ADAE9805B', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'49190B89D239074B8CBF50919E7F845B', '2012-01-20 14:40:21', '2017-07-20 19:31:05', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'49AD10820B2891498A3A1F90137A1741', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'49F94AD563BE51498696858FB7184DBC', '2012-01-20 14:40:20', '2017-07-20 19:31:05', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'49FC0D711E80014FAC946479D4CC1469', '2012-01-20 14:40:21', '2017-07-20 19:31:05', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'4A0383D50195AC4982FF8083849DED78', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'VARIANT', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'4A1412946E51CE48B2F3A9464CD16876', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'4A4186615F7E274DA2EF77E559A5EFC9', '2012-01-20 14:40:20', '2017-07-20 19:31:05', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'4A4A09D22EF2F84BBD6FFF17D5238BBF', '2012-01-20 14:40:19', '2017-07-20 19:31:05', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 255),
(x'E47F3330E2A570448B995F37A5F1947D', x'4AD0825463E04446872FE998322E782A', '2012-01-20 14:40:20', '2017-07-20 19:31:06', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'4AD2FFC839AFF749805AF3C8E991FF70', '2012-01-20 14:40:20', '2017-07-20 19:31:06', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'4B90EC578339BF40B6347FD9B6299B53', '2012-01-20 14:40:19', '2017-07-20 19:31:06', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'4BB8278D1692C8468BF824D3BD38CFE5', '2012-01-20 14:40:21', '2017-07-20 19:31:06', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'4CAD2B8E4B60B3449BB4B308FB2DE5E7', '2012-01-20 14:40:21', '2017-07-20 19:31:06', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'4CE7EE6936E5EB43A7E88ACA1FE5C887', '2012-01-20 14:40:21', '2017-07-20 19:31:06', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'4D079C19CD738D49ACFAFB0AEDA33886', '2012-01-20 14:40:20', '2017-07-20 19:31:06', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'4DEA817C0AECDB47A4F4014712A7B438', '2012-01-20 14:40:21', '2017-07-20 19:31:06', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'4E0D57C5801CF24197CAD7B7A1D06277', '2012-01-20 14:40:20', '2017-07-20 19:31:06', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'4E13BADB724FD44493437DBD5B98D26C', '2012-01-20 14:40:20', '2017-07-20 19:31:06', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'4E440B12054BB24589F4E8A678CBF557', '2012-01-20 14:40:19', '2017-07-20 19:31:06', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MULTIREF', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'4E601A616DC02D4680FBE03D0DD3A5DB', '2012-01-20 14:40:22', '2017-07-20 19:31:07', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'double', 0),
(x'382838929000504DB8E3262D094E3DFE', x'4EE96C7B1294A147B25882CF8302DBBD', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'4F11E6A70E0A5E4CA626CA65D7283663', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'HTML', 0),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'4F62528BAD5D2F4F97B638C8060FD98E', '2013-05-06 12:13:04', '2017-07-20 19:31:07', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'object', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'4F7EF9F7FF514548B3233D9F7C97521E', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'4F9DAFF0051586499E7C9E6F11F99927', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'4FE4738DB9ED5C4AAE84C2AE1FA9C811', '2012-01-20 14:40:20', '2017-07-20 19:31:07', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'500194A2767D4448835B6152B4E43EE0', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'500B10DBA5A5BC4CA0CDA88DD55FD0E1', '2012-01-20 14:40:21', '2017-07-20 19:31:07', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'EMAIL', 80),
(x'794061085D25D54FABBEDE9BC7987090', x'500DFF5496FAEB4A8241E8934195E486', '2012-01-20 14:40:21', '2017-07-20 19:31:07', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'507551E93165A8438A9BCD63EE6D966D', '2012-01-20 14:40:19', '2017-07-20 19:31:07', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'507FD80242CE9146BE90566B80734461', '2012-01-20 14:40:20', '2017-07-20 19:31:07', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'datetime', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'51087E58B322364694FBD9C3F1BF1CA9', '2012-01-20 14:40:21', '2017-07-20 19:31:07', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'515B6F12A1F38F439A63A4673255599A', '2012-01-20 14:40:19', '2017-07-20 19:31:08', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'516ED224A06971408D844B180BA27BA6', '2012-01-20 14:40:19', '2017-07-20 19:31:08', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'51A4AAA55C86DD47B4A28CBB277EBFBD', '2012-01-20 14:40:21', '2017-07-20 19:31:08', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'51BF10C5C24A3F488D3375312F206FF8', '2012-01-20 14:40:20', '2017-07-20 19:31:08', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Guid', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'523327DF72BA4B49BB54F5E49D34C749', '2012-01-20 14:40:19', '2017-07-20 19:31:08', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'525BA05E14854A46AC120FB38B3EB4A8', '2012-01-20 14:40:19', '2017-07-20 19:31:08', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'BINARY', 16),
(x'F9C1F4F3C381A64598755A31414D9CA7', x'526BD0CFFDD5A24E81AF0811CD1319F6', '2013-05-06 12:13:04', '2017-07-20 19:31:08', NULL, NULL, NULL, x'6D7D8396C49AF74788AFCE375153C200', 'panel', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'528B2974A85EF849A4DC2405E96C089F', '2012-01-20 14:40:20', '2017-07-20 19:31:08', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'52A600F382247C408AF3B9D5CB6A4679', '2012-01-20 14:40:20', '2017-07-20 19:31:08', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'52CFF45CCA93044792324BD3A1F29438', '2012-01-20 14:40:20', '2017-07-20 19:31:08', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'53289C977CF8694AB2440CA909938356', '2012-01-20 14:40:21', '2017-07-20 19:31:08', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'5368F45AD46D2B49918EC08D63C2AA3B', '2012-01-20 14:40:20', '2017-07-20 19:31:09', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'53D93562EF168D4EAD34F003F6114277', '2012-01-20 14:40:19', '2017-07-20 19:31:09', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'540577124E9F7C4388A13163FA94A456', '2012-01-20 14:40:20', '2017-07-20 19:31:09', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'5416563B1B044140BC308E0051271087', '2012-01-20 14:40:21', '2017-07-20 19:31:09', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'54D0855EC6324040A60650EA489CCA9D', '2012-01-20 14:40:21', '2017-07-20 19:31:09', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'54EFD69B657C5E4586218127BDA8C199', '2012-01-20 14:40:19', '2017-07-20 19:31:09', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'55064E2ADE9C8248B66205CA8E9E8FA7', '2012-01-20 14:40:21', '2017-07-20 19:31:09', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 80),
(x'C608D44CBE64964787E545A26D3B3DDA', x'563DEB427B272846AA179348F7BA0BEA', '2012-01-20 14:40:19', '2017-07-20 19:31:09', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'57BBB7F4262CC34EB84E9C737334AB1D', '2012-01-20 14:40:21', '2017-07-20 19:31:09', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'5806594BA63DDF4DA683C115D78DDC8C', '2012-01-20 14:40:20', '2017-07-20 19:31:09', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'5860A1D9247FF942B435CEAEBD0F0716', '2012-01-20 14:40:21', '2017-07-20 19:31:09', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'0E966C3308625946A524419EFD682B68', x'58717893BC039A47B0134451568AE434', '2012-01-20 14:40:19', '2017-07-20 19:31:09', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'IMAGE', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'5949C0FB3A539F4A8082BB923C488B47', '2012-01-20 14:40:21', '2017-07-20 19:31:10', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'59570E8D36467D4E80A9DA838B566439', '2012-01-20 14:40:22', '2017-07-20 19:31:10', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'float', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'597933B6E3817C4C9864493E6981670C', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'59B1EEF680E88445AC6200F973DBCE81', '2012-01-20 14:40:20', '2017-07-20 19:31:10', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'28375783F0580E40A5A6F407682050ED', x'5A55D368FC93EE4095D990A7058F0566', '2012-01-20 14:40:22', '2017-07-20 19:31:10', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'5A6B43506E0AF14E98C3D21B46CE8965', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'5A71D50006B7B745957A8918EBF19D87', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'5A860CB67E518641B3597F05959C6C96', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'5AFBB5ADDC7C964F8EE5A75CD3C9381C', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'5B2F9C8B27241940BE75806DC586162E', '2012-01-20 14:40:20', '2017-07-20 19:31:10', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'5B3266B1ECABD54FB8AE599897029C28', '2012-01-20 14:40:21', '2017-07-20 19:31:10', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATE', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'5B640F84390E9744B0D1C5779D23C761', '2012-01-20 14:40:20', '2017-07-20 19:31:10', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'5B64BE60B0DDCF4FBF62A074FE5B1EAE', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'5BC33A28AB47124F8889750561D5FC26', '2012-01-20 14:40:19', '2017-07-20 19:31:10', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'5C024E3DE6D30943843E872AEA99D836', '2012-01-20 14:40:20', '2017-07-20 19:31:10', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'5C991E6C827F4643A72597BA71BD661E', '2012-01-20 14:40:20', '2017-07-20 19:31:10', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'DATETIME', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'5D9B220E64C48C47A35DE3851A979107', '2012-01-20 14:40:20', '2017-07-20 19:31:11', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'5DCDF2835908DD41B82A566323BE783D', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'5E90166DB25CC546AE90184B3170F897', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'5EC3ABCA62E9FA428F7DA0D1B4D57CEE', '2012-01-20 14:40:21', '2017-07-20 19:31:11', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'5F2113C9DA14FF4AB6B4C604FC0F03E3', '2012-01-20 14:40:22', '2017-07-20 19:31:11', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'5FA1A2F8D8E7EB47B6625D97411D7327', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'REFERENCE', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'5FC05C144DBCAC458D4DC56161045A86', '2012-01-20 14:40:20', '2017-07-20 19:31:11', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'5FD70BB67D2C68499BAF5D9551855CBA', '2012-01-20 14:40:20', '2017-07-20 19:31:11', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'608DB67A6F7E1C4783A9FBA8AADF0AE1', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'60F87E7AEB6AEC4EA6770AE4A08C8D8F', '2012-01-20 14:40:22', '2017-07-20 19:31:11', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'61B510595350F34AA9543A3534859A1B', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'long', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'6305221CA3AEE84CBF357C4569EE272E', '2012-01-20 14:40:22', '2017-07-20 19:31:11', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'6343BE1503F6E443B724E1ED0043B9FE', '2012-01-20 14:40:19', '2017-07-20 19:31:11', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'REFERENCE', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'634E7CCDDA50AE44BC7CD3A82BFB273B', '2012-01-20 14:40:20', '2017-07-20 19:31:11', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'63A387B721537B4A948180B69B024B2A', '2012-01-20 14:40:22', '2017-07-20 19:31:12', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'NUMERIC', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'63A9D0C8A40D8644B0E1F12D9F757224', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'URL', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'63E6C904B8635E42B173C88D7C51D13F', '2012-01-20 14:40:21', '2017-07-20 19:31:12', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'6434FFB5A0BBC244AA46E62DB112D9CF', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'647002EF0801FA4DA041CB9CA883DB8B', '2012-01-20 14:40:20', '2017-07-20 19:31:12', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'648592FC68C2E042B9D4702077E7DB68', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'6493034F4F9B41478064A907D8300EBE', '2012-01-20 14:40:21', '2017-07-20 19:31:12', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'64C26AA807C5FD43B73008DD521291B2', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'64CB8FE9035AD64781B4F69AAB00EB46', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'6519A95FF80FDD408AAF8CA4F5CDC4AA', '2012-01-20 14:40:20', '2017-07-20 19:31:12', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'66068D810DECFA4E98DD6A10D8E5C536', '2012-01-20 14:40:19', '2017-07-20 19:31:12', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'6643413BA03D0E418B197DEDE49B0F84', '2012-01-20 14:40:21', '2017-07-20 19:31:12', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'665BBD9CED15314FA0E21A0704429FD6', '2012-01-20 14:40:20', '2017-07-20 19:31:13', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'666B8A1FF34F3B4B9EB76D70774C4149', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'66B0BD00CD54204BB1E839C99B5000C7', '2012-01-20 14:40:22', '2017-07-20 19:31:13', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'double', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'66C13E0D91A2C64E942850F424EE8127', '2012-01-20 14:40:20', '2017-07-20 19:31:13', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'66CEBE0B5021C34196164D9EDFFEBC53', '2012-01-20 14:40:20', '2017-07-20 19:31:13', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'67C2306134293E4D9A8BA1D04E6E29F7', '2012-01-20 14:40:22', '2017-07-20 19:31:13', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'67EB6A72ABC7C940AA53D6284A8019DF', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'68366C4A3BB69E46A56A7EA4514FD2FE', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'68AC3C4ED97F4E409C297186AA47E6E9', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MULTIREF', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'69115F53225B4F46BFC669D7622FC13E', '2012-01-20 14:40:22', '2017-07-20 19:31:13', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'694BAE337B8B5148AC4D5950C9352B8F', '2012-01-20 14:40:21', '2017-07-20 19:31:13', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 255),
(x'0E0E9768303AE34BBF7B07BD26194226', x'6982D14F03DE4B4D846A24F602F1D1E3', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MULTIREF', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'69A147BD9A661A4E8CFA05654710B05F', '2012-01-20 14:40:20', '2017-07-20 19:31:13', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'6A7E514C359E3642AEBDCED6B13CE9DD', '2012-01-20 14:40:20', '2017-07-20 19:31:13', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'6ACB485EC2CED449B05C7F1F66931412', '2012-01-20 14:40:19', '2017-07-20 19:31:13', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MULTIREF', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'6B85946331EB004CAEF2A94AB26FB0C7', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'6BD1A9830A291A458143144A67DCB5BD', '2012-01-20 14:40:21', '2017-07-20 19:31:14', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'RTF', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'6C2071903E7E4F4ABF50EA24E2A5F277', '2012-01-20 14:40:21', '2017-07-20 19:31:14', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'date', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'6D4B6E731A92B4419D5A1C943DE13A5C', '2012-01-20 14:40:21', '2017-07-20 19:31:14', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'6D7D238CA4234A4A84113F3567EFFC9D', '2012-01-20 14:40:21', '2017-07-20 19:31:14', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'6D80DC821C6516438AA1656BD3BBDE80', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'6DCE8F9A556C3D4D816F1F4A75329DC6', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'6E19E131BDC01E4DB73BC9C8CDD36AE6', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'6E5301DE40D38E45AE1000B3C7C26114', '2012-01-20 14:40:20', '2017-07-20 19:31:14', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'6EC9C31504640F469C5CCB1D1F5074F0', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'HTML', 0),
(x'0E966C3308625946A524419EFD682B68', x'6F0C7E51193148458915C6B31FE16EA4', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'IMAGE', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'6F614913A9F7E14A89448619112092F7', '2012-01-20 14:40:20', '2017-07-20 19:31:14', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'6F6245A2D8A0D6489E896A2E07EA8A6E', '2012-01-20 14:40:20', '2017-07-20 19:31:14', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'6F67AA511DFA4F4DB25AA399AB84AED6', '2012-01-20 14:40:20', '2017-07-20 19:31:14', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'6F7D8B1C34959444854D414351DA6D1A', '2012-01-20 14:40:22', '2017-07-20 19:31:14', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'6FA8A28FBF118B4AA0164EAF1987A52D', '2012-01-20 14:40:19', '2017-07-20 19:31:14', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'706539AE8ADFE1439167BA9210604B19', '2012-01-20 14:40:20', '2017-07-20 19:31:15', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'706735BD309F9A4F9CEB7A9CA616AE06', '2012-01-20 14:40:21', '2017-07-20 19:31:15', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'7236D83026B0AC48ABDEE075658210C2', '2012-01-20 14:40:22', '2017-07-20 19:31:15', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'72953A52A61AF640A496A2E7E9C01FD8', '2013-07-10 18:50:53', '2017-07-20 19:31:15', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'control', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'7396C4399B1E1647947C3016BE2354A5', '2012-01-20 14:40:19', '2017-07-20 19:31:15', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'7463EC2B621FF74E867EA2E954B84B29', '2012-01-20 14:40:21', '2017-07-20 19:31:15', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'74D73F583298C749B68279F7870C856F', '2012-01-20 14:40:19', '2017-07-20 19:31:15', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'7531A73943BF69469846BABA62A3EE8C', '2012-01-20 14:40:19', '2017-07-20 19:31:15', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTEGER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'7583DEE3008CA341915C46B8BF239E44', '2012-01-20 14:40:21', '2017-07-20 19:31:15', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'EMAIL', 80),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'75B2AFC2D6073D41B3B7D0DA6190F770', '2012-01-20 14:40:20', '2017-07-20 19:31:15', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'75FE881A3B01434EAF5E735521A3F154', '2012-01-20 14:40:19', '2017-07-20 19:31:15', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'77F7899A9A68324BA0D8197D71BB90FF', '2012-01-20 14:40:22', '2017-07-20 19:31:15', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'78B69A4A53595F4496FC90AD5AACA5D1', '2012-01-20 14:40:20', '2017-07-20 19:31:15', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'790955FA479B244486FF5D608A15AD5C', '2012-01-20 14:40:21', '2017-07-20 19:31:15', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'CHECKBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'791BA3E30121944B827EDDC20972993B', '2012-01-20 14:40:21', '2017-07-20 19:31:15', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'792EBF9CFEE66649A8C91CDD216685E1', '2012-01-20 14:40:20', '2017-07-20 19:31:15', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'793B16E691BDC64DB6A48135962B7706', '2012-01-20 14:40:21', '2017-07-20 19:31:16', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'RTF', 0),
(x'C00BE4D87950314B8CD5BBC66BAFA683', x'7A04718E25346E4C9357BCC6A08A45A9', '2012-01-20 14:40:21', '2017-07-20 19:31:16', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'button', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'7A4006298FB9E04B97083C483A46601E', '2012-01-20 14:40:20', '2017-07-20 19:31:16', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'7A66CE69670A564BB0D2103F62AC8008', '2012-01-20 14:40:19', '2017-07-20 19:31:16', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'7A84A013B7798240AC6B8FB733781145', '2012-01-20 14:40:19', '2017-07-20 19:31:16', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'7A88369F88A592479FF556B6B14595AE', '2012-01-20 14:40:19', '2017-07-20 19:31:16', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'7B6BD482084C0E4FB057E58739C73443', '2012-01-20 14:40:20', '2017-07-20 19:31:16', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'7BBD5249013BA342B4925D521B44ECDB', '2012-01-20 14:40:20', '2017-07-20 19:31:16', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'7CA0926EA6EC3C43B23352AAD14E8F80', '2012-01-20 14:40:21', '2017-07-20 19:31:16', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'7CE4E0B0528FBF48BED5AF813C7A59E9', '2012-01-20 14:40:20', '2017-07-20 19:31:16', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'7D2F374D68A451469D0A9B378BB2E2FE', '2012-01-20 14:40:19', '2017-07-20 19:31:16', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'FILE', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'7E1F93C70A45B44190FB213C76F9B310', '2012-01-20 14:40:20', '2017-07-20 19:31:16', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'BINARY', 16),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'7E4E341E44B4DA40B28DB9D4F5360F88', '2012-01-20 14:40:19', '2017-07-20 19:31:17', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'7F0D25878FC2C941AF85F1AA0F7E6EA8', '2012-01-20 14:40:20', '2017-07-20 19:31:17', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'3A3878A9883FD34787A231AF949E53B1', x'7F6D4BF4D808AC4E8CB3F1CBCB4A06BD', '2012-01-20 14:40:19', '2017-07-20 19:31:17', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'7F77CD69B99A534194BB5A34709C9237', '2012-01-20 14:40:20', '2017-07-20 19:31:17', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'382838929000504DB8E3262D094E3DFE', x'7FC086670365C340940B434CD3C51B1D', '2012-01-20 14:40:19', '2017-07-20 19:31:17', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'7FF2054BC4DAC34B94708D32DF1416F0', '2012-01-20 14:40:20', '2017-07-20 19:31:17', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'801C62B8A79316458CB932F6879F07AC', '2012-01-20 14:40:20', '2017-07-20 19:31:17', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'80877664C051D644B719A0ED6BA6CB97', '2012-01-20 14:40:21', '2017-07-20 19:31:17', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'80B87DC969ED1F49AE31FD63D0102B61', '2012-01-20 14:40:22', '2017-07-20 19:31:17', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'80E378BC4DA0B44E8C9A27EB42BB9144', '2012-01-20 14:40:22', '2017-07-20 19:31:17', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'811F6AD16531CD489FF8A8AB11B1CCA3', '2012-01-20 14:40:21', '2017-07-20 19:31:17', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'81CF0AC4CEFF354DB109D1D28A0B9BB9', '2012-01-20 14:40:19', '2017-07-20 19:31:17', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'81D9B01B54D42F499194E9DB9566E567', '2012-01-20 14:40:20', '2017-07-20 19:31:17', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'823261589407A2448812682B5671FF07', '2012-01-20 14:40:21', '2017-07-20 19:31:17', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'82A0E42542F9354D9CD018D88FFDE747', '2012-01-20 14:40:19', '2017-07-20 19:31:17', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'83A15A28DE54B14CB185B2C0B564F581', '2012-01-20 14:40:21', '2017-07-20 19:31:18', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 255),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'83B93E490996C640AF8661C27F9ED8E6', '2012-01-20 14:40:19', '2017-07-20 19:31:18', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'83CF8680B0E463429ABA642B8EF529E1', '2012-01-20 14:40:22', '2017-07-20 19:31:18', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'847048FFC99AF049B089EE4EB93FFF83', '2012-01-20 14:40:19', '2017-07-20 19:31:18', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'85301625B54A6340A2F2DF8E668740DD', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'856BA210F7C7304AB8E596E7A3E2B49D', '2012-01-20 14:40:19', '2017-07-20 19:31:18', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'961085CC094CE749A541D00372E6D444', x'85731504E0E5C94E9639F2767FBF028C', '2012-01-20 14:40:21', '2017-07-20 19:31:18', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'85E999E05A99A947B5E7D5A7A83BCE44', '2012-01-20 14:40:21', '2017-07-20 19:31:18', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'8618C3A2E45E214094A4BEAF11EFD400', '2012-01-20 14:40:21', '2017-07-20 19:31:18', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'DATETIME', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'86246579E1D1E446AC492FCBF916081C', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TEXT', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'86867B455853C848B4619D0D1B2C6F67', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'86BF7074A2E11F44BB8A7D0B371964B5', '2012-01-20 14:40:19', '2017-07-20 19:31:18', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'87616D15AE183C4080EB6430998718B3', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'87A22187001A0C46A03B3BEAC564DA48', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'88CA7E1F4DBE344B872F871FCFCCD1AB', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'897E5AF258CD9545A810BA5B7D54E989', '2012-01-20 14:40:20', '2017-07-20 19:31:18', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'898B85C89F014E46A099E39A85723F58', '2012-01-20 14:40:21', '2017-07-20 19:31:19', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'DATE', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'8A7FA2C33C0D76408D982AE096A71E59', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'8AEF368FDB834B408B6D0F814E885986', '2012-01-20 14:40:22', '2017-07-20 19:31:19', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'8B1F403C1C72B34898FB686AF25D0575', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'8BB1D2F0EE25E94FA9E160A0493DA05B', '2012-01-20 14:40:20', '2017-07-20 19:31:19', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'8C448639F5E6844A8693E1DB793BBD6B', '2012-01-20 14:40:22', '2017-07-20 19:31:19', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'8C94FAB9A3611249B53519EEA3FECDD1', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'8D0EE224EF190D489DC80B721DD198A3', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'382838929000504DB8E3262D094E3DFE', x'8D2B5D3D8FB8CD4C9CEDE6C5FC014FB4', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'0E966C3308625946A524419EFD682B68', x'8D446D3FC8671B4EA0418B15B705A58C', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'IMAGE', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'8D7BCC67DB769040B83AFBEFF35ADBDD', '2012-01-20 14:40:20', '2017-07-20 19:31:19', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'8DA448F236AC5740A0843CB2E626E501', '2012-01-20 14:40:19', '2017-07-20 19:31:19', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'8DBB66254458BE49B9BCA94E26570BE1', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'8E5085A20EDD624BA6E525778318CEAB', '2012-01-20 14:40:19', '2017-07-20 19:31:20', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'8EB86F8B93946644803434206F42988F', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'timestamp', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'8EED9B451BEC194F8FDC05548243CEFD', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'8EFC424CA39DB844BE5F810F15D8F733', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'8F0478F147BDB9428B3BCE26F39F9E65', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'8F051B2BD79A8147B36CA7F2B1DF5CA9', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'8F9E154028707B4686A34B6C9F09CB80', '2012-01-20 14:40:22', '2017-07-20 19:31:20', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'90179AF846037541847631D658ABE1E0', '2012-01-20 14:40:20', '2017-07-20 19:31:20', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TIME', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'902DFCB7D832494E9873C11ED77E1CC0', '2012-01-20 14:40:20', '2017-07-20 19:31:21', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'904DB6711BBC53469959256EA90C4AA1', '2012-01-20 14:40:19', '2017-07-20 19:31:21', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'912268BA82F02C41ABBEA3CCCE5682C2', '2012-01-20 14:40:20', '2017-07-20 19:31:21', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'919C7B7480F8D94A9698AE9B69DE7301', '2012-01-20 14:40:20', '2017-07-20 19:31:21', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'91B9D7B3B9AFBC4E879D358DD59CA132', '2012-01-20 14:40:20', '2017-07-20 19:31:21', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'91FBDAB509FB0D4FAC5263BCDA469312', '2012-01-20 14:40:19', '2017-07-20 19:31:21', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'92958F71023D784A9F555ADB665AF715', '2012-01-20 14:40:19', '2017-07-20 19:31:21', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'92B44036334B4A4DB66AD6D7992B0A3C', '2012-01-20 14:40:22', '2017-07-20 19:31:21', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'92E2B558C2046D45B2E01008B7FCA80E', '2012-01-20 14:40:19', '2017-07-20 19:31:21', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'varchar', 255),
(x'9BAEE12ABF21B44BA554096D5B959903', x'92E4E14651C39F4797CD42CF2B154399', '2012-01-20 14:40:19', '2017-07-20 19:31:21', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'93051E187CD17F4C819946478316C492', '2012-01-20 14:40:22', '2017-07-20 19:31:21', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9334F90351C1D94AA2E69F001DE361D2', '2012-01-20 14:40:19', '2017-07-20 19:31:22', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'93E0FB20E3BA4E4EBB6D0BC7DE624E74', '2012-01-20 14:40:21', '2017-07-20 19:31:22', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 80),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'9400D45351607943ADFA41897F306FCB', '2012-01-20 14:40:19', '2017-07-20 19:31:22', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'942CCC3B05A75B4399BF1BDA17D272D5', '2012-01-20 14:40:19', '2017-07-20 19:31:22', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'94499C450187F441AB77678330006E4A', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'94EB115EEBE90E48981DF833BAE167B3', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'9540CA4A02C8894DBB9986AF5DEB7BC8', '2013-07-10 18:50:53', '2017-07-20 19:31:22', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'null', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'9547CEB87A45424BB6F90DFF64C9CDAC', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'9612A766E8609B4985C7FFF239412BC7', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'962F579E88FC5F4B8F097CE533992460', '2012-01-20 14:40:22', '2017-07-20 19:31:22', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'9647543F92C49343A78875FFF7340F87', '2012-01-20 14:40:19', '2017-07-20 19:31:22', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'9654E5127F78C64280BBD07E98037F23', '2012-01-20 14:40:19', '2017-07-20 19:31:22', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'9673464C2A0AE7438D18BF35FA647655', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'9764341505A01F42867DD3851D37BC17', '2012-01-20 14:40:20', '2017-07-20 19:31:22', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'978485210D6B834E8DB65EA3E671B850', '2012-01-20 14:40:21', '2017-07-20 19:31:22', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'97B014584F8FBF4A9D2A53BD1BDEC45B', '2012-01-20 14:40:22', '2017-07-20 19:31:22', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'97CD57FC4D38124A8624947259568773', '2012-01-20 14:40:19', '2017-07-20 19:31:23', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'INTERVAL', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'98191119310F5041963B71D699964EDB', '2012-01-20 14:40:19', '2017-07-20 19:31:23', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'98A91B8F47F32B40AE5CE8C08845E151', '2012-01-20 14:40:21', '2017-07-20 19:31:23', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'98F8BF4E9FF8A449837856A9DAA69193', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'99029922565A8245963262D035883E1A', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'992E85863EDDB54D93A7600A22EF7EEA', '2012-01-20 14:40:19', '2017-07-20 19:31:23', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'994BB64CA7A86140A82EBF3AC21B885E', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9953A3059E9BCA40A2C39E1434D379A3', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'998DE4841E2CF84989977D1DFDE683C1', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MEMO', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'9A0E04F0D322064AB33F5D5AED074C59', '2012-01-20 14:40:20', '2017-07-20 19:31:23', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'9A3504CC068B0145950DD280B5D5400A', '2012-01-20 14:40:19', '2017-07-20 19:31:23', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'9A7159086299B844932FDC99C4D24532', '2012-01-20 14:40:19', '2017-07-20 19:31:24', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'9ADC5AF2642CE84A8103056C220F73BA', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'9B275CF8B678A24D9C5B95147AAA4407', '2012-01-20 14:40:19', '2017-07-20 19:31:24', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'FILE', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'9B317BD696FA954E8ED7174C98D60CD6', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9B38D89CEFE6964392E86434F28DF149', '2012-01-20 14:40:22', '2017-07-20 19:31:24', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'9B4096B8139B1B4CA30A0A91A7447D20', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'9B463B640AE93F4BA936BA0FC6B60176', '2012-01-20 14:40:21', '2017-07-20 19:31:24', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'9C570FB2BBD3ED4B8013E80B75A56AD0', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'9C7A0730E6580D418BC22194D83D7C71', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATETIME', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'9C7C401F95B1004EBA7CE8CF94D34C6F', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'9CB43D18C4D2704DA5736387C5E17D0D', '2012-01-20 14:40:19', '2017-07-20 19:31:24', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'9D72241BAA1D704095C611DD980F4CEF', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'9E2DB203907B184582B1E8030133C17D', '2012-01-20 14:40:19', '2017-07-20 19:31:24', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'HTML', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'9E2F10E918EF0E4AA0AA26ED94B632B0', '2012-01-20 14:40:20', '2017-07-20 19:31:24', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'9E49500CD8B7CD41ACF309EF266E0087', '2012-01-20 14:40:20', '2017-07-20 19:31:25', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'DATE', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'9E5668B912D53E4DA5A838AFE853D4C9', '2012-01-20 14:40:20', '2017-07-20 19:31:25', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'9EB0F34E06563249AC0CA7DF11A47EC7', '2012-01-20 14:40:22', '2017-07-20 19:31:25', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'9EC4375041F4514EB546B3E817175DDC', '2012-01-20 14:40:20', '2017-07-20 19:31:25', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'9ECEA70C7A6A3E42ACB78E18A99F790C', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'12EEAA312481754EBD16698F4235234B', x'9EE3496E2494EF40AB4A0F0F5F28CA73', '2012-01-20 14:40:20', '2017-07-20 19:31:25', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'9EF2214B32F2C24BA263B15A5F151A8A', '2012-01-20 14:40:20', '2017-07-20 19:31:25', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'9FA02684CEB34043A937E71E8C41CB04', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'9FC3B2D240318B4DA60F66E6C9D187A5', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'9FC492031996D0419582CDC75BCC8B9E', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'9FD2B6538201BC4FBDA9F1B762810078', '2012-01-20 14:40:21', '2017-07-20 19:31:25', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'A029B4E4D1E6A34DAEB3F6D2F94143CB', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'UNIQUEIDENTIFIER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'A03A02842B01324589824F5947BE70B0', '2012-01-20 14:40:19', '2017-07-20 19:31:25', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'A08BC769EA41E84081349321BA15359A', '2012-01-20 14:40:21', '2017-07-20 19:31:25', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'A19F8E36DF1B014A8E0011054F9D51C1', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'string', 0),
(x'382838929000504DB8E3262D094E3DFE', x'A1C54F0034BBBB4E8D3EE800622C4177', '2012-01-20 14:40:19', '2017-07-20 19:31:26', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'A22C68A461CFCF4D94405C9EC618B806', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'A3811D47620B384D96073DB2903DA2AF', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'A38D5C2662932149A394F3419C1907FE', '2012-01-20 14:40:21', '2017-07-20 19:31:26', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Boolean', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'A3E19E69EC8BA341A9489F1494243F82', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'A4523E50298C4F409AF63C5F55A71F47', '2012-01-20 14:40:21', '2017-07-20 19:31:26', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'RTF', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'A472AA47489521459AB4A736E8CA274D', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TIME', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'A4EFC5C60914D34999ACABB7BAB64022', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'A52B08E765F3B6458F2EEA830572F630', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'A5E8ADE9154A614FACC797BC735BD217', '2012-01-20 14:40:19', '2017-07-20 19:31:26', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'A5FEBD322C8CF742B39FA0F209A9B6C8', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'A6078BF0EA99D74FB44B085F515EF17D', '2012-01-20 14:40:21', '2017-07-20 19:31:26', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'A609A4D33B6B36439174812D401383AE', '2012-01-20 14:40:21', '2017-07-20 19:31:26', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'varchar', 80),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'A60CA76E2CBCEA4CB76988D06FD62697', '2012-01-20 14:40:20', '2017-07-20 19:31:26', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'A6272A77B40F0D4D9CAFFA4510BE28E8', '2012-01-20 14:40:19', '2017-07-20 19:31:26', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'IMAGE', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'A64B491672B60544BCA5ADFDD3D34780', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'TEXT', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'A65A67F603A57F4DA0F8C30BBCDDA91A', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'DATETIME', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'A6D82174417BA544B14EA12758BB0171', '2012-01-20 14:40:19', '2017-07-20 19:31:27', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'A6E92CA93217B041A1973AAA8D64D4AB', '2012-01-20 14:40:19', '2017-07-20 19:31:27', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'A70E147F2F9090469A00C727264B61D4', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MASTERSTRING', 0),
(x'961085CC094CE749A541D00372E6D444', x'A786F06FE4140A42BD98187D7F4746DC', '2012-01-20 14:40:21', '2017-07-20 19:31:27', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'A795BBAFD7EE1042A3ADEAAD75C959CB', '2012-01-20 14:40:19', '2017-07-20 19:31:27', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'A79EBE753098BB41A48A19E75834DEC6', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'GUID', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'A834DAF3751F93469C03E249DC708412', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'A86C07624C463C44A33B879B534CEE64', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'A889E797FC105642816205651ACB8EB2', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'A8E583405F95A7469832B992236B4962', '2012-01-20 14:40:19', '2017-07-20 19:31:27', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'combobox', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'A94849DBC2AB1748AF0CE9D63745D976', '2012-01-20 14:40:22', '2017-07-20 19:31:27', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'F7819EB0736C144EB977F40CEC9B200C', x'A94C6498A6162E49AF925C22B897FAD7', '2012-01-20 14:40:22', '2017-07-20 19:31:27', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'MEMO', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'A9981881F2D475429A78784023C963FE', '2012-01-20 14:40:21', '2017-07-20 19:31:27', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'A9E39FB8B3BE0249A01BF51052E39AD1', '2012-01-20 14:40:20', '2017-07-20 19:31:27', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'AAA953ADE0456746A9761240BCB28C0E', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'TEXT', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'AACCF8796589C445BDB58F2FECD50602', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'AAE454949E54CD44B40A3423992F49E4', '2012-01-20 14:40:22', '2017-07-20 19:31:28', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'AB668BBA0DEAB945A9B7BDE2361453F6', '2012-01-20 14:40:19', '2017-07-20 19:31:28', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'AC3AB82B839F7E47BA5D8415B1E0FC1C', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'AC85A748353A484E8917492C41124A1A', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'AD2D606D6FAD7343817C8393FE6E2EF2', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'AD6F7D85CD125F4EBBC0A0C8DD87AB90', '2012-01-20 14:40:19', '2017-07-20 19:31:28', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTEGER', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'ADAB7B7970C4534486C39BC95963F918', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'AE199F213E65DF43B24D6513B8D26420', '2012-01-20 14:40:21', '2017-07-20 19:31:28', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'AEEFE01DFA4F6F43B500FB2EC9DF7567', '2012-01-20 14:40:21', '2017-07-20 19:31:28', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'794061085D25D54FABBEDE9BC7987090', x'AF17007E0E12574A98FB054073B504D6', '2012-01-20 14:40:21', '2017-07-20 19:31:28', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'5E9603EC041094438B81FAA4AADEBC4A', x'AFB9A2EC4AFCFA43AD86626FD8BD7B39', '2012-01-20 14:40:22', '2017-07-20 19:31:28', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'B0537985DB52B14EA760BC488949911C', '2012-01-20 14:40:21', '2017-07-20 19:31:28', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B08F9CE643E9424D81B12E5626D860FE', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'B0F093C6EAC465459821737C85BE9A2D', '2012-01-20 14:40:22', '2017-07-20 19:31:28', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'NUMERIC', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B14EFCA19F6F8240B77320C589FF9572', '2012-01-20 14:40:20', '2017-07-20 19:31:28', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'B177827C64A68D478D3A7DBC72BE0665', '2012-01-20 14:40:19', '2017-07-20 19:31:28', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'B1EACF92488C8A438758DC8CB924883F', '2012-01-20 14:40:22', '2017-07-20 19:31:28', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'B1EBCD495F78EA4E89DEF2AAEA1E2B64', '2012-01-20 14:40:21', '2017-07-20 19:31:29', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B20B53E0D76C824ABA75938B387BFC46', '2012-01-20 14:40:19', '2017-07-20 19:31:29', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 4000),
(x'C608D44CBE64964787E545A26D3B3DDA', x'B221ACF39E46074E95A3630D36BA2116', '2012-01-20 14:40:19', '2017-07-20 19:31:29', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'B25C34734723A444997C9776461222FA', '2012-01-20 14:40:21', '2017-07-20 19:31:29', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'B30B049752EBCD439817C6119450C85A', '2012-01-20 14:40:21', '2017-07-20 19:31:29', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'EMAIL', 80),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'B310EB7FC684254CA3513119D8C91781', '2012-01-20 14:40:19', '2017-07-20 19:31:29', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'B31B6FC4F11C7E49A73D87780856F13D', '2012-01-20 14:40:22', '2017-07-20 19:31:29', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'B38984013C06F8498C16828B53AD0CED', '2012-01-20 14:40:21', '2017-07-20 19:31:29', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'C340EA421CD62F46AF6F314D2F0000E1', x'B3ABD2311956EF4797AA81D850B0B0F8', '2012-01-20 14:40:19', '2017-07-20 19:31:29', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'FILE', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B3C2465AB2729C429FFCADFF061826FC', '2012-01-20 14:40:19', '2017-07-20 19:31:29', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'HTML', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'B3E04DB0EF186A488546B71A878B0AB9', '2012-01-20 14:40:20', '2017-07-20 19:31:29', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'B41D8CEF18E2BA40AFA84FE34C8AE742', '2012-01-20 14:40:20', '2017-07-20 19:31:29', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'B46079892AE0144D8EC609F34ED67A0C', '2012-01-20 14:40:20', '2017-07-20 19:31:29', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'B497DBA37BEF964A847FDD1FCD3DE65C', '2012-01-20 14:40:19', '2017-07-20 19:31:30', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'B4D6CB3F10C42B45A600A20A964F626D', '2012-01-20 14:40:20', '2017-07-20 19:31:30', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'B4D8A9873525FE40A0FEB4780CB4FC89', '2012-01-20 14:40:21', '2017-07-20 19:31:30', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'B59BB0F11EA2484096D71C4157B56EAD', '2014-04-15 11:45:12', '2017-07-20 19:31:30', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Date', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'B5B24432084C1E409EA1C6D4A1B2DF77', '2014-04-15 11:45:12', '2017-07-20 19:31:30', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'DATE', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'B5CA5000239AF0468E0933CEF4663F94', '2012-01-20 14:40:20', '2017-07-20 19:31:30', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'B5F9BD2C4AE6D441BA4E3FACA9EA3BBB', '2012-01-20 14:40:20', '2017-07-20 19:31:30', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'DATE', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'B69000591A047843AAD5656A88DDE690', '2012-01-20 14:40:19', '2017-07-20 19:31:31', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'B6B1B744D6B1134E9BD421AAD0DF3734', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'B6D4133A34071E40B9A9C873B43010C5', '2012-01-20 14:40:21', '2017-07-20 19:31:31', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'B71BD7DC4FC11D4584719892B20547B9', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'B7856329518D2040906372C0AF586D61', '2012-01-20 14:40:22', '2017-07-20 19:31:31', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'B79FF79A9DF82C4A934916046B7F6F9C', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'7B8AB80EDCF2524F9B7D3D4E61B55C81', x'B7CA21CB42A5B04DBC1B17647A64F353', '2012-01-20 14:40:19', '2017-07-20 19:31:31', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'B8117D8A9AE02046B90218B930B6B68C', '2012-01-20 14:40:21', '2017-07-20 19:31:31', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'C48D9EC186B1F547B49F644C8C795459', x'B863FD50FC96E94FBC35CF2341ED068C', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'B86D68F97EED07459C60EE94EF957F82', '2012-01-20 14:40:19', '2017-07-20 19:31:31', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'B88DB342890CB2498B2F6D1E75BB008B', '2012-01-20 14:40:19', '2017-07-20 19:31:31', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'B8994254A421D04DA7DE58CFD25C1CFB', '2012-01-20 14:40:19', '2017-07-20 19:31:31', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'B9236906D765D74AAB5F19BE86CB067C', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'BA23F47B88F5C34DBFCE9C6891128B2F', '2012-01-20 14:40:20', '2017-07-20 19:31:31', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'BA4CF1C84B8E054D97F82A09A0A9D778', '2012-01-20 14:40:20', '2017-07-20 19:31:32', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'0E966C3308625946A524419EFD682B68', x'BB2BA2EF3975264C883D339741C1D779', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'VARIANT', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'BB5CE67250E644499DE4C885ABCE1FEF', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'BB7090CEB2A3BD43A3FEB6CDDB69C9D9', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'BB8F2C34F87E1949A8A6178D3ADD8736', '2012-01-20 14:40:22', '2017-07-20 19:31:32', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'BBD9A166DD8B824D845ECF1F3920F8CB', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'BC150510D6F9DA4B9F718399BD74BE35', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'BCA749FEF82B4841BAC990C82D4F6AD3', '2012-01-20 14:40:19', '2017-07-20 19:31:32', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'BCE43BBD18875A43B2F8BCFC1DF89CA2', '2012-01-20 14:40:20', '2017-07-20 19:31:32', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'time', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'BD3E34A38094024692241E4B3F078420', '2012-01-20 14:40:20', '2017-07-20 19:31:32', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'BD7C4599EAB2FF4D96F77A91DA9C286C', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'BE1A412589C1474E861A7A56B381A767', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'BE22438FD1422247A5020B3FB4FDD921', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'BEA20ADBC443AA4FBED02DC3C98A2A41', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'BF4AAE9A6DA4C54EAC5EC1E99DF17F6F', '2012-01-20 14:40:19', '2017-07-20 19:31:33', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'BF62E8413595B749BC7D60BBE75308E4', '2012-01-20 14:40:22', '2017-07-20 19:31:33', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'28375783F0580E40A5A6F407682050ED', x'BF8355D1CED7644DB23752C91A0091C2', '2012-01-20 14:40:22', '2017-07-20 19:31:33', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'BFB9B0F39500B14B8A63CF0485F3599B', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'C01C7C35E6D794409FC699297F716E48', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'C01D17C16E2A1B4CB17A1C82A767656F', '2012-01-20 14:40:19', '2017-07-20 19:31:33', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'C0287E98D949E641A82EE2AD6B3FD621', '2012-01-20 14:40:20', '2017-07-20 19:31:33', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'382838929000504DB8E3262D094E3DFE', x'C0B5AB22565AC446BF8F3F95785C19A1', '2012-01-20 14:40:19', '2017-07-20 19:31:33', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'C0E3F060038E9D4CBDF4302B6FB7E3B9', '2012-01-20 14:40:19', '2017-07-20 19:31:34', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'C15C42539B3F1D4EA1C07CA242E9BC4E', '2012-01-20 14:40:20', '2017-07-20 19:31:34', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'Boolean', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'C16B77CE50E23D4F8DA551AE6C366801', '2012-01-20 14:40:21', '2017-07-20 19:31:35', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'RTF', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'C214760CD3FFE54EB9B1DBEA607B9E42', '2012-01-20 14:40:21', '2017-07-20 19:31:35', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'PASSWORD', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'C234775E83F08E4E81763D75CCF77DB0', '2012-01-20 14:40:21', '2017-07-20 19:31:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'C27D4664A9233C43A6927DCF06136A34', '2012-01-20 14:40:19', '2017-07-20 19:31:36', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'C2CA25ABCABD834AAF56C1D1C232C365', '2012-01-20 14:40:20', '2017-07-20 19:31:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'C2D88707584FA64C9297362FB9E80CEF', '2012-01-20 14:40:20', '2017-07-20 19:31:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'C2EBB8DC2A1F114288FD879C4C131519', '2012-01-20 14:40:21', '2017-07-20 19:31:36', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'C3AB3729018F834D868BF1D19A552AA4', '2012-01-20 14:40:19', '2017-07-20 19:31:36', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'VARCHAR2', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'C41B1CFCA3FE934B804757BA8C0C6EAA', '2012-01-20 14:40:19', '2017-07-20 19:31:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'C46B9A128EAC604098E2B2F60193AF9A', '2012-01-20 14:40:19', '2017-07-20 19:31:36', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'C55A83A1118B90439EC8B7BFDA7A53E1', '2012-01-20 14:40:19', '2017-07-20 19:31:36', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'C5B4F4E8CDD6AE45981200AA46D0C7C5', '2012-01-20 14:40:20', '2017-07-20 19:31:36', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'12EEAA312481754EBD16698F4235234B', x'C619D2800A71B74CBCFBA31D1FB4603E', '2012-01-20 14:40:20', '2017-07-20 19:31:36', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'C664CF7938AD174BB9625A4F926290FD', '2012-01-20 14:40:20', '2017-07-20 19:31:37', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'GUID', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'C6F22F648468F54CA2A19BDA95E9BCAC', '2012-01-20 14:40:20', '2017-07-20 19:31:37', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'C700537165B51B43899D5F9DCCB63088', '2012-01-20 14:40:20', '2017-07-20 19:31:38', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'C708EE39DE4B6E47B45F9F1A3407108B', '2012-01-20 14:40:19', '2017-07-20 19:31:38', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'C7265BCA476C074F8849B05597BA3AC6', '2012-01-20 14:40:20', '2017-07-20 19:31:38', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'C74C670B35910F49A07BAC01D7C19EA3', '2012-01-20 14:40:19', '2017-07-20 19:31:38', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'C78C8D97B5438A4BA7E97574F9145192', '2012-01-20 14:40:22', '2017-07-20 19:31:38', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'C793C1E28DA8844FA62E28C2F351D4F4', '2012-01-20 14:40:20', '2017-07-20 19:31:39', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TEXT', 0),
(x'0E966C3308625946A524419EFD682B68', x'C801453529D92B46B922A7DD296A5059', '2012-01-20 14:40:19', '2017-07-20 19:31:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'BYTEA', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'C89ABABDADF3564093E37B6917B63B52', '2012-01-20 14:40:21', '2017-07-20 19:31:39', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'C8C8066128543B4CBCF14A85E4460CBA', '2012-01-20 14:40:20', '2017-07-20 19:31:39', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'C9A40BB7DAAEF344BE20EC4DFFD49B6F', '2012-01-20 14:40:20', '2017-07-20 19:31:39', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'C9A794082DC1834DA7393AB9A2A4EC73', '2012-01-20 14:40:22', '2017-07-20 19:31:39', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'C9BD826A83FAAD4CB1EE9D4FCF3FE1F6', '2012-01-20 14:40:19', '2017-07-20 19:31:39', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'CA19EAAACAD8CC479330DF1939F08142', '2012-01-20 14:40:20', '2017-07-20 19:31:39', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CA8F798401F178448790AAB2191BD3C8', '2012-01-20 14:40:22', '2017-07-20 19:31:40', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'0DFD5D53226AC2469BAD3826D9BA4590', x'CAFB9768E1582C44B91B27847F321FD3', '2012-01-20 14:40:19', '2017-07-20 19:31:40', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'CB18AC4412265D4E8B28441614DDC60C', '2012-01-20 14:40:19', '2017-07-20 19:31:40', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'CB25E1166FD9A24FB3D8E73CFFDB1551', '2012-01-20 14:40:20', '2017-07-20 19:31:40', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'382838929000504DB8E3262D094E3DFE', x'CB433949826CD84AA8A311170E7844E4', '2012-01-20 14:40:19', '2017-07-20 19:31:40', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'382838929000504DB8E3262D094E3DFE', x'CB75282766FE2C438459C88BFCD64528', '2012-01-20 14:40:19', '2017-07-20 19:31:40', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'CBA28B1615D0EB4097A019EF31179C64', '2012-01-20 14:40:19', '2017-07-20 19:31:40', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'961085CC094CE749A541D00372E6D444', x'CBC868ADC123E94D911B301189F46C52', '2012-01-20 14:40:21', '2017-07-20 19:31:41', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'CBD9F06C28E0104B957EB6AEED1BB6B4', '2012-01-20 14:40:19', '2017-07-20 19:31:41', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'CBDA2558F9C1B1479C8B2908BA17D347', '2012-01-20 14:40:20', '2017-07-20 19:31:41', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'14AFD3A4DCC1514D969C8CB52FA64346', x'CC1A3FCE8BAEAC40A5939127075033AD', '2013-07-10 18:50:53', '2017-07-20 19:31:41', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'nothing', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'CCEEE52F456BDF4C83113823A82D3FC8', '2012-01-20 14:40:20', '2017-07-20 19:31:41', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'CD4DA43D56731B49AF35F36A10DC6DBA', '2012-01-20 14:40:21', '2017-07-20 19:31:41', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'CD6B582366E1A041BA6F53D415DEA074', '2012-01-20 14:40:20', '2017-07-20 19:31:41', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'CD831A688CAE0B478453ED026577A407', '2012-01-20 14:40:22', '2017-07-20 19:31:41', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'12EEAA312481754EBD16698F4235234B', x'CDABA97CD9ED644C9AAB643F403D38D4', '2012-01-20 14:40:20', '2017-07-20 19:31:42', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'CDFA9EF4C931ED48885C9F39CD48FBAC', '2012-01-20 14:40:22', '2017-07-20 19:31:42', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'CE2754C4A28D4946AE6F4A51E8B9C3B1', '2012-01-20 14:40:21', '2017-07-20 19:31:42', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'CE652A83DE051B45B90E4EA4E75F6F5D', '2012-01-20 14:40:20', '2017-07-20 19:31:42', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'CHAR', 38),
(x'9313F4BAD350454D96AF56B8415569D8', x'CEA095114C32A044A0734790A611F0F6', '2012-01-20 14:40:20', '2017-07-20 19:31:42', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'CEBE1D911E7A5E4AAB04B9EB28FB88A5', '2012-01-20 14:40:20', '2017-07-20 19:31:42', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'TEXT', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'CF0D035CBEF958478E9CC3C8033EC88B', '2012-01-20 14:40:19', '2017-07-20 19:31:42', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'REFERENCE', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'CF267DE34FBA2040A9A7A9156F9F2FEC', '2012-01-20 14:40:19', '2017-07-20 19:31:42', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'CF8FF46F3B4E644C83FA13F3C9FF4094', '2012-01-20 14:40:20', '2017-07-20 19:31:42', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'D006060802C98E418EA66B8BD06B68AA', '2012-01-20 14:40:21', '2017-07-20 19:31:42', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'PASSWORD', 80),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'D029ACA4CBE73B48A59259B8914F00C7', '2012-01-20 14:40:22', '2017-07-20 19:31:42', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DOUBLE', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'D036288797F4A046BEA387DA59977181', '2012-01-20 14:40:19', '2017-07-20 19:31:43', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'12EEAA312481754EBD16698F4235234B', x'D1216B942B32D54CA96CBCF6C0571B2E', '2012-01-20 14:40:20', '2017-07-20 19:31:43', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'D1BAE6D707E4F34D9E82A7667B927E93', '2012-01-20 14:40:20', '2017-07-20 19:31:43', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'MEMO', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'D1D40D95E9870C44A2E1FB81D1283AFA', '2012-01-20 14:40:19', '2017-07-20 19:31:43', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'9243EDA963BAE84CB2B1BB0047848ED3', x'D241A0A0C80F6C4C9D608247F0F3AA07', '2012-01-20 14:40:21', '2017-07-20 19:31:43', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'D27CCD16808D7E4B9D5BE7A943385053', '2012-01-20 14:40:19', '2017-07-20 19:31:43', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'HTML', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'D2880EB926E6254F9456FE61E75ECA83', '2012-01-20 14:40:22', '2017-07-20 19:31:43', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'D2EEE4ECC57B1148B238A087B3C04DCE', '2012-01-20 14:40:19', '2017-07-20 19:31:43', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'combobox', 0),
(x'D2A8289A6E0CBF4FAF397EA43298B2F9', x'D35D8EA707DDD54A81D85532B248E44B', '2012-01-20 14:40:20', '2017-07-20 19:31:43', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'D3CC818FDF587E4C8BF7706E31DDE34E', '2012-01-20 14:40:19', '2017-07-20 19:31:43', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'D4CECD33846B304D9E08382263CE7817', '2012-01-20 14:40:20', '2017-07-20 19:31:43', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'MEMO', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'D52F4C5BB6FB5941A012206B0884C07F', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'URL', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'D55DB50BA214D843AF06EB5C9C01566D', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'VARCHAR', 0),
(x'382838929000504DB8E3262D094E3DFE', x'D63E0061ACEB0D4CB614826C4AFB2A14', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'D68B082B7BAADE4E9EB50E6A2B10302E', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTEGER', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'D6D1778F38F93945B889924B46297089', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'D7264656C58DB84BB585510C44DC18A2', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'39CFD2BFEB805342A64A24C116D26991', x'D7A25CB3F5B29849B1BEB2B34B714EB1', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'130ED29361B9474DBEEEDCEEBAFCAC62', x'D7DFB996EDFF9B48AEBFB3C2643712C0', '2012-01-20 14:40:21', '2017-07-20 19:31:44', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'D8656F13D0606248A17F48515B555DA7', '2012-01-20 14:40:22', '2017-07-20 19:31:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'40D06AC61A2F4441AD0F483A99E89F0C', x'D8695062DBB6A9429A8F0549CDD2A132', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'E0280E0D19D66A49BF995F9F28321C74', x'D8F9D6CC29A539498141F0D9CF924705', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'91A380866B51DD46B994A3A74F3BCEE3', x'DA24657503CDFA4EBEE78D2FCF168E67', '2012-01-20 14:40:20', '2017-07-20 19:31:44', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'INTERVAL', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'DA4C721E5ADC63499EA14C2F6F27330C', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTEGER', 0),
(x'0E966C3308625946A524419EFD682B68', x'DA67A7B250689345BE097F7950D6C7AD', '2012-01-20 14:40:19', '2017-07-20 19:31:44', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'IMAGE', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'DA6D61323CE93840B927210680A3E0B0', '2012-01-20 14:40:21', '2017-07-20 19:31:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DBF913F15DBF124DB2E598DA6272B1CD', '2012-01-20 14:40:20', '2017-07-20 19:31:45', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'FE94C47845AC134AB677A0BB3FDD793E', x'DC0331D2D75D5E41B5FF6FE27640612B', '2012-01-20 14:40:20', '2017-07-20 19:31:45', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'DC7B7D0F5A163E4787B91202C9FA58A4', '2012-01-20 14:40:20', '2017-07-20 19:31:45', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'C608D44CBE64964787E545A26D3B3DDA', x'DC7E62FC015CEA408F82886B8277B4EC', '2012-01-20 14:40:19', '2017-07-20 19:31:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'DD270B817B6E46429EFF512F3FD75E0B', '2012-01-20 14:40:19', '2017-07-20 19:31:45', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'DD2804B188D65C4E84DFA6298EEE663C', '2012-01-20 14:40:19', '2017-07-20 19:31:45', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'URL', 0),
(x'961085CC094CE749A541D00372E6D444', x'DDA3F256E96D524382427C5263CFAAD1', '2012-01-20 14:40:21', '2017-07-20 19:31:45', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'DDABE80657EA374FB12D7FD752E0D014', '2012-01-20 14:40:22', '2017-07-20 19:31:45', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTERVAL', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'DE2E5ED94C888B439C99F381D1F12FBE', '2012-01-20 14:40:19', '2017-07-20 19:31:45', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 255),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'DE7A9D85FC1D34448E6C1B8DA1478FAD', '2012-01-20 14:40:22', '2017-07-20 19:31:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'float', 0),
(x'0E966C3308625946A524419EFD682B68', x'DF3808CFE581FD4C81A7AA0D9027D04D', '2012-01-20 14:40:19', '2017-07-20 19:31:46', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'MEDIUMBLOB', 0),
(x'AC992E5363D5D44BAC7A66DD6D7DD243', x'DFA69BA2EC1A8044910B937F132EC5B6', '2012-01-20 14:40:20', '2017-07-20 19:31:46', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'DFBF870BE5669E4987578335F360AF52', '2012-01-20 14:40:21', '2017-07-20 19:31:46', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9DF4659492B4B34D8052290BEC7E9E2B', x'DFEF3CABB850B248959C2733A8EF9109', '2012-01-20 14:40:19', '2017-07-20 19:31:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'uuid', 0),
(x'B736F5EE412A1048B1ED7FB8557C25B9', x'E0462A80BF61364086391DA36D25E2A6', '2012-01-20 14:40:20', '2017-07-20 19:31:46', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'C2DE53F44B73964DBF2F89A0B0332CB9', x'E182046722C55E42819FE99D9BB0834D', '2012-01-20 14:40:20', '2017-07-20 19:31:46', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'uuid', 0),
(x'C7FEC37988B7224E8BE3F34759F1190C', x'E18879F6B911544B9C077AF1B77305F2', '2012-01-20 14:40:22', '2017-07-20 19:31:46', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'E20E9892BBC84147807D3BB4BC7FC876', '2012-01-20 14:40:20', '2017-07-20 19:31:46', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'E230E29430600C4CA7A3E5965404EC37', '2012-01-20 14:40:20', '2017-07-20 19:31:46', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'3A3878A9883FD34787A231AF949E53B1', x'E255B802693CC24989E0DA90739C4CBA', '2012-01-20 14:40:19', '2017-07-20 19:31:47', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'E2C8E78715693F47A6A7B04FF6498623', '2012-01-20 14:40:21', '2017-07-20 19:31:47', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'E2FC1369A9D37549969D17E099EFD1A2', '2012-01-20 14:40:21', '2017-07-20 19:31:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'DATE', 0),
(x'12EEAA312481754EBD16698F4235234B', x'E30FD1431B78BB46AF14CFD65B76E1B5', '2012-01-20 14:40:20', '2017-07-20 19:31:47', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'E355E222C379A448A1848930E37ACE68', '2012-01-20 14:40:19', '2017-07-20 19:31:47', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'URL', 0),
(x'28375783F0580E40A5A6F407682050ED', x'E3C0F173C49480438FB757752EED749C', '2012-01-20 14:40:22', '2017-07-20 19:31:47', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'E3CDD218D810514FB5D0CF99D7071ADD', '2012-01-20 14:40:20', '2017-07-20 19:31:47', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'E3D04DF653AD1D4F9ACD741AAFFA910A', '2012-01-20 14:40:20', '2017-07-20 19:31:47', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E3D071106D4B744CBC9BEAA390F72805', '2012-01-20 14:40:19', '2017-07-20 19:31:47', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'DF53B3432350CD48AC0F5142BB4F1330', x'E4BC48A6FA9E7440829A11BFF99881A2', '2012-01-20 14:40:20', '2017-07-20 19:31:47', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B02DEF620198924FBDD07F52BA87CEE6', x'E52C3CB5FCB8A34EA7D420066A821334', '2012-01-20 14:40:20', '2017-07-20 19:31:48', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'E54167E795778E4B8005FB9ACFC5BD82', '2012-01-20 14:40:22', '2017-07-20 19:31:48', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'NUMERIC', 0),
(x'24B86D7EF796A443A9D60CB89A66FE20', x'E5BB01ED488CDC49AEE5BF93D93C9DDC', '2012-01-20 14:40:19', '2017-07-20 19:31:48', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'E62054938A2D884A93E6DA869E008B1C', '2012-01-20 14:40:21', '2017-07-20 19:31:48', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'COMBOBOX', 0),
(x'A265C1406720474BA7A0624218DC70B2', x'E623465D5EB8BF498E01533BBBF37009', '2014-03-16 13:37:52', '2017-07-20 19:31:48', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'varchar', 20),
(x'2F775E9F99BF5F44AF3FFD18EDDA92C5', x'E6296C4354F4864CBD0E19AC1F7F1B95', '2012-01-20 14:40:22', '2017-07-20 19:31:48', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'NUMERIC', 0),
(x'8F47A07A0CA8254B9425A540399C6705', x'E64E9361D64733468D33E25F941D8EC3', '2012-01-20 14:40:20', '2017-07-20 19:31:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'E664BB371FADA44F9DE39716956DA1CE', '2012-01-20 14:40:20', '2017-07-20 19:31:48', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'STRING', 0),
(x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', x'E6934FDA0EB4E14AB7558BA4CB4B60B6', '2012-01-20 14:40:19', '2017-07-20 19:31:48', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'E6D43EC58E6EF54CBA2EDF410364CC61', '2012-01-20 14:40:20', '2017-07-20 19:31:48', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'TIME', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'E714893DE1597749BBF721B4EEAD2F76', '2012-01-20 14:40:21', '2017-07-20 19:31:48', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'E78B2EC618DB0F4BA992425958C753CD', '2012-01-20 14:40:19', '2017-07-20 19:31:48', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'E7AF7BD3001539429DA6428C1843D534', '2012-01-20 14:40:19', '2017-07-20 19:31:49', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'E81EA0208EDACD40B6D2DCD58A8A0134', '2012-01-20 14:40:21', '2017-07-20 19:31:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'INTEGER', 0),
(x'875B1E3EC05C2B4E91D257077FD2CDBB', x'E9F7A9E736012A48A5E32CCF6BB20D3B', '2012-01-20 14:40:20', '2017-07-20 19:31:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'DATE', 0),
(x'A97386691DC5164C8EED7D8810FFF900', x'EA24A4A15C8F2F43AF1B009B0012D320', '2012-01-20 14:40:20', '2017-07-20 19:31:49', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'EAD7BAB0F89D6A43B46C86AB3547C4E1', '2012-01-20 14:40:19', '2017-07-20 19:31:49', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'EB1D59DF80DDEE4E8F74FE8D77584696', '2012-01-20 14:40:22', '2017-07-20 19:31:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'EB583BE07DBB7F47B261702F7DCF0DDD', '2012-01-20 14:40:20', '2017-07-20 19:31:49', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'EB96DDDB126DE348AA1847B360072906', '2012-01-20 14:40:20', '2017-07-20 19:31:49', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'integer', 0),
(x'119CFDAF7CA1A3469DB157D627D33DF1', x'EC20B1F04000E94795AE4AC8FFB4F3EB', '2012-01-20 14:40:20', '2017-07-20 19:31:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'5E820B7D3C8CA244AC6EE53812337737', x'ED7E4718D7C108488D2B64DE9C6366A6', '2012-01-20 14:40:21', '2017-07-20 19:31:49', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'Integer', 0),
(x'6531AF860CC4E14188E2DE89D2C1BF84', x'ED86354AC5804A4EB616DFB0F46A3C09', '2012-01-20 14:40:21', '2017-07-20 19:31:49', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'ED8E15B1346FAE4798135F1F5B4775BB', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'EDFF33010579414B88D09906753F6843', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'INTEGER', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'EE7B82A6659DE445BD0CD5FD02E72080', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'String', 0),
(x'E8905A69C55FFC4081B8E84551EF4DDF', x'EE7F18E82827F44D84A981C168DD9D51', '2012-01-20 14:40:22', '2017-07-20 19:31:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'5DBA9EA722D3CD4598BA73511319CE19', x'EF87130B68D474499CAFC28EBEBE2A0B', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'TEXT', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'EF97EF5684613D4082795761818CCEDD', '2012-01-20 14:40:21', '2017-07-20 19:31:50', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'VARCHAR', 80),
(x'794061085D25D54FABBEDE9BC7987090', x'F0FA00AF3C0C6C44B4FFB2CB829567B9', '2012-01-20 14:40:21', '2017-07-20 19:31:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'9313F4BAD350454D96AF56B8415569D8', x'F17E93EDFB516E48B0A3D83366CD153C', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'7A49AD62E1F3494A80A0A5E19E9BE068', x'F1E6C74B588FD74A8B67DC959B3C7037', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'48E476E732F57D41B8D77D5B47FCCD6F', x'F210CA26F508F044BFCE4861597291D2', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'VARCHAR', 0),
(x'BEBCFA01DC0DCB4EB4B545E586E1C9EF', x'F23D564A94911044BB7741AE5968BD8A', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'4E199AA330CFC04F92980FFD1A7B0707', x'F243F1A54FFBA849988DBE2DE5AC1BC6', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'integer', 0),
(x'28375783F0580E40A5A6F407682050ED', x'F2B10FBEC9F3E44BA2D3C6795826AA18', '2012-01-20 14:40:22', '2017-07-20 19:31:50', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTERVAL', 0),
(x'E47F3330E2A570448B995F37A5F1947D', x'F2C3EFA9649CD342ACDFC79ABC30AFE7', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'INTERVAL', 0),
(x'B0D7CA66564368479AED471FFB780C23', x'F4873E2EBAD50B42B0D5D384DAF72472', '2012-01-20 14:40:20', '2017-07-20 19:31:50', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'integer', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'F49F71DAEDBDD54CB297444642FA7A11', '2012-01-20 14:40:19', '2017-07-20 19:31:50', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'integer', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'F4D1229969529F48ADAC030600AB6F38', '2012-01-20 14:40:20', '2017-07-20 19:31:51', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'MEMO', 0),
(x'63D6B9F8FA25734797AF43C663D098C8', x'F4EEFFB995FE884AB1B242A906273126', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'long', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'F51B21533292844E8CE762090B87DB03', '2012-01-20 14:40:20', '2017-07-20 19:31:51', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F5A65EB28624444F9A3A9BA15A62E1D4', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'COMBOBOX', 0),
(x'070587C891D14D4D855DC392CC0F9AE7', x'F5C466004F23BA4F8776312BB2E1BA96', '2012-01-20 14:40:21', '2017-07-20 19:31:51', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'TEXT', 0),
(x'18153A059FCAC94E99311C4AB23C54CE', x'F60E36CBCF875B44917DD004F2E048FE', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'INTEGER', 0),
(x'728E3461855DE34892C434841FA1AA8F', x'F7BB562E8DFE504785808F37F2A06B2D', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'INTEGER', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'F80EBB649DECC844970985457B9DC2F2', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'9BAEE12ABF21B44BA554096D5B959903', x'F80F967BD0D6214B8CC8CD6C4E407C05', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'INTEGER', 0),
(x'BBD7C8B4A25D1B48B6F9406635CC0ADF', x'F8A409EAC5651C4CBB2054F334AE397F', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'B7E0814A6D0F1547942EC38398FC9EA2', x'F8D4F1A13C5DE94E86315D9DD7F35C84', '2012-01-20 14:40:21', '2017-07-20 19:31:51', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'TEXT', 0),
(x'0E0E9768303AE34BBF7B07BD26194226', x'F92CCC9C9C6A9849A2FA6EA9D3731051', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'MULTIREF', 0),
(x'B8FD39DBA4C2534AA357281F13BD16AE', x'F9F8A529E82562478A3F3FEBB1AF40D8', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'TEXT', 0),
(x'12EEAA312481754EBD16698F4235234B', x'FA12513768BF5B49B485344BD4AD64F4', '2012-01-20 14:40:20', '2017-07-20 19:31:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'E15AE3F962B892419FB50F7DD6A5BF03', x'FA143F0EB40B344B87531217F04DE22B', '2012-01-20 14:40:19', '2017-07-20 19:31:51', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'62A2627C8D09A546AFDCC0286C87EDCC', x'FA55F2BBD48A2A448450EC9CE3934DE1', '2012-01-20 14:40:21', '2017-07-20 19:31:52', NULL, NULL, NULL, x'C85153245B510A428990FD9AB999D14C', 'DATE', 0),
(x'4E5C4BC769C18B48AD39568F8061E4A0', x'FAA51F9523F72E40A7383191D688ACBF', '2012-01-20 14:40:20', '2017-07-20 19:31:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'STRING', 0),
(x'28375783F0580E40A5A6F407682050ED', x'FB07422D0DFBE44291C78DAA59BD655D', '2012-01-20 14:40:22', '2017-07-20 19:31:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'INTEGER', 0),
(x'BB4E2D1305A56849BC1C50716757A2C5', x'FBD335EC0A32C44C842A662EBCCC93B7', '2012-01-20 14:40:20', '2017-07-20 19:31:52', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', 'COMBOBOX', 0),
(x'F7A946DE1BD2FB43BD3EDF6E82BD9477', x'FBDDA9A9BA6C084C95BB0BE42A1BF5AA', '2012-01-20 14:40:21', '2017-07-20 19:31:52', NULL, NULL, NULL, x'4BBFCD0384FD254C8B81434496AF7D84', 'COMBOBOX', 0),
(x'208F8A9E26619940B23E30426F9BDC04', x'FC48EAB34F48EE478247110073C1A1BB', '2012-01-20 14:40:19', '2017-07-20 19:31:52', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'String', 0),
(x'49C996F8B1BADA43BB19007C00353C42', x'FC4B99FE73FD3941A395599551A1F4D9', '2012-01-20 14:40:19', '2017-07-20 19:31:52', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'E5FEA67D39955749BBBCCA7C4E34FF21', x'FC94091EBA1C154486B5E635ABB83448', '2012-01-20 14:40:21', '2017-07-20 19:31:52', NULL, NULL, NULL, x'2D307FAB83A4B34B9CE8016206458C47', 'string', 0),
(x'661E7836D4C89B4C9F4109D999E4CFB0', x'FCEABBD1416E454396E700B6849249F9', '2012-01-20 14:40:19', '2017-07-20 19:31:53', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'B40D6B5ED7B42E44AEB5B2B35F51FA54', x'FD2876D3D2BAB9418AAB04BFB0B19E72', '2012-01-20 14:40:21', '2017-07-20 19:31:53', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'COMBOBOX', 0),
(x'BE284B2A37ECFF42BE74A891808C4361', x'FD979A35AD0ADD42850D1A5A4CDBDEA2', '2012-01-20 14:40:20', '2017-07-20 19:31:53', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'65348B4111516148B4C5E9535B3FD7B3', x'FDD68D3315FC7E41A9C2B0141FB67ADD', '2012-01-20 14:40:22', '2017-07-20 19:31:53', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'EF8FCC5D0E6EF94B9C3C7FC97D69610D', x'FDEE323E4D5838438A0EB93C7242EC76', '2012-01-20 14:40:20', '2017-07-20 19:31:53', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'CHECKBOX', 0),
(x'8608384640BAA948AAF5B8B138FB38C8', x'FE38140A8B9A8244891842B3652F63C2', '2012-01-20 14:40:21', '2017-07-20 19:31:53', NULL, NULL, NULL, x'27E1D236C090B444AC36B1A75B8C19B4', 'EMAIL', 80),
(x'E0280E0D19D66A49BF995F9F28321C74', x'FE923C834856CE4EB4C11DCA9D233800', '2012-01-20 14:40:20', '2017-07-20 19:31:53', NULL, NULL, NULL, x'057F5FFC77FF8442A87278590FC3D0DB', 'integer', 0),
(x'2B9FC453B8526A44BBF4F90A068EA396', x'FF0DE4EE2E50B84BBF90525F55D26959', '2012-01-20 14:40:22', '2017-07-20 19:31:53', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0),
(x'C48D9EC186B1F547B49F644C8C795459', x'FF3C7C2D7592424D90E2B8165D59FFAE', '2012-01-20 14:40:20', '2017-07-20 19:31:54', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'NUMBER', 0);

-- 
-- Вывод данных для таблицы fileterfield
--
INSERT INTO fileterfield VALUES
(x'1179A8C9C1790846B7E664346683475F', x'00B3B88AD4E63E4EB944B5CB95822141', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 1, 'WorkPlace_Caption', '?????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'052F101E04B6344F9358CD94DA220EF3', '2017-06-05 17:27:10', '2017-07-20 19:29:48', NULL, NULL, NULL, 3, 'iu_u_def_surname', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'0BE4630D194BF2418E407447B4604AE2', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 1, 'Users_Name', '???', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'FCC22FE6655A4F44AD7E27B025E27794', x'0CE2B17318136642B294ADB6FB8A9231', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 0, 'Journal_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'0F6164388C1E094F9489C84F979ED734', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 3, 'arc_info_phone', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 40, 0, NULL, NULL, 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'1873B4EECF78B143BFD7342AB7E8017F', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 2, 'arc_info_org', '???????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'FCC22FE6655A4F44AD7E27B025E27794', x'191C587E2F0BD3419D8A2ECF28AEDB86', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 1, 'Journal_the_Alias', '?????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 32, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'1C88145375CB264E9CCC14912DDD61BF', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 1, 'the_Session_UserRole', '??????? ???? ????????????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'EE6A0EA4417B6D47923CACA251C08E87', 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'1FD17C65BD1695429D1CE3D0DDE88E66', '2017-06-05 17:27:11', '2017-07-20 19:29:48', NULL, NULL, NULL, 6, 'Reports_ReportView', '??????? ??????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'1179A8C9C1790846B7E664346683475F', x'220541DE2352094CA9BC8BED31A3A304', '2017-06-05 17:27:11', '2017-07-20 19:29:49', NULL, NULL, NULL, 2, 'WorkPlace_TheVersion', '??????', x'48E476E732F57D41B8D77D5B47FCCD6F', 30, 0, NULL, NULL, 0),
(x'C2E574F94A673540B49C9C4680CBC5EA', x'220E9AC8DE1924449E93D7B3FB6EA908', '2017-06-05 17:27:10', '2017-07-20 19:29:49', NULL, NULL, NULL, 0, 'Num_head_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 80, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'22169F5DD62D0C49BD76C4DDA6BB6213', '2017-07-20 17:58:38', '2017-07-20 19:29:49', NULL, NULL, NULL, 1, 'arlog_data_chanel', '?????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'6C47841B846CDE4092B517045D93C35A', 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'2C28C499A343F8449FEDABF63F071C20', '2017-06-05 17:27:11', '2017-07-20 19:29:49', NULL, NULL, NULL, 2, 'Reports_Caption', '?????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'2F10C2C45589F24E9E980D29BA974C94', '2017-07-20 17:58:39', '2017-07-20 19:29:49', NULL, NULL, NULL, 7, 'arsms_data_power_ok', '??????? ? ?????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'2FC06B9550183E46A8FCD4C8EB839AA4', '2017-06-05 17:27:11', '2017-07-20 19:29:49', NULL, NULL, NULL, 3, 'Users_Login', '??? ??? ?????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'31C376105D6EB84A8F0EEC2506EBC40B', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 0, 'arc_info_Family', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'37809C18EF0C064BACF3EE983E953A55', '2017-07-20 17:58:38', '2017-07-20 19:29:49', NULL, NULL, NULL, 2, 'arlog_data_SendTime_GE', '????? ??????? C', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'DF80F3A618824E4DBC60B687D23AE66B', x'381F1E27E6A8C9489298166DBCE675D9', '2017-06-05 17:27:10', '2017-07-20 19:29:49', NULL, NULL, NULL, 0, 'iu_crole_name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'3BF21189A74A474DAD34F3C10169FE97', '2017-07-20 17:58:39', '2017-07-20 19:29:49', NULL, NULL, NULL, 4, 'arsms_data_temperature_LE', '??????????? <=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'62E2529A29D5674B936E3E134FA5F15D', x'3F4ECE7655EC6F4A9C331122799E4339', '2017-06-05 17:27:10', '2017-07-20 19:29:50', NULL, NULL, NULL, 2, 'MTZAPP_TheComment', '????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'416FCECC58232E46B44FEE9DCC0DB412', '2017-06-05 17:27:11', '2017-07-20 19:29:50', NULL, NULL, NULL, 6, 'Users_Phone', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 20, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'4654BF22AB2DC24E9EEE8FC5E42553B1', '2017-06-05 17:27:10', '2017-07-20 19:29:50', NULL, NULL, NULL, 4, 'iu_int_modules_name', '???????? ????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'479543425EE1954EA61E40E38C9061B3', '2017-06-05 17:27:10', '2017-07-20 19:29:50', NULL, NULL, NULL, 0, 'iu_u_def_theClient', '??????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'A14802F51E159C4D87D0906ACFD35C9F', 0),
(x'E805028F60736C4E973FE517C65AF65D', x'47F2B06059B32A4093F2ED6B5DE38A23', '2017-06-05 17:27:12', '2017-07-20 19:29:50', NULL, NULL, NULL, 2, 'MTZExt_def_TheDescription', '????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'0D32CF6416AF7849931DEC69871EEEBA', x'48BAF612688B3A4690B5FBD9FE95AF77', '2017-06-05 17:27:10', '2017-07-20 19:29:50', NULL, NULL, NULL, 0, 'bpc_info_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'49C7A68920312445A83686C267089365', '2017-07-20 17:58:38', '2017-07-20 19:29:50', NULL, NULL, NULL, 5, 'arlog_data_trynumber_GE', '????? ??????? >=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'FCC22FE6655A4F44AD7E27B025E27794', x'4CCE8DCC8378104DA07E7B59E92EE95F', '2017-06-05 17:27:11', '2017-07-20 19:29:50', NULL, NULL, NULL, 4, 'Journal_UseFavorites', '???????? ?????????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'4E778D3840B45E4B82FCA5AC3A55EB69', '2017-07-20 17:58:38', '2017-07-20 19:29:50', NULL, NULL, NULL, 7, 'arlog_data_finished', '?????????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'E805028F60736C4E973FE517C65AF65D', x'522B5F5DD435D84FA8C852CD3A84A1DD', '2017-06-05 17:27:12', '2017-07-20 19:29:51', NULL, NULL, NULL, 0, 'MTZExt_def_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'522F4B748D98554399B7DBB4EA4CF170', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 7, 'the_Session_LastAccess_LE', '????????? ????????????? ??', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'538761296712FD4B930782E83F19CD95', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 4, 'Reports_ReportType', '??? ??????', x'12EEAA312481754EBD16698F4235234B', 0, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'54AF8711A7B92B46825D985DFC284512', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 7, 'iu_u_def_email', 'e-mail', x'48E476E732F57D41B8D77D5B47FCCD6F', 60, 0, NULL, NULL, 0),
(x'FCC22FE6655A4F44AD7E27B025E27794', x'5657E2E9FDF92F4DBF0420E2664F7F31', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 2, 'Journal_TheComment', '????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'5BB6BB841AB5F640BFC47499EE56A846', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 5, 'iu_int_modules_Caption', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 80, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'6499FD638F96E645B30E2A01530672B9', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 2, 'iu_int_modules_TheIcon', '??????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'666845FAA8CC6B45A4FAD4397250B9D2', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 10, 'the_Session_Lang', '???????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 25, 0, NULL, NULL, 0),
(x'E805028F60736C4E973FE517C65AF65D', x'666F01E6D1B92C4292BF6F2F7D341357', '2017-06-05 17:27:12', '2017-07-20 19:29:51', NULL, NULL, NULL, 1, 'MTZExt_def_ExtType', '??? ??????????', x'C7FEC37988B7224E8BE3F34759F1190C', 0, 0, NULL, NULL, 0),
(x'C2E574F94A673540B49C9C4680CBC5EA', x'68CD1720A54162408CFE2854A8A2B5C9', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 1, 'Num_head_Shema', '????? ?????????', x'382838929000504DB8E3262D094E3DFE', 0, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'6C926DB175D8A149B59664F42ECABDC8', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 3, 'Reports_PrepareMethod', '????? ??? ????????????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'7B5BC0E096257649B40D29A7ED5DD9B7', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 2, 'iu_u_def_name', '???', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'7B69D0D4C661CE458C67C711A73DB09C', '2017-06-05 17:27:09', '2017-07-20 19:29:51', NULL, NULL, NULL, 1, 'iu_int_modules_Sequence_LE', '? ?/? <=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'7E6DDFFCF301AA48991F7AE33171C19F', '2017-06-05 17:27:11', '2017-07-20 19:29:51', NULL, NULL, NULL, 4, 'the_Session_Closed', '???????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'7EABBBE9FF8CD241B2358B3194DF6C06', '2017-06-05 17:27:10', '2017-07-20 19:29:51', NULL, NULL, NULL, 3, 'iu_int_modules_GroupName', '???? ???????? ???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 60, 0, NULL, NULL, 0),
(x'1179A8C9C1790846B7E664346683475F', x'831E0320149B1349A8EA9C351C1CC24A', '2017-06-05 17:27:11', '2017-07-20 19:29:52', NULL, NULL, NULL, 0, 'WorkPlace_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'84E6696D6472414A92ED05FC62391579', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 4, 'arc_info_email', 'E-Mail', x'8608384640BAA948AAF5B8B138FB38C8', 0, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'856C68B5A0884D46BE44F129ABBC6AC3', '2017-06-05 17:27:11', '2017-07-20 19:29:52', NULL, NULL, NULL, 4, 'Users_DomaiName', '???????? ???', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'867E022EEB74784A96646CE9E0C63E0D', '2017-06-05 17:27:10', '2017-07-20 19:29:52', NULL, NULL, NULL, 4, 'iu_u_def_curRole', '???? ? ????????????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'1051A02ED67D914BB774AF6ECBC42108', 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'89A1B4B5300D83428BA5E69741B327D3', '2017-06-05 17:27:11', '2017-07-20 19:29:52', NULL, NULL, NULL, 5, 'the_Session_Usersid', '????????????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'55B88B1465099E4EA3D648DCC8CE528B', 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'8C430B395CF7DC44A8DCC13018E7160D', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 5, 'arc_info_login', '?????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'8D2C7278F69E2C4DA8FBC37D45D101DD', '2017-06-05 17:27:10', '2017-07-20 19:29:52', NULL, NULL, NULL, 8, 'iu_u_def_thephone', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 40, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'8F87BBF2FEA23F4BA9AB8A2C1BB101C4', '2017-07-20 17:58:38', '2017-07-20 19:29:52', NULL, NULL, NULL, 0, 'arlog_data_sms', '???', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'90449281FBC83D4CAACA48781FAD1681', '2017-06-05 17:27:11', '2017-07-20 19:29:52', NULL, NULL, NULL, 0, 'Users_Family', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'96B5A4217BFEEC49ACBA75F19DDECDDE', '2017-06-05 17:27:10', '2017-07-20 19:29:52', NULL, NULL, NULL, 6, 'iu_int_modules_visibleControl', '?????????? ??????????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'9B2326533968EA4AA0A6523F78CC65CF', '2017-06-05 17:27:11', '2017-07-20 19:29:52', NULL, NULL, NULL, 0, 'the_Session_ApplicationID', '??????????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'C421399726499D4CA7816062CF81B5AD', 0),
(x'9C18B18609187F4FB7DEDE5788A873C7', x'9E26C6FC2EE8FF469E4E79815F62E25D', '2017-06-05 17:27:09', '2017-07-20 19:29:53', NULL, NULL, NULL, 0, 'iu_int_modules_Sequence_GE', '? ?/? >=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'A0DD0FB8225AF346B878F06E4B76A1BD', '2017-06-05 17:27:10', '2017-07-20 19:29:53', NULL, NULL, NULL, 6, 'iu_u_def_freelancer', '????????? ??????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'A1F046A7A826C145BF5BCB79517FB090', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 7, 'Users_LocalPhone', '??????? ???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 20, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'A2C478E0B046794898A6CABB3470B578', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 2, 'the_Session_ClosedAt_GE', '?????? ???????? C', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'8D7CFFF9F55C3A4698FBA3F7485E24E2', x'A48795C2DCCF474483B776ABB88AE2C9', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 2, 'Filters_TheComment', '????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'DF80F3A618824E4DBC60B687D23AE66B', x'A5488BFA2A4A78489C1999A8EE3B8DD1', '2017-06-05 17:27:10', '2017-07-20 19:29:53', NULL, NULL, NULL, 1, 'iu_crole_allowSetUser', '??????? ?????? ??????????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'A59348D5B8FDB54FBBC2FF91C2C26322', '2017-07-20 17:58:39', '2017-07-20 19:29:53', NULL, NULL, NULL, 2, 'arsms_data_serialno', '???????? ?????', x'48E476E732F57D41B8D77D5B47FCCD6F', 20, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'A85102D5671F6548BF57A1ED0F39E491', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 5, 'Reports_TheReportExt', '?????????? ??? ???????? ??????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'A8984B354613B242B2BF424BFE0389D8', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 5, 'Users_EMail', 'e-mail', x'8608384640BAA948AAF5B8B138FB38C8', 0, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'A9F3B271D51AA5459E0B937F1D93998F', '2017-07-20 17:58:39', '2017-07-20 19:29:53', NULL, NULL, NULL, 1, 'arsms_data_smstime_LE', '???? ? ????? ??? ??', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'AF6A6ACC35F3A442B6AF5C276C66D469', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 7, 'Reports_TheComment', '????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'B1EE747ED509A1458D7B84C07725FA14', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 1, 'Reports_ReportFile', '???? ??????', x'C340EA421CD62F46AF6F314D2F0000E1', 0, 0, NULL, NULL, 0),
(x'9266BB9B34FBAC409492AEF9F7869DBB', x'B5223D1B19B8884895AE97798224A104', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 2, 'Users_SurName', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'1179A8C9C1790846B7E664346683475F', x'B60B3CC727FB3D42BDFB29FEA4BEAC95', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 4, 'WorkPlace_TheComment', '??????????', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'BB11A3827CD8C24994F243B2353A28EF', '2017-06-05 17:27:11', '2017-07-20 19:29:53', NULL, NULL, NULL, 11, 'the_Session_Login', 'Login', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'8D7CFFF9F55C3A4698FBA3F7485E24E2', x'BB6BFDCA394E1C41B977FFB8AF9B7375', '2017-06-05 17:27:11', '2017-07-20 19:29:54', NULL, NULL, NULL, 0, 'Filters_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'BE220D0E5A640842ADF3AA310BC88649', '2017-06-05 17:27:10', '2017-07-20 19:29:54', NULL, NULL, NULL, 5, 'iu_u_def_sendtomail', '????????? ?? ?????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'8A50201216FDA94B9B781C5B94F98964', x'BE684092D70C1E4885FA6D594911A575', '2017-07-20 17:58:39', '2017-07-20 19:29:54', NULL, NULL, NULL, 0, 'armd_type_name', '????????  ????', x'48E476E732F57D41B8D77D5B47FCCD6F', 32, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'C0043BE6E45ECF4A9EF7BA1933F40DD0', '2017-07-20 17:58:39', '2017-07-20 19:29:54', NULL, NULL, NULL, 5, 'arsms_data_pop_ok', '????????-?????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'C3CE10AC71309548A2CD966CEAA0E0C2', '2017-06-05 17:27:11', '2017-07-20 19:29:54', NULL, NULL, NULL, 8, 'the_Session_StartAt_GE', '?????? ???????? C', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'C80BD236BCB80B459A2B12F1E27B80B9', '2017-06-05 17:27:11', '2017-07-20 19:29:54', NULL, NULL, NULL, 3, 'the_Session_ClosedAt_LE', '?????? ???????? ??', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'C8B5F21C102ED14386581A514B5688CA', '2017-07-20 17:58:39', '2017-07-20 19:29:54', NULL, NULL, NULL, 3, 'arsms_data_temperature_GE', '??????????? >=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'FCC22FE6655A4F44AD7E27B025E27794', x'CCA9FF07F906FA429F274809863FCF87', '2017-06-05 17:27:11', '2017-07-20 19:29:54', NULL, NULL, NULL, 3, 'Journal_jrnlIconCls', '?????? ???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 80, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'CCC418DC44DF094B864C6A4C7D493CEF', '2017-06-05 17:27:11', '2017-07-20 19:29:54', NULL, NULL, NULL, 9, 'the_Session_StartAt_LE', '?????? ???????? ??', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'278C1C39D9AA29479877DD87D2A9404E', x'CCF6711A1A7FAE48A89F58FF6C4886A3', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 1, 'arc_info_Name', '???', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'D5222EAAED58764C857E517E6323ACE7', '2017-07-20 17:58:38', '2017-07-20 19:29:54', NULL, NULL, NULL, 6, 'arlog_data_trynumber_LE', '????? ??????? <=', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, NULL, NULL, 0),
(x'ECBBCEE1E134A94991746737BA21932C', x'D53AF767BB3AA34D9A6B1AD773E0EC32', '2017-06-05 17:27:10', '2017-07-20 19:29:54', NULL, NULL, NULL, 0, 'iu_rcfg_def_therole', '????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 2, NULL, x'1051A02ED67D914BB774AF6ECBC42108', 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'D83A93166A434647997B181D0577A0E1', '2017-06-05 17:27:10', '2017-07-20 19:29:54', NULL, NULL, NULL, 9, 'iu_u_def_login', '??? ??? ?????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'DA85C429BBE94D4CADC47F798515FC29', '2017-07-20 17:58:38', '2017-07-20 19:29:54', NULL, NULL, NULL, 3, 'arlog_data_SendTime_LE', '????? ??????? ??', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'62E2529A29D5674B936E3E134FA5F15D', x'E5BFC5C498515E45B026F2AFCA2AB4BD', '2017-06-05 17:27:10', '2017-07-20 19:29:54', NULL, NULL, NULL, 0, 'MTZAPP_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'62E2529A29D5674B936E3E134FA5F15D', x'EC19551B2FCDF74F8E4259374C9B7E18', '2017-06-05 17:27:10', '2017-07-20 19:29:55', NULL, NULL, NULL, 1, 'MTZAPP_DBName', '???? ??????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'F0525AC3FD1ECF41A4738ED8031AECF7', '2017-07-20 17:58:39', '2017-07-20 19:29:55', NULL, NULL, NULL, 6, 'arsms_data_roof_open', '?????? ???????', x'794061085D25D54FABBEDE9BC7987090', 0, 0, NULL, NULL, 0),
(x'2552160EC4C5C646BD0E9601CD7B0BA9', x'F0A246F5A3EB4F4E9A22BC66793C71AA', '2017-06-05 17:27:10', '2017-07-20 19:29:55', NULL, NULL, NULL, 1, 'iu_u_def_lastname', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0),
(x'8D7CFFF9F55C3A4698FBA3F7485E24E2', x'F2F5E02A04A38A48A8B423C952F8EC63', '2017-06-05 17:27:11', '2017-07-20 19:29:55', NULL, NULL, NULL, 1, 'Filters_TheCaption', '?????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 80, 0, NULL, NULL, 0),
(x'70815FC102386640B24987366F387513', x'F5DE9F8F7DE88F4FAE6190D38F536C86', '2017-07-20 17:58:39', '2017-07-20 19:29:55', NULL, NULL, NULL, 0, 'arsms_data_smstime_GE', '???? ? ????? ??? C', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'1179A8C9C1790846B7E664346683475F', x'FA13E8241EDE9E41B962E6708ADB62D1', '2017-06-05 17:27:11', '2017-07-20 19:29:55', NULL, NULL, NULL, 3, 'WorkPlace_ThePlatform', '????????? ??????????', x'6531AF860CC4E14188E2DE89D2C1BF84', 0, 0, NULL, NULL, 0),
(x'E5508977D4EDFC42B8AC015EC668C6FC', x'FE36D8E96A4AB6488AFD6F5ED5A65574', '2017-06-05 17:27:11', '2017-07-20 19:29:55', NULL, NULL, NULL, 6, 'the_Session_LastAccess_GE', '????????? ????????????? C', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, NULL, NULL, 0),
(x'57FA1F00CC2B8B4287011B1125821231', x'FEFFB855543BE142B3DEBC963247534F', '2017-06-05 17:27:11', '2017-07-20 19:29:55', NULL, NULL, NULL, 0, 'Reports_Name', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, NULL, NULL, 0),
(x'69AA6209ABFD104E890A4CFA4DABFD75', x'FF5D4F414E6DC540A82EACFA097C8EFC', '2017-07-20 17:58:38', '2017-07-20 19:29:55', NULL, NULL, NULL, 4, 'arlog_data_sendresult', '?????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 120, 0, NULL, NULL, 0);

-- 
-- Вывод данных для таблицы generator_target
--
INSERT INTO generator_target VALUES
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'057F5FFC77FF8442A87278590FC3D0DB', '2012-01-20 14:40:23', '2017-07-20 19:30:18', NULL, NULL, NULL, 'VB Model', 1, 'MTZ_VBQUEUE', 'MTZ_MODELGEN2_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'1E837D44592F5547B0AB5CB12CCF4B0A', '2012-01-20 14:40:23', '2017-07-20 19:30:18', NULL, NULL, NULL, 'WIN.NET', 2, 'MTZ_NETQUEUE', 'MTZ_WINNET2.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'25AD0CC1ED9518459177E29824F01E47', '2012-01-20 14:40:23', '2017-07-20 19:30:18', NULL, NULL, NULL, 'ORACLE', 0, 'MTZ_ORAQUEUE', 'MTZ_ORACLEGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'27E1D236C090B444AC36B1A75B8C19B4', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'ASPNET', 2, 'MTZ_NETQUEUE', 'MTZ_ASPNET2.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'2D307FAB83A4B34B9CE8016206458C47', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'VB.NET Model', 1, 'MTZ_NETQUEUE', 'MTZ_DOTNETMODEL3.Generator', 0, 1),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'3014B534C6BD81488A6E795010553E24', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'VB Interface', 2, 'MTZ_VBQUEUE', 'MTZ_OCXGEN2_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'4BBFCD0384FD254C8B81434496AF7D84', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'ASP', 2, 'MTZ_ASPQUEUE', 'ASPGen_V2.Generator', 0, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'582C650C52A98F4E8CB0D266431CD24B', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MS SQL 2000', 0, 'MTZ_SQLQUEUE', 'MTZ_SQLGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'6D7D8396C49AF74788AFCE375153C200', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'Ext JS', 2, NULL, NULL, 0, 3),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'9DD37D9D437AC34EAA101FBCED75F3CB', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'PGSQL', 0, 'MTZ_PGQUEUE', 'MTZ_POSTGRESGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'C4CF9CB244736A448F14824C92DC2D30', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MySQL', 0, 'MTZ_MYSQLGEN', 'MTZ_MYSQLGEN2_V2.Generator', 1, 0),
(x'8C53A112A8EE714A9C8E525C175FC1EB', x'C85153245B510A428990FD9AB999D14C', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'VB ARM', 4, 'MTZ_VBQUEUE', 'MTZ_VB6ARMGEN.GENERATOR', 1, 0);

-- 
-- Вывод данных для таблицы groupuser
--
-- Таблица areal_cli.groupuser не содержит данных

-- 
-- Вывод данных для таблицы instancevalidator
--
-- Таблица areal_cli.instancevalidator не содержит данных

-- 
-- Вывод данных для таблицы iu_u_def_temp
--
-- Таблица areal_cli.iu_u_def_temp не содержит данных

-- 
-- Вывод данных для таблицы jcolumnsource
--
INSERT INTO jcolumnsource VALUES
(x'8006FD5524D8D64C9022D80B75F0DF30', x'001C3A6335F586499ACF0918F41D943E', '2017-06-05 17:27:11', '2017-07-20 19:30:07', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_ReportView'),
(x'A3B519B22DF0F74B92B6E1CD6F4F9AAB', x'06F52447C83DF24B8CF377EA0E30DEDE', '2017-07-20 17:58:39', '2017-07-20 19:30:07', NULL, NULL, NULL, x'784294B5D922EF478998165D0676425E', 'armd_type_name'),
(x'C8CC22B8EB588B4DA29A5EE174AD77C5', x'073CC3A69AF6E94EAE92A1C2FF5E237B', '2017-06-05 17:27:10', '2017-07-20 19:30:07', NULL, NULL, NULL, x'2BB92750CDDBE941B7A4276449000243', 'MTZAPP_TheComment'),
(x'3A931F57E3B61742AA22B4317688D535', x'081BDF052C714E4F80D09C11BA210F32', '2017-07-20 17:58:39', '2017-07-20 19:30:07', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_smstime'),
(x'D6C83F8055208F409C5A524761041601', x'0A4094C60D9B3545B6F6356F808BEF01', '2017-07-20 17:58:39', '2017-07-20 19:30:07', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_temperature'),
(x'7863CAD241AF454186E693DC3AF5AE8C', x'0A5C0994C8C39243979BA858FE07A485', '2017-07-20 17:58:39', '2017-07-20 19:30:07', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_sendresult'),
(x'0AAC561559C4294EBBA1BBBC6D123C3F', x'1DC66361943AD54295419946F2D6CC06', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_org'),
(x'3146C38BFDEC7C41A6116DCBEA8A518B', x'253854AB7E08A748A9029D3F5BAC845E', '2017-06-05 17:27:10', '2017-07-20 19:30:07', NULL, NULL, NULL, x'A454F3EBDB9A714180B323448C3E7D14', 'bpc_info_Name'),
(x'4A449FBC424C9B49A4A31B88CDA69B9D', x'269CE9D1FC5432458B8A976DAB85F59A', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_Phone'),
(x'461934421FA73D4DB768C8CCB9423288', x'2D0D2CEA02ADCA48BB2815C93B9E7541', '2017-06-05 17:27:10', '2017-07-20 19:30:08', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_curRole'),
(x'7DB46B418521A54FAE2AE8F6D0209529', x'3228390E58D7374689CD5834A35EEF49', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'70BA95FDC48DCB4BB1EB9CA2ECD192A2', 'Filters_TheComment'),
(x'84C94A31E0C67B4790998A18FEA44091', x'34B2701D79D9604FAEE8177DADD832B0', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_Login'),
(x'471987397F08F24DB36CFE73CF498F9C', x'35A423485E8C7B42A00A6CE238B8AE64', '2017-06-05 17:27:10', '2017-07-20 19:30:08', NULL, NULL, NULL, x'B8CF8B9164BF2D458C0135883BFC14FD', 'Num_head_Name'),
(x'4CA4AE77B9549A41BC6FA7E4D0664530', x'36A0BD3A60EB3C40ABE4F06A4853EA85', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_Usersid'),
(x'2C71CF759AC16448BBCDA321956CFECB', x'37F5861D8D89DA4EA3AC031FC08FD549', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'70BA95FDC48DCB4BB1EB9CA2ECD192A2', 'Filters_Name'),
(x'2520CB39B0FA974FA8DFCE81408AD82F', x'3816E8A063B88D41B2DFDD7A9960B3A8', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_LastAccess'),
(x'86C9ACF2DD597E4E86B36768CB10F821', x'3937605DBD2CC54BB4BF5D8CA2F58C87', '2017-06-05 17:27:12', '2017-07-20 19:30:08', NULL, NULL, NULL, x'0E3ABBEF655C0342BAD2B0AFCD332F87', 'MTZExt_def_ExtType'),
(x'1B5196631245C346B73FCD7B7F0EEF80', x'3A89DDE09C490B449FB6008B9ADF739D', '2017-06-05 17:27:10', '2017-07-20 19:30:08', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_surname'),
(x'5D79E4AF266C6247B600669E2ED24D2E', x'3AF830B4863F8A4C8AF350E6BD97B4A2', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_SurName'),
(x'41498A8895D3564C8F990E889DD09AAA', x'3B2C4E9B1AE9024C9FE76E13EEA86F99', '2017-07-20 17:58:39', '2017-07-20 19:30:08', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_serialno'),
(x'C71D7831D1C8C643833D6FEA8FAD4142', x'3EBA5F136B884F40B4DA1599FD41CCF9', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'ADDC90D1A692A04D8C546BF78B7C9692', 'WorkPlace_TheComment'),
(x'E8B790E5D856424B906D2634048FE615', x'41D030BB1710B047909A85E47D3B1F80', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_Name'),
(x'143931ACB5CDD94E871E44A564258C3B', x'44C3F82FBBE63B4D959B6598505F1495', '2017-06-05 17:27:11', '2017-07-20 19:30:08', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_Name'),
(x'F710191A2FC4AF428C733A2D897D7B68', x'45207F6F34C3664EB7FB68ABE07B531C', '2017-06-05 17:27:10', '2017-07-20 19:30:09', NULL, NULL, NULL, x'B8CF8B9164BF2D458C0135883BFC14FD', 'Num_head_Shema'),
(x'831399F8208A8349B7AD996F8DF5EC2D', x'47E08DFB99401743BC4BA828A53ED368', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_login'),
(x'2176BBC453FA1B4AAB353CF1F88DE9E9', x'5575342C871A9743A3EF1AE15354D84C', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'827AEA99150CA54892F8D7217B9D7DBE', 'Journal_jrnlIconCls'),
(x'1535FBE23A824841AC772EDE68E3F0B2', x'59DC321E8C2806439E9858AA4876A803', '2017-06-05 17:27:12', '2017-07-20 19:30:09', NULL, NULL, NULL, x'0E3ABBEF655C0342BAD2B0AFCD332F87', 'MTZExt_def_Name'),
(x'020AA59EF5801045967475134543C762', x'5D8592BC2B8A4345BDBE253D2A1C2D1E', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'ADDC90D1A692A04D8C546BF78B7C9692', 'WorkPlace_Caption'),
(x'47AD836B74B3634A901ECE82BBDE6039', x'5EB22F078EF6F94082865765ABF4AC11', '2017-07-20 17:58:39', '2017-07-20 19:30:09', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_trynumber'),
(x'3EF59B446FD02143AB63075F3F9C283F', x'5F5A70904F156348956630584F0999BA', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_StartAt'),
(x'E1072D7AEDA761499B3CC5580251F837', x'60D583D2107B484ABE303200D3AFC3BE', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_PrepareMethod'),
(x'1ECCF5B7ABF44A4596B11F11C7D5DC3A', x'63CDB236ECC82A46AEFB2BFE43F21F1D', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_TheComment'),
(x'54E62508D0BAD2469316FDCA8302CA22', x'63F9FEE2DA5DD841B9A7667C2D6C8F25', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_ClosedAt'),
(x'16C700FF86952249AB926F52C59D7CC7', x'6FF696538466DB449AA94C956899706F', '2017-06-05 17:27:11', '2017-07-20 19:30:09', NULL, NULL, NULL, x'827AEA99150CA54892F8D7217B9D7DBE', 'Journal_Name'),
(x'BE309D876FFA9A4E8BF89ABB5A363B0A', x'7039EE53F050674AA43A3B47E31DB7D3', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_Family'),
(x'F6C4E791C00D0742B49B6B3494DC3330', x'7370BAB585B4E94C921D5ED81E0BD973', '2017-07-20 17:58:39', '2017-07-20 19:30:09', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_SendTime'),
(x'2CAA5AE876C7D4448CB5E9D49BBA0746', x'73D30AAAA2112D469165974022941981', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_Closed'),
(x'605B588E5E535E4898B0A3F39CF1669A', x'76ACBF048ED7BB498CBA33CBA4E47169', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_Caption'),
(x'D7EC93C9F5D1184EA8E15C0F6FBF1192', x'78A77F32A7BDFF4DB36005B623B4B39F', '2017-06-05 17:27:10', '2017-07-20 19:30:10', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_TheIcon'),
(x'3F3BF6B9D1378247BBB22F853C98E154', x'7B998D96D79C7A4B9CA16B2F8AAC2D2D', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'70BA95FDC48DCB4BB1EB9CA2ECD192A2', 'Filters_TheCaption'),
(x'97558C485C176B45A18A68952098BFC4', x'7F16CCBF14827544994AADBC02D395A0', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'ADDC90D1A692A04D8C546BF78B7C9692', 'WorkPlace_ThePlatform'),
(x'D6449EF3500DD64A9BAB63306216A3A1', x'827B1B778232024EAE487A0C50237055', '2017-07-20 17:58:39', '2017-07-20 19:30:10', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_chanel'),
(x'1423E45C11F78449AD8B74DB951C9D31', x'85C6A5A1BC5D694D80EFFF43C627BE2C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_email'),
(x'F3A364D28AE59E4F8DE0F183B3DFEBDE', x'86F1B6F8DE8780408A89DAA1A37516C1', '2017-06-05 17:27:10', '2017-07-20 19:30:10', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_Caption'),
(x'1FA2FD0C1502BB4CBFAEDC74DF9FEC9D', x'871F1DB2EEC2F7469B1BE828B4E4F9C5', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_phone'),
(x'6F5EBD235F241847A26FB2C42A22B1D8', x'91201D4B888CEA41A98FB88901F0D98C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, x'75CB575A4D8A8540BA2E148A8FB15D9A', 'arc_info_Name'),
(x'3DBE3550B6720649B90B76F9333C978A', x'947F9E0F36E2DA49B3F34FE57FF8ADB0', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_ApplicationID'),
(x'9119D10CACA1DA478BA6B3C52D66D077', x'9876B48DDF72C947A039583925433FAC', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_Login'),
(x'FACAF8CDB3708C468348218674F99B8D', x'99E13712CCB20149BFAD03026463A6AF', '2017-06-05 17:27:10', '2017-07-20 19:30:10', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_Sequence'),
(x'B6B011973AF48B4D87A2D5C9BE1074CA', x'9D4281660836E14FA611C5918E43E869', '2017-07-20 17:58:39', '2017-07-20 19:30:10', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_sms'),
(x'03D2BC4DA9EB2F45AFE915627C84D81D', x'A038A374DB7658438478F1180FF7596C', '2017-06-05 17:27:11', '2017-07-20 19:30:10', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_DomaiName'),
(x'533F9C78DED5B14E9C2B67D5ED3F6644', x'A63177BA4B2D6A4A98149878E93159D1', '2017-06-05 17:27:11', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ADDC90D1A692A04D8C546BF78B7C9692', 'WorkPlace_TheVersion'),
(x'7AE358AB838A9849B91EEEB287624BBF', x'AD2C129121921D46BBAC801E4A5A35EA', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'2BB92750CDDBE941B7A4276449000243', 'MTZAPP_DBName'),
(x'19AA36E128E3A948A7282F977858C342', x'AD804E83F9291946A876EEA8BB248701', '2017-06-05 17:27:11', '2017-07-20 19:30:11', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_EMail'),
(x'F13D058C43CE9043B8E12850D883C659', x'B1D7AEF7D20CFC47A358F06E54ECE5EA', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'A121378B05B50245B918F168025DCDF4', 'iu_rcfg_def_therole'),
(x'9DCE59806D078E438981A2A05700F2F9', x'B26AE3BCCFB09044BDA55D17FF004A47', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_theClient'),
(x'648B957C1C42204A94B0B19BB8280352', x'B6F213A1F4A7BD4DB914E181EFDF63A9', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_freelancer'),
(x'82B4D64648226B45BB88D55702CBB9F7', x'B7A25D5BEF0A8444B99DCDBAC48C6412', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_sendtomail'),
(x'AF0FFB37360ABC469E0DB4FE02476AA3', x'BCA9DF2E114BD74F97F15A3ECC3B23AB', '2017-06-05 17:27:11', '2017-07-20 19:30:11', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_TheReportExt'),
(x'0EA37503E3A9CB438CD54842210087FA', x'BDB97F5B7D624B46AA99E2243B48A17A', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_name'),
(x'F2B7FBBB3548614C9D42A2C92147509D', x'C1EE773E3F1E054CA17DE19C15A92391', '2017-06-05 17:27:10', '2017-07-20 19:30:11', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_email'),
(x'633FA9143D16ED4A8A98C3EAC31DBF3B', x'C46871872B106546804AD59AFA16499C', '2017-07-20 17:58:39', '2017-07-20 19:30:12', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_pop_ok'),
(x'D96E4AB732F9F54D899E5693C6CC8613', x'C693478CFAF1B840982DD67E7B19BF63', '2017-06-05 17:27:10', '2017-07-20 19:30:12', NULL, NULL, NULL, x'239A970BEAC21243A96AA754E69D4AE1', 'iu_crole_name'),
(x'B5CBBF301FC17B44ABFAEE3FDE6DB978', x'C7840F7A7422194BAAF1A595AC6F596E', '2017-06-05 17:27:10', '2017-07-20 19:30:12', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_lastname'),
(x'06886DC4C5A7244980DE6E6FC5A5CC8D', x'CA1257803805E94897E4854441B4471B', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'827AEA99150CA54892F8D7217B9D7DBE', 'Journal_the_Alias'),
(x'2ECA75C17947824B9B082947DFD71D15', x'CCF34CAEC02BC14E80FD1A01FAA02F2A', '2017-06-05 17:27:10', '2017-07-20 19:30:12', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_GroupName'),
(x'BDBDCEAE485F924E9FE43388F83C9CD6', x'D068FED7CBFD7C44860FA94E6C0439D0', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_LocalPhone'),
(x'E30743A16C60804A96867EB86DA5C8E3', x'D0E38BE45BA7FE45B4BBA110EE4FDD61', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'ADDC90D1A692A04D8C546BF78B7C9692', 'WorkPlace_Name'),
(x'4FF89FAA41D6A048B98E0F55C2C1FA73', x'D2E1ADDB450F6146B3B07FACF3CC806B', '2017-06-05 17:27:10', '2017-07-20 19:30:12', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_visibleControl'),
(x'39B643D839E59449999330821F0AF684', x'D4AD07E2925ECF44A0F36C84DC157247', '2017-06-05 17:27:10', '2017-07-20 19:30:12', NULL, NULL, NULL, x'239A970BEAC21243A96AA754E69D4AE1', 'iu_crole_allowSetUser'),
(x'F21B8514E9D0AB45B309C885D7942FFB', x'DA46688B32491B4CBEB93EBD2CD190A4', '2017-07-20 17:58:39', '2017-07-20 19:30:12', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_power_ok'),
(x'7DAA2F7427DF32479E781906FE797672', x'DC8BC64951D95C469696D88B211B4CAB', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_Lang'),
(x'4D7CB56DF55117458F4505001EA05EE2', x'E152EA0054294349BFA7094417EA4659', '2017-07-20 17:58:39', '2017-07-20 19:30:12', NULL, NULL, NULL, x'742D7BD3B9122749802B9C240CE93143', 'arsms_data_roof_open'),
(x'D6D2579E2407C341A20421C328A9A9D2', x'E3FC04F24D70BC42BCFB1A12CF3648DD', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'22FBAF97490D264496EDF0D1388F8A4B', 'the_Session_UserRole'),
(x'DDE7CAA6BD1B684A821AD99C0C1B7843', x'E570C99C54D4EC44B8B8728DEDF4A06C', '2017-06-05 17:27:11', '2017-07-20 19:30:12', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_ReportType'),
(x'974DD7BE81BB7A4FA10531E4E15FA3C5', x'E681D57A8ECB894A8575B07E9DD51AF6', '2017-06-05 17:27:10', '2017-07-20 19:30:13', NULL, NULL, NULL, x'2BB92750CDDBE941B7A4276449000243', 'MTZAPP_Name'),
(x'882EEAAA9A4F1B45959D2CFCA022C22D', x'E7BDEC77CA99A84F944A486C9A38AF9A', '2017-06-05 17:27:10', '2017-07-20 19:30:13', NULL, NULL, NULL, x'39D78BAF1543ED499BC0C3122B9E4F79', 'iu_int_modules_name'),
(x'5135E9AB6954BC4FB94D4D05F3502912', x'E9324207AA06754F86E0E276A22A5098', '2017-06-05 17:27:10', '2017-07-20 19:30:14', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_thephone'),
(x'EFB45C8B4299A64896F8E9A445A298A5', x'E9358968A1A1374BA5484AE067A92F63', '2017-06-05 17:27:10', '2017-07-20 19:30:14', NULL, NULL, NULL, x'ED7105AD517BCE4598A414DC291877BA', 'iu_u_def_login'),
(x'AED38AE954F3AA4DB4D8461100E93F04', x'EA1E279DE8AEE04786227D063381427F', '2017-06-05 17:27:12', '2017-07-20 19:30:14', NULL, NULL, NULL, x'0E3ABBEF655C0342BAD2B0AFCD332F87', 'MTZExt_def_TheDescription'),
(x'E91B1DF33149A846924AC96C939F06B8', x'EC10020BB462634C9DD5FB8E541B154C', '2017-06-05 17:27:11', '2017-07-20 19:30:14', NULL, NULL, NULL, x'0BB8769114EB534DA56DE38CF4E251F6', 'Users_Family'),
(x'1DDE3C811F2C5E4FAFA7F0E07C599433', x'EE52CA88621C5649879AC614E7955A6E', '2017-07-20 17:58:39', '2017-07-20 19:30:14', NULL, NULL, NULL, x'944808BBE4C24243AF08F80CCC039C37', 'arlog_data_finished'),
(x'417CF87FC1D1E24EB75A26FD056D1DC8', x'F2D41DA1CAFCC146BF745664646D1F0D', '2017-06-05 17:27:11', '2017-07-20 19:30:14', NULL, NULL, NULL, x'827AEA99150CA54892F8D7217B9D7DBE', 'Journal_TheComment'),
(x'BDD8CA659D9C054D98D89E43C8E81319', x'F3ED76312DEF434FA6020F0374D6306A', '2017-06-05 17:27:11', '2017-07-20 19:30:14', NULL, NULL, NULL, x'827AEA99150CA54892F8D7217B9D7DBE', 'Journal_UseFavorites'),
(x'365085D5C7D5CA4DA4CA171D3578BFE0', x'F5A637F3942F6649810B56A80460F41F', '2017-06-05 17:27:11', '2017-07-20 19:30:14', NULL, NULL, NULL, x'5EADB9F926327549A17BB6C75CFB3BB4', 'Reports_ReportFile');

-- 
-- Вывод данных для таблицы num_values
--
-- Таблица areal_cli.num_values не содержит данных

-- 
-- Вывод данных для таблицы objectmode
--
INSERT INTO objectmode VALUES
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'1797BDCBD643404A9128F9E8AD7F8309', '2012-06-15 12:10:20', '2017-07-20 19:32:21', NULL, NULL, NULL, 'main', -1, NULL),
(x'DDD7A30A733776488A8E52513FB49641', x'278C6A11432C7741A0F68CC2857D0A47', '2014-08-26 18:34:36', '2017-07-20 19:32:21', NULL, NULL, NULL, 'edit', -1, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'4166CF9BF653494C9CC1DA5836629969', '2017-06-06 20:56:23', '2017-07-20 19:32:21', NULL, NULL, NULL, 'new', 0, NULL),
(x'A308C616DEA89C40900E35D38241550D', x'5F4ABF9152EDF54FBA081F22A48402B5', '2014-08-26 18:34:18', '2017-07-20 19:32:21', NULL, NULL, NULL, 'read', 0, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'64608A8C80654249917801C5E430A701', '2017-06-06 20:56:06', '2017-07-20 19:32:21', NULL, NULL, NULL, 'main', -1, NULL),
(x'41130A55426465419A94D36FA3AA19D6', x'8CFE62593DBF7C4183F8DC53040FB714', '2014-08-26 18:34:01', '2017-07-20 19:32:21', NULL, NULL, NULL, 'read', 0, NULL),
(x'A308C616DEA89C40900E35D38241550D', x'A176FCF0D228684BAB7BD1F7DE47D9AB', '2014-08-26 18:34:15', '2017-07-20 19:32:21', NULL, NULL, NULL, 'edit', -1, NULL),
(x'E1917C473A9E1747B6D56DC9F0D7D5B5', x'AA7E698637147446B3A96C29854EB005', '2017-07-12 18:25:23', '2017-07-20 19:32:21', NULL, NULL, NULL, 'adm', 0, NULL),
(x'DDD7A30A733776488A8E52513FB49641', x'AE6DD0C85FC5FB40901CC7DF03D3A733', '2014-08-26 18:34:39', '2017-07-20 19:32:21', NULL, NULL, NULL, 'read', 0, NULL),
(x'FFEFEB7728EB0A4EA4AAAE56ACECFE6C', x'BB6DC294F976E9429CE1378994104A47', '2017-06-06 20:54:45', '2017-07-20 19:32:21', NULL, NULL, NULL, 'main', -1, NULL),
(x'E1917C473A9E1747B6D56DC9F0D7D5B5', x'BFB0BEBDEF2312458267C24867395088', '2017-07-12 18:25:18', '2017-07-20 19:32:21', NULL, NULL, NULL, 'main', 0, NULL),
(x'41130A55426465419A94D36FA3AA19D6', x'C0F8C54585C1FA4EADAE0861F4F5C79F', '2014-08-26 18:33:57', '2017-07-20 19:32:21', NULL, NULL, NULL, 'edit', -1, NULL),
(x'FFEFEB7728EB0A4EA4AAAE56ACECFE6C', x'D9C27A65D3CD5247ADFDE66ADD396EA2', '2017-07-20 11:02:43', '2017-07-20 19:32:21', NULL, NULL, NULL, 'adm', 0, NULL),
(x'A308C616DEA89C40900E35D38241550D', x'DE3A1841BFEFC74B9A60D56D74A29078', '2014-06-22 20:09:40', '2017-07-20 19:32:22', NULL, NULL, NULL, 'new', 0, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'FDC72CC7AB959F4F8D2C507C97934F9E', '2017-07-20 11:00:08', '2017-07-20 19:32:22', NULL, NULL, NULL, 'adm', 0, NULL);

-- 
-- Вывод данных для таблицы objstatus
--
-- Таблица areal_cli.objstatus не содержит данных

-- 
-- Вывод данных для таблицы parentpackage
--
-- Таблица areal_cli.parentpackage не содержит данных

-- 
-- Вывод данных для таблицы part
--
INSERT INTO part VALUES
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'003476C234BE3340B4B5756CD5252CEA', '2012-01-20 14:40:02', '2017-07-20 19:32:30', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 2, 1, '??????', 'ARMJRNLREP', '?????? ?? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'050E1CC4F38C434B9D6EC5FCD37BEB47', '2012-01-20 14:40:02', '2017-07-20 19:32:30', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, '????????? ????????', 'ARMJournal', '???????? ???????? ????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'05C61246727ED0478A2852CC7BFF4C7F', '2012-01-20 14:40:16', '2017-07-20 19:32:30', NULL, NULL, NULL, x'00000000000000000000000000000000', 5, 1, '????? ?????????', 'GENPACKAGE', '????? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'0BC03D83D7E8914D91032DD084BEFC1E', '2012-01-20 14:40:13', '2017-07-20 19:32:30', NULL, NULL, NULL, x'32245159DFE6F941A4366BF7DB1800BB', 1, 1, '??????', 'Num_Values', '?????????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'0C74B3F476E66E4BA833EDE44CB9FA63', '2012-01-20 14:40:13', '2017-07-20 19:32:31', NULL, NULL, NULL, x'23D9C69807B88C4191E7C351511B5EB1', 1, 1, '???? ???????', 'FileterField', '???? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'41130A55426465419A94D36FA3AA19D6', x'1051A02ED67D914BB774AF6ECBC42108', '2017-07-20 11:09:54', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '????', 'iu_crole', '???? ', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, -1, 0, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'1778EF018A784C4486C0DA720FFBA8E0', '2017-06-06 19:56:13', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '??????????', 'arc_info', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-user'),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'1A0E0B5D3680124BB08160139558B594', '2012-01-20 14:40:15', '2017-07-20 19:32:31', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 6, 1, '?????????? ??????????', 'FldExtenders', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'236DF435F8613B41924F83792F76E698', '2012-01-20 14:40:15', '2017-07-20 19:32:31', NULL, NULL, NULL, x'A5EF70062751D5118822204C4F4F5020', 2, 1, '???????', 'ENUMITEM', '??? ???????? Enum ?????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'23D9C69807B88C4191E7C351511B5EB1', '2012-01-20 14:40:13', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '?????? ????? ???????', 'FilterFieldGroup', '?????? ????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DD6ECA18A1559045974FA973B8762638', x'24D75AB76F6BBD45B0BBC75D17309DC9', '2012-01-20 14:40:13', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '??????', 'Filters', '??????', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'2A49E8F524222F4585FFA14882C6554F', '2012-01-20 14:39:59', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 2, '??????', 'RPTStruct', '??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'2CDE4EEF8B45AB4EAFE366AA500081DA', '2012-01-20 14:40:02', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 2, '????', 'EntryPoints', '????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'2E1322E4F4070F4C8246B0F16CD9186A', '2012-01-20 14:39:59', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '???????', 'RPTFormula', '???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'2E9E8E54F6892248A312101CA4A9FE74', '2012-01-20 14:40:15', '2017-07-20 19:32:31', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 2, 1, '?????? ???????', 'PARTMENU', '?????? ?????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'317BD7F857A78C48BB5822700737D4B8', '2012-01-20 14:40:03', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '??????? ???????', 'JournalColumn', '??????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'32245159DFE6F941A4366BF7DB1800BB', '2012-01-20 14:40:13', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '????', 'Num_zones', '???? ?????????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'33AC48F4133B994893EE47D3D62962EC', '2012-01-20 14:40:16', '2017-07-20 19:32:31', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 1, 1, '??????????? ????????', 'STRUCTRESTRICTION', '?????????? ?? ?????? ? ??????? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'398B4CD264C8DF4B8015F9973D34C20D', '2017-06-06 19:26:24', '2017-07-20 19:32:31', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??? ??????', 'arc_md', '??????  ???????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-phonesound'),
(x'709BDD25DFFD584894E5F5D6575AACB9', x'3BBB3644E97E2649A7FD9D9B20BBF37A', '2017-07-20 10:43:54', '2017-07-20 19:32:32', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '????????', 'arlog_data', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8FB8F3BE916E2941BAD51BA076BDE3BD', x'4A14627F7685BC48ACBA1F9DC4874459', '2012-01-20 14:40:02', '2017-07-20 19:32:32', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '????????', 'MTZExt_def', '?????? ?????????????????? ??????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'4CE798E5DEA9414086FA972E95635600', '2012-01-20 14:40:15', '2017-07-20 19:32:32', NULL, NULL, NULL, x'A3EF70062751D5118822204C4F4F5020', 1, 1, '?????????', 'PARAMETERS', '????????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'4D24C3DAD670A445885DD610F748EBFC', '2012-01-20 14:40:03', '2017-07-20 19:32:32', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '????????? ???????', 'JournalSrc', '????????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'4DB613D7E84C6D46BE2B448874DC0469', '2012-01-20 14:40:16', '2017-07-20 19:32:32', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 5, 1, '?????????????', 'PARTVIEW', '??????? ?????????????, ??????? ????? ?????????????? ??? ???????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'52932CFE9AE20B4291343E3BDD832A6E', '2012-01-20 14:39:58', '2017-07-20 19:32:32', NULL, NULL, NULL, x'EE6A0EA4417B6D47923CACA251C08E87', 1, 1, '?????? ??????', 'GroupUser', '?????? ??????', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5536327DD7BA124DAFC2E7FF3613B4A1', '2012-01-20 14:40:16', '2017-07-20 19:32:32', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 4, 1, '?????? ?? ?????', 'VALIDATOR', '???????? ? ????????? ??????????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'55B88B1465099E4EA3D648DCC8CE528B', '2012-01-20 14:39:58', '2017-07-20 19:32:32', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '????????????', 'Users', '????????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5607A06E80B9234DB209202389953A13', '2012-01-20 14:40:16', '2017-07-20 19:32:32', NULL, NULL, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', 1, 1, '???????????? ??????????', 'ParentPackage', '?????????? ?? ??????? ??????? ?????? ??????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5A437DA5B3730741B22BC18782085C84', '2012-01-20 14:40:16', '2017-07-20 19:32:32', NULL, NULL, NULL, x'00000000000000000000000000000000', 6, 1, '???????????', 'LocalizeInfo', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'5E3DF43BB50EDB4D8EFA62DF3261A272', '2012-01-20 14:40:16', '2017-07-20 19:32:32', NULL, NULL, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', 1, 1, '???????', 'ViewColumn', '??????? ?????????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'66C846DFF838F14E92E25F899D98BD16', '2012-01-20 14:40:16', '2017-07-20 19:32:33', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 5, 1, '?????????', 'OBJSTATUS', '????????? ?????????? ????????? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'D2ED3F74E530824A8A5B9935613859C4', x'6C47841B846CDE4092B517045D93C35A', '2017-06-05 13:08:59', '2017-07-20 19:32:33', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', 1, 1, '?????? ??????????', 'arc_chanel', '?????? ?????????? ??? ??????? ??????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'6D2968111CA0DB45B67D76A07F3FF64C', '2012-01-20 14:40:16', '2017-07-20 19:32:33', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 4, 1, '????? ??????', 'OBJECTMODE', '????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'6E6CC434159246478D9D4800B6549003', '2012-01-20 14:40:03', '2017-07-20 19:32:33', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '??????', 'Journal', '??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'70307B0F09F77D4E868CCC337E3075D1', '2012-01-20 14:40:16', '2017-07-20 19:32:33', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 3, 1, '??????????? ???????', 'METHODRESTRICTION', '??????????? ?? ????????????? ??????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'79A1C111B229DC4DBDB71EB21D2FF878', '2012-01-20 14:40:16', '2017-07-20 19:32:33', NULL, NULL, NULL, x'66C846DFF838F14E92E25F899D98BD16', 1, 1, '??????????? ????????', 'NEXTSTATE', '??????? ????????? ', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'7A7476873D74B947AF1CAB00FF81154F', '2012-01-20 14:40:16', '2017-07-20 19:32:33', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 2, 1, '?????? ????', 'TYPEMENU', '?????? ?????? ????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'8131E84FA500594B9413D06318A119D4', '2012-01-20 14:40:02', '2017-07-20 19:32:34', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 3, 1, '????????', 'ARMJRNLRUN', '?????????????? ???????? ? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'81AFF1D32C914849A87DDF549EE796E2', '2012-01-20 14:40:16', '2017-07-20 19:32:34', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 5, 0, '???????? ????????? ??????', 'FIELDSRCDEF', '???????? ????????? ?????? ??? ????? ???? ReferenceSQL ', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'8261E22384CCD642B7A2D8DA0026EBEE', '2012-01-20 14:40:16', '2017-07-20 19:32:34', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 2, 1, '???????????? ??????', 'DINAMICFILTERSCRIPT', '????????? ??? ?????????? ??????????????? ??????? ??? ????????? ?????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'A308C616DEA89C40900E35D38241550D', x'84390EFA7C6BC845AECFE2FC7ECB622B', '2014-04-19 13:04:14', '2017-07-20 19:32:34', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??????', 'iu_rcfg_mod', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'DDD7A30A733776488A8E52513FB49641', x'84D8A8DB867282478B286AF8916220B6', '2014-06-02 14:13:47', '2017-07-20 19:32:34', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '??????', 'iu_int_modules', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'895CAA9CCBF1624BB1D0FF2D29A40057', '2012-01-20 14:40:16', '2017-07-20 19:32:34', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 3, 1, '??????????? ????????????', 'UNIQUECONSTRAINT', '??????????? ????????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', '2012-01-20 14:40:16', '2017-07-20 19:32:34', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 6, 1, '?????????? ??????????', 'ExtenderInterface', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'9B803E67F6CF0943A52BFE2118AE508E', '2012-01-20 14:40:16', '2017-07-20 19:32:35', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 1, 1, '??????????', 'GENREFERENCE', '??????????, ??????? ???????????? ??? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'9C11C524C95DAC4ABB01B8CF8EBA998E', '2012-01-20 14:40:16', '2017-07-20 19:32:35', NULL, NULL, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', 2, 1, '??????????? ?????', 'FIELDRESTRICTION', '??????????? ?? ?????? ? ????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'9F3507D4042269499789956215E456E6', '2012-01-20 14:40:02', '2017-07-20 19:32:35', NULL, NULL, NULL, x'2CDE4EEF8B45AB4EAFE366AA500081DA', 1, 1, '???????? ???????', 'EPFilterLink', '???????? ??????? ? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'2DDF63C79797B74AB059513B5A993734', x'A14802F51E159C4D87D0906ACFD35C9F', '2014-08-26 17:20:07', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 0, 0, '????????', 'bpc_info', '???????? ???????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'A23E94783679584FB31676E4F968E3B4', '2012-01-20 14:39:58', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '?????? ????????????', 'the_Session', '?????????????????? ?????? ?????????????', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', '2012-01-20 14:40:16', '2017-07-20 19:32:35', NULL, NULL, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', 2, 1, '????????? ?????????????', 'PARTVIEW_LNK', NULL, -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'A308C616DEA89C40900E35D38241550D', x'A3D07ECF2C64104B834721D86BFECBC4', '2014-06-22 20:09:41', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '????? ?????????', 'iu_rcfg_docmode', '????? ???????? ????????? ?????????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A3EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'ADEF70062751D5118822204C4F4F5020', 1, 1, '??????????', 'SCRIPT', '??? ?????? ?? ???????? ??????????? ?????????? ?????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A4EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'B1EF70062751D5118822204C4F4F5020', 1, 1, '????', 'FIELD', '????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A5EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '??? ????', 'FIELDTYPE', '???? ?????, ????????????, ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'A6EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'A5EF70062751D5118822204C4F4F5020', 1, 1, '???????????', 'FIELDTYPEMAP', '??????????? ???? ???? ?? ?????????? ??? ????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'AD5B514233E2DB408F9045DCFCE01BE6', '2012-01-20 14:40:16', '2017-07-20 19:32:35', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 3, 1, '???????? ????????????', 'INSTANCEVALIDATOR', '???????? ???????????? ??? ??????? ? ?????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'ADEF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, '?????? ? ?????????', 'SHAREDMETHOD', '?????? ? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'AFEF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??? ???????', 'OBJECTTYPE', '??? ??????? (????????)', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B10601C795AA73418097614495D6EF28', '2012-01-20 14:40:16', '2017-07-20 19:32:35', NULL, NULL, NULL, x'895CAA9CCBF1624BB1D0FF2D29A40057', 1, 1, '???? ???????????', 'CONSTRAINTFIELD', '???? ???????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B1EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:15', '2017-07-20 19:32:35', NULL, NULL, NULL, x'AFEF70062751D5118822204C4F4F5020', 1, 2, '??????', 'PART', '?????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E1917C473A9E1747B6D56DC9F0D7D5B5', x'B22C7E24E96FBB499D4B021309A3F8F2', '2017-06-06 19:28:48', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '??? ??????', 'armd_type', '??? ??????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-smartphone_connect'),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'B9EF70062751D5118822204C4F4F5020', '2012-01-20 14:40:16', '2017-07-20 19:32:36', NULL, NULL, NULL, x'05C61246727ED0478A2852CC7BFF4C7F', 1, 1, '??????????', 'GENERATOR_TARGET', '??????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'C2E0DB8C89591042BDFB33C2C45F2509', '2012-01-20 14:40:16', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '??????????', 'MTZAPP', '?????? ????????????? ??????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'C421399726499D4CA7816062CF81B5AD', '2012-01-20 14:40:02', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '???', 'WorkPlace', '???', -1, 0, x'09C838C6B647EA4782176BBBD95A9215', x'09C838C6B647EA4782176BBBD95A9215', NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'CA6FBEF85D59464FACDBFB5838A246CA', '2012-01-20 14:40:15', '2017-07-20 19:32:36', NULL, NULL, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', 1, 1, '??????????? ??????????', 'PARTPARAMMAP', '??????????? ???????? ????? ??????? ?? ????????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'CA936976E67DDA4A82168BDDF2B0588E', '2012-01-20 14:40:16', '2017-07-20 19:32:36', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 3, 1, '?????? ???', 'GENMANUALCODE', '???, ??????? ?? ???????????? ? ???????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'CE37F730811C7246B0F96E5BF4B15971', '2012-01-20 14:40:02', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '?????? ?????', 'ARMTypes', '???? ??????????, ??????? ???????????? ? MDI ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'13CDBEEE009A434999B34EAC1A9A95AC', x'CFBD3CA6DD3D6441949752FE925B2A13', '2014-04-15 11:45:13', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 0, 0, '?????? ??????????', 'iu_u_def', '?????? ??????????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'D08EB034B5C49C4BBA59870A4599F52A', '2012-01-20 14:40:16', '2017-07-20 19:32:36', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 4, 1, '???????? ?? ?????????', 'FIELDEXPRESSION', '????????? ??? ?????????? ????\r\n??? ???????? ?? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', '2012-01-20 14:40:15', '2017-07-20 19:32:36', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 3, 1, '?????? ???? ?? ?????', 'FIELDVALIDATOR', '?????? ???????????? ?? ????? ??? ????????? ????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'882F32DE48CA014E8ACDBEC71338D8CC', x'D9BE36C44E29A7488C376D4CF32343BE', '2012-01-20 14:40:13', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '????????', 'Num_head', '???????? ??????????', -1, 0, x'D95DDA3AF051D745BC52A10614A3FBA4', x'D95DDA3AF051D745BC52A10614A3FBA4', NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'8FB8F3BE916E2941BAD51BA076BDE3BD', x'DDE68FE4F979424DBAC3CB39F69171BC', '2012-01-20 14:40:02', '2017-07-20 19:32:36', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '?????????? ??????????', 'MTZExtRel', '?????????? ?????????? ??? ?????? ?????????????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'DED0770C9E55FC43B181156E126543F1', '2012-01-20 14:39:59', '2017-07-20 19:32:36', NULL, NULL, NULL, x'2A49E8F524222F4585FFA14882C6554F', 1, 1, '???? ??????', 'RPTFields', '???? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'DF24D235302854419E80FF578AAB323C', '2013-07-02 17:26:08', '2017-07-20 19:32:37', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??????????? ?????????', 'SysRefCache', '????????? ?????????? ??? ? ???????? ???????\r\n???????? ?????? ???  ??????? ?????', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'E4C38941C2713D42A56F4E71CB91B52D', '2012-01-20 14:40:15', '2017-07-20 19:32:37', NULL, NULL, NULL, x'A4EF70062751D5118822204C4F4F5020', 1, 1, '?????? ????', 'FIELDMENU', '??????, ??????????????? ? ?????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'FFEFEB7728EB0A4EA4AAAE56ACECFE6C', x'E6F31473DE46B64AA09D05F6B0A69004', '2017-06-06 19:27:10', '2017-07-20 19:32:37', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 1, '???????? ???', 'arsms_data', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-comment'),
(x'A308C616DEA89C40900E35D38241550D', x'E7C6F31042573147B94C647263E4E304', '2014-04-22 10:15:37', '2017-07-20 19:32:37', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '????', 'iu_rcfg_def', '???? ??? ?????????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, -1, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'E82A7554B006C64E8DAA692E52A0D36C', '2012-01-20 14:40:15', '2017-07-20 19:32:37', NULL, NULL, NULL, x'E4C38941C2713D42A56F4E71CB91B52D', 1, 1, '??????????? ??????????', 'FIELDPARAMMAP', '??????????? ???????? ?? ????????? ??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'37C0E0E9467C274D009D085EA9279CD2', x'E8DAEA453798E54E9A3107370302F20F', '2012-01-20 14:39:58', '2017-07-20 19:32:37', NULL, NULL, NULL, x'00000000000000000000000000000000', 4, 1, '?????? ???????', 'SysLog', '?????? ???????, ??????? ????????? ? ???????', -1, -1, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'16319A32B3ACC24E93CE5920E84AD8E8', x'EB858C8D5ED1D745B13B0B4001EB9AC2', '2012-01-20 14:40:03', '2017-07-20 19:32:37', NULL, NULL, NULL, x'317BD7F857A78C48BB5822700737D4B8', 1, 1, '?????? ???????', 'JColumnSource', '?????? ???????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'40B745DAF4C6974BB4EB3DE0A6C480B5', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', '2012-01-20 14:40:02', '2017-07-20 19:32:38', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 1, 1, '??????????', 'ARMJRNLADD', '???????? ????????? ??????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E1917C473A9E1747B6D56DC9F0D7D5B5', x'EDE9BE7D7031CC43BBC42FD6050B87F1', '2017-06-06 19:30:00', '2017-07-20 19:32:38', NULL, NULL, NULL, x'00000000000000000000000000000000', 3, 1, '???? ???????', 'armd_chaneltype', NULL, 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-link'),
(x'7E5B4FC4C09F1443B24407235EE1E7E3', x'EE6A0EA4417B6D47923CACA251C08E87', '2012-01-20 14:39:58', '2017-07-20 19:32:38', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??????', 'Groups', '??????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'F925E1F51486CF4AA5281690B3C2040E', x'FA3D9B25ACB8784188FD4B715D372FC3', '2012-01-20 14:39:59', '2017-07-20 19:32:38', NULL, NULL, NULL, x'00000000000000000000000000000000', 1, 0, '????????', 'Reports', '????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'15AD6D8C2238804FA381D9EA19FEAC06', x'FB1CB30425654A479F16999870D8EAAF', '2012-01-20 14:40:16', '2017-07-20 19:32:39', NULL, NULL, NULL, x'B9EF70062751D5118822204C4F4F5020', 2, 1, '??????????? ????????', 'GENCONTROLS', '??????????? ????????, ??????? ???????????? ??? ?????????', -1, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, NULL),
(x'E1917C473A9E1747B6D56DC9F0D7D5B5', x'FE4567F62EEF1545A397B52EB98F59BF', '2017-06-06 19:30:17', '2017-07-20 19:32:39', NULL, NULL, NULL, x'00000000000000000000000000000000', 2, 1, '??????', 'armd_info', '???????? ??????', 0, 0, NULL, NULL, NULL, NULL, 0, NULL, NULL, NULL, 0, 0, 0, 'icon-phone');

-- 
-- Вывод данных для таблицы rptfields
--
-- Таблица areal_cli.rptfields не содержит данных

-- 
-- Вывод данных для таблицы script
--
INSERT INTO script VALUES
(x'B9334E07C91EA14A8300E98C73D55FE2', x'0092456FBB41414EB8952D4837E67242', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'RETURNS uuid AS\r\n$BODY$\r\ndeclare\r\nathe_session uuid;\r\naID uuid; \r\naUSERSID uuid; \r\nasysid uuid; \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null  or aPWD=''''\r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  newid() into aID ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,localtimestamp); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,localtimestamp); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nreturn athe_session;\r\nend; \r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'0093E1D8E2B28F4988C3DD13BDCBE1F5', '2012-01-20 14:40:22', '2017-07-20 19:31:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' returns integer as $$\r\n\r\ndeclare\r\naresult integer;\r\naid1 uuid; \r\nexistsCnt  integer; \r\nbegin \r\naresult:=0; \r\n \r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID; \r\nif existsCnt =0 then \r\n  return aresult; \r\nend if; \r\n \r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n \r\nif existsCnt=0 then \r\n    return aresult; \r\nelse \r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1 and the_value=anum; \r\n \r\n  if existsCnt=0 then \r\n      return aresult; \r\n  else \r\n     aresult:=1; \r\n  end if; \r\nend if; \r\nreturn aresult; \r\nend; \r\n$$ language ''plpgsql'';'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'0602EBA7393EE44B9BD5EC16763ECEAE', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', 'declare\r\nexistsCnt integer;\r\n\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=now(), changeStamp=now() where     \r\n    the_sessionid=acursession;\r\n End if;'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'07ACAAA83D6A794A9B138A1F86268619', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'cursor s is select the_sessionid id from the_session\r\nwhere lastAccess <sysdate()-1;\r\ns_rec s%rowtype;\r\nbegin\r\n--open s;\r\nfor s_rec in s loop\r\n  logout(s_rec.id);\r\nEnd loop;\r\nClose s;\r\nend;\r\n\r\n\r\n\r\n'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'0A0BA3815B58C04B9C4EBF85F6ED0D29', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aID char(38); \r\naUSERSID char(38); \r\nasysid char(38); \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null \r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nend; \r\n'),
(x'B9409AD474614649A81DB7FE105C3546', x'0C77834331E693419C9F1B176AFFF6B2', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate instance set LockUserID = null, LockSessionID=null where instanceID=athe_ID;\r\nend;'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'0D4FFB33823D354D8740267028D7C9E6', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', '\r\nupdate the_session set lastaccess=now() where the_sessionid=acursession and closed=0;\r\n\r\n'),
(x'1A9DB54F2301D3479F4FE12085C5D074', x'1030074F5485B54680BED5156D7B5ED0', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nitem.name = Name\r\n'' ????? ?? ???? ?????, ???? ?????????? ?????? ActiveX\r\nParentForm.Caption = item.Name\r\nitem.Save'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'10BC1B77AC749443B32BBF4F9D9A1B68', '2012-01-20 14:40:23', '2017-07-20 19:31:57', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' \r\nreturns void as\r\n$$\r\ndeclare\r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select the_sessionid id from the_session\r\nwhere lastAccess < LOCALTIMESTAMP -1;\r\nLOOP\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  \r\n END IF;\r\n PERFORM logout (aID);\r\nEND LOOP;\r\nclose aCurs;\r\n\r\n\r\nend; $$\r\nlanguage ''plpgsql'';'),
(x'DBF6E8946A10DC44948386C801798FF0', x'15DD78CFDC707D44B17B2379B865296E', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nIf ID <> "" Then\r\n    Dim Obj As Object\r\n    Set Obj = item.Manager.GetInstanceObject(ID)\r\n    If Not Obj Is Nothing Then\r\n      Dim objGui As Object\r\n      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)\r\n      If objGui Is Nothing Then Exit Sub\r\n\r\n       If StartMode = "AUTO" Then\r\n        StartMode = ""\r\n        dim i as long\r\n        For i = 100 To 0 Step -10\r\n          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName & ":" & "M" & i) Then\r\n            StartMode = "M" & i\r\n            Exit For\r\n          End If\r\n        Next\r\n       End If\r\n      \r\n      objGui.Show StartMode & "", Obj\r\n      Set objGui = Nothing\r\n    End If\r\n  End If\r\n  '),
(x'F0D654042486874894B064FBC74775E6', x'189BA291EFAC4F4EAAD06E822C0EF813', '2012-01-20 14:40:22', '2017-07-20 19:31:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'existsCnt integer;\r\nbegin\r\nselect Count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n\r\nif  existsCnt>0 then\r\naOK:=1;\r\nelse\r\naOK :=0;\r\nend if;\r\nend;'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'19FCDE9AB6945C40A4FE85EA282B2607', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @RowID uniqueidentifier\r\ndeclare @InstanceID uniqueidentifier\r\ndeclare QR cursor for select result from queryresult where queryresultid =@rowqueryID\r\nopen qr\r\nfetch next from QR into @RowID\r\nwhile @@fetch_status>=0\r\nbegin\r\n\tbegin tran\r\n        EXEC  RowToInstance @InstanceID=@InstanceID OUTPUT , @RowID = @ROWID, @the_Table=@the_TABLE, @CURSESSION=@CURSESSION\r\n                if not @Instanceid is null\r\n                begin\r\n\t  if not exists( select 1 from queryresult where QUERYRESULTID = @OutputQueryID and RESULT=@InstanceID)\r\n\t    begin\r\n\t      insert into queryresult (queryresultid,result) values(@outputqueryid,@instanceid)\r\n\t    end\r\n                end\r\n\tcommit\t\r\n\tfetch next from QR into @RowID\r\nend\r\nclose QR\r\ndeallocate QR'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'1BE3ABBEEE11EC46A4BE99A7765C4919', '2012-01-20 14:40:22', '2017-07-20 19:31:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'an integer;\r\naid1 char(38);\r\naid2 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nend;'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'207A1BE2EAE05C40979EADB6E8B57039', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', '\r\nset aServerTime=now();\r\n'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'210A9E74BA5959498678F52843AA8058', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'RETURNS uuid AS\r\n$BODY$\r\ndeclare\r\nathe_session uuid;\r\naID uuid; \r\naUSERSID uuid; \r\nasysid uuid; \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null  or aPWD=''''\r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  newid() into aID ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,localtimestamp); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,localtimestamp); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0, LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     aID:= newid();  \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,localtimestamp,ausersid,0,LOCALTIMESTAMP); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nreturn athe_session;\r\nend; \r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'22D884EA98E5D54E870523EE2B34645F', '2012-01-20 14:40:22', '2017-07-20 19:31:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id1 uniqueidentifier\r\nset @result=0\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\nreturn\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n    return\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 and the_value=@num )\r\n      return\r\n  else\r\n     set @result=1\r\n  end\r\nend'),
(x'F56A375B9B336543BA80785E28BCF4DA', x'22EBBC3448B7A24A882B35B1197FD4C1', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', ' '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'256C582747265940A19A68269009436B', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aID char(38); \r\naUSERSID char(38); \r\nasysid char(38); \r\nexistsCnt integer;  \r\nbegin \r\nasysid := null; \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\nathe_session:=null  ; \r\nif aPWD is null \r\nthen \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 \r\n  then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1 \r\n  then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     select  mtz.newid() into aID from sys.dual; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,sysdate); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate); \r\n       end if; \r\n     athe_session:=aid; \r\n    End if; \r\n  end if; \r\nend if; -- password is null \r\nend; \r\n'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'2A2707F6A066554F9D7043B28DE13DC5', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'asid char(38);\r\nbegin\r\ndeclare cursor closer is\r\nselect the_sessionid id from the_session where lastaccess < (sysdate()-0.008) and closed =0;\r\ncloser_rec  closer%ROWTYPE;\r\nbegin\r\n --open closer;\r\n for closer_rec in closer loop\r\n   Logout (closer_rec.id);\r\n end loop;\r\nclose closer;\r\nend;\r\nend;\r\n\r\n'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'2A9D95C08E3F9D44A705ECA9582090D2', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns timestamp as $$\r\ndeclare\r\naServerTime timestamp;\r\nexistsCnt integer;\r\nbegin\r\nselect LOCALTIMESTAMP into aServerTime;\r\nreturn aServerTime;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'942A498D78707D4B9847AEFC27B4855D', x'2F8CDB10B3AE0D49871C7444ACF38B24', '2012-01-20 14:40:23', '2017-07-20 19:31:58', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @parent varchar(255)\r\ndeclare @prev varchar(255)\r\n\r\ndeclare @tmpID  uniqueidentifier\r\ndeclare @tmpRowID  uniqueidentifier\r\n\r\ndeclare @s nvarchar(4000)\r\n\r\n -- checking session  --\r\nif not exists( select 1 from the_session where the_sessionid=@cursession and closed=0 )\r\n  begin\r\n    raiserror(''Session expired'',16,1)\r\n    if @@trancount>0 rollback tran\r\n    return\r\n  end\r\n\r\nset @parent =@the_table\r\nset @tmpID = @ROWID\r\n\r\nagain:\r\n\r\nset @prev = @parent\r\nset @parent = null\r\nselect @parent =value from sysoptions where optiontype = ''parent'' and  name=@prev\r\n\r\n--print @parent\r\n\r\nif @parent is null\r\nbegin\r\n    set @s = N''select @root=InstanceID from '' + @prev + N'' where '' +@prev + N''id=@id''\r\n--    print @s\r\n    exec sp_executesql @s,N''@root uniqueidentifier out,@id uniqueidentifier'',@tmpRowID out,@tmpid\r\n   set @InstanceID=@tmpRowID\t    \t\r\nend\r\nelse\r\nbegin\r\n    set @s = N''select @parent=ParentStructRowID from '' + @prev+ N'' where '' +@prev + N''id=@id''\r\n--    print @s\r\n    exec sp_executesql @s,N''@parent uniqueidentifier out,@id uniqueidentifier'',@tmpRowID out,@tmpid\r\n    set @tmpID = @tmpROWID\r\n    goto again\r\nend\r\n'),
(x'F0D654042486874894B064FBC74775E6', x'32117F9E5091A3449F0004515E1F52E3', '2012-01-20 14:40:22', '2017-07-20 19:31:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'if  exists( select 1 from the_session where the_sessionid=@cursession and closed=0 )\r\nset @OK=1\r\nelse\r\nset @OK =0'),
(x'E68540AA5B74374A8EC465D99A653966', x'33F43E07C3CB6B4BACF28C37958796F8', '2012-01-20 14:40:22', '2017-07-20 19:31:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    Dim OK As Boolean\r\n    Dim ID As String\r\n    Dim brief As String\r\n\r\n    On Error Resume Next\r\n''     On Error GoTo bye\r\n\r\n    Dim Obj As Object\r\n    Dim part_col As Variant\r\n    Dim part_item As Object\r\n    Set Obj = CallByName(RowItem, ForwardFieldName, VbGet)\r\n    Set part_col = CallByName(Obj, SymmetricPartName, VbGet, False)\r\n    part_col.Filter = SymmetricFieldName + "=''" + RowItem.Application.ID + "''"\r\n''    RowItem.Parent.Remove RowItem.ID\r\n    Set part_item = part_col.Item(1)\r\n    part_col.Delete part_item.ID\r\n    Exit Sub\r\nbye:\r\nResume\r\n'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'3762A089D0A8A141B66BD4A7DF0209D5', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns void as $$\r\n\r\nbegin\r\nupdate the_session set lastaccess=LOCALTIMESTAMP where the_sessionid=acursession and closed=0;\r\nend;\r\n$$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'B9409AD474614649A81DB7FE105C3546', x'3A9F2A69298F374D9C8CAE25B8C3F3CA', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\nbegin\r\nupdate instance set LockUserID = null, LockSessionID=null ;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n'),
(x'76E8EEA2D854ED4AB124775F5DA2D911', x'4101C5A7FE03E74BB2E24BD318553C8D', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    Dim OK As Boolean\r\n    Dim ID As String\r\n    Dim brief As String\r\n    Dim Mode As String\r\n    Dim ResObject as Object\r\n    On Error Resume Next\r\n    Mode = Mid(TypeName(Me), InStr(TypeName(Me), "_") + 1)\r\n    \r\n''     On Error GoTo bye\r\n    If Len(Mode) = 0 Then\r\n        OK = Item.Application.Manager.GetObjectListDialogEx(ID, brief, "", ObjTypeName)\r\n    Else\r\n        ID = CreateGUID2\r\n        If Len(ObjTypeName) = 0 Then\r\n            Dim newObj As Object\r\n            Set newObj = Item.Application.Manager.GetNewObject\r\n            If Not (newObj Is Nothing) Then\r\n                OK = True\r\n                ID = newObj.ID\r\n            End If\r\n        Else\r\n            OK = Item.Application.Manager.NewInstance(ID, ObjTypeName, "")\r\n        End If\r\n        Dim ref As Object, objGui As Object\r\n        Set ref = Item.Application.Manager.GetInstanceObject(ID)\r\n        If Not ref Is Nothing Then\r\n          Set objGui = Item.Application.Manager.GetInstanceGUI(ID)\r\n          If objGui Is Nothing Then Set ref = Nothing: Exit Sub\r\n          objGui.Show "", ref, False\r\n          Set objGui = Nothing\r\n        Else\r\n          OK = False\r\n        End If\r\n    End If\r\n    Dim Obj As Object\r\n    Set Obj = Item.Application.Manager.GetInstanceObject(ID)\r\n    If Obj Is Nothing Then\r\n        OK = False\r\n    End If\r\n    If OK Then\r\n\tDim Coll as New Collection\r\n        Dim part_col As Variant\r\n        Dim part_item As Object\r\n        CallByName RowItem, ForwardFieldName, VbSet, Obj\r\n        Coll.Add TypeName(RowItem)+ ":" + RowItem.ID\r\n        RowItem.Save\r\n        If Len(SymmetricPartName) > 0 And Len(SymmetricFieldName) > 0 Then\r\n          Set part_col = CallByName(Obj, SymmetricPartName, VbGet, True)\r\n          Set part_item = part_col.Add\r\n          CallByName part_item, SymmetricFieldName, VbSet, RowItem.Application\r\n          part_item.Save\r\n          Coll.Add SymmetricPartName + ":" + part_item.ID\r\n        End If\r\n        Call Item.Application.Manager.AddCustomObjects(Coll, Obj.ID)\r\n    Else\r\n        RowItem.Parent.Remove RowItem.ID\r\n    End If\r\n    Exit Sub\r\nbye:\r\nResume'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'423DD52A283D05448914825B4C14D188', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aid1 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt  from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\nreturn;\r\nend if;\r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    return ;\r\nelse\r\n  select num_zonesid into aID1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt  from num_values where parentStructRowID=aID1 ;\r\n  if  existsCnt=0 then\r\n      return;\r\n  else\r\n     delete from num_values where parentStructRowID=aID1 and the_value=anum;\r\n  end if;\r\nend if;\r\nend;'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'43CBAE567B75404D93C32CAB8DD5F223', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'set @ServerTime =getdate()'),
(x'B44F91D85D6B1A49A72F985617727583', x'45CBAD6E19A0694582C6E261EB9F350C', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nItem.Name = RowItem.Name\r\nParentForm.Caption = item.Name\r\nItem.Save'),
(x'45353961F7ABF74682F39B7E610DD9C0', x'4A81487A52B1D346956DD642396D6624', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error resume next\r\nRowItem.Application.Name=name\r\nRowItem.Application.Save'),
(x'AA6D6E6CD25CC348A2AAA24539B45A49', x'4E88894AB4593C4CBEAAAC21C0540E4C', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nselect sysdate() into aServerTime from sys.dual;\r\nend;'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'54315A579D6CA042B44B00E9651C4D94', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update the_session set lastaccess=getdate() where the_sessionid=@cursession and closed=0\r\n'),
(x'B9409AD474614649A81DB7FE105C3546', x'57B9CFFE6114554F9F3D17F3F88F6E97', '2012-01-20 14:40:23', '2017-07-20 19:31:59', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update instance set LockUserID = null, LockSessionID=null where instanceID=@ID'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'590C33479B0E4D4EB5BA3D5DED41DEB6', '2012-01-20 14:40:22', '2017-07-20 19:31:59', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate instance set LockUserID = null, LockSessionID=null \r\nend;'),
(x'B9B78F5BB1D8A04C90AF55F83D1A6E5D', x'6002EE6D427C204B92AE4523FA7AB2F4', '2012-01-20 14:40:22', '2017-07-20 19:32:00', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error goto bye\r\nDim ID As String\r\n Dim Obj As Object\r\n ''ID = CreateGUID2\r\n ''Call RowItem.Application.Manager.NewInstance(ID, "VRRPT", "????? " & Date)\r\n ''Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)\r\n If RowItem.Report.VRRPT_MAIN.Count = 0 Then\r\n  Set Obj = RowItem.Report.VRRPT_MAIN.Add\r\n Else\r\n  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)\r\n End If\r\n \r\n Set Obj.Author = RowItem.Application.FindRowObject("Users", Item.Application.MTZSession.GetSessionUserID())\r\n Obj.TheDate = Date\r\n \r\n If ReportType = "CLNT" Then\r\n   Set Obj.Client = RowItem.Application\r\n End If\r\n If ReportType = "PRJ" Then\r\n   Set Obj.Project = RowItem.Application\r\n End If\r\n If ReportType = "CONT" Then\r\n   Set Obj.Contract = RowItem.Application\r\n End If\r\n If ReportType = "PERS" Then\r\n   Set Obj.Person = RowItem.Application\r\n End If\r\n \r\n Obj.Save\r\n RowItem.Save\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "???????? ??????"'),
(x'E89AA4494BDB294380FB801A24C9D7AF', x'60D4C1E492845945AA63B0322ABDBFE4', '2012-01-20 14:40:23', '2017-07-20 19:32:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @nid uniqueidentifier \r\ndeclare @opn varchar(255)\r\ndeclare @orid uniqueidentifier \r\ndeclare @s nvarchar(4000)\r\n\r\n\r\n\r\ndelete from num_values where OwnerPartName is null or OwnerRowID is null\r\n\r\ndeclare nlist cursor local for select distinct OwnerPartName from num_values\r\nopen nlist\r\nfetch next from nlist into @opn\r\nwhile @@fetch_status >=0 \r\nbegin\r\n  set @s= N''delete from num_values where ownerpartname='''''' + @opn + '''''' and OwnerRowID not in ( select '' + @opn + ''id from '' + @opn + '' )''\r\n  exec sp_executesql   @s\r\n  fetch next from nlist into @opn\r\nend\r\nclose nlist\r\ndeallocate nlist'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'630488E98C381146811E48FA4232909F', '2012-01-20 14:40:23', '2017-07-20 19:32:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id1 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\nreturn\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n    return\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n      return\r\n  else\r\n     delete from num_values where parentStructRowID=@ID1 and the_value=@num\r\n  end\r\nend'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'633EDD818ACE1A44975DC1726CB69D93', '2012-01-20 14:40:23', '2017-07-20 19:32:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$ \r\n\r\ndeclare\r\naInstanceID uuid; \r\nexistsCnt integer; \r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select result ID from queryresult where queryresultid =arowqueryID; \r\n \r\n\r\n\r\nloop\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  -- exit loop\r\n END IF;\r\n  aInstanceID:= RowToInstance (aID, athe_TABLE, aCURSESSION); \r\n       if not ainstanceid is null then\r\n          select count(*) into existsCnt from queryresult where QUERYRESULTID = aOutputQueryID and RESULT=aInstanceID; \r\n\t  if existsCnt =0 then \r\n\t    insert into queryresult (queryresultid,result) values(aoutputqueryid,ainstanceid); \r\n\t  end if; \r\n       end if;\r\nEND LOOP;\r\n\r\nclose aCurs; \r\n\r\nend; $BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n  COST 100;'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'67936738C8E3A5428FA61B44AC59EFFA', '2012-01-20 14:40:23', '2017-07-20 19:32:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' returns integer\r\nas $$\r\nbegin\r\n return 1;\r\nend;\r\n$$ language ''plpgsql'';\r\n'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'6AF7A7548BEFE648A637A238E9C33E21', '2012-01-20 14:40:22', '2017-07-20 19:32:00', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @the_zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n      return\r\n    end\r\n  else\r\n    begin\r\n      select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @n,@OwnerPartName,@OwnerRowID)\r\n      set @num = @n\r\n    end\r\n  end\r\nend\r\n'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'6E677CB3C067374C8C15FC0C2FF2D4C3', '2012-01-20 14:40:22', '2017-07-20 19:32:00', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$\r\ndeclare\r\nanum integer;\r\nan integer;\r\naid1 uuid;\r\naid2 uuid;\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return anum;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return anum;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nreturn anum;\r\nend;\r\n$$\r\nlanguage ''plpgsql'';'),
(x'36A4A142A28A1F4F999B6680DFF514DE', x'721727EF750E8945A227DAFB0C3A7920', '2012-01-20 14:40:22', '2017-07-20 19:32:00', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On Error GoTo bye\r\n'''''''''''''''''''''''''''''''' change me \r\n\r\n Dim cRow As object '' INV_OS.INVOS_PLACE\r\n Dim hist As object ''INV_OS.INVOS_HIST\r\n Set cRow = RowItem\r\n Set hist = cRow.Application.INVOS_HIST.Add\r\n \r\n \r\n With hist\r\n    .UntilDate = Now\r\n    Set .ChangedBy = cRow.Application.FindRowObject("Users", cRow.Application.MTZSession.GetSessionUserID)\r\n    ''Set .TheOrg = cRow.TheOrg\r\n    .ComplNumber = cRow.ComplNumber\r\n    Set .Direction = cRow.Direction\r\n    Set .Uprav = cRow.Uprav\r\n    Set .Otdel = cRow.Otdel\r\n    Set .TheHouse = cRow.TheHouse\r\n    Set .MatOtv = cRow.MatOtv\r\n    .Flow = cRow.Flow\r\n    .Room = cRow.Room\r\n    .WorkPlaceNum = cRow.WorkPlaceNum\r\n    Set .TheOwner = cRow.TheOwner\r\n    .Save\r\n End With\r\n\r\n\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox err.Description, vbOKOnly + vbCritical, "?????? ?????????? ???????"'),
(x'DC5699060533EF45933191CE323B5942', x'72EE6FAFC9E0C149B9A8DC039F558710', '2012-01-20 14:40:23', '2017-07-20 19:32:01', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'on error resume next\r\nItem.Name = RowItem.Description\r\nparentform.caption = item.name\r\nItem.Save'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'73C4D7500DCA204AB80CAF9E590D3D3E', '2012-01-20 14:40:22', '2017-07-20 19:32:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', '\r\n/**********************************\r\ndeclare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\nif not exists(select 1 from num_zones where zonemask=@zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @num)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@zone and instanceid=@NumeratorID\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @num)\r\n      return\r\n    end\r\n  else\r\n    begin\r\n      select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(@id2,@ID1, @n)\r\n      set @num = @n\r\n    end\r\n  end\r\nend\r\n************************************************************/\r\n\r\nan integer;\r\naid1 char(38);\r\naid2 char(38);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nend;'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'7AD2E7E8ECE8494E9A5323A59E196198', '2012-01-20 14:40:22', '2017-07-20 19:32:01', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'update instance set LockUserID = null, LockSessionID=null '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'7C699918ED8755488C5AB2E46F969A01', '2012-01-20 14:40:23', '2017-07-20 19:32:01', NULL, NULL, NULL, x'C4CF9CB244736A448F14824C92DC2D30', ' declare aID binary(16); \r\n    declare aUSERSID binary(16); \r\n    declare asysid binary(16); \r\n    declare existsCnt int;  \r\n\r\nset asysid = null; \r\n\r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\n\r\nset athe_session=null  ; \r\n\r\nif aPWD is null then \r\n select count(*) into existsCnt from users where Login=ausr and Password is null; \r\n  if existsCNt =1 then \r\n    select USERSID into ausersid from users where Login=ausr and Password is null; \r\n    set  aID=G2B(UUID()); \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,now(),ausersid,0,now()); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n\t   set athe_session=aid; \r\n  End if; \r\nelse \r\n \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD; \r\n  if existsCNt =1   then \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD; \r\n   set  aID=G2B(UUID())  ; \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,sysdate,ausersid,0,now()); \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n       set athe_session=aid; \r\n  else \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED''; \r\n    if existsCNt =1 \r\n    then \r\n     select USERSID into ausersid from users where DomaiName =ausr ; \r\n     set aid=G2B(UUID()); \r\n       if asysid is null then \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(aid,now(),ausersid,0,now()); \r\n \r\n       else \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(asysid,aid,now(),ausersid,0,now()); \r\n       end if; \r\n     set athe_session=aid; \r\n    End if; \r\n  end if; \r\nend if; '),
(x'B9334E07C91EA14A8300E98C73D55FE2', x'7C909231CC8D0349848800B95285235B', '2012-01-20 14:40:23', '2017-07-20 19:32:01', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @ID uniqueidentifier\r\ndeclare @USERSID uniqueidentifier\r\ndeclare @sysid uniqueidentifier\r\n\r\nset @sysid = null\r\nselect @sysid=instanceid from instance where objtype = ''MTZSYSTEM''\r\n\r\n\r\nset @THE_SESSION=null  \r\n\r\nif @PWD is null\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password is null)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password is null\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend\r\nelse\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password=@PWD)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password=@PWD\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\nelse\r\nif exists( select 1 from users where DomaiName=@usr and @PWD=''INTEGRATED'' )\r\nbegin\r\n    select @usersid=USERSID from users where DomaiName=@usr\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend -- password is null\r\n'),
(x'AF85990CEE27D54AA564635E0BFFC9D5', x'8CC641CD63FA824D93489432CE3B4F91', '2012-01-20 14:40:22', '2017-07-20 19:32:01', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aid1 char(38); \r\nexistsCnt  integer; \r\nbegin \r\naresult:=0; \r\n \r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID; \r\nif existsCnt =0 then \r\n  return; \r\nend if; \r\n \r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n \r\nif existsCnt=0 then \r\n    return; \r\nelse \r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID; \r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1 and the_value=anum; \r\n \r\n  if existsCnt=0 then \r\n      return; \r\n  else \r\n     aresult:=1; \r\n  end if; \r\nend if; \r\nend; '),
(x'FDD4DE795C04F845AC792E5A3D956D97', x'8E545933D0073E4C940FCF566620B888', '2012-01-20 14:40:22', '2017-07-20 19:32:02', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '''Migrate security\r\nOn Error GoTo bye\r\n  If RowItem.Person Is Nothing Then Exit Sub\r\n\r\n  RowItem.Person.Secure Item.SecureStyleID\r\n  RowItem.Person.propagate\r\nbye:\r\n  Exit Sub\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "???????? ????? ??????"'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'8ECAF9BA4ED33842B39362368309E916', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'existsCnt integer;\r\n\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n   begin\r\n    declare cursor dl  is\r\n    select ''update ''|| thevalue || '' set LockSessionID =null where LockSessionID=:1'' str from sysoptions where optiontype=''MAP'' and theValue not like ''V[_]%'';\r\n    dl_rec dl%rowtype;\r\n    begin\r\n    --open dl;\r\n    for dl_rec in dl loop\r\n\t      execute immediate dl_rec.str using acursession;\r\n    end loop;\r\n    --close dl;\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=sysdate(), changeStamp=sysdate() where     the_sessionid=acursession;\r\n    end;\r\n  end;  \r\n End if;\r\nend;\r\n'),
(x'F0D654042486874894B064FBC74775E6', x'914F746119B06C428DAEC716FFC3A359', '2012-01-20 14:40:22', '2017-07-20 19:32:02', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$\r\ndeclare\r\naOK integer;\r\nexistsCnt integer;\r\nbegin\r\nselect Count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n\r\nif  existsCnt>0 then\r\naOK:=1;\r\nelse\r\naOK :=0;\r\nend if;\r\nreturn aOK;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'258D7B47F74F1A49A0B0D3437EC16957', x'92E4E9C5DE0A734D8532987765502B7F', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On Error GoTo bye\r\n Dim ID As String\r\n Dim Obj As Object '' EstComplex.Application '' Object\r\n Dim GObj As Object\r\n Dim fold As Object ''EstCatalog.Application '' Object\r\n \r\n ID = CreateGUID2\r\n Call RowItem.Application.Manager.NewInstance(ID, "EstComplex", RowItem.TheName & " " & Date)\r\n Set Obj = RowItem.Application.Manager.GetInstanceObject(ID)\r\n If Obj.EC_Def.Count = 0 Then\r\n    With Obj.EC_Def.Add\r\n        .TheName = RowItem.TheName\r\n    End With\r\n Else\r\n    Obj.EC_Def.Item(1).TheName = RowItem.TheName\r\n End If\r\n Obj.Save\r\n Set RowItem.LinkedEC = Obj\r\n RowItem.Save\r\n Set GObj = RowItem.Application.Manager.GetInstanceGUI(Obj.ID)\r\n GObj.Show "", Obj, True ''False\r\n Set Obj = RowItem.Application.Manager.GetInstanceObject(ID)\r\n RowItem.TheName = Obj.EC_Def.Item(1).TheName\r\n RowItem.Save\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "???????? ??"\r\n'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'9304EAA253399642B215C21B65F96172', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' \r\nreturns void as\r\n$$\r\ndeclare\r\naCurs refcursor;\r\naID uuid;\r\nbegin\r\n\r\nopen aCurs for select the_sessionid id from the_session\r\nwhere lastAccess < LOCALTIMESTAMP -1;\r\nLOOP\r\nFETCH aCurs  INTO aID;\r\nIf Not FOUND Then\r\n    EXIT;  \r\n END IF;\r\n PERFORM logout (aID);\r\nEND LOOP;\r\nclose aCurs;\r\n\r\n\r\nend; $$\r\nlanguage ''plpgsql'';\r\n'),
(x'77CFE773BAE6B442A03B4F67EEDEF4F1', x'96D714DBA167024E9BFDC40160FB52C0', '2012-01-20 14:40:22', '2017-07-20 19:32:02', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\nbegin\r\nupdate instance set LockUserID = null, LockSessionID=null ;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'757FBD6854AD3748A6A7A8DDE3B2992A', x'9B3C33461AE5654F866E7A5331F55FA1', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @ID uniqueidentifier\r\ndeclare @USERSID uniqueidentifier\r\ndeclare @sysid uniqueidentifier\r\n\r\nset @sysid = null\r\nselect @sysid=instanceid from instance where objtype = ''MTZSYSTEM''\r\n\r\n\r\nset @THE_SESSION=null  \r\n\r\nif @PWD is null\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password is null)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password is null\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend\r\nelse\r\nbegin\r\n\r\nif exists( select 1 from users where Login=@usr and Password=@PWD)\r\nbegin\r\n    select @usersid=USERSID from users where Login=@usr and Password=@PWD\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\nelse\r\nif exists( select 1 from users where DomaiName=@usr and @PWD=''INTEGRATED'' )\r\nbegin\r\n    select @usersid=USERSID from users where DomaiName=@usr\r\n    set @id = newid()\r\n      if @sysid is null\r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@id,getdate(),@usersid,0,getdate())\r\n\r\n      else\t\r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt) \r\n        values(@sysid,@id,getdate(),@usersid,0,getdate())\r\n     set @THE_SESSION=@id\r\nEnd\r\n\r\nend -- password is null\r\n'),
(x'5E20BE73EAF75A4AA41F85E25CA6511E', x'A3A3E499B5642042953BA1207696EBF9', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @id uniqueidentifier\r\ndeclare s cursor for select the_sessionid from the_session \r\nwhere DATEADD ( minute , 30, lastAccess )<getdate()\r\nopen s\r\nfetch next from s into @id\r\nwhile @@fetch_status >=0\r\nbegin\r\n  exec logout  @id\r\n  fetch next from s into @id\r\nEnd\r\nClose s\r\ndeallocate s\r\n\r\n\r\n\r\n\r\n'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'A67CD40458C8CE428558CA92F097F8E9', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'apr integer;\r\naallow integer;\r\nbegin\r\nif athe_resource is null \r\nthen\r\n\taaccess :=1;\r\n\treturn;\r\nend if;\r\n\r\ndeclare  cursor tst is\r\nSELECT     \r\n  MTZSEC_RIGHT.Allow,  \r\n  MTZSEC_RIGHT.Piority\r\nFROM MTZSEC_RIGHT JOIN\r\n     GroupUser ON MTZSEC_RIGHT.TheGroup = GroupUser.ParentStructRowID  JOIN\r\n     the_Session ON GroupUser.TheUser = the_Session.Usersid\r\nwhere the_Session.the_Sessionid = acursession and the_Session.closed=0 \r\nand MTZSEC_RIGHT.InstanceID =athe_resource\r\nand MTZSEC_RIGHT.ProtectedItem =averb\r\norder by MTZSEC_RIGHT.Piority;\r\ntst_rec tst%ROWTYPE;\r\nbegin\r\n--open tst;\r\n\r\nfor tst_rec in tst loop\r\n\taaccess :=tst_rec.allow;\r\n\tCLOSE tst;\r\n\treturn;\r\nEND loop;\r\n\r\naaccess :=0;\r\nCLOSE tst;\r\nend;\r\nend;'),
(x'68DD82A28891404CB0F2BE69CAEE3DEA', x'A8CC809037BAE04DB6E29335FF9B593D', '2012-01-20 14:40:23', '2017-07-20 19:32:02', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @pr int, @allow int\r\n\r\nif @resource is null \r\nbegin\r\n\tset @access =1\r\n\treturn\r\nend \r\n\r\ndeclare tst cursor READ_ONLY for\r\nSELECT     \r\n  MTZSEC_RIGHT.Allow,  \r\n  MTZSEC_RIGHT.Piority\r\nFROM MTZSEC_RIGHT INNER JOIN\r\n     GroupUser ON MTZSEC_RIGHT.TheGroup = GroupUser.ParentStructRowID INNER JOIN\r\n     [the_Session] ON GroupUser.TheUser = [the_Session].Usersid\r\nwhere [the_Session].the_Sessionid = @cursession and [the_Session].closed=0 \r\nand MTZSEC_RIGHT.InstanceID =@resource\r\nand MTZSEC_RIGHT.ProtectedItem =@verb\r\norder by MTZSEC_RIGHT.Piority\r\nopen tst\r\n\r\nFETCH NEXT FROM tst INTO @Allow,@pr\r\nif (@@fetch_status >= 0)\r\nBEGIN\r\n\tset\t@access =@allow\r\n\tCLOSE tst\r\n\tDEALLOCATE tst\r\n\treturn\r\nEND\r\n\r\nset @access =0\r\nCLOSE tst\r\nDEALLOCATE tst\r\n'),
(x'0DAF8191D0F039458CDB67CDB500C41E', x'B368AE217FFFAE4F9B5DDC143AC126BE', '2012-01-20 14:40:22', '2017-07-20 19:32:03', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', '\r\ndeclare @n integer\r\ndeclare @id1 uniqueidentifier\r\ndeclare @id2 uniqueidentifier\r\nbegin\r\nif not exists(select 1 from instance where instanceid=@NumeratorID)\r\ninsert into instance(instanceid,name,objtype) values(@NumeratorID,''Numerator'',''STDNumerator'')\r\n\r\n-- New Zone\r\nif not exists(select 1 from num_zones where zonemask=@the_zone and instanceid=@NumeratorID)\r\n  begin\r\n    set @num =1\r\n    set @ID1 = newid()\r\n    set @ID2 = newid()\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(@id1,@NumeratorID, @the_zone)\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n    return\r\n  end\r\nelse\r\n  begin\r\n  select @ID1=num_zonesid from num_zones where zonemask=@the_zone and instanceid=@NumeratorID\r\n\r\n  -- frist item in Zone\r\n  if not exists(select 1 from num_values where parentStructRowID=@ID1 )\r\n    begin\r\n      set @num =1\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @num,@OwnerPartName,@OwnerRowID)\r\n      return\r\n    end\r\n  else\r\n\r\n    -- Items exists in zone\r\n    begin\r\n\r\n      set @n=null\r\n\r\n      declare cc cursor for  select the_value from num_values where parentStructRowID=@ID1 and the_value >1   order by the_value      \r\n      open cc\r\n      fetch next from cc into @n\r\n      while @@fetch_status >=0\t\r\n      begin\r\n       \r\n       -- try to get previous whole\r\n       if not exists( select 1 from num_values where parentStructRowID=@ID1 and the_value=@n-1)\r\n       begin\r\n\tset @n=@n-1\r\n\tgoto found\r\n       end\r\n\r\n       -- try to get next whole\r\n       if not exists( select 1 from num_values where parentStructRowID=@ID1 and the_value=@n+1)\r\n       begin\r\n\tset @n=@n+1\r\n\tgoto found\r\n       end\r\n       fetch next from cc into @n\r\n      end\t\r\n\r\n      --no wholes found\t\r\n      set @n=null\r\nfound:\r\n      close cc\r\n      deallocate cc\r\n\r\n      -- gem max+1 if no wholes\t\r\n      if @n is null\r\n        select @n = max(the_value)+1 from num_values where parentStructRowID=@ID1\r\n      end\t\r\n\r\n      --register value\t\r\n      set @ID2 = newid()\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value,OwnerPartName,OwnerRowID) values(@id2,@ID1, @n,@OwnerPartName,@OwnerRowID)\r\n      set @num = @n\r\n   \r\n  end\r\nend'),
(x'3A87B16FA9450F4290CECDE34B5AEE19', x'B5291AE63E67684BAF24379B1D724F8E', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'declare @sid uniqueidentifier\r\ndeclare closer cursor for \r\nselect the_sessionid from the_session where lastaccess < (getdate()-0.01) and closed =0\r\nopen closer\r\nfetch next from closer into @sid\r\nwhile @@fetch_status >=0\r\nbegin\r\n  print @sid\r\n  exec Logout @sid\r\n  fetch next from closer into @sid\r\nend\r\nclose closer\r\ndeallocate closer\r\n\r\n'),
(x'1808B32BED9027468ABB85B3FBA46750', x'BEB55DEDCE44EF47BBD7293AC2ADDFC9', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', 'On error goto bye\r\nDim ID As String\r\n Dim Obj As Object\r\n ID = CreateGUID2\r\n Call RowItem.Application.Manager.NewInstance(ID, "PEKO", "?????? " & Date)\r\n Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)\r\n\r\n If RowItem.TheDocument.PEKO_DEF.Count = 0 Then\r\n  Set Obj = RowItem.TheDocument.PEKO_DEF.Add\r\n Else\r\n  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)\r\n End If\r\n \r\n Set Obj.ToClient = RowItem.Application\r\n Obj.PLPDate = Date\r\n Obj.Save\r\n RowItem.Save\r\n\r\n Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "???????? ???????"'),
(x'5CEE0C2BFA7F0D499F5AB5E8692551DD', x'C91480E8C8050E4F8483BA8655D0A695', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns void as $$\r\ndeclare\r\naid1 uuid;\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt  from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\nreturn;\r\nend if;\r\nselect count(*) into existsCnt  from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    return ;\r\nelse\r\n  select num_zonesid into aID1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt  from num_values where parentStructRowID=aID1 ;\r\n  if  existsCnt=0 then\r\n      return;\r\n  else\r\n     delete from num_values where parentStructRowID=aID1 and the_value=anum;\r\n  end if;\r\nend if;\r\nend;\r\n$$ language ''plpgsql'';'),
(x'F76CEC31BD8DFE4EBF124D168F653D34', x'CAA152017ED4EC4A9CBB393C734FB369', '2012-01-20 14:40:22', '2017-07-20 19:32:03', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '''Apply security\r\nOn Error GoTo bye\r\n  If RowItem.Client Is Nothing Then Exit Sub\r\n  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub\r\n  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id\r\n  RowItem.Client.propagate\r\n  Exit Sub\r\nbye:\r\n  MsgBox Err.Description, vbOKOnly + vbCritical, "???????? ????? ??????"'),
(x'942A498D78707D4B9847AEFC27B4855D', x'D00EE13353BF2147B62A81B5007D25C9', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aparent varchar2(255);\r\naprev varchar2(255);\r\natmpID  char(38);\r\natmpRowID  char(38);\r\nastr varchar2(4000);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n -- checking session  --\r\nif  existsCnt =0\r\n  then\r\n    raise_application_error(-20000,''Session expired'');\r\n\r\n    return;\r\n  end if;\r\n\r\naparent :=athe_table;\r\natmpID := athe_ROWID;\r\n\r\n<<again>>\r\n\r\naprev := aparent;\r\nbegin \r\n\r\nselect thevalue into aparent from sysoptions where optiontype = ''PARENT'' and  name=aprev;\r\nexception\r\nwhen others then\r\naparent := null;\r\nend;\r\nif aparent is null then\r\n    astr := ''select InstanceID from '' || aprev || '' where '' || aprev || ''id=:1'';\r\n    begin\r\n        execute immediate astr into atmpRowID using atmpid;\r\n        athe_InstanceID:=atmpRowID\t    \t;\r\n    exception when others then\r\n        athe_InstanceID:=null;\r\n    end;\r\n    \r\nelse\r\n    astr :=''select ParentStructRowID from '' || aprev || '' where '' || aprev || ''id=:1'';\r\n    begin\r\n        execute immediate astr into atmpRowID using atmpid;\r\n        atmpID := atmpROWID;\r\n            exception when others then\r\n              atmpID := null;\r\n    end;\r\n    goto again;\r\nend if;\r\nend\r\n;'),
(x'942A498D78707D4B9847AEFC27B4855D', x'D31836A1FD1D1D4BA882A6D9590000A2', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS uuid AS\r\n$BODY$\r\n\r\ndeclare\r\naparent varchar(255);\r\naprev varchar(255);\r\natmpID  uuid;\r\natmpRowID  uuid;\r\nathe_InstanceID uuid;\r\nastr varchar(4000);\r\nexistsCnt integer;\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0 ;\r\n -- checking session  --\r\nif  existsCnt =0\r\n  then\r\n    perform raise_application_error(-20000,''Session expired'');\r\n\r\n    return null;\r\n  end if;\r\n\r\naparent :=athe_table;\r\natmpID := athe_ROWID;\r\n\r\nloop\r\n\r\naprev := aparent;\r\nbegin \r\n\r\naparent := null;\r\nselect thevalue into aparent from sysoptions where optiontype = ''PARENT'' and  name=aprev;\r\n\r\nend;\r\nif aparent is null then\r\n    astr := ''select InstanceID  from '' || aprev || '' where '' || aprev || ''id=$1'';\r\n    begin\r\n        athe_InstanceID:=null;\r\n        execute astr into atmpRowID using atmpid; \r\n        athe_InstanceID:=atmpRowID ;\r\n    end;\r\n    return athe_InstanceID;\r\nelse\r\n    astr :=''select ParentStructRowID from '' || aprev || '' where '' || aprev || ''id=$1'';\r\n    begin\r\n\tatmpID := null;\r\n        execute astr into atmpRowID using atmpid;\r\n        atmpID := atmpROWID;\r\n    end;\r\n end if;\r\nend loop;\r\nend\r\n;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE\r\n  COST 100;'),
(x'653A7AA8D1EC4F418FDF91E53ACED1BA', x'D3E4E528F01BE94EA740914CAF4B0636', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'aInstanceID char(38); \r\nexistsCnt integer; \r\n cursor QR is select result ID from queryresult where queryresultid =arowqueryID; \r\nQR_REC QR%ROWTYPE; \r\nbegin \r\n--open qr; \r\nfor  qr_ReC in QR loop \r\n          RowToInstance (athe_InstanceID=>aInstanceID , athe_RowID => QR_REC.ID, athe_Table=>athe_TABLE, aCURSESSION=>aCURSESSION); \r\n          if not ainstanceid is null then\r\n          select count(*) into existsCnt from queryresult where QUERYRESULTID = aOutputQueryID and RESULT=aInstanceID; \r\n\tif existsCnt =0 then \r\n\t  insert into queryresult (queryresultid,result) values(aoutputqueryid,ainstanceid); \r\n\tend if; \r\n          end if;\r\nend loop; \r\n--close QR; \r\nend; '),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'D4FB62D7B36C5248A04C6DED40CF06E6', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', ' RETURNS void AS\r\n$BODY$\r\ndeclare\r\nexistsCnt integer;\r\n\r\nbegin\r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;\r\nif existsCnt >0 then\r\n   begin\r\n\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;\r\n    update the_session set closed=1,closedAt=LOCALTIMESTAMP, changeStamp=LOCALTIMESTAMP where     \r\n    the_sessionid=acursession;\r\n   \r\n  end;  \r\n End if;\r\nend;\r\n$BODY$\r\n  LANGUAGE ''plpgsql'' VOLATILE'),
(x'95D72979C5415C4ABFF2A4E677A62143', x'DD7C81607BDA8844B4641A1A0F672F09', '2012-01-20 14:40:23', '2017-07-20 19:32:03', NULL, NULL, NULL, x'25AD0CC1ED9518459177E29824F01E47', 'begin\r\nupdate the_session set lastaccess=sysdate() where the_sessionid=acursession and closed=0;\r\nend;\r\n'),
(x'553B7D899965DB42AA1C54BAB3D2F597', x'E87EFB3431ACD242901DF7625B3BF9C8', '2012-01-20 14:40:22', '2017-07-20 19:32:04', NULL, NULL, NULL, x'9DD37D9D437AC34EAA101FBCED75F3CB', 'returns integer as $$ \r\ndeclare\r\nanum integer;\r\nan integer;\r\naid1 uuid;\r\naid2 uuid;\r\nexistsCnt integer;\r\nbegin\r\n\r\nselect count(*) into existsCnt from instance where instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n  insert into instance(instanceid,name,objtype) values(aNumeratorID,''Numerator'',''STDNumerator'');\r\nend if;\r\n\r\nselect count(*) into existsCnt from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\nif existsCnt=0 then\r\n    an :=1;\r\n    aID1 := newid();\r\n    aID2 := newid();\r\n    insert into num_zones(num_zonesid,instanceid, zonemask) values(aid1,aNumeratorID, athe_zone);\r\n    insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n   anum:=an;\r\n    return anum;\r\nelse\r\n  select num_zonesid into aid1 from num_zones where zonemask=athe_zone and instanceid=aNumeratorID;\r\n  select count(*) into existsCnt from num_values where parentStructRowID=aID1;\r\n  if existsCnt=0 then\r\n      an :=1;\r\n      anum:=1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      return anum;\r\n  else\r\n\r\n     begin\r\n      select  min(the_value) into an from num_values where parentStructRowID=aID1 and the_value+1\r\n      not in (select the_value from num_values where parentStructRowID=aID1);\r\n     exception when others then\r\n       an:=null;\r\n     end;\r\n      if an is null then\r\n        select  max(the_value)+1 into an from num_values where parentStructRowID=aID1;\r\n      else\r\n        an := an + 1;\r\n      aID2 := newid();\r\n      insert into num_Values(num_valuesid,parentstructrowid, the_Value) values(aid2,aID1, an);\r\n      anum := an;\r\n    end if;\r\n  end if;\r\nend if;\r\nreturn anum;\r\nend;\r\n$$\r\nlanguage ''plpgsql'';'),
(x'B4383B8DF9C4AC458ECEBF3BE39D8100', x'EF928D932409414A873D109F2B7E4A8E', '2012-01-20 14:40:23', '2017-07-20 19:32:04', NULL, NULL, NULL, x'582C650C52A98F4E8CB0D266431CD24B', 'if exists( select 1 from the_session where the_sessionid=@cursession and closed=0)\r\n begin\r\n    declare @n nvarchar(4000)\r\n    declare dl cursor for \r\n    select N''update ''+ value+'' set LockSessionID =null where LockSessionID=@cursession'' from sysoptions where optiontype=''MAP'' and Value not like ''V[_]%''\t\r\n    open dl\r\n    fetch next from dl into @n\r\n    while @@fetch_status >=0\r\n    begin\r\n\texec sp_executesql @n,N''@CURSESSION uniqueidentifier'',@CURSESSION\r\n\tfetch next from dl into @n\r\n    end\r\n    close dl\r\n    deallocate dl\r\n    update INSTANCE set LockSessionID =null where LockSessionID=@cursession    \r\n    update the_session set closed=1,closedAt=getdate(), changeStamp=getdate() where the_sessionid=@cursession\r\n End\r\n\r\n'),
(x'DBF6E8946A10DC44948386C801798FF0', x'F1217C6329D52B47A1AFCA5D78122583', '2012-01-20 14:40:23', '2017-07-20 19:32:04', NULL, NULL, NULL, x'1E837D44592F5547B0AB5CB12CCF4B0A', '        Dim DocItem As LATIR.Document.Doc_Base\r\n        Try\r\n            DocItem = GuiManager.Manager.GetInstanceObject(ID)\r\n            If Not DocItem Is Nothing Then\r\n                Dim tgui As LATIRGuiManager.Doc_GUIBase\r\n                tgui = GuiManager.GetTypeGUI(DocItem.TypeName)\r\n                tgui.ShowForm(ShowMode, DocItem)\r\n                tgui = Nothing\r\n            End If\r\n        Catch\r\n        End Try\r\n        DocItem = Nothing'),
(x'EBBDE679D5912E4B81F73E091FB65E3A', x'FCBF34CB1A194142B6510EB857957106', '2012-01-20 14:40:22', '2017-07-20 19:32:04', NULL, NULL, NULL, x'3014B534C6BD81488A6E795010553E24', '    On Error Resume Next\r\n\r\n    Dim part_col As Variant\r\n    Dim part_item As Object\r\n    Set part_col = CallByName(RowItem.Parent.Parent, DesPartName, VbGet, False)\r\n    Set part_item = part_col.Item(1)\r\n    If RowItem.Parent.Count = 1 Then\r\n        If part_item.HasDescrs = -1 Then\r\n            part_item.HasDescrs = 0\r\n        Else\r\n            part_item.HasDescrs = -1\r\n        End If\r\n    End If\r\n    part_item.Save\r\n');

-- 
-- Вывод данных для таблицы typemenu
--
-- Таблица areal_cli.typemenu не содержит данных

-- 
-- Вывод данных для таблицы extenderinterface
--
-- Таблица areal_cli.extenderinterface не содержит данных

-- 
-- Вывод данных для таблицы field
--
INSERT INTO field VALUES
(x'84D8A8DB867282478B286AF8916220B6', x'0159899342B3614BB087CC3C552979FD', '2014-06-02 14:14:16', '2017-07-20 19:33:41', NULL, NULL, NULL, NULL, '????????? ????????', 120, '??????????? ?????????????', 'SubStructObjects', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EDE9BE7D7031CC43BBC42FD6050B87F1', x'01F9BCDF9EC95C44958F8415EFFB84BD', '2017-06-05 13:07:42', '2017-07-20 19:33:41', NULL, NULL, NULL, NULL, NULL, 1, '???????? ??????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 32, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'02358FCF910457458BE09862909B9166', '2014-06-02 14:14:54', '2017-07-20 19:33:41', NULL, NULL, NULL, NULL, NULL, 1, '? ?/?', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, NULL, 'PARTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'023CBBB7214126428DCCA905C7CAF264', '2012-01-20 14:39:59', '2017-07-20 19:33:41', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Platform', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'0352B4F4F9C7304FB0E233498862A6FB', '2012-01-20 14:40:13', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'0380D97D843AD941962B0B56A922B592', '2017-06-05 12:47:36', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 1, '???? ? ????? ???', 'smstime', x'8F47A07A0CA8254B9425A540399C6705', -1, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'042F2F6253957440949378453BF13F67', '2017-06-05 12:25:25', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 10, '?????', 'login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'045B02DB8005AC4D9B3A97F8352BFD42', '2014-04-15 11:45:14', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 19, '?????? ???????', 'partIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'071E3E565D314543B9C12910037F595E', '2012-01-20 14:40:16', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 3, '???', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, 0, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'0849DBF13B9FE940AA27CAA7A524604D', '2012-01-20 14:40:02', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 1, '??????', 'TheJournal', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 1, x'16319A32B3ACC24E93CE5920E84AD8E8', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'79A1C111B229DC4DBDB71EB21D2FF878', x'08F26761BF3ACE43B8F661D969EF1034', '2012-01-20 14:40:16', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 1, '??????????? ?????????', 'TheState', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'66C846DFF838F14E92E25F899D98BD16', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'090365079152D44B90EB3B8118356905', '2012-01-20 14:40:15', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'0C1072D2399B2349A194E72A17C853C9', '2014-07-09 22:40:51', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 65, '?????????? ??????????', 'visibleControl', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'0C2652A0A1C78041A2C6DB82B70371A9', '2012-01-20 14:40:16', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 8, '??? ?????', 'ForCombo', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'0D21836D650C7E49A3EED78AA5E84D1C', '2012-01-20 14:40:02', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 2, '??????????', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'0D3ABD32A2B82445B9C11E290710778C', '2012-01-20 14:40:16', '2017-07-20 19:33:42', NULL, NULL, NULL, NULL, NULL, 15, '??????? ??????????? BRIEF ????', 'ruleBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 500, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'0D5ECD307DA1B246A306C78C6FF9D5AA', '2014-03-11 13:16:37', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 16, '?????? ???????', 'objIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'0DF7465693D94647A4329088098D18C4', '2014-02-07 14:57:48', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 18, '????????????? ????', 'integerpkey', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'0E1879337F4A0D4B9E52B54228BE1F2A', '2012-01-20 14:40:16', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 4, '?????: ???? ??? join ????????', 'TheJoinDestination', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'5E3DF43BB50EDB4D8EFA62DF3261A272', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'0E8E7C6A72A4114794F908663E5CB2E7', '2014-06-02 12:47:52', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, '????? ?????????', 120, '????????? ?? ????????', 'controldocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'0F822574BB1C99409D3FD437DEC9B3ED', '2012-01-20 14:40:02', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 2, '??????????', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'0FC6FEABF1AB034E910DDE669B66CC42', '2014-07-07 12:34:24', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 9, '???????', 'thephone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'0FC7B0C75B17FA4CB81A328B0E29BF29', '2012-01-20 14:40:16', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 3, '???', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 14, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'133309C5319B004A944066A74AB465D9', '2017-06-05 12:22:17', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 3, '???????????', 'org', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'140DF587AF96624D9A3F9C193146E507', '2014-06-02 14:14:16', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, '????? ?????????', 80, '????? ?????????', 'otherdocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'149976562DCDFF4F87242CCCC2209F72', '2012-01-20 14:40:16', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 4, '??? ????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B10601C795AA73418097614495D6EF28', x'14B4CF6C92BF8F46AD1CD4A2B360E6BD', '2012-01-20 14:40:16', '2017-07-20 19:33:43', NULL, NULL, NULL, NULL, NULL, 1, '????', 'TheField', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'15402D79B1AA0842BF678D7D220AF66E', '2012-01-20 14:40:13', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'15E80C3856BBCF4CB210938CF326EB4D', '2017-07-20 11:11:38', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 11, '?????????????', 'isadmin', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'162D0FE4B342E04B813B558CBBCA84FF', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 8, '????? ???? ??????', 'AllowNull', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'164A939DB55F49489280F4D7733304CC', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'16559DABC41D4640B979093EF40199A3', '2012-01-20 14:39:58', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 9, 'Login', 'Login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'16A28D8A31BFAD44AABAF271D8F7A399', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 4, '??????', 'TheConfig', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'176DB72D891905429ED6ED59A109D500', '2012-01-20 14:40:02', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 14, '??????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'17B88C68F9F47E43B0119760B83A4FFD', '2017-06-05 13:15:14', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, '???? ?????????', 15, '????????', 'msg_current', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'17D7B34429D89D48A72E6921D49EB5D2', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'18A058D6F7E4FA429048215433A13347', '2012-01-20 14:40:15', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'18A40507A5CB8B4AA46C49D7FC338F1B', '2017-06-05 13:11:29', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 2, '????????? ??????', 'ch_param', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'194ADE02C83C344A81EC7D41927986C2', '2014-06-02 14:30:55', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 40, '???????? ????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'1A84D08432139F4BA547257056C7C3D7', '2012-01-20 14:40:15', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'1AADB443D53B00478B0DCADAC3AA848E', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 6, '???? - ?????? 2', 'FilterField2', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'1B44AA1227414641956D6F887E04B47D', '2012-01-20 14:40:16', '2017-07-20 19:33:44', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'1BA824EB70FC9F419A5850523563398C', '2014-06-22 20:09:41', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 8, '????? ?????????', 'AllowAdd', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'1BF559ACC4FF1844AF62ED2BE0BB53CA', '2012-01-20 14:40:02', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 1, '???????? ??????', 'repname', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'1C81FD5B49BB84479710A0529A35CF74', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 12, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'1CED800F06BC0C42B655398CC50653EA', '2014-04-15 11:45:14', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'surname', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'1DA5823CB495E84993717AE35A1EE5F0', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 4, '?????????', 'VersionMinor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'1DE4E3D848C2C247868B2623D6B3E592', '2012-01-20 14:40:15', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'1E5877214C48A14190A3898F8065D615', '2012-01-20 14:40:15', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 10, '?????? ?? ??????', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'1F26059075A3D7438DD91164EC7557AD', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 2, '?????? ?????????? ? ??????????', 'ConnectionString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'1F2D71DE2EA202439AEBE9844DCC4D26', '2012-01-20 14:40:15', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'TheObject', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'2040990F8E51BD4CB6176DECFA4F8627', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 1, '?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'20EAAE69F1C8524BB6DA71F033C7208D', '2012-01-20 14:40:02', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 21, '????????? ??????', 'AllowPrint', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'2167F79EDDDCE34EAC4D019D204AD618', '2017-07-20 10:58:24', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 1, '???????? ????? ??????', 'moduleserial', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'21E364D6ADCE054DA244E2039EECE21A', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 1, '???????? ??????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 5, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'22A3E71208CAF14EB5094B010C205C4A', '2017-06-05 12:21:02', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 2, '???', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'22CCEDFFD4595B40ADA4531839F059CA', '2014-07-09 22:40:51', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'modulename', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'2300BA81E2F5E146958E664DFCEF2B6B', '2012-01-20 14:40:16', '2017-07-20 19:33:45', NULL, NULL, NULL, NULL, NULL, 3, '????????? ?????????', 'AllowAdd', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'2384CCC80F7161439C6CDD0613DF9680', '2014-07-07 12:34:34', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 8, 'e-mail', 'email', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2405E5C702C3544DA6976F9C9518B5E9', '2012-01-20 14:40:02', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 11, '???? ????????', 'IconFile', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 2000, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'24C4148E04FA8D4C8C74C28806A34ACD', '2012-01-20 14:40:02', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'2718BD8B667C004A826C0C8D504CD016', '2014-07-09 22:40:51', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 121, '?????????? ??????????', 'visibleControl', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'27848A0D6725B0469EDF3313C969B9DB', '2014-06-02 14:14:16', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, '????????? ????????', 100, '??? ?????', 'AllObjects', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'27FAE1F8B8903A49902B9FCF50BA04F0', '2012-01-20 14:40:13', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 1, '??????????????????', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'28235A8810E61B46A7A77F4402F3EE8B', '2012-01-20 14:40:16', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 4, '???? - ?????? 0', 'FilterField0', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'2853A67C5AD81A43AF1BA7C643AEBB16', '2017-08-30 11:22:44', '2017-08-30 11:22:44', NULL, NULL, NULL, NULL, '???????????? ????????', 120, '??????? NO', 'power_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'28848240D781C44399163998F43B2F29', '2012-01-20 14:40:02', '2017-07-20 19:33:46', NULL, NULL, NULL, NULL, NULL, 5, '??????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'29BD7E8346A648498546C52BDD2ECC82', '2012-06-04 16:40:44', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 13, '???????? ??????? ?? ????????????', 'UseOwnership', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'2A675E9391B908459F484DF0E87EF687', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'2A8A60BD279BF243A5596E8E5BB950BE', '2017-06-05 12:50:34', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 2, '???????? ?????', 'serialno', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'2B57FE359AE20D4F87CA9C51A17F4FDD', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 5, '???????', 'GeneratorStyle', x'AC992E5363D5D44BAC7A66DD6D7DD243', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E7C6F31042573147B94C647263E4E304', x'2BCA37164AAD154EB41D5C41300AE020', '2014-04-19 13:05:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 1, '????', 'therole', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'1051A02ED67D914BB774AF6ECBC42108', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'2BD7973D7EBF9B47A94A561697724485', '2012-01-20 14:40:15', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 7, '??????? ???????', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'2D13F4D4B6A5EB4F812E2910E961E2B8', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 23, '?????', 'TheMask', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2D7A4347B9FC7F43B06F569A15CC81DA', '2012-01-20 14:40:02', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 20, '???????? ??????', 'AllowFilter', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'2DB4F8FC94D05A4DBF6278963DECAD92', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 8, '??? ????????', 'OnDelete', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'2F926B0127D09A439FD588D53724E5DB', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 7, '????????? ?? ??????????????', 'ManualRegister', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'31F0647932DA6146AE303EDB9D36C058', '2012-01-20 14:40:16', '2017-07-20 19:33:47', NULL, NULL, NULL, NULL, NULL, 1, '?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'32473779E7B2DB41A34A9F6AAEC5BD36', '2012-01-20 14:40:15', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 4, '?????', 'the_Action', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3290897F4F10C9478E589B6FCABBFE86', '2014-06-02 12:47:52', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, '????????? ????????', 70, '??? ?????', 'AllObjects', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'32918078A0BB9D4B8482FC94C3A00B2E', '2017-06-05 17:12:29', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 4, '????????? ?????????????', 'ViewAlias', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'332EF0EE70A27C47AC122CC57B907967', '2012-01-20 14:40:02', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'TheVersion', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 30, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'334FA599A91FD24DBE1AA84D56E30353', '2012-01-20 14:40:15', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'FixedSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'3522BEC13E7EF64D928CD35D347CC04C', '2012-01-20 14:40:16', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'35BB10AD3FE2DC4EB6FED22292735BD2', '2012-01-20 14:39:58', '2017-07-20 19:33:48', NULL, NULL, NULL, NULL, NULL, 1, '???????', 'Family', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'3743A2DC2CBB3A4696C0C37D6420679E', '2012-01-20 14:40:15', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'3817A7E9D5356C4EB468B52F523E59D0', '2012-06-04 16:40:44', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 1, '????????????? ?????????', 'ObjectOwnerID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'38F28AD75F0BF848B5F3C9230790DAA7', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 12, '?????? ?? ??????', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3A633BDBD2285C498DC472D02008F594', '2014-06-02 12:47:52', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 40, '??????', 'TheIcon', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, 'hidden', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'3D0C94D74AABF24C9A848445B27D028B', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 5, '???????????? ????', 'MandatoryField', x'F7A946DE1BD2FB43BD3EDF6E82BD9477', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'3D79183F14ADB34C947B69CDDF289C35', '2012-01-20 14:40:02', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 6, '??????', 'TheFilter', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'DD6ECA18A1559045974FA973B8762638', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'3D95955ACBF0994C9BD7214886BDC2BA', '2012-01-20 14:40:03', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 3, '????????????', 'ColumnAlignment', x'4E199AA330CFC04F92980FFD1A7B0707', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'3DB2729E554A8843B59699EE2994F6AB', '2017-06-05 13:13:58', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, '???? ?????????', 10, '??????', 'msg_crash', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'3DBE8737CB319947B16B930466FE68D2', '2017-06-05 13:17:04', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, '????? ?????????', 10, '????????-?????', 'pop_ok', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'3DDA49D28AFFDF429EC3A3A866E5B4DD', '2012-01-20 14:39:59', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 2, '??? ????', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'3E9213D5E60C8144B79231A098EF94C9', '2013-05-06 12:13:08', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 14, '???????????? ?????? ????????', 'UseArchiving', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'3E9A65BCAB1C394992E5E9D938DA5BD0', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 11, '??? ????????', 'OnDelete', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'3F2BB9B88F11C543AF2ABDEA0D7E6CA9', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'4039D821BEFAE843BAB2C7D05C6651F1', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 12, '????????? ??? ??????????', 'AddBehaivor', x'C608D44CBE64964787E545A26D3B3DDA', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'404410118C1BE44B9DF110E08910F052', '2012-01-20 14:40:16', '2017-07-20 19:33:49', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'4068A5FE3A87D04E80B9B88CB3A7570E', '2012-01-20 14:40:16', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 5, '????????? ???????', 'AllowDelete', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'4091DB91A97D81459DE91A30F697DA5A', '2012-01-20 14:40:15', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A14802F51E159C4D87D0906ACFD35C9F', x'40FC7E105F6D234F9B443649F089250C', '2014-08-26 17:20:07', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 0, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'41365BA8B23A6545A4467D9E6AA1FA50', '2012-01-20 14:39:59', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 4, '????? ??? ????????????', 'PrepareMethod', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'422E7BC75803914FBDD2B95A66B1EB25', '2012-01-20 14:39:58', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 4, '??? ??? ?????', 'Login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'42304E8EC6032641BD107C3650D5B95B', '2012-01-20 14:40:16', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 4, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4295B643673AC84990AA25E8F54D1C42', '2014-06-02 12:47:52', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 10, '? ?/?', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, NULL, 'PARTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'42EC5E3F709973408C2DAD363EBAEFCC', '2012-01-20 14:40:13', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'TheCaption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'431F95DC8A34644CA248B9D11833BB46', '2012-01-20 14:40:03', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'43CFD88A728C3349A0ABCCAED0DC11A3', '2012-01-20 14:40:16', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 4, '??????', 'FromPart', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'43DC9A4694826E469E8323C9A02C9C6C', '2012-01-20 14:40:03', '2017-07-20 19:33:50', NULL, NULL, NULL, NULL, NULL, 5, '?????????? ??? ???????????', 'GroupAggregation', x'E15AE3F962B892419FB50F7DD6A5BF03', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'44B70D542EDAF64489685F1A00AF372F', '2012-01-20 14:39:59', '2017-07-20 19:33:51', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'44C39AEA9B8F5A419CDF438A27C7AF2F', '2012-01-20 14:40:16', '2017-07-20 19:33:51', NULL, NULL, NULL, NULL, NULL, 2, '????? ??????', 'RefClassID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'44E64538EA3AC241932DC946CB5CBE7D', '2012-01-20 14:40:16', '2017-07-20 19:33:51', NULL, NULL, NULL, NULL, NULL, 9, '??? ??????????', 'OnSave', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'44F899710146D44D865358688A220A8E', '2012-01-20 14:40:16', '2017-07-20 19:33:51', NULL, NULL, NULL, NULL, NULL, 8, '??????????', 'DescriptionString', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'452C16E19EFFC046B2AE8B7962327874', '2012-01-20 14:40:15', '2017-07-20 19:33:51', NULL, NULL, NULL, NULL, NULL, 7, '?????????? ????????', 'OutParam', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'45EF18E2EC0D924C9A40001A0777CB1A', '2012-01-20 14:40:03', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 2, '??? ????????', 'OnRun', x'B40D6B5ED7B42E44AEB5B2B35F51FA54', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'46886FE2AF53D84D8FDC0B89A6536F8A', '2012-01-20 14:40:16', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 3, '????? ??????', 'VersionMajor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'46CA30E81A20034D9DBC3769CCF5EAB4', '2012-01-20 14:40:02', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 16, '??????????? ? ???????', 'JournalFixedQuery', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'4706FED84DEDCA40BF195813742B1AA4', '2012-01-20 14:40:16', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 8, '??? ????????', 'OnCreate', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'47941865E136DE419939DC53DEE36469', '2017-06-05 13:04:30', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 5, '????????????? ????', 'master_fio', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'480E8A1B067CC443BB6430126CC62E52', '2012-01-20 14:40:16', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 5, '????????', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'48F7DAB2A2B53B4A95F0D88AA74F202B', '2012-01-20 14:39:58', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 2, '?????? AD', 'ADGroup', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'49026CB4877D044C959599D6D81FBEF1', '2012-01-20 14:40:02', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'4918E7AFF0F88A4AB7669C8F163F76F8', '2012-01-20 14:40:15', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'TheName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'496770C738B39248A18F28417379EA86', '2012-01-20 14:40:16', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 11, '??? ??????????', 'ReplicaType', x'2B9FC453B8526A44BBF4F90A068EA396', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'497DEF6C4BBE3742A2680B9155957F6B', '2012-01-20 14:40:02', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 38, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'49E6AE83FAEB70479AF2F07A576345AA', '2012-01-20 14:40:16', '2017-07-20 19:33:52', NULL, NULL, NULL, NULL, NULL, 2, '????, ?? ??????? ????????????? ???????????', 'TheField', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4A1CA8016B13F3409336A7496F00309E', '2014-06-02 12:47:52', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 30, '????????', 'ModuleAccessible', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'4AE3643BF6A4BA49B0F85BF88770EEBA', '2012-01-20 14:40:13', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'4AEE4C033EA34146B27D6CD0D5F2CD9B', '2012-01-20 14:40:02', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 8, '?????', 'Report', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'F925E1F51486CF4AA5281690B3C2040E', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4B08929AF474634693B416587BCC102D', '2012-01-20 14:39:58', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 5, '??????', 'Password', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'4BECAF32481BAA4A8A2D388521183919', '2014-06-18 10:37:59', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 6, '????? ??? ??????????????', 'EditMode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 4, 0, NULL, x'6D2968111CA0DB45B67D76A07F3FF64C', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CE37F730811C7246B0F96E5BF4B15971', x'4C7130F4D8D0624780B0FCC2256627BF', '2012-01-20 14:40:02', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 1, '??? ?????????', 'TheDocumentType', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'4D0AA71C88A35B44A8BA46E3001CA1CD', '2012-01-20 14:40:15', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 3, '????????????? ???????? ??????', 'NoEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'4E11440C87AD7C4BB7782C5DF78855B2', '2012-01-20 14:40:16', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 1, '?????????, ??????? ??????????? ????', 'ThePart', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4E59801BB0C45940B17E858E450FD636', '2012-01-20 14:39:58', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 7, 'e-mail', 'EMail', x'8608384640BAA948AAF5B8B138FB38C8', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'4EE8DCC2C7F88843BC47229E2E7A4910', '2012-01-20 14:39:58', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 8, '???????', 'Phone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1051A02ED67D914BB774AF6ECBC42108', x'4F64C1DD0185354997EF02BE087C1A8C', '2014-03-04 16:54:25', '2017-07-20 19:33:53', NULL, NULL, NULL, NULL, NULL, 10, '??????? ?????? ??????????', 'allowSetUser', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, '?????????? ???? ?? ????  ?????????  ???????????? ? ?????? ????????', NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'50713C28D9A43A4E8BFA77AF0C2F704A', '2012-01-20 14:39:58', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 2, '???', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'5186229F6902904EA13833CFCAEA76DE', '2014-04-15 11:45:14', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 6, '????????? ?? ?????', 'sendtomail', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'526592209A9B7D47B9588F502B334E27', '2012-01-20 14:40:15', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 5, '??????', 'DataSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'52A505481C86D347BD2F5C785F002E17', '2012-01-20 14:39:58', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 2, '??????? ???? ????????????', 'UserRole', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'EE6A0EA4417B6D47923CACA251C08E87', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'32245159DFE6F941A4366BF7DB1800BB', x'533A99AC9B5E1143A1ABF80C00923883', '2012-01-20 14:40:13', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 1, '????? ????', 'ZoneMask', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'53E2C57C8E936245BD3AA6B97484B8DC', '2012-01-20 14:40:03', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'54426900137F914C8F9D921F5DCAC84D', '2017-06-05 13:09:56', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 1, '??? ??????', 'ch_taype', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'EDE9BE7D7031CC43BBC42FD6050B87F1', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'5457EE3FCA222742BF0F252E5E26A72B', '2012-01-20 14:39:59', '2017-07-20 19:33:54', NULL, NULL, NULL, NULL, NULL, 5, '??? ??????', 'ReportType', x'12EEAA312481754EBD16698F4235234B', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5467F4C026EE574BA16165E7582A86F4', '2012-01-20 14:40:13', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 5, '??????', 'FieldSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'54892B16BB19C14186CC5E3B0EBE02A8', '2012-01-20 14:40:16', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 1, '???? - ????????', 'LangFull', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'54BFA35C84C2334097CBF39A598B1655', '2013-07-10 18:50:55', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 0, '??? ???????', 'TabName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, '??????????? ?????????????? ?????????????? ??????? ??? ?????????? ?????? ????? ??????????????', NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'560CCC73DC89724CBC4E67C07028EA15', '2013-05-06 12:13:08', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 17, '???????????? ?????? ????????', 'UseArchiving', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'568A2862604DBE4C845387B8F227B9A9', '2012-01-20 14:39:58', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 6, '???????? ???', 'DomaiName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'56CA28FB7CD6054DAB844CC5D9A88066', '2012-01-20 14:40:15', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 2, '???', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'56E9FAA5DADE6745A5E351D1DB6DA9D1', '2012-01-20 14:40:16', '2017-07-20 19:33:55', NULL, NULL, NULL, NULL, NULL, 2, '???????? ????????', 'AllowRead', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'56F918905A5D5547A8986B3C52E4F32C', '2012-01-20 14:40:13', '2017-07-20 19:33:58', NULL, NULL, NULL, NULL, NULL, 7, '???, ???? ?????????', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'57025F8A0A88024DAE93E81E717140D4', '2012-01-20 14:40:02', '2017-07-20 19:34:05', NULL, NULL, NULL, NULL, NULL, 9, '????????', 'Document', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'576D4D6F03EEBE4595BC51DF2D9FB41C', '2012-01-20 14:40:13', '2017-07-20 19:34:05', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'the_Value', x'18153A059FCAC94E99311C4AB23C54CE', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'57B055D27CB93240A4A73B76F765E2E3', '2012-01-20 14:40:16', '2017-07-20 19:34:05', NULL, NULL, NULL, NULL, NULL, 17, '?????????', 'TheNumerator', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'882F32DE48CA014E8ACDBEC71338D8CC', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'58014B86E904874599058D3F480B3CD2', '2012-01-20 14:40:16', '2017-07-20 19:34:05', NULL, NULL, NULL, NULL, NULL, 5, '???????? ? ????', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'589CD89E08C83D4FAEF62E2AB006A146', '2012-01-20 14:40:16', '2017-07-20 19:34:06', NULL, NULL, NULL, NULL, NULL, 10, '??? ????????', 'OnRun', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'2E9E8E54F6892248A312101CA4A9FE74', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'589EC8C8E4F7F341A607B5160BC871C5', '2012-01-20 14:40:13', '2017-07-20 19:34:06', NULL, NULL, NULL, NULL, NULL, 6, '??? ??????', 'RefType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'59FD7494E228AF47A92734CD52DDBAC8', '2012-01-20 14:40:13', '2017-07-20 19:34:06', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'5C5420F107406A49A220DD9CD45CA9B1', '2012-01-20 14:40:16', '2017-07-20 19:34:06', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'5C60BC924A29264DB6A0490B11A2B65E', '2012-01-20 14:40:15', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'5C8EFFDC6FEF834DA2D318545B7B142F', '2012-01-20 14:40:02', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'5CA5849F4CB5C24E99A1C9B7D61F9A95', '2012-01-20 14:40:16', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'5CBE61865A265242A790E9A9B62A5DD2', '2014-08-26 17:20:07', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 0, '??????', 'theClient', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'A14802F51E159C4D87D0906ACFD35C9F', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'5CFE7F7D9C75394B9AC8E748A35EB0E0', '2012-01-20 14:40:16', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 13, '?????? ??????????', 'ExtenderObject', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'5D0BC4816FB6C2468B1D45888F52ED6C', '2012-01-20 14:39:58', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'the_Resource', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'5D7F8DEC3B909043ACFC3EDA7FEA4E78', '2017-07-20 10:49:47', '2017-07-20 19:34:07', NULL, NULL, NULL, NULL, NULL, 4, '?????????', 'sendresult', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'5D87FB366347474A9E73291FBFE1F1DF', '2012-01-20 14:40:16', '2017-07-20 19:34:09', NULL, NULL, NULL, NULL, NULL, 21, '?????? ??? ???????? ???????????', 'shablonBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5E94EA1F98118C40906040BD85D60EDC', '2012-01-20 14:40:13', '2017-07-20 19:34:09', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'6089784572E2B24CA33C2559564C95A5', '2012-01-20 14:40:16', '2017-07-20 19:34:09', NULL, NULL, NULL, NULL, NULL, 2, '??? ?????', 'LangShort', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'623C86641C1DD349BF84604893BCD630', '2012-01-20 14:40:16', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 9, '?????? ????', 'DataSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'62939D47339C71489FF4FF281A9A3D97', '2012-01-20 14:40:16', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 3, '???????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'6294208EDC98A04E83B77796A363820C', '2012-01-20 14:40:13', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'62CEC5F726E5B54BB69050A3BE8740B0', '2017-08-30 11:44:50', '2017-08-30 11:44:50', NULL, NULL, NULL, NULL, '???????????? ????????', 7, '??????? NO', 'power_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'63A60194A7ED5842882595440CF82D40', '2014-06-02 14:14:16', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 60, '???????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'63AB589BA3D08F46B1A0B5890349F55C', '2012-01-20 14:40:15', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'63C32B86842F5A4193D8309C63EB5068', '2017-08-30 11:19:11', '2017-08-30 11:19:11', NULL, NULL, NULL, NULL, '???????????? ????????', 110, '???????? NO', 'pop_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'65650E329054564F9C2019FD56F24F6C', '2018-04-06 13:13:35', '2018-04-06 13:13:35', NULL, NULL, NULL, NULL, '??????????', 20, '????????', 'chanelName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'65DBC4A748C5D141A6143A6C57363977', '2012-01-20 14:40:15', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 9, '?????????? ??????????', 'DelayedSave', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'6635C79B580B7F4FA07407E2CB9CF633', '2012-01-20 14:40:16', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 1, '??? ??????', 'FieldGroupBox', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'66650B8C936598408D5BCD1835C3BB7A', '2012-01-20 14:40:03', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'66FFDAA193BFF245879ABFD03C8D1E83', '2012-01-20 14:40:16', '2017-07-20 19:34:10', NULL, NULL, NULL, NULL, NULL, 13, '?????', 'TheStyle', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 50, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, '?????????????? ???????? ??????? ??? ??????????  GUI', NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'676DEEC83B3BF34581FCC8F3FA40B840', '2012-01-20 14:40:15', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 2, '???????? ??????', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'67BA9A85C2896F4BADDD848C42038640', '2017-06-05 13:17:50', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, '????? ?????????', 15, '?????? ???????', 'roof_open', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'67C1604FAC23984399FB44D7E1F22F3F', '2014-06-02 14:14:16', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, '????????? ????????', 110, '??????? ??????', 'ColegsObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'6896BFF3F10F2C42A457124B8FF36CB9', '2012-06-04 16:40:44', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'SessionID', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A23E94783679584FB31676E4F968E3B4', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'68CAE51FED8B624197FD6F44E2D0D6D9', '2012-01-20 14:40:13', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 3, '????????????? ??????', 'OwnerRowID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'692DAD0CD6A11D4987AB0BFB5C11E4D6', '2012-01-20 14:40:16', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'IsArchive', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'6A20C84C2F67404B9D139D7C500AED04', '2017-07-20 10:46:31', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 2, '?????', 'chanel', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 0, 2, NULL, x'6C47841B846CDE4092B517045D93C35A', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'6AB31D6D41AD45488861C3DF51F65597', '2017-06-05 12:40:58', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 1, '??????', 'moduletype', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'B22C7E24E96FBB499D4B021309A3F8F2', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'6AEB244EA5E24A40ABA30BC26B15AD72', '2014-06-02 12:47:52', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, '????????? ????????', 80, '??????? ??????', 'ColegsObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'6B6B75696557834694480A729ED9CCE0', '2012-01-20 14:40:16', '2017-07-20 19:34:11', NULL, NULL, NULL, NULL, NULL, 6, '?? ?????????? ? ??????', 'NoLog', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'6C03B78FB4B785479DDA7B728340E8D2', '2017-12-11 13:31:54', '2017-12-11 13:31:54', NULL, NULL, NULL, NULL, NULL, 1, '???????', 'Family', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 120, 0, NULL, NULL, 'defsort col1', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'6C5D7D65FDB4464B9E10F140A42AD509', '2012-01-20 14:40:16', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 7, '??? ????????', 'OnCreate', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'6D085B0A45543E43983790F35EEF74D9', '2014-04-15 11:45:14', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 4, '?????? ???????', 'jrnlIconCls', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'6D704889A360DE498A0DA4DEE615DBD8', '2012-01-20 14:40:15', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'TypeStyle', x'24B86D7EF796A443A9D60CB89A66FE20', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'6E114E9F6A772547ACEEFB88734D4556', '2012-01-20 14:39:58', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 6, '????????? ?????????????', 'LastAccess', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'6F47A494B029B743A3463402466B8503', '2018-04-06 13:14:23', '2018-04-06 13:14:23', NULL, NULL, NULL, NULL, '??????????', 25, '???????????', 'chanelComment', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'6FE2700A628D9D49B5C06F0918D81797', '2013-07-10 18:50:55', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 0, '??? ???????????', 'CacheType', x'8D7A3B8EF0B27C48A7FE1B89EDADED6F', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'7044B40CCA76DB48A233EBBC749132F4', '2012-01-20 14:40:16', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'7070D54129C6C848A0A417ECE3163EB6', '2012-01-20 14:40:15', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 4, '??? ??????', 'TypeOfParm', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'711023109A1A0F479BE88E8C161A1120', '2012-01-20 14:39:59', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'715FB7CC138F0148AADF2C16EF98F035', '2012-05-28 17:19:44', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 3, '????? ????????', 'OpenMode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'719F7F66A264274D93164A3A100A02AA', '2012-01-20 14:40:02', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 12, '??????????', 'TheExtention', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'71A9B816D3094B4A86D1FE3371D1D345', '2012-01-20 14:40:16', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 18, '?????? ???? ?????????', 'ZoneTemplate', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'728E351326635C4B86533B7889594E4D', '2012-01-20 14:40:02', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 13, '???', 'ARM', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'40B745DAF4C6974BB4EB3DE0A6C480B5', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'7356A5A4795A07499D2CAC330FAEF4BB', '2012-01-20 14:40:02', '2017-07-20 19:34:12', NULL, NULL, NULL, NULL, NULL, 2, '???????? ??????', 'TheClassName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'747E09BA467801469F6AA62B63FBD083', '2012-01-20 14:40:15', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 4, '????????????? ??????????? ??????', 'ActionID', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'7487CE8714D2334994E7C1DD557DE340', '2017-06-05 12:24:35', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 5, 'E-Mail', 'email', x'8608384640BAA948AAF5B8B138FB38C8', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'75B9F1885CCCC24DB85E7DB3CCBBA666', '2012-01-20 14:40:16', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 3, '???????', 'QueueName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'7603E3482F2B8D4EA7D09852EF5CDBE6', '2012-01-20 14:40:16', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 20, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'766A3B30E1A9884182328B87342735B2', '2012-01-20 14:40:16', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 7, '?????????? ????????? ??????', 'SortField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'76E1401971B4464097994A2A2997B236', '2014-06-02 12:47:52', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, '????? ?????????', 110, '????? ?????????', 'otherdocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'778BEE54A226CE439350C496251E88AF', '2012-01-20 14:40:16', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 7, '??????? ???????', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'77AD01D324ADDE4D9DA90B6148B89662', '2012-01-20 14:40:02', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'78D895D334C63F479671D9322967DA2C', '2012-01-20 14:40:02', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 1, '??????????', 'ThePlatform', x'6531AF860CC4E14188E2DE89D2C1BF84', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'79374CE191F32446B135B1D27E52D383', '2012-01-20 14:40:15', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'ParamName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'7949BBB5D48E844B9E8FD8647287062B', '2012-01-20 14:40:16', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 11, '?????? ?? ???', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1051A02ED67D914BB774AF6ECBC42108', x'79A9219532B0D547AA5DB4C6D72773B3', '2014-04-15 11:45:14', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'79D0954B5006F0408A7224431AAE1AE4', '2012-01-20 14:40:15', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'7A31D78D93647D43A54135615D10DA8B', '2017-07-20 10:45:00', '2017-07-20 19:34:13', NULL, NULL, NULL, NULL, NULL, 1, '???', 'sms', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, 0, 0, 0, 2, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'7BFF06EA8FAD704187A74A019A5730F0', '2013-05-14 16:14:43', '2017-07-20 19:34:16', NULL, NULL, NULL, NULL, NULL, 15, '????????? ?????? ???????', 'CommitFullObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'7C19B16501CC5F4CA316830D43E24A58', '2012-01-20 14:40:16', '2017-07-20 19:34:29', NULL, NULL, NULL, NULL, NULL, 14, '?????? ??? ???????? ???????????', 'shablonBrief', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'7C715213F6E95544A225797A38525BCF', '2012-01-20 14:40:16', '2017-07-20 19:34:29', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'7C9ED214068F6B4EBA437EE095DCBA7B', '2012-01-20 14:40:16', '2017-07-20 19:34:29', NULL, NULL, NULL, NULL, NULL, 6, '?????????', 'Aggregation', x'E15AE3F962B892419FB50F7DD6A5BF03', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'7CBC36D5141A144B9ABF7326E396E760', '2012-01-20 14:40:15', '2017-07-20 19:34:29', NULL, NULL, NULL, NULL, NULL, 5, '???????? ? ????', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'7D03FEC7BE86A648B808788BB35D8849', '2012-01-20 14:40:13', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 4, '??? ????', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'7D2662569EDA704C8C5E4DCD434325FC', '2017-06-05 13:18:31', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, '????? ?????????', 20, '??????? ? ?????', 'power_ok', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'7DFC5301479BCC4384058339935320D4', '2012-01-20 14:40:15', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'7EAE9A6123DA0E4681ECCBE32A96D493', '2012-01-20 14:40:15', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 8, '??????? ?????????? ? ????????? ?????????????', 'GridSortType', x'728E3461855DE34892C434841FA1AA8F', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'7F0E7C2D8150E64C8BDD156668269911', '2012-01-20 14:40:02', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 15, '??? ?????????', 'ObjectType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'80DF8E6D32976042847EE1209FF71CCE', '2012-01-20 14:40:16', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'82461B4060B7B242913BCFDC7D4C44E7', '2012-01-20 14:40:16', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'VersionMajor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'8289AA2A31E8A945961524EE2CDAD2C5', '2012-01-20 14:40:16', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 1, '??????? ?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'828D644EFE81444E98ABCD542C698286', '2012-01-20 14:39:58', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 5, '????????????', 'Usersid', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'55B88B1465099E4EA3D648DCC8CE528B', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'83FDB46A09011044B5C4CAB69153378B', '2012-01-20 14:40:15', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 2, '??????? ?????????', 'TargetPlatform', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'842BC8FA8E5E0A408433C29994016DD5', '2012-01-20 14:40:15', '2017-07-20 19:34:30', NULL, NULL, NULL, NULL, NULL, 2, '??? ????????', 'StoageType', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'8492289A3109E240BF8DA5DE550052B6', '2012-01-20 14:40:16', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 1, '?????????', 'Provider', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 128, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'8575828DCCB8AD42A6A76538E481BA21', '2012-01-20 14:40:15', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 1, '???? (????????)', 'FieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'860E54C84370D14A875B0386EA200688', '2012-01-20 14:39:59', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 8, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'863AE5CA67FDBA439BABCF5E828B7B94', '2012-01-20 14:40:16', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 6, '???????? ? ??????', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'89E7E3F472210F4093747F79118802D7', '2012-01-20 14:39:59', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'FieldSize', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'8AB2D1312FE90D46ABEE655BF9605BED', '2017-06-05 12:50:12', '2017-07-20 19:34:31', NULL, NULL, NULL, NULL, NULL, 3, '???????? ?????', 'serialno', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'8BD31B913B739B46BFF3516F735A0C8F', '2012-01-20 14:39:59', '2017-07-20 19:34:32', NULL, NULL, NULL, NULL, NULL, 4, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'8C5D85F3195B434DBE96FA2156DB51E1', '2012-01-20 14:40:15', '2017-07-20 19:34:32', NULL, NULL, NULL, NULL, NULL, 1, '??????? ?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'8D727636686B454FB3E63754B3625164', '2012-01-20 14:40:16', '2017-07-20 19:34:32', NULL, NULL, NULL, NULL, NULL, 1, 'ProgID ???????????? ????????', 'ControlProgID', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'8EA7B2BF6A47CB4581DAC2AD0CC71AA6', '2012-01-20 14:40:16', '2017-07-20 19:34:32', NULL, NULL, NULL, NULL, NULL, 1, '?????????, ?????? ? ??????? ?????????', 'Struct', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'8EEAA0B2E8183E41AAF17358EA471802', '2012-01-20 14:40:03', '2017-07-20 19:34:32', NULL, NULL, NULL, NULL, NULL, 4, '?????????? ???????', 'ColSort', x'728E3461855DE34892C434841FA1AA8F', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'8F0DF7445FB5FC4A975BA0C421E377C5', '2012-01-20 14:40:03', '2017-07-20 19:34:33', NULL, NULL, NULL, NULL, NULL, 2, '???? ?????????????', 'ViewField', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'8F6E8AF0D9AA3045A986FA201A9CB743', '2012-01-20 14:40:16', '2017-07-20 19:34:33', NULL, NULL, NULL, NULL, NULL, 6, '?????? ????????? ??????', 'FilterString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'8F954A5E5D43A54188945D70B788CD3D', '2012-01-20 14:40:16', '2017-07-20 19:34:33', NULL, NULL, NULL, NULL, NULL, 5, '?????? join', 'HandJoin', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'90627C216E67474D9ABC67A754661FA1', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'91255A0E505DD14290D37E3DF29DFC51', '2012-01-20 14:40:13', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 9, '?????? ????????', 'ValueArray', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'91C176D39A2F3647956B3A1A13ECC8DF', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 3, '????????? ????????????', 'IsRestricted', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'91D6162E9EF6F44D804A3A3A87876BC4', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 1, '?', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'92A191DC907A7B41992FEE0E2139A949', '2012-01-20 14:40:02', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'93D550949210D24EB014CCEBD7FE526B', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5607A06E80B9234DB209202389953A13', x'93FFEC828C54324FA9E98212DCE538B3', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 1, '??????????', 'Package', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'9471AD46ACA9EA479C4AF685D7CBABFD', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 6, '??????? ??????????', 'IsBrief', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'94E580DCCCED2E41BE4FB27E23D6B780', '2012-01-20 14:40:16', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 5, '??? ????', 'FieldType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'94F9A86BD8B2E94D97BBEE6ED01C3CF4', '2012-01-20 14:40:15', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 3, '???????? ? ????', 'NameInCode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'957AD70CDF485D4F8D3AC66F0EA66B6A', '2012-01-20 14:39:58', '2017-07-20 19:34:34', NULL, NULL, NULL, NULL, NULL, 4, '???????', 'Closed', x'E0280E0D19D66A49BF995F9F28321C74', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'9606F6E2AFFCB0468E387ADA90C05EBC', '2012-01-20 14:40:16', '2017-07-20 19:34:35', NULL, NULL, NULL, NULL, NULL, 9, '?????????? ??? ?????? ??????', 'AllowRefToObject', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'9676341BA2FF2F42ACACFA465357D3C3', '2012-01-20 14:40:16', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 2, '??????? ?????????', 'TargetPlatform', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'969228CDDA5D044D961001E312E4C4CB', '2012-01-20 14:40:13', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 1, '??????????????????', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'9857DF622E53A54C924FE0CA9AF26DCE', '2012-01-20 14:40:13', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'98CD861EC37BF847A69186227D01E40C', '2012-01-20 14:40:15', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'NameValue', x'18153A059FCAC94E99311C4AB23C54CE', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'999CA22159C1D04D89258DF526B895FE', '2012-01-20 14:40:15', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'the_Comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'99D598E6212E4149AD6266AFF7B34F45', '2012-01-20 14:40:16', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 2, '??? ????????', 'PartType', x'B736F5EE412A1048B1ED7FB8557C25B9', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9AD2DE26AB2FB84ABE815CE5013238FD', '2012-01-20 14:40:02', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 17, '????????? ??????????', 'AllowAdd', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'9AE5BC4C22977840BA6BDEA3480E455D', '2012-01-20 14:39:58', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 4, '????????', 'VERB', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'9B43F17390F9F242BAF05265D2FEA3FA', '2012-01-20 14:40:16', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 3, '???????? ??????', 'DataSource', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'9BE3C3B42EFDEC4889B2ED11FDC75FDA', '2012-01-20 14:40:16', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 9, '?? ?????????? ????? ??????', 'DontShowDialog', x'E0280E0D19D66A49BF995F9F28321C74', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'9CC7C465A81002458FE79F06DB70303F', '2012-01-20 14:40:02', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'RowSource', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, 'View ?? ???????? ???????? ??????', NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'9DABCC08689A334C9F37876ACF95F27D', '2012-01-20 14:40:16', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 6, '???????', 'SEQ', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9EE64CB2B5C3854DA3A918BF50385854', '2012-01-20 14:40:02', '2017-07-20 19:34:36', NULL, NULL, NULL, NULL, NULL, 7, '??????', 'Journal', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'16319A32B3ACC24E93CE5920E84AD8E8', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'9F813D7FBD932245B914FCCC2C91B48F', '2012-01-20 14:39:58', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 5, '????????????? ?????????', 'LogInstanceID', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'9FD766EF1E249448AB2BAEB442FF12CC', '2012-01-20 14:40:02', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 2, '?????', 'TheReport', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 1, x'F925E1F51486CF4AA5281690B3C2040E', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'A00FA7E471BA8143A1938DA3DF3AE36F', '2012-01-20 14:40:02', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'A02B5AFD54EC304BBADC96424894D118', '2012-01-20 14:40:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 1, '??????????', 'Package', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'C2E0DB8C89591042BDFB33C2C45F2509', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'A051875B9DB1534AB622582E8E20E272', '2017-08-30 11:44:47', '2017-08-30 11:44:47', NULL, NULL, NULL, NULL, '???????????? ????????', 6, '???????? NO', 'pop_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'A13307A850F1584281DB91330250BFF1', '2014-06-02 12:50:34', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 50, '???????? ????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, 'readonly', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'A17B5EDDA7D7D640B0230FAF705FE438', '2014-06-02 14:14:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, '????? ?????????', 90, '??? ?????????', 'mydocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'A263F6A96AC0DA4D9B8A659CFFDF25E6', '2012-01-20 14:40:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 16, '?????????????', 'IsAutoNumber', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'A346C0EDD504C845AD5372CCDEA55210', '2012-01-20 14:40:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 1, '?????????, ??????? ??????????? ?????', 'Part', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'A409E1A9C8F03A448E1EA78A7B53F84B', '2012-01-20 14:40:15', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 3, '????????????? ???????? ??????', 'NoEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'A4DF0B748FB3FA4F809CBBC0400417C9', '2012-01-20 14:40:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'A50917873AF66643AE915255F1A6AB91', '2012-01-20 14:40:16', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 3, '??? ??????', 'ForChoose', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'A643F157081A8C4B9EB122E58F4D5E75', '2012-01-20 14:40:15', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 6, '? ??????', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'A6AD8C1D36B8F0448F86CBD63379EF4A', '2012-01-20 14:40:02', '2017-07-20 19:34:37', NULL, NULL, NULL, NULL, NULL, 4, '????????? ??????????', 'ThePlatform', x'6531AF860CC4E14188E2DE89D2C1BF84', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'A737207F12045F4FB13B96FCAFB6CE63', '2012-01-20 14:40:16', '2017-07-20 19:34:38', NULL, NULL, NULL, NULL, NULL, 10, '??? ??????', 'ReferenceType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'A9145A446225274895486236BCF0B09B', '2012-01-20 14:40:16', '2017-07-20 19:34:38', NULL, NULL, NULL, NULL, NULL, 2, '?????', 'Method', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'AA4BCC195B855B428957431FE17C8C6F', '2012-01-20 14:40:13', '2017-07-20 19:34:38', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'OwnerPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'AB328AF99BAC104580C3EE28FE1D9336', '2017-07-20 10:51:13', '2017-07-20 19:34:38', NULL, NULL, NULL, NULL, NULL, 6, '?????????', 'finished', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'AB684CDF96732C44AF236BB1B7665B06', '2012-01-20 14:40:16', '2017-07-20 19:34:39', NULL, NULL, NULL, NULL, NULL, 2, '? ?/?', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', 'PARTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AC430CE7C5F1AD4BBEB227E2CAF81780', '2012-01-20 14:40:02', '2017-07-20 19:34:41', NULL, NULL, NULL, NULL, NULL, 10, '?????', 'Method', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'AC8B0BE94A01584DAF79768BB242119D', '2012-01-20 14:40:16', '2017-07-20 19:34:47', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'AD1768A8E4E4BE4EB08C60828659BD52', '2012-01-20 14:40:15', '2017-07-20 19:35:06', NULL, NULL, NULL, NULL, NULL, 4, '????? ??????', 'AllowSize', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'AD229F02920EC347A3E5FEA5ABFCC7C8', '2012-01-20 14:39:58', '2017-07-20 19:35:06', NULL, NULL, NULL, NULL, NULL, 7, '?????? ????????', 'StartAt', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AD7508DF65915840A66214F74D5A257B', '2012-01-20 14:40:02', '2017-07-20 19:35:06', NULL, NULL, NULL, NULL, NULL, 18, '????????? ??????????????', 'AllowEdit', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'ADF67B2937FEE64EAC8B40D2E1E50A93', '2012-01-20 14:40:15', '2017-07-20 19:35:07', NULL, NULL, NULL, NULL, NULL, 7, '????? ??????', 'AllowLikeSearch', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'AEDE10BB9DE8344784444750220B79CE', '2012-01-20 14:40:03', '2017-07-20 19:35:08', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 32, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'AF477A68B568DD4D928F9229BE67CE36', '2012-01-20 14:39:58', '2017-07-20 19:35:08', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'AFFFFBD63B4BBB449D96FD96C6B3A920', '2012-01-20 14:40:16', '2017-07-20 19:35:08', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'the_Alias', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B22C7E24E96FBB499D4B021309A3F8F2', x'B130489C3553E74485D3A12CD5A1DE8D', '2017-06-05 13:22:06', '2017-07-20 19:35:08', NULL, NULL, NULL, NULL, NULL, 1, '????????  ????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 32, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'B1A9CEEE5BC9C44186740C229C2892B3', '2012-01-20 14:40:16', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 14, '?????? ? ???????? ???????', 'InternalReference', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'B2956DC778F79A4AB98C494443C91C72', '2017-06-05 13:01:11', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 4, '????? ????????', 'phone', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'B2CA6F7ABC11704A910C8ACA1F370BFD', '2012-01-20 14:40:16', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 4, '?????', 'the_Action', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'ADEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'B3C5D7628BBA8942ADD1D374580562FF', '2012-01-20 14:40:02', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 2, '??? ??????????', 'ExtType', x'C7FEC37988B7224E8BE3F34759F1190C', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'B44D6A47DB69C54EA4D7999C09183B97', '2012-01-20 14:39:58', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 3, '?????? ? ??????? ????????? ????????', 'LogStructID', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'B4BFBFEDBC84104B97B3A174D782CD9F', '2012-01-20 14:40:16', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 15, '?????? ???????? ???????', 'CreateRefOnly', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'B5AED6362843324D8FD4F4EDCA6F6DA6', '2017-06-05 17:23:32', '2017-07-20 19:35:09', NULL, NULL, NULL, NULL, NULL, 1, '?????????????', 'spartview', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, 0, 38, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'B5B21C9A6D0EED4195D1E81F8955FAFB', '2012-01-20 14:40:16', '2017-07-20 19:35:10', NULL, NULL, NULL, NULL, NULL, 6, '????? ??????????', 'TheDevelopmentEnv', x'6531AF860CC4E14188E2DE89D2C1BF84', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'B69A9691B3776949950E4A1D03D35FD6', '2012-01-20 14:40:16', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 5, '???? - ?????? 1', 'FilterField1', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'B790B6E7095B844F99FA943E75AE4D9A', '2014-03-11 12:15:52', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 10, '??? ??? ?????', 'login', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'B797253247A067458F01B6FC770A0EB0', '2012-01-20 14:40:16', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'B8D7561EE6FD7D40B935904D21E26307', '2017-07-20 10:50:29', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 5, '????? ???????', 'trynumber', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'B90E8DEFE714CC4388A982BBA545491D', '2017-06-05 13:02:08', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, 0, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'B9AE9D29B2752E4B85921E48C6CFB6B7', '2012-01-20 14:40:15', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 6, '????????', 'Maximum', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'BA700AEBB90FAE44ADE16910E4E7A240', '2012-01-20 14:40:16', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 6, '??? ???????', 'OnRun', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'7A7476873D74B947AF1CAB00FF81154F', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'BADD37C8FE4E5D44AABCC4701DF2ED55', '2012-01-20 14:40:02', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 3, '???????? ??????????', 'TheLibraryName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'BB7A3BB448294B4A8E4D53887AE4AA4E', '2012-01-20 14:39:59', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'BC07F828234A3B4F80A28C30F5F12730', '2012-01-20 14:40:16', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 2, '?????: ???? ??? join ????????', 'TheJoinSource', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'5E3DF43BB50EDB4D8EFA62DF3261A272', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'BC1D371B36319540B9697C9BF073511F', '2017-06-05 12:23:39', '2017-07-20 19:35:11', NULL, NULL, NULL, NULL, NULL, 4, '???????', 'phone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 40, 0, NULL, NULL, 'phone', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BC2555EC6D61834DA45F61ACAD93149F', '2012-01-20 14:40:02', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 19, '???????? ????????', 'AllowDel', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'BC360C9BCF2B864081419FEA56D6BA94', '2012-01-20 14:40:15', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 5, '? ????', 'IsMenuItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BDC65D7D13D14B4DBDABF0890B8D1CBE', '2012-01-20 14:40:02', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 4, '???????? ? ??????', 'AsToolbarItem', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'BF56BA07E0FBCF468477AEE9C5EBFDCF', '2012-01-20 14:40:15', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 1, '??????????????????', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', 'PARAMETER%P', NULL, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'BF7AFD80E3E1874897BEFEADC78B9EFC', '2012-01-20 14:40:13', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 8, '??????, ???? ?????????', 'RefToPart', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'B1EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'BFA8CC4E8013174E9169AAEF48E2964B', '2012-01-20 14:39:59', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 2, '???? ??????', 'ReportFile', x'C340EA421CD62F46AF6F314D2F0000E1', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'C1EBF74D21473849B88B8A09A12F3400', '2012-01-20 14:40:16', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 7, '???? - ?????? 3', 'FilterField3', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'C2BD06116470BD47BF0505DE96CBACD6', '2012-01-20 14:40:15', '2017-07-20 19:35:12', NULL, NULL, NULL, NULL, NULL, 3, '???????????? ???', 'ReturnType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'A5EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'C2C81EA1042CA646A46659D2066349BC', '2012-01-20 14:40:13', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 2, '????? ?????????', 'Shema', x'382838929000504DB8E3262D094E3DFE', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'C41ABB2FF73C974CAB36ABA8BEA98ADC', '2017-08-30 11:16:43', '2017-08-30 11:16:43', NULL, NULL, NULL, NULL, '???????????? ????????', 100, '?????? NO', 'roof_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'C4A81CCB73ACBF47BEC9DE9F1A0554CC', '2012-01-20 14:40:02', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'TheExpression', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, 0, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, '????????? ??? ???????????? ???????', NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'C4BC8E49F283934095A838A8CD0C4B83', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 4, 'COM ?????', 'GeneratorProgID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'C4E3147C3AB88D4DB65CC7B0339F1E42', '2014-04-15 11:45:14', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 2, '???', 'name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 120, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'C5E82E7A7E969E4499BEF45B53615802', '2012-01-20 14:39:58', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 9, '??????? ???????', 'LocalPhone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'C63FFED2D728944E80664B4B73BF102D', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 5, '???????? ??????? ??????????', 'BriefString', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'C6673C12706DB54D99EFEC32C85EEC7B', '2012-01-20 14:39:59', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'C69F7C918243284A90767BC70352F94E', '2012-01-20 14:40:13', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 4, '????? ?????????', 'AllowIgnore', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'C7837FFC5C63A34EBD541D7C3A1E0805', '2012-01-20 14:40:15', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 2, '??????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'C7F9B324369671488EB5233FA8EDCF4B', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'the_Comment', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'CA4BEE80724CD8439E7C0D635C4BA8B1', '2012-01-20 14:40:15', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 7, '??????? ???????', 'HotKey', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 20, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'CABEA17A06C3F543A416ABA0F9BB6DB5', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 7, '??? ??????????? ? ???????', 'IsTabBrief', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'05C61246727ED0478A2852CC7BFF4C7F', x'CB3AFCA9DB42EC4E880973228594665C', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'CB8F6D43C322214CB8138FAAB49FCE66', '2014-07-07 12:33:34', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 1, '???????', 'lastname', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 120, 0, NULL, NULL, 'flex', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'CBBDBBA277AA5E479D3646AB5813CC27', '2012-01-20 14:40:16', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, NULL, 1, '? ?/?', 'Sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'49B51BC53B61E84EA2577C21F0C3D585', 'PART_OR_OBJECTID=%P', NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'CBF8EDF2C2C4B147B14AA7FF5287AE2B', '2014-06-02 12:47:52', '2017-07-20 19:35:13', NULL, NULL, NULL, NULL, '????? ?????????', 100, '??? ?????????', 'mydocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'CE94E3A02452CF48935B2963093CEB96', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 1, '?????????????', 'TheView', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'D08E98EBBC4F834FB79CD4773654471D', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 4, '?????????', 'VersionMinor', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'D1131FAA950F2B49A447601A029D16F3', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 3, '??????', 'TheObject', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'D1DF1E0866A77E4FB0A3075CA70A61FB', '2014-02-15 21:41:20', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 4, '???? ? ????????????', 'curRole', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'1051A02ED67D914BB774AF6ECBC42108', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'D286B50DC3C23442B4EAA8FFB5F14A2E', '2012-01-20 14:40:15', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 6, '? ??????', 'IsToolBarButton', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'D4CA377BE429B94982C7A5C6614031F2', '2017-08-30 11:23:30', '2017-08-30 11:23:30', NULL, NULL, NULL, NULL, NULL, 0, '??????', 'mymodule', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, -1, 0, 2, NULL, x'FE4567F62EEF1545A397B52EB98F59BF', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'D58EE2FB7930254EA159998191C32782', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 5, '????', 'Field', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'D5BE1FBDCE5B2B409EC5609D94E8FC58', '2012-01-20 14:39:59', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'D5D4BFB72A29D1418986EA197AC38275', '2012-01-20 14:39:59', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'Code', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'D6368FFEFD2FA3419BF315554CF22424', '2012-01-20 14:39:59', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 7, '??????? ??????', 'ReportView', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'D6B2D1937D92174F9174FBF2B4B032B9', '2017-06-05 13:21:04', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 3, '??? ????????????', 'deivetype', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'D6D5BFCF64D63D4EAEECD9BA51167E33', '2014-06-22 20:09:41', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 5, '????? ???  ????????', 'AddMode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 4, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'D6D6FAE4D21C6B42B6F29B733D616892', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 4, '????????? ????????', 'AllowEdit', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'D70EF489A6577B489EE3471E19972638', '2012-01-20 14:40:16', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 5, '????????????? ??? ??????', 'ChooseView', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'4DB613D7E84C6D46BE2B448874DC0469', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'D77E3939283C4F41A18859E103B21F4A', '2012-01-20 14:40:03', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 1, '?????????????', 'SrcPartView', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, 0, 0, 2, NULL, x'4D24C3DAD670A445885DD610F748EBFC', NULL, -1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'D97FF283D0E4A645A5614703602BB9DE', '2012-01-20 14:40:15', '2017-07-20 19:35:14', NULL, NULL, NULL, NULL, NULL, 8, '??? ??????', 'ReferenceType', x'BB4E2D1305A56849BC1C50716757A2C5', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'DA54895B7920D94DA1752DF34D31E2BE', '2012-01-20 14:39:59', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 6, '?????????? ??? ???????? ??????', 'TheReportExt', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 1, x'8FB8F3BE916E2941BAD51BA076BDE3BD', NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'DC329F056AE0B84480909B9F21F0D412', '2012-01-20 14:40:02', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheDescription', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'DCCA6DDB19E13A41BE63ED1B5A6B8BEC', '2012-01-20 14:40:16', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 2, '???? ??????', 'DBName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'DD041A279409B7439C470EC8EB9999BF', '2012-01-20 14:40:16', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 4, '??????????? ?????? ???? ??????', 'IsSingleInstance', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'DD3BAAED6251234DB2200C017A16CC53', '2012-01-20 14:40:02', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 5, '??????? ????????', 'ActionType', x'3A3878A9883FD34787A231AF949E53B1', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'DD51EE13A4A9504E8C214A35A6743D6C', '2012-01-20 14:39:59', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'DEDFC8B1EE4DFF46B28B9E6F4852A1AE', '2012-01-20 14:40:15', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 2, '????????', 'ParamName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'DF2429F38B66B9479CAFCDDA9B0C081B', '2012-01-20 14:40:16', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'DFBC9C0B62AE6D40995E1299EAEEA664', '2012-01-20 14:39:58', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 1, '??????', 'TheSession', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'A23E94783679584FB31676E4F968E3B4', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'DFE249610023134395281C62D5616685', '2017-06-05 13:03:42', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 4, '?????', 'theaddress', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'E048F724A05E5A42B4F4DC8C8D70D1CB', '2014-06-22 20:09:41', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 1, '??? ?????????', 'The_Document', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'E08B72618F25FF46A4A0420C5B3D4F2B', '2014-06-02 14:30:37', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 10, '??????', 'TheIcon', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'E0B7C2728F4A884693D8A7E5839343A8', '2012-01-20 14:40:16', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 10, '?????????? ??? ??????', 'AllowSearch', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'E10090E920B24445A483AFADDA09CEEF', '2012-01-20 14:40:16', '2017-07-20 19:35:15', NULL, NULL, NULL, NULL, NULL, 16, '????? ?????? ?????????', 'IsJormalChange', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'E17FA681A502544185E27D08E05DCFA1', '2014-06-02 12:51:16', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 60, '???? ???????? ???????', 'GroupName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'E24A0AA894472E4CA774277DD8C7E986', '2012-01-20 14:39:58', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 1, '????????????', 'TheUser', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'55B88B1465099E4EA3D648DCC8CE528B', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'E282394EEEF79940A821172489EFC0FA', '2014-06-02 14:14:16', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, '????? ?????????', 70, '????????? ?? ????????', 'controldocmode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 10, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'E2948ED3CE97BE4BA976D1998EE21CA3', '2012-01-20 14:40:15', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 6, '????? ?? ????????', 'AllowNull', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'E2A0CD3011DFE7418C7E5DA06BC27D6D', '2014-07-09 22:40:51', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 7, '????????? ??????', 'freelancer', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'E2C38C744074D347A2A4218D684EB7B0', '2017-06-05 12:49:52', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 5, '??????????? ???', 'controlcode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'E2ED0ACDFDDE0C468D52A98A09D3C086', '2012-01-20 14:39:58', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'SurName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'E316214CAFA73C4D8EED671C681E78E3', '2012-01-20 14:40:15', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'ToolTip', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'E38CB46586BB2D42A8C4E1CC5AC74F2C', '2012-01-20 14:40:15', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 9, '?????? ?? ???', 'RefToType', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'AFEF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'E4A2D64A075A4B4BACF69FC7C64EDB32', '2017-07-20 10:48:36', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 3, '????? ???????', 'SendTime', x'8F47A07A0CA8254B9425A540399C6705', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'E5042C091A48154C9741738CE08064A1', '2012-01-20 14:40:15', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 4, '??????', 'TheConfig', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 512, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'E6D050D3945BD94EBA9BE028575D15BA', '2012-01-20 14:40:16', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'TheName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'E7192E16C9BD4640B7375F1018307043', '2012-01-20 14:39:58', '2017-07-20 19:35:16', NULL, NULL, NULL, NULL, NULL, 3, '?????? ????????', 'ClosedAt', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E7D8257EEED0BD4F87D143910056735B', '2012-01-20 14:40:16', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 4, '????????? ???????????', 'AllowModify', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'E7EAC0FADC419F4E93A63D56C4704C03', '2017-06-05 13:12:48', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 3, '????? ???????', 'ch_on', x'794061085D25D54FABBEDE9BC7987090', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'E81AD38FB43733499536284B161D1215', '2012-01-20 14:40:02', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 1, '??????????????????', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, 0, 0, 0, NULL, NULL, 'defsort', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'E9313F83C43FCF429DFE5D81870CA276', '2012-01-20 14:40:15', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 1, '???? (????????)', 'FieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'E9670F443FB55A4CB77E6A51405BA073', '2017-08-30 11:44:43', '2017-08-30 11:44:43', NULL, NULL, NULL, NULL, '???????????? ????????', 5, '?????? NO', 'roof_no', x'794061085D25D54FABBEDE9BC7987090', 0, 0, -1, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E97EEC74927E144983ED61C47253C3BA', '2012-01-20 14:40:16', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 3, '???????? ????????', 'AllowRead', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'E991DBC9484CBA428C1CCDF42B566447', '2017-06-05 13:19:23', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 7, '???????????', 'temperature', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'E9F50C668C4DF94486378EC5A894FE22', '2012-01-20 14:39:58', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 1, '??????????', 'ApplicationID', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'C421399726499D4CA7816062CF81B5AD', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'EC17956C14F42044A5C3F04B7D91A23E', '2012-01-20 14:39:58', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 8, '???????????', 'Lang', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 25, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'EC9A95007193DA4796B67DF48E836010', '2012-01-20 14:40:16', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 3, '?????????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'ED484E66281E0D4786567FFB0672C2FA', '2012-01-20 14:40:16', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 4, '????????', 'the_comment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'EDEFC1792738FB4A8EB11DD6B5E8740F', '2012-01-20 14:40:15', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 1, '?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'EDFCAC684AD33840AF8252B22B1A493E', '2017-06-05 12:49:50', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 4, '??? ?????????', 'opercode', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'F01A2228A296014A9708711D439C9787', '2012-01-20 14:40:16', '2017-07-20 19:35:17', NULL, NULL, NULL, NULL, NULL, 22, '??? ?????? ??? ??????? ?????', 'theNameClass', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 100, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'F1F54B530CB4054B9F0D9DC6C3EE5D56', '2012-01-20 14:40:15', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 5, '???????', 'Minimum', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'F34716C1EDE78B4580C934F3F1D96BB9', '2017-06-05 12:42:20', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 3, '???? ????????????', 'makedate', x'62A2627C8D09A546AFDCC0286C87EDCC', 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'F35B97FAD6270947BA7A77BE6F209057', '2014-06-02 14:15:06', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 20, '???? ???????? ???????', 'GroupName', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 60, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'F3A56BA1DEB1DE49A74B225EB995D071', '2014-06-02 12:47:52', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 20, '???????', 'Caption', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'F3BA514510EA2740A4401B6A23F36198', '2012-01-20 14:40:16', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 7, '???????', 'Expression', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'F71745CCA37F35478351A031B3315154', '2012-01-20 14:40:16', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 2, '????? ????????????????????', 'ControlClassID', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 40, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'F7B5144DE8A0A445ADCC5B2D11D547B9', '2012-01-20 14:40:16', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 2, '???? ????? ???????? ???????? ??????? ?????? ???????', 'DefaultMode', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'F92E464CB68309428FD9D5B4E7C168EF', '2012-01-20 14:40:15', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 1, '?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'FA0E0DE36C81CC4E9F2A3A736ED110BA', '2012-01-20 14:40:16', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 3, '????????? ???', 'RefType', x'7A49AD62E1F3494A80A0A5E19E9BE068', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'FA3705AE04871C4BA6906A1F7B521FA9', '2012-01-20 14:40:16', '2017-07-20 19:35:18', NULL, NULL, NULL, NULL, NULL, 2, '?????????', 'isStartup', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'FA3F8898B85E65458EE5F6D4011BE295', '2012-01-20 14:40:16', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 4, 'ID', 'IDField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 128, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FA8A2FCC5083CB48AB9D57E6103D4490', '2012-01-20 14:40:16', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 1, '????????', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', -1, -1, 0, 80, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'FBA664914D432E499BCBED05CD08591C', '2012-01-20 14:40:16', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 1, '??????? ?????????', 'Target', x'9DF4659492B4B34D8052290BEC7E9E2B', -1, -1, 0, 0, 2, NULL, x'B9EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FBC3C5571B0DA34F98493C4AB14A3162', '2012-01-20 14:40:16', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 2, '?? ????????', 'PerParent', x'794061085D25D54FABBEDE9BC7987090', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'FBCE92419F45624085AD8E293A7A86AE', '2012-01-20 14:40:02', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 3, '???? ???????', 'FilterField', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, -1, -1, 255, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, '???????? ???? ? ??????? ?? ???????? ????? ???????????? ?????????, ???? ???? ? ??????? ??????', NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'FBF842A55E1BBC42A5EA3FFEFBDFBF1C', '2012-01-20 14:40:03', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 1, '??????????????????', 'sequence', x'18153A059FCAC94E99311C4AB23C54CE', 0, -1, -1, 0, 0, NULL, NULL, 'defsort', 0, 0, -1, x'01EEF3E7C44ED2418657BA22089DE0E5', '%P', NULL, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'FC29BB6FB510764F9B1E373CB194C5C7', '2014-06-18 10:36:00', '2017-07-20 19:35:19', NULL, NULL, NULL, NULL, NULL, 10, '????? ???????', 'AllowDelete', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'FDD81F11562038498668757130F4D57C', '2014-03-29 14:41:38', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, NULL, 5, '???????? ?????????', 'UseFavorites', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'FE1704683D422141B88D97861B0C762C', '2017-06-05 12:49:22', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, NULL, 2, '??????? ???????????', 'phone', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, -1, 64, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'FE7B6D8584309E4884424263A02AE30A', '2012-01-20 14:40:16', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, NULL, 19, '???? ??? ??????? ????', 'NumberDateField', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, -1, -1, 0, 2, NULL, x'A4EF70062751D5118822204C4F4F5020', NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'FE9414AC95E93D49B2E650A8F546F63A', '2012-01-20 14:40:16', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, NULL, 2, '??? ?????????', 'TargetType', x'7B8AB80EDCF2524F9B7D3D4E61B55C81', -1, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'FEFF1E43FFEF1445B237B1ACABD0A2FB', '2012-01-20 14:40:16', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, NULL, 3, '????????', 'TheComment', x'4E5C4BC769C18B48AD39568F8061E4A0', 0, -1, -1, 0, 0, NULL, NULL, 'area', 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'FF8DFA2330A2194EAD8CB0821A628D65', '2014-06-02 12:47:52', '2017-07-20 19:35:20', NULL, NULL, NULL, NULL, '????????? ????????', 90, '??????????? ?????????????', 'SubStructObjects', x'794061085D25D54FABBEDE9BC7987090', 0, -1, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

-- 
-- Вывод данных для таблицы fieldrestriction
--
INSERT INTO fieldrestriction VALUES
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'011A761D9392524DBB33CCC4C33E9FC1', '2014-06-16 12:12:02', '2017-07-20 19:32:23', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3A633BDBD2285C498DC472D02008F594', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'060644061ABFA64DB5D6B314ACB38AF8', '2014-07-07 14:25:02', '2017-07-20 19:32:23', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'E282394EEEF79940A821172489EFC0FA', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'0C057E0623A6CF49A7D79DD8028E8779', '2014-07-07 13:07:20', '2017-07-20 19:32:23', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'1BA824EB70FC9F419A5850523563398C', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'11DB1A5832FF1E43B876540E2AE58252', '2014-07-09 22:40:51', '2017-07-20 19:32:23', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'E08B72618F25FF46A4A0420C5B3D4F2B', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'14BFB5D9221653488C2AA378CB29CB5E', '2014-07-07 14:25:43', '2017-07-20 19:32:23', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'CBF8EDF2C2C4B147B14AA7FF5287AE2B', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'1D20342B5B3D4643B7DEC9ACF4F7345F', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'63A60194A7ED5842882595440CF82D40', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'1D52B3B959A8E44093535D8EC8687FBF', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'F35B97FAD6270947BA7A77BE6F209057', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'256C34B8D7D6CC48B14FC8D29AD6F654', '2014-06-16 12:12:15', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4A1CA8016B13F3409336A7496F00309E', -1, -1, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'28B5D9903BE5ED4586345E336586FEF1', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'E048F724A05E5A42B4F4DC8C8D70D1CB', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'387B6DC86AB1E149B3990BD46F58F108', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'A13307A850F1584281DB91330250BFF1', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'39C335B48DBC9446950C32B2F2CE5847', '2014-06-16 12:12:25', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4295B643673AC84990AA25E8F54D1C42', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'3AF61C4B6B541F4AB51EE8BB6B5660F5', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'2718BD8B667C004A826C0C8D504CD016', -1, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'3FB92B88BCEB0E4885F9F70439F658BB', '2017-06-06 20:54:25', '2017-07-20 19:32:24', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'3DBE8737CB319947B16B930466FE68D2', -1, 0, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'4075B42E607BE44083A6268F0A2FBC6E', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'0159899342B3614BB087CC3C552979FD', 0, 0, 0),
(x'8CFE62593DBF7C4183F8DC53040FB714', x'43E881184092A74E9EA1445250D7383B', '2014-07-09 22:40:51', '2017-07-20 19:32:24', NULL, NULL, NULL, x'1051A02ED67D914BB774AF6ECBC42108', x'79A9219532B0D547AA5DB4C6D72773B3', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'46A2707AEF9B1A4D95759EE10C5AC78A', '2014-07-07 14:32:02', '2017-07-20 19:32:25', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'27848A0D6725B0469EDF3313C969B9DB', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'478BC5E696562949B361D7FC9286D239', '2014-06-22 20:09:41', '2017-07-20 19:32:25', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'F3A56BA1DEB1DE49A74B225EB995D071', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'47DCE4892D212A408FCD802758D5DB71', '2014-07-07 14:25:02', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'140DF587AF96624D9A3F9C193146E507', 0, 0, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'48986B68728EF243B7A31A6DA21AB3BF', '2014-07-09 22:40:51', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'A17B5EDDA7D7D640B0230FAF705FE438', 0, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'4AA63A81BE9032469E192F659E15BADC', '2017-06-06 20:54:25', '2017-07-20 19:32:26', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'67BA9A85C2896F4BADDD848C42038640', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'4CD91DC092E3A948B29C71046DA8CFEE', '2014-07-09 22:40:51', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'FF8DFA2330A2194EAD8CB0821A628D65', -1, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'4DB0E6EF4B31D14C8612A66907E60F0D', '2014-06-22 20:09:41', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3290897F4F10C9478E589B6FCABBFE86', 0, 0, 0),
(x'64608A8C80654249917801C5E430A701', x'4F9D5B58E83E4B4CA7966BD5639F5B77', '2017-07-20 11:00:51', '2017-07-20 19:32:26', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', x'D4CA377BE429B94982C7A5C6614031F2', 0, 0, 0),
(x'4166CF9BF653494C9CC1DA5836629969', x'545A7136C5749C4FA52C849D92E58DA9', '2017-07-20 11:00:35', '2017-07-20 19:32:26', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', x'D4CA377BE429B94982C7A5C6614031F2', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'672112CF0E9D6046A7955324482F0E87', '2014-07-07 13:07:20', '2017-07-20 19:32:26', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'FC29BB6FB510764F9B1E373CB194C5C7', -1, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'6866D806E0E49A40B806A8F39FC765D4', '2014-06-22 20:09:41', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3A633BDBD2285C498DC472D02008F594', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'699CF4E72644EB4C876711132C96EB1F', '2014-06-22 20:09:41', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'6AEB244EA5E24A40ABA30BC26B15AD72', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'6A38B859DDF5D547817A726B71A8CC58', '2014-07-07 11:51:08', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'6AEB244EA5E24A40ABA30BC26B15AD72', -1, -1, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'74802122CFD749488048E2CCC28F7A8E', '2014-07-09 22:40:51', '2017-07-20 19:32:26', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'67C1604FAC23984399FB44D7E1F22F3F', 0, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'76BE24365566664894126D91B7218385', '2017-06-06 20:54:25', '2017-07-20 19:32:26', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'0380D97D843AD941962B0B56A922B592', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'77A6B86B1DB0324B8DF9FD74D9F370C9', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'E17FA681A502544185E27D08E05DCFA1', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'79E1D807D72A474B9092A24079A93980', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3290897F4F10C9478E589B6FCABBFE86', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'80A1681895656F41B06F1A7F601E89CF', '2014-07-07 13:07:20', '2017-07-20 19:32:27', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'E048F724A05E5A42B4F4DC8C8D70D1CB', -1, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'8236D56CF2B87C4C8AC69731922D0D0A', '2014-06-22 20:09:41', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4295B643673AC84990AA25E8F54D1C42', 0, 0, 0),
(x'64608A8C80654249917801C5E430A701', x'84DCB941A4D82F4E9A91E7F83C3C3776', '2017-06-06 20:55:24', '2017-07-20 19:32:27', NULL, NULL, NULL, x'1778EF018A784C4486C0DA720FFBA8E0', x'042F2F6253957440949378453BF13F67', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'864C6132060C574FA5F50E4DEE7493D1', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'76E1401971B4464097994A2A2997B236', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'8C493F9E9CB72342BD01C07EE574BBC8', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'6AEB244EA5E24A40ABA30BC26B15AD72', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'8E154CC4AB03AE45B435EBCAD77E2085', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'02358FCF910457458BE09862909B9166', -1, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'916573B81A994243AD2362F381FB8FEC', '2017-06-06 20:54:25', '2017-07-20 19:32:27', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'E991DBC9484CBA428C1CCDF42B566447', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'94DB251487CD234FBD2F80D553EBF9D5', '2014-07-07 11:51:08', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'FF8DFA2330A2194EAD8CB0821A628D65', -1, -1, 0),
(x'4166CF9BF653494C9CC1DA5836629969', x'95489C35183945408B16DF6C37F302AD', '2017-07-20 11:12:00', '2017-07-20 19:32:27', NULL, NULL, NULL, x'1778EF018A784C4486C0DA720FFBA8E0', x'15E80C3856BBCF4CB210938CF326EB4D', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'992CD2F2FC4C8041885F02558700670E', '2014-07-07 14:25:40', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'CBF8EDF2C2C4B147B14AA7FF5287AE2B', 0, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'9B2AB075F6C627429F19D84C4DA603E1', '2017-07-20 11:03:46', '2017-07-20 19:32:27', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'E2C38C744074D347A2A4218D684EB7B0', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'9C455B5118BB19439B0BEDC52B305577', '2017-06-06 21:03:24', '2017-07-20 19:32:27', NULL, NULL, NULL, x'E7C6F31042573147B94C647263E4E304', x'2BCA37164AAD154EB41D5C41300AE020', -1, -1, 1),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'A1FC9550C6348A43B2D4A72824617C88', '2014-06-22 20:09:41', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'FF8DFA2330A2194EAD8CB0821A628D65', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'A22DE2DC60AF6E40815003E00DC93A33', '2014-07-09 22:40:51', '2017-07-20 19:32:27', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'0E8E7C6A72A4114794F908663E5CB2E7', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'A2F399B11C380F4490DFC2CB46399686', '2014-07-07 14:25:40', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'76E1401971B4464097994A2A2997B236', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'A5F45F085A94074FB08CFD5AFFA3BE96', '2014-07-07 14:25:40', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'0E8E7C6A72A4114794F908663E5CB2E7', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'AAC6BC93F3E45C4ABC2FE5C1A3747B4F', '2014-07-09 22:40:51', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3A633BDBD2285C498DC472D02008F594', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'B0010F425C50FD4E80DF01DA6A61CA3F', '2014-07-07 13:07:20', '2017-07-20 19:32:28', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'4BECAF32481BAA4A8A2D388521183919', -1, 0, 0),
(x'4166CF9BF653494C9CC1DA5836629969', x'B20D6112567BB04FAD24064CC5E8CDAF', '2017-08-30 15:25:53', '2017-08-30 15:25:53', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', x'C41ABB2FF73C974CAB36ABA8BEA98ADC', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'B386E4F6477C4144889A0E225A66E3B1', '2014-06-22 20:09:41', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'A13307A850F1584281DB91330250BFF1', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'B41655EBC0EF3D49B61BEB75B231A86A', '2014-06-22 20:09:41', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'E17FA681A502544185E27D08E05DCFA1', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'B47BCC091D1DD544BB26C486567F7F33', '2014-07-09 22:40:51', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4295B643673AC84990AA25E8F54D1C42', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'B6ABD71EFF797D418C1A7ED49701901C', '2014-07-09 22:40:51', '2017-07-20 19:32:28', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4A1CA8016B13F3409336A7496F00309E', -1, 0, 0),
(x'64608A8C80654249917801C5E430A701', x'BB194E20EEB5284EA2272C5E706EABE0', '2017-07-20 11:12:06', '2017-07-20 19:32:28', NULL, NULL, NULL, x'1778EF018A784C4486C0DA720FFBA8E0', x'15E80C3856BBCF4CB210938CF326EB4D', 0, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'C006BFB135580B458EED92781E3DEAF7', '2017-07-20 11:03:46', '2017-07-20 19:32:28', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'EDFCAC684AD33840AF8252B22B1A493E', 0, 0, 0),
(x'4166CF9BF653494C9CC1DA5836629969', x'C147DD3E9472E44C8BEF53AB72944414', '2017-08-30 15:25:53', '2017-08-30 15:25:53', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', x'2853A67C5AD81A43AF1BA7C643AEBB16', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'C33662B5B7892A418917BE686002BA5C', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'CBF8EDF2C2C4B147B14AA7FF5287AE2B', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'C6C841FC4F48234389185745EC6BA445', '2014-06-16 12:12:25', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'E17FA681A502544185E27D08E05DCFA1', -1, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'C81583C79092C34FA7EDF572F631761E', '2017-06-06 20:54:25', '2017-07-20 19:32:29', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'8AB2D1312FE90D46ABEE655BF9605BED', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'C964DE061683EA48AF3C32C3E3154C74', '2014-07-07 14:25:43', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'0E8E7C6A72A4114794F908663E5CB2E7', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'CC60CD6E95A0CB409CEBAEB1B3BAE758', '2014-06-16 12:12:25', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'A13307A850F1584281DB91330250BFF1', -1, 0, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'D108B33B750ED041A6DE1B24DF0543B5', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'E282394EEEF79940A821172489EFC0FA', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'D5CB154976A10144BD5F40D2DC1A4767', '2014-07-07 14:25:02', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'A17B5EDDA7D7D640B0230FAF705FE438', 0, 0, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'D5EF1ADC4CDE7045BB26A20F2DFA73EE', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'27848A0D6725B0469EDF3313C969B9DB', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'D63DBE17009BC8459B139513401AB783', '2014-07-07 14:25:43', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'76E1401971B4464097994A2A2997B236', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'DA80FAA72921D8428E91038054EF4660', '2014-07-07 14:32:02', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'0159899342B3614BB087CC3C552979FD', 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'DB102884837A5F46B50B62AB42F8CB6B', '2014-06-22 20:09:41', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4A1CA8016B13F3409336A7496F00309E', 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'DBB1A082645EC5448BE976B63FDF1D7F', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'194ADE02C83C344A81EC7D41927986C2', -1, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'DE013691DAD5B34DA67595FFBD85E437', '2014-07-07 13:07:22', '2017-07-20 19:32:29', NULL, NULL, NULL, x'E7C6F31042573147B94C647263E4E304', x'2BCA37164AAD154EB41D5C41300AE020', -1, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'E64A9CEA4F920748B99B29383EAE51C7', '2017-06-06 20:54:25', '2017-07-20 19:32:29', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'7D2662569EDA704C8C5E4DCD434325FC', -1, 0, 0),
(x'278C6A11432C7741A0F68CC2857D0A47', x'EA538CE4CF58C64E96483436E7D103A0', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'140DF587AF96624D9A3F9C193146E507', 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'ED1A0E39BEC2874B954D32A64C120873', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'F3A56BA1DEB1DE49A74B225EB995D071', -1, 0, 0),
(x'8CFE62593DBF7C4183F8DC53040FB714', x'EFADDE3CE3AA3542AB8F175C5E186116', '2014-07-09 22:40:51', '2017-07-20 19:32:29', NULL, NULL, NULL, x'1051A02ED67D914BB774AF6ECBC42108', x'4F64C1DD0185354997EF02BE087C1A8C', -1, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'F115B7AE3D723449A2D4A67E856FF50E', '2014-07-07 11:51:08', '2017-07-20 19:32:30', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3290897F4F10C9478E589B6FCABBFE86', -1, -1, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'F1337337399D804EB7EFFFE2D61EB905', '2014-07-07 13:07:20', '2017-07-20 19:32:30', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', x'D6D5BFCF64D63D4EAEECD9BA51167E33', -1, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'F4B1416011615849A034A018CA4E8544', '2017-07-20 11:03:46', '2017-07-20 19:32:30', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', x'FE1704683D422141B88D97861B0C762C', 0, 0, 0),
(x'4166CF9BF653494C9CC1DA5836629969', x'F505CEBFB7CE4448BF116CD00D3D99D3', '2017-08-30 15:25:53', '2017-08-30 15:25:53', NULL, NULL, NULL, x'398B4CD264C8DF4B8015F9973D34C20D', x'63C32B86842F5A4193D8309C63EB5068', 0, 0, 0),
(x'A176FCF0D228684BAB7BD1F7DE47D9AB', x'F9A40147DEE78B47AD745C8CFE287E38', '2014-06-16 12:12:25', '2017-07-20 19:32:30', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', x'F3A56BA1DEB1DE49A74B225EB995D071', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'FA165FAEDE9F3744AC84017860169EA8', '2014-07-09 22:40:51', '2017-07-20 19:32:30', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'0C1072D2399B2349A194E72A17C853C9', -1, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'FB44B91D63A8E94AAACD3004B6897856', '2014-07-07 14:32:02', '2017-07-20 19:32:30', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', x'67C1604FAC23984399FB44D7E1F22F3F', 0, 0, 0);

-- 
-- Вывод данных для таблицы gencontrols
--
INSERT INTO gencontrols VALUES
(x'3014B534C6BD81488A6E795010553E24', x'47C2D62605A3BF4C8EBEB1ED841C7639', '2012-01-20 14:40:23', '2017-07-20 19:30:23', NULL, NULL, NULL, 'GridEX20', NULL, 0, 0);

-- 
-- Вывод данных для таблицы genmanualcode
--
INSERT INTO genmanualcode VALUES
(x'25AD0CC1ED9518459177E29824F01E47', x'0C660F7FF6D5FE44AFF366FA89034FF5', '2012-01-20 14:40:23', '2017-07-20 19:30:20', NULL, NULL, NULL, 'Login', 'Login', 'create or replace procedure Login\r\n  \r\n(aTHE_SESSION out  CHAR/* ????????????? ????? ?????? */  \r\n  \r\n,aPWD VARCHAR2/* ?????? */  \r\n  \r\n,aUSR VARCHAR2/* ??? ???????????? */  \r\n  \r\n)  \r\n as   \r\n  \r\naID char(38);   \r\naUSERSID char(38);   \r\nasysid char(38);   \r\nSysLogid char(38); \r\nexistsCnt integer;   \r\nbegin   \r\nasysid := null;   \r\nselect instanceid into asysid from instance where objtype = ''MTZSYSTEM'';   \r\nathe_session:=null  ;   \r\nif aPWD is null   \r\nthen   \r\n select count(*) into existsCnt from users where Login=ausr and Password is null;   \r\n  if existsCNt =1   \r\n  then   \r\n    select USERSID into ausersid from users where Login=ausr and Password is null;   \r\n    select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n  else \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_FAILED'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n  End if;   \r\nelse   \r\n   \r\n  select count(*) into existsCnt from users where Login=ausr and Password =aPWD;   \r\n  if existsCNt =1   \r\n  then   \r\n   select USERSID into ausersid from users where Login=ausr and Password =aPWD;   \r\n   select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null);  \r\n      \r\n  else   \r\n    select count(*) into existsCnt from users where DomaiName=ausr and aPWD=''INTEGRATED'';   \r\n    if existsCNt =1   \r\n    then   \r\n     select USERSID into ausersid from users where DomaiName =ausr ;   \r\n     select  mtz.newid() into aID from sys.dual;   \r\n       if asysid is null then   \r\n        insert into the_session(the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(aid,sysdate,ausersid,0,sysdate);   \r\n   \r\n       else   \r\n        insert into the_session(instanceid,the_sessionid,lastaccess,usersid,closed,startAt)   \r\n        values(asysid,aid,sysdate,ausersid,0,sysdate);   \r\n       end if;   \r\n     athe_session:=aid;   \r\n      \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_SUCCESS'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n    else \r\n     SysLogid:=MTZ.NEWID(); \r\n     MTZSystem.SysLog_SAVE( aTheSession=>aid,aCURSESSION=>aid, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGIN_FAILED'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n    End if;   \r\n  end if;   \r\nend if; -- password is null   \r\nend;   \r\n  '),
(x'25AD0CC1ED9518459177E29824F01E47', x'2248998532DBB944B94F8C6666DFFAB7', '2012-01-20 14:40:23', '2017-07-20 19:30:20', NULL, NULL, NULL, 'NEWID', 'NEWID', 'create or replace function NEWID return varchar2 as\r\n  Result varchar2(40);\r\n  lguid raw(128);\r\n  sTempString varchar2(40);\r\nbegin\r\n  \r\n  \r\n  \r\n  select sys_guid() into lguid from dual;\r\n  \r\n  sTempString:=to_char(lguid);\r\n \r\n  Result:=''{'' || \r\n              Substr(sTempString, 1, 8) \r\n              || ''-'' ||\r\n              Substr(sTempString, 9, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 13, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 17, 4) \r\n              || ''-'' ||\r\n              Substr(sTempString, 21, 12) \r\n              || ''}'';\r\n  return(Result);\r\nend NEWID;'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'47B4A592397A5947AA047B297879E4E9', '2012-01-20 14:40:23', '2017-07-20 19:30:21', NULL, NULL, NULL, '???????', NULL, 'CREATE  INDEX Syslog_times ON SysLog(ChangeStamp) \r\n$$\r\n\r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$\r\n\r\n \r\n'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'494A11821D40DB449D4CCBB1F8A2EA97', '2012-01-20 14:40:23', '2017-07-20 19:30:21', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'drop view if exists V_RoleEntryPoints \r\n$$\r\ncreate view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'4B2610ED3817FA4DA02F159D28E6D6B6', '2012-01-20 14:40:23', '2017-07-20 19:30:21', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create or replace  view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt \r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.LogStructID = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$'),
(x'25AD0CC1ED9518459177E29824F01E47', x'5679CCB9E2D794468EE8DE68692E4D18', '2012-01-20 14:40:23', '2017-07-20 19:30:21', NULL, NULL, NULL, 'AutoCloseSession-job-AdminUnlockAll', 'JOB_FIX', 'create or replace procedure AutoCloseSession\r\n \r\n as  \r\n \r\nasid char(38); \r\nbegin \r\ndeclare cursor closer is \r\nselect the_sessionid id from the_session where lastaccess < (sysdate()-0.008) and closed =0; \r\ncloser_rec  closer%ROWTYPE; \r\nbegin \r\n --open closer; \r\n for closer_rec in closer loop \r\n   Logout (closer_rec.id); \r\n end loop; \r\n--close closer; \r\nend; \r\nend; \r\n/\r\ndeclare\r\nnum_new_job_no number;\r\nbegin\r\nselect JOB into num_new_job_no from USER_JOBS where What=''begin MTZ.AutoCloseSession; end;'';\r\nDBMS_JOB.REMOVE(num_new_job_no);\r\ncommit;\r\nend;\r\n/\r\ndeclare\r\nnum_new_job_no number;\r\nbegin\r\nsys.dbms_job.submit(job => num_new_job_no,\r\nwhat => ''begin MTZ.AutoCloseSession; end;'',\r\nnext_date => sysdate + (1/1000),\r\ninterval => ''sysdate+30/1440'');\r\ncommit;\r\nexception\r\nwhen others then\r\ndbms_output.put_line(sqlcode||sqlerrm);\r\nend;\r\n/\r\ncreate or replace procedure AdminUnlockAll\r\n \r\n as  \r\n \r\nbegin \r\nupdate instance set LockUserID = null, LockSessionID=null  ;\r\nend; \r\n/'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'6612E1DCCB58714196AFF0D47BA22687', '2012-01-20 14:40:23', '2017-07-20 19:30:21', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'if exists (select * from dbo.sysobjects where id = object_id(N''[dbo].[V_SYSVIEW]'') and OBJECTPROPERTY(id, N''IsView'') = 1)\r\ndrop view [dbo].[vRPTCOST]\r\n$$\r\n\r\ncreate view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid'),
(x'25AD0CC1ED9518459177E29824F01E47', x'7AEEF78FA76F554987E7B109426C85C7', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create or replace view V_LOG as \r\n\r\nselect syslog.syslogid\r\n\r\n,syslog.changestamp\r\n\r\n,the_session.StartAt\r\n\r\n,the_session.Closed\r\n\r\n,syslog.the_Resource\r\n\r\n,syslog.LogStructID\r\n\r\n,syslog.LogInstanceID\r\n\r\n,syslog.VERB\r\n\r\n,NVL(users.login,the_Resource || ''|'' || NVL(logstructid,''null'')) login\r\n\r\n,users.Family\r\n\r\n,users.Name\r\n\r\n,users.Surname\r\n\r\n,instance.name instname\r\n\r\n,instance.objtype\r\n\r\n,part.caption\r\n\r\n,objecttype.the_comment\r\n\r\n from  syslog\r\n\r\nleft join the_session on syslog.thesession=the_session.the_sessionid\r\n\r\nleft join users on the_session.usersid=users.usersid\r\n\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\n\r\nleft join part on syslog.logstructid = part.name\r\n\r\nleft join objecttype on instance.objtype =objecttype.name'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'7E2905974C43F542A5D651E0C61EF18C', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'Indexes', NULL, 'CREATE  INDEX Syslog_times ON SysLog(ChangeStamp) \r\n$$\r\n\r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'8C0BE38F3E8C53488586BAA367A924CD', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'create or replace view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n\r\n$$'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'9F67088E79FB68408D8397FF89933C41', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_ROLEENTRY', 'V_ROLEENTRY', 'create view V_RoleEntryPoints as\r\nselect \r\nRoles_WP.instanceid ROLEID ,\r\nRoles_WP.WP ARMID,\r\nRoles_ACT.Accesible,\r\nEntrypoints.Name,\r\nEntrypoints.Caption\r\nfrom ROLES_WP \r\njoin ROLES_ACT on ROLES_WP.ROLES_WPID=ROLES_ACT.parentstructrowid\r\njoin entrypoints on \r\nROLES_ACT.entrypoints=entrypoints.entrypointsid\r\n$$'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'A6BFDCE2D29D734295FA35361B188448', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, '???????', NULL, 'if exists (select * from dbo.sysindexes where name = N''Syslog_times'' and id = object_id(N''[dbo].[SysLog]''))\r\ndrop index [dbo].[SysLog].[Syslog_times]\r\n$$\r\n\r\n CREATE  INDEX [Syslog_times] ON [dbo].[SysLog]([ChangeStamp]) WITH  FILLFACTOR = 90\r\n$$\r\n\r\n\r\n\r\n \r\ncreate index instance_lockuser on instance(lockuserid)\r\n\r\n$$\r\n\r\ncreate index instance_locksession on instance(locksessionid)\r\n\r\n$$\r\n'),
(x'582C650C52A98F4E8CB0D266431CD24B', x'AEFA7B4E215A28488C479AD56068E1C5', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'create view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt\r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.logstructid = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$'),
(x'9DD37D9D437AC34EAA101FBCED75F3CB', x'B7C6E1294D28474EA9256438FFA32979', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'create or replace view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid\r\n\r\n\r\n$$'),
(x'C4CF9CB244736A448F14824C92DC2D30', x'DD847A996E9C254A863E0CA4C32248D1', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'V_SYSLOG', 'V_SYSLOG', 'drop view if exists V_SYSLOG\r\n$$\r\n\r\ncreate view V_SYSLOG as\r\nselect \r\nsyslog.syslogid,syslog.changestamp,syslog.the_Resource,syslog.LogStructID,syslog.VERB,users.login,users.Family,users.Name,users.Surname,syslog.LogInstanceID \r\nfrom  syslog \r\njoin the_session on syslog.thesession=the_session.the_sessionid \r\njoin users on the_session.usersid=users.usersid'),
(x'25AD0CC1ED9518459177E29824F01E47', x'E239BB14F1876348A89F0A31EC0F2903', '2012-01-20 14:40:23', '2017-07-20 19:30:22', NULL, NULL, NULL, 'Logout', 'Logout', 'create or replace procedure Logout\r\n  \r\n(aCURSESSION CHAR/**/  \r\n  \r\n)  \r\n as   \r\n  \r\nexistsCnt integer;  \r\nSysLogid char(38);  \r\nasysid char(38);  \r\nausr char(38); \r\nbegin  \r\nselect count(*) into existsCnt from the_session where the_sessionid=acursession and closed=0;  \r\nif existsCnt >0 then  \r\n   begin  \r\n    select usersid into ausr from the_session where the_sessionid=acursession;\r\n    select login into ausr from users where usersid=ausr;\r\n    declare cursor dl  is  \r\n    select ''update ''|| thevalue || '' set LockSessionID =null where LockSessionID=:1'' str from sysoptions where optiontype=''MAP'' and theValue not like ''V[_]%'';  \r\n    dl_rec dl%rowtype;  \r\n    begin  \r\n    --open dl;  \r\n    for dl_rec in dl loop  \r\n\t      execute immediate dl_rec.str using acursession;  \r\n    end loop;  \r\n    --close dl;  \r\n\r\n    select instanceid into asysid from instance where objtype = ''MTZSYSTEM''; \r\n    \r\n    SysLogid:=MTZ.NEWID(); \r\n    MTZSystem.SysLog_SAVE( aTheSession=>acursession,aCURSESSION=>acursession, aInstanceID=>asysid, aSysLogid=>SysLogid, aLogStructID =>ausr, \r\n     aVERB=>''LOGOUT'', aThe_Resource=>ausr,aLogInstanceID=>null); \r\n\r\n\r\n    update INSTANCE set LockSessionID =null where LockSessionID=acursession ;  \r\n    update the_session set closed=1,closedAt=sysdate(), changeStamp=sysdate() where     the_sessionid=acursession;  \r\n \r\n    end;  \r\n  end;    \r\n End if;  \r\nend;  '),
(x'C4CF9CB244736A448F14824C92DC2D30', x'EDF8C6C8AE970742893BA6B933CE301D', '2012-01-20 14:40:23', '2017-07-20 19:30:23', NULL, NULL, NULL, 'V_LOG', 'V_LOG', 'drop view if exists V_LOG\r\n$$\r\ncreate view V_LOG as \r\nselect syslog.syslogid\r\n,syslog.changestamp\r\n,the_session.StartAt\r\n,the_session.Closed\r\n,syslog.the_Resource\r\n,syslog.LogStructID\r\n,syslog.LogInstanceID\r\n,syslog.VERB\r\n,users.login\r\n,users.Family\r\n,users.Name\r\n,users.Surname\r\n,instance.name instname\r\n,instance.objtype\r\n,part.caption\r\n,objecttype.the_comment\r\n from  syslog\r\njoin the_session on syslog.thesession=the_session.the_sessionid\r\njoin users on the_session.usersid=users.usersid\r\nleft join instance on syslog.loginstanceid = instance.instanceid\r\nleft join part on syslog.logstructid = part.name\r\nleft join objecttype on instance.objtype =objecttype.name\r\n\r\n$$');

-- 
-- Вывод данных для таблицы genreference
--
INSERT INTO genreference VALUES
(x'3014B534C6BD81488A6E795010553E24', x'2C7DEAC32DDD7341AC19250476364CBF', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MTZManager', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'486373152B9A18499FB169ED86592585', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MTZUtil', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'676608A13E79704583B8E2BCBDA3D630', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MSXML2', NULL, 0, 0),
(x'3014B534C6BD81488A6E795010553E24', x'69B93396BD073248A9CDB95F0A875C64', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MTZUtil', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'6BA60D1FCDBA6A44B2545DCE28686AEE', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MTZManager', NULL, 0, 0),
(x'3014B534C6BD81488A6E795010553E24', x'B92047D23095F348A164A0715933D116', '2012-01-20 14:40:23', '2017-07-20 19:30:19', NULL, NULL, NULL, 'MTZSession', NULL, 0, 0),
(x'057F5FFC77FF8442A87278590FC3D0DB', x'DC9F2BC6936DEA45B4D0DB765B9B0B77', '2012-01-20 14:40:23', '2017-07-20 19:30:20', NULL, NULL, NULL, 'MTZSession', NULL, 0, 0);

-- 
-- Вывод данных для таблицы methodrestriction
--
-- Таблица areal_cli.methodrestriction не содержит данных

-- 
-- Вывод данных для таблицы nextstate
--
-- Таблица areal_cli.nextstate не содержит данных

-- 
-- Вывод данных для таблицы parameters
--
INSERT INTO parameters VALUES
(x'630488E98C381146811E48FA4232909F', x'004A03039F104543B551CBA8652F270E', '2012-01-20 14:40:23', '2017-07-20 19:32:04', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'02493C2C18C49746B91EB0116461BD08', '2012-01-20 14:40:22', '2017-07-20 19:32:05', NULL, NULL, NULL, 2, 'result', '?????????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'15DD78CFDC707D44B17B2379B865296E', x'02DAFA45BB29E24E8C8BAF6D6F3B44F0', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 1, 'ID', '?????????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'0717A6A963AFAE43BA31E72C5C2B8D69', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 4, 'access', '??????????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'0A67E45088FDBC44A2E0CE84E1FE435F', '2012-01-20 14:40:22', '2017-07-20 19:32:08', NULL, NULL, NULL, 4, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'10BC1B77AC749443B32BBF4F9D9A1B68', x'0D3A750CFD200B44A227762F44FC075D', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 1, 'CURSESSION', '??????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'EF928D932409414A873D109F2B7E4A8E', x'0D7EB5C67FDE3B4887D1358A138BB598', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'0E54C02EF048BB438570734759AF3E8A', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 1, 'RowQueryID', '????????????? ??????? ?????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'0F46CF9496319442B462E7782C5919C2', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'914F746119B06C428DAEC716FFC3A359', x'12B08565EEBBFD4CA898EFD27F6DC387', '2012-01-20 14:40:22', '2017-07-20 19:32:08', NULL, NULL, NULL, 2, 'OK', '???????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'1383F27A22005A46A4D81FC2A4DD5E5C', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'14A28D77A87B81418D307F61DFC00C7A', '2012-01-20 14:40:23', '2017-07-20 19:32:08', NULL, NULL, NULL, 2, 'OutputQueryID', '????????????? ?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'17E5F2142E98ED4CA4BC2060F89A0F2D', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'THE_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'FCBF34CB1A194142B6510EB857957106', x'1AD3BCC6EB35EC4587D7AB514B3DBB9C', '2012-01-20 14:40:22', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'DesPartName', 'DesPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'1C2EBBBC305A0B40A38AE4F1B42B502F', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'1D52C71C0DF5704A94256F5C0F6A29EB', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'RowQueryID', '????????????? ??????? ?????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'1F53DC1DFFFFA8429947D3B5B31E9246', '2012-01-20 14:40:22', '2017-07-20 19:32:09', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'23360A045293CA408BC93E0CF1D0F657', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'the_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'233E02F0139AE44EA9C89FC53EEF866B', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'265352B60462114080A7BE08269CB2AA', '2012-01-20 14:40:22', '2017-07-20 19:32:09', NULL, NULL, NULL, 2, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'15DD78CFDC707D44B17B2379B865296E', x'29C1044B089F5446AA9155CA6FF73153', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 2, 'StartMode', '????? ???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 10, 0, 0, 0, NULL, NULL),
(x'32117F9E5091A3449F0004515E1F52E3', x'2B242FBE582BC24DBA7C2538789C32D1', '2012-01-20 14:40:22', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'07ACAAA83D6A794A9B138A1F86268619', x'2C5E075515239B4A8B65BB066E55CC92', '2012-01-20 14:40:23', '2017-07-20 19:32:09', NULL, NULL, NULL, 1, 'CURSESSION', '??????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'31B3832BFF994A4C97F664E1D72B5987', '2012-01-20 14:40:22', '2017-07-20 19:32:09', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'369E7F6DE3699645B7AAD37BE72B49FF', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'32117F9E5091A3449F0004515E1F52E3', x'3ACF44B41D8380438898C10CB63E69C4', '2012-01-20 14:40:22', '2017-07-20 19:32:10', NULL, NULL, NULL, 2, 'OK', '???????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'3C04E559AB21FA4AAAB02D103BF5496B', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 3, 'the_Table', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'3C21D1129F6E934F84F2F044D88A8BAB', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 1, 'the_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'3D1D37E2B2D7994CBF582AB9E5BD9806', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'189BA291EFAC4F4EAAD06E822C0EF813', x'3F1B751283D8B144A89D8BD19369D251', '2012-01-20 14:40:22', '2017-07-20 19:32:10', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'3FA69DE4AB8D2E4AA5B068957E67E936', '2012-01-20 14:40:22', '2017-07-20 19:32:10', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'41E0C88E8BDBC148B9983BC1E0368261', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 2, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'431E464F1792554096859869D7D45391', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'472C899664808C488606A848C852CEE3', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'4732B581F47ED442A214877D91FE6CFA', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'47709B1FF1466A48A7DA75FB3AEA94D7', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'47951E030AB4EB4A8C7CA210EC652B19', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'486728724AB16B4BA8B0EA8A33F23541', '2012-01-20 14:40:22', '2017-07-20 19:32:10', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'49501BDE5C1A7E42BE54835C0371635B', '2012-01-20 14:40:22', '2017-07-20 19:32:10', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'630488E98C381146811E48FA4232909F', x'498B7985F78FF44A849E191D499E45B7', '2012-01-20 14:40:23', '2017-07-20 19:32:10', NULL, NULL, NULL, 1, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'4AB7FBBD6E690A42A4DBF61D25FA2E54', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'4CBE8379BE56ED4093B30F7974E89057', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'4E5E23A87C13184CB5C938CFF670C6CD', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'F1217C6329D52B47A1AFCA5D78122583', x'514447FCEF51064CB6D69BF72A7700CD', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 1, 'ID', '?????????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'514619735DF5A24E9553494C66BBCA62', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 4, 'CURSESSION', '?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'55DFB972B8A9BB4D8635828C912D45E2', '2012-01-20 14:40:22', '2017-07-20 19:32:11', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'56A16F933FB3494AB35C3CC68B44FDDF', '2012-01-20 14:40:22', '2017-07-20 19:32:11', NULL, NULL, NULL, 1, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'4A81487A52B1D346956DD642396D6624', x'59ABB73807441748896BF96742AAAC10', '2012-01-20 14:40:23', '2017-07-20 19:32:11', NULL, NULL, NULL, 1, 'Name', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'5A6582BB730E4B45B35DEB86500AA807', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'5C00D85D610AC14985F000B340F61D96', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'92E4E9C5DE0A734D8532987765502B7F', x'61856491860E874CA3F14000AA6100BF', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 1, 'FolderID', '????????????? ?????', x'9DF4659492B4B34D8052290BEC7E9E2B', 0, 0, 0, 1, x'4A358BE16D8643408226B70CED4E25F8', NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'6402A7E88DAD1543BA67F4604C4E4928', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'630488E98C381146811E48FA4232909F', x'677716F06837EB478D3FF1B2AC41BC8C', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'69088C8C339EEC4DBF9C96C90FC429DF', '2012-01-20 14:40:22', '2017-07-20 19:32:12', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'6980FFA5BB384649A08E97ED2AB33046', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 4, 'CURSESSION', '?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0D4FFB33823D354D8740267028D7C9E6', x'69C0823176EFE24F85BCA6FB285A7D32', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'19FCDE9AB6945C40A4FE85EA282B2607', x'6A03F8B76948FF4DB65C1589A02417A0', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 2, 'OutputQueryID', '????????????? ?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'6BE8F3B707A4B34F8C6370D0C46D2DEB', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 2, 'OutputQueryID', '????????????? ?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'DD7C81607BDA8844B4641A1A0F672F09', x'6CC257488A3A534482386117D33622DA', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'6E92EE8D23C1674C85D5C79E7FD20B69', '2012-01-20 14:40:23', '2017-07-20 19:32:12', NULL, NULL, NULL, 4, 'CURSESSION', '?????? ???????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'6F05B3A67DC1FA46B1EE13FEF206AD92', '2012-01-20 14:40:22', '2017-07-20 19:32:13', NULL, NULL, NULL, 2, 'result', '?????????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'75225D914C86CD418ED2B73BF897E82E', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 1, 'THE_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'75CEB40D4A851341BA6923DF8E4CD7BE', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'7DF1B10789D240408763B495AE7E912C', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'807DDBFBE0FEB84C8CB4BB83F7646206', '2012-01-20 14:40:22', '2017-07-20 19:32:13', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'80D7E8CE16523B49AFC7E517200F4EBA', '2012-01-20 14:40:22', '2017-07-20 19:32:13', NULL, NULL, NULL, 4, 'OwnerPartName', '??????- ????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'8ECAF9BA4ED33842B39362368309E916', x'821AEFC6FCBC3C4CBA93013E1862AACF', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'207A1BE2EAE05C40979EADB6E8B57039', x'82A6194A0686134A8A9BAC218C97EBB2', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 1, 'ServerTime', '??????? ?????', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'256C582747265940A19A68269009436B', x'83EF19FE37E7054EAA81437FB242BE6B', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'8401F9DCDB91BD4EBD7BF742C359597A', '2012-01-20 14:40:22', '2017-07-20 19:32:13', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'84F06FB3D9CDF7448FCD1611A763C789', '2012-01-20 14:40:23', '2017-07-20 19:32:13', NULL, NULL, NULL, 3, 'verb', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'876EB1FDFF137245A04D454D072F2879', '2012-01-20 14:40:22', '2017-07-20 19:32:13', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'879FF254EBEAB6409824490608127300', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'88B91AC502DBEF41ACAE1A0E9DEA5234', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 4, 'access', '??????????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'8A868F7F9B94904FA19DCDACD062BB4E', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 1, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'8AEC10606BB4744C97AA7472F37C0E90', '2012-01-20 14:40:22', '2017-07-20 19:32:14', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'8B93EF9511049140AD3501229C1DFFBA', '2012-01-20 14:40:22', '2017-07-20 19:32:14', NULL, NULL, NULL, 5, 'OwnerRowID', '?????? - ????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'3762A089D0A8A141B66BD4A7DF0209D5', x'8BCB39EB4FBFE94EB3A1C5B1DEAA7ED0', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'8FDD6BF323A63C409153B5D2332F97D3', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'930D5B883BCD334E9AE0483E43081A48', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 4, 'CURSESSION', 'Session', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'F1217C6329D52B47A1AFCA5D78122583', x'94BFF57E90BF4D4DA05AFB19E7F48B20', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 2, 'StartMode', '????? ???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 10, 0, 0, 0, NULL, NULL),
(x'423DD52A283D05448914825B4C14D188', x'956C48610673F24A886408BA840185F4', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'961F588B97D86B4D8D050D5172FF07C8', '2012-01-20 14:40:22', '2017-07-20 19:32:14', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'997A7E40F4D8C849BEEDC83D97967574', '2012-01-20 14:40:23', '2017-07-20 19:32:14', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'9AB751F16E6F2B47AC915E6082F53A59', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'9D0972F11E1D1C4696E6DF27795B8D72', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 3, 'the_Table', 'Part Table Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'1030074F5485B54680BED5156D7B5ED0', x'9D1C418BA4ACD94E926E3A0683F7B12D', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 1, 'Name', 'Name', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'0602EBA7393EE44B9BD5EC16763ECEAE', x'9E0D59BEB5FB8D4F8C39035F7872F52D', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'9FA4509E7C2B634EBCCC66B942D9A34D', '2012-01-20 14:40:22', '2017-07-20 19:32:15', NULL, NULL, NULL, 4, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'A02DAE269F05574089BEF959616F1A64', '2012-01-20 14:40:22', '2017-07-20 19:32:15', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'A1AF5C3D97F6D84C9A84B3113BE3E64C', '2012-01-20 14:40:22', '2017-07-20 19:32:15', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D31836A1FD1D1D4BA882A6D9590000A2', x'A4F4DFED3F4C3B4A9CD28BF497B24F9E', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 1, 'InstanceID', 'Object', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, -1, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'A5E70A015929164EB75CAA707BA02D32', '2012-01-20 14:40:23', '2017-07-20 19:32:15', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'A5F9752DCA07E7459BC3A098409AB213', '2012-01-20 14:40:22', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'result', '?????????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'189BA291EFAC4F4EAAD06E822C0EF813', x'A6310E7C8EC1FD459DFDBCB5A1F9FE7F', '2012-01-20 14:40:22', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'OK', '???????', x'E0280E0D19D66A49BF995F9F28321C74', 0, 0, -1, 0, NULL, NULL),
(x'0C77834331E693419C9F1B176AFFF6B2', x'A6B9DF3891A10B4487197C47D986BF3C', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 1, 'ID', '????????????? ?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22D884EA98E5D54E870523EE2B34645F', x'A6FE7A6A6D32BA4E9732A6F2C84BC45E', '2012-01-20 14:40:22', '2017-07-20 19:32:16', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2F8CDB10B3AE0D49871C7444ACF38B24', x'AB918A29EDFF7A47A4875BAF2BF6B366', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'AD4A2B895D016C41BB479D24AE85A4F7', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'AF0978FD4334B14AB0A414816AB7FE17', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'the_resource', '????????????? ????? ????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'914F746119B06C428DAEC716FFC3A359', x'B13F4B3C642B0249875207F5A85AC862', '2012-01-20 14:40:22', '2017-07-20 19:32:16', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'B16C75601ABB7047BE7ED5DB547493B3', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'the_resource', '????????????? ????? ????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'210A9E74BA5959498678F52843AA8058', x'B3EC599E57649F4C937197C4B67170BC', '2012-01-20 14:40:23', '2017-07-20 19:32:16', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'8CC641CD63FA824D93489432CE3B4F91', x'B40681342532354886232B80195181E0', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 3, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'B4940A01B4CFD64C939906C3396159D2', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'CURSESSION', '??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'B5450655D3B54B428AA6F705F3594E1D', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 3, 'USR', '??? ????????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 64, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'B70F181434700548B43DC541D5DE5272', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'4E88894AB4593C4CBEAAAC21C0540E4C', x'BA07B4F155F6054F90E1F95FE72100E1', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'ServerTime', '??????? ?????', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'BA2EA4D770262F46BB4671BA9FD625E1', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 4, 'OwnerPartName', '??????- ????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'6002EE6D427C204B92AE4523FA7AB2F4', x'BBE007DFC9D47F40B08D59D4578CA260', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'ReportType', '??? ??????', x'48E476E732F57D41B8D77D5B47FCCD6F', 0, 0, 0, 0, NULL, NULL),
(x'43CBAE567B75404D93C32CAB8DD5F223', x'BBF76985160EBA4F959876A9F5EDBDF4', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'ServerTime', '??????? ?????', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'1BE3ABBEEE11EC46A4BE99A7765C4919', x'BDEA74DA1A74DC4CB69DE0A99C95F5EF', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 2, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'57B9CFFE6114554F9F3D17F3F88F6E97', x'BE7FDC2219BDF849AA617C2F90182153', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'ID', '????????????? ?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'3A9F2A69298F374D9C8CAE25B8C3F3CA', x'BEB4E5433889944DA536A0C4803B288C', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 1, 'ID', '????????????? ?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'D3E4E528F01BE94EA740914CAF4B0636', x'C09B1D8602A5BF469C6AA1CB950F21F5', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 3, 'the_Table', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'22EBBC3448B7A24A882B35B1197FD4C1', x'C154093CBD71344C968406BF3F3764C6', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 3, 'SymmetricFieldName', 'SymmetricFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'6AF7A7548BEFE648A637A238E9C33E21', x'C2616E96291E534B9D3A41679E23B335', '2012-01-20 14:40:22', '2017-07-20 19:32:17', NULL, NULL, NULL, 5, 'OwnerRowID', '?????? - ????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'C674FFE5A59F3749BF4125AD199B4CA7', '2012-01-20 14:40:23', '2017-07-20 19:32:17', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'B368AE217FFFAE4F9B5DDC143AC126BE', x'C7A2B97987DAF04C85538424B1E7CF7D', '2012-01-20 14:40:22', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'2A9D95C08E3F9D44A705ECA9582090D2', x'C7AD2E16AD5C6E49BD575935F88AF62E', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'ServerTime', '??????? ?????', x'8F47A07A0CA8254B9425A540399C6705', 0, -1, -1, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'C818203DAAE0304FA2E91DECE9EEE8D3', '2012-01-20 14:40:22', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'C8D21A3F142DC046AC05CDF2AD05B6B6', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'RowQueryID', '????????????? ??????? ?????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'73C4D7500DCA204AB80CAF9E590D3D3E', x'C9106E3A416DF149B7CBD430A70ECF5D', '2012-01-20 14:40:22', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'D00EE13353BF2147B62A81B5007D25C9', x'C9EF9698FF129249823DE20317923AEC', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 2, 'RowID', 'Row', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'CB74EC8BA23D7741A20C7B3BC1D6FC3B', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 3, 'verb', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'54315A579D6CA042B44B00E9651C4D94', x'CBBB4A6DEDED0244B098349D084D4B8E', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'A67CD40458C8CE428558CA92F097F8E9', x'CC5302EF7B75064A9C490D7AA8E873C1', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 4, 'access', '??????????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'CFAB81680BAB0C48A15455DEDF6E515E', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'A8CC809037BAE04DB6E29335FF9B593D', x'D0AA0AB59D7DC740989BA6392D703C4D', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 2, 'resource', '????????????? ????? ????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C909231CC8D0349848800B95285235B', x'D1E00EDCE5299D4CAD922F3B88DA6C19', '2012-01-20 14:40:23', '2017-07-20 19:32:18', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'E87EFB3431ACD242901DF7625B3BF9C8', x'D24256904AF6E343BDDA66DE2FF1D0D2', '2012-01-20 14:40:22', '2017-07-20 19:32:19', NULL, NULL, NULL, 2, 'the_Zone', '????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'D2DF837002FF944399F3C526F3F5DE28', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 2, 'SymmetricPartName', 'SymmetricPartName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'33F43E07C3CB6B4BACF28C37958796F8', x'D53F8AB7A1FB694D8E954A788A135FE1', '2012-01-20 14:40:22', '2017-07-20 19:32:19', NULL, NULL, NULL, 4, 'ForwardFieldName', 'ForwardFieldName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL),
(x'A3A3E499B5642042953BA1207696EBF9', x'D7643BA82007A449B943FCAF9E587D85', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'CURSESSION', '??????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'7C699918ED8755488C5AB2E46F969A01', x'DBB74A09AEA0F748ACE216A7D1DFDC2B', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'THE_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'D4FB62D7B36C5248A04C6DED40CF06E6', x'DE8FC7E908461C498B93C8CDCF57CEBF', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'CURSESSION', '????????????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'67936738C8E3A5428FA61B44AC59EFFA', x'E6DDB1D91E84D94FBFC058C7C79BE67B', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 3, 'verb', '????????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'0A0BA3815B58C04B9C4EBF85F6ED0D29', x'EB69FF9CE1A3694ABB59B0CC69FABF94', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'THE_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'6E677CB3C067374C8C15FC0C2FF2D4C3', x'F056AFA1B2CCEE4EB61CAEAED6CDC755', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 3, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, -1, 0, NULL, NULL),
(x'0092456FBB41414EB8952D4837E67242', x'F3B48F5396A54A4FAF1F84262FBE7DCC', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'THE_SESSION', '????????????? ????? ??????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, -1, -1, 0, NULL, NULL),
(x'633EDD818ACE1A44975DC1726CB69D93', x'F4E163834CFC24489353ABA54ACF7AFB', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 3, 'the_Table', '???????', x'48E476E732F57D41B8D77D5B47FCCD6F', 255, 0, 0, 0, NULL, NULL),
(x'9B3C33461AE5654F866E7A5331F55FA1', x'F814C72A3CBBE543935C3BFF4484517A', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 2, 'PWD', '??????', x'E5FEA67D39955749BBBCCA7C4E34FF21', 0, 0, 0, 0, NULL, NULL),
(x'C91480E8C8050E4F8483BA8655D0A695', x'F9037DA2B7D0EE49B51B1580A1E1BF20', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'NumeratorID', '?????????', x'C2DE53F44B73964DBF2F89A0B0332CB9', 0, 0, 0, 0, NULL, NULL),
(x'0093E1D8E2B28F4988C3DD13BDCBE1F5', x'FB0885D55B7F05478D6791FE50F5AC27', '2012-01-20 14:40:22', '2017-07-20 19:32:19', NULL, NULL, NULL, 4, 'num', '?????', x'18153A059FCAC94E99311C4AB23C54CE', 0, 0, 0, 0, NULL, NULL),
(x'4101C5A7FE03E74BB2E24BD318553C8D', x'FBE437262482314492110023A88E8F18', '2012-01-20 14:40:23', '2017-07-20 19:32:19', NULL, NULL, NULL, 1, 'ObjTypeName', 'ObjTypeName', x'48E476E732F57D41B8D77D5B47FCCD6F', 100, 0, 0, 0, NULL, NULL);

-- 
-- Вывод данных для таблицы partmenu
--
INSERT INTO partmenu VALUES
(x'C421399726499D4CA7816062CF81B5AD', x'09C838C6B647EA4782176BBBD95A9215', '2012-01-20 14:40:02', '2017-07-20 19:32:39', NULL, NULL, NULL, 'UpdateItemName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'D95DDA3AF051D745BC52A10614A3FBA4', '2012-01-20 14:40:13', '2017-07-20 19:32:39', NULL, NULL, NULL, 'STDNumerator_SetName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'F4ACF611A5B0A744ADC53A46BBB7FBA7', '2012-01-20 14:40:13', '2017-07-20 19:32:39', NULL, NULL, NULL, 'UpdateItemName', NULL, NULL, x'1A9DB54F2301D3479F4FE12085C5D074', 0, 0, NULL);

-- 
-- Вывод данных для таблицы partview
--
INSERT INTO partview VALUES
(x'AFEF70062751D5118822204C4F4F5020', x'0093BEAA6C8FA1488BBAC9A814B8092E', '2017-06-05 16:43:14', '2017-07-20 19:32:40', NULL, NULL, NULL, '??? ??????? ????(??? ???????)', 'autoobjecttype', -1, NULL, NULL, NULL, NULL),
(x'DF24D235302854419E80FF578AAB323C', x'069068FAFE56F143B89E851132C4C605', '2017-06-05 16:43:15', '2017-07-20 19:32:40', NULL, NULL, NULL, '??????????? ????????? ????(??????????? ?????????)', 'autosysrefcache', -1, NULL, NULL, NULL, NULL),
(x'4D24C3DAD670A445885DD610F748EBFC', x'087611F8DACB47469AADCE81BF086BA9', '2017-06-05 16:43:16', '2017-07-20 19:32:40', NULL, NULL, NULL, '????????? ??????? ????(????????? ???????)', 'autojournalsrc', -1, NULL, NULL, NULL, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'08F5E5AC4F9E0645B5CA28F60AD0AF52', '2017-06-05 16:43:13', '2017-07-20 19:32:40', NULL, NULL, NULL, '????? ????????? ????(????? ?????????)', 'autoiu_rcfg_docmode', -1, NULL, NULL, NULL, NULL),
(x'5536327DD7BA124DAFC2E7FF3613B4A1', x'0A398668D656984195CEC76A7A63BD85', '2017-06-05 16:43:14', '2017-07-20 19:32:40', NULL, NULL, NULL, '?????? ?? ????? ????(?????? ?? ?????)', 'autovalidator', -1, NULL, NULL, NULL, NULL),
(x'2E9E8E54F6892248A312101CA4A9FE74', x'0D62DC03806A1F4D8A5C27D960DC081B', '2017-06-05 16:43:14', '2017-07-20 19:32:40', NULL, NULL, NULL, '?????? ??????? ????(?????? ???????)', 'autopartmenu', -1, NULL, NULL, NULL, NULL),
(x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'0F3BB57D6570E644AFB94719C00652B1', '2017-06-05 16:43:14', '2017-07-20 19:32:40', NULL, NULL, NULL, '??????? ????(???????)', 'autoviewcolumn', -1, NULL, NULL, NULL, NULL),
(x'FA3D9B25ACB8784188FD4B715D372FC3', x'102D762FFA17E94CA1FDED6B801A43CA', '2017-06-05 16:43:16', '2017-07-20 19:32:40', NULL, NULL, NULL, '???????? ????(????????)', 'autoreports', -1, NULL, NULL, NULL, NULL),
(x'0C74B3F476E66E4BA833EDE44CB9FA63', x'1175774D80CA8F499FE423034E28C9A0', '2017-06-05 16:43:17', '2017-07-20 19:32:40', NULL, NULL, NULL, '???? ??????? ????(???? ???????)', 'autofileterfield', -1, NULL, NULL, NULL, NULL),
(x'23D9C69807B88C4191E7C351511B5EB1', x'11E04692D1EB904A9129CA050A98DFB7', '2017-06-05 16:43:17', '2017-07-20 19:32:40', NULL, NULL, NULL, '?????? ????? ??????? ????(?????? ????? ???????)', 'autofilterfieldgroup', -1, NULL, NULL, NULL, NULL),
(x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'1383AE95D365AD4CA7EB3E2997E2E973', '2017-07-20 17:58:38', '2017-07-20 19:32:40', NULL, NULL, NULL, '???????? ????(????????)', 'autoarlog_data', -1, NULL, NULL, NULL, NULL),
(x'70307B0F09F77D4E868CCC337E3075D1', x'1583598F41B2784F8AAEC48441FBF478', '2017-06-05 16:43:14', '2017-07-20 19:32:41', NULL, NULL, NULL, '??????????? ??????? ????(??????????? ???????)', 'automethodrestriction', -1, NULL, NULL, NULL, NULL),
(x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'15920178CF7F404B90FF734C1DA73F9B', '2017-06-05 16:43:14', '2017-07-20 19:32:41', NULL, NULL, NULL, '????????? ????????????? ????(????????? ?????????????)', 'autopartview_lnk', -1, NULL, NULL, NULL, NULL),
(x'33AC48F4133B994893EE47D3D62962EC', x'175EA8BD0585F34BAB421EA306B00CB0', '2017-06-05 16:43:14', '2017-07-20 19:32:41', NULL, NULL, NULL, '??????????? ???????? ????(??????????? ????????)', 'autostructrestriction', -1, NULL, NULL, NULL, NULL),
(x'FE4567F62EEF1545A397B52EB98F59BF', x'18594B077070E4479356DB0F70FA06DA', '2017-07-20 17:58:39', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????? ????(??????)', 'autoarmd_info', -1, NULL, NULL, NULL, NULL),
(x'B9EF70062751D5118822204C4F4F5020', x'19FA557C91C76C4CB6C5E2EAC48FDD5E', '2017-06-05 16:43:13', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????????? ????(??????????)', 'autogenerator_target', -1, NULL, NULL, NULL, NULL),
(x'E8DAEA453798E54E9A3107370302F20F', x'1D298669C4F71143A7B45323230CA609', '2017-06-05 16:43:15', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????? ??????? ????(?????? ???????)', 'autosyslog', -1, NULL, NULL, NULL, NULL),
(x'9B803E67F6CF0943A52BFE2118AE508E', x'1EB8E0771DF1A749A169D9EA125860EC', '2017-06-05 16:43:13', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????????? ????(??????????)', 'autogenreference', -1, NULL, NULL, NULL, NULL),
(x'E82A7554B006C64E8DAA692E52A0D36C', x'1F8AB1E4A56A7E4DAFDEAE788A7BE57E', '2017-06-05 16:43:15', '2017-07-20 19:32:41', NULL, NULL, NULL, '??????????? ?????????? ????(??????????? ??????????)', 'autofieldparammap', -1, NULL, NULL, NULL, NULL),
(x'D9BE36C44E29A7488C376D4CF32343BE', x'29B75214D39E7C40B342AF87089CA104', '2017-06-05 16:43:13', '2017-07-20 19:32:41', NULL, NULL, NULL, '???????? ????(????????)', 'autonum_head', -1, NULL, NULL, NULL, NULL),
(x'2E1322E4F4070F4C8246B0F16CD9186A', x'2AA2728BFA77294584E856487926531E', '2017-06-05 16:43:16', '2017-07-20 19:32:41', NULL, NULL, NULL, '??????? ????(???????)', 'autorptformula', -1, NULL, NULL, NULL, NULL),
(x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'2D99A2CD286EBF44A5612A410C06D5F4', '2017-06-05 16:43:15', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????? ???? ?? ????? ????(?????? ???? ?? ?????)', 'autofieldvalidator', -1, NULL, NULL, NULL, NULL),
(x'AD5B514233E2DB408F9045DCFCE01BE6', x'34A20FE8992A7B49999F64874F353E8D', '2017-06-05 16:43:14', '2017-07-20 19:32:41', NULL, NULL, NULL, '???????? ???????????? ????(???????? ????????????)', 'autoinstancevalidator', -1, NULL, NULL, NULL, NULL),
(x'66C846DFF838F14E92E25F899D98BD16', x'38316B1D67E2F44E95E12F0E665FE600', '2017-06-05 16:43:14', '2017-07-20 19:32:41', NULL, NULL, NULL, '????????? ????(?????????)', 'autoobjstatus', -1, NULL, NULL, NULL, NULL),
(x'CE37F730811C7246B0F96E5BF4B15971', x'3CCA5BC3CE032C418B0399AB5497779F', '2017-06-05 16:43:16', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????? ????? ????(?????? ?????)', 'autoarmtypes', -1, NULL, NULL, NULL, NULL),
(x'4A14627F7685BC48ACBA1F9DC4874459', x'4067E0D70926A14A815863CE6334A13D', '2017-06-05 16:43:17', '2017-07-20 19:32:41', NULL, NULL, NULL, '???????? ????(????????)', 'automtzext_def', -1, NULL, NULL, NULL, NULL),
(x'1778EF018A784C4486C0DA720FFBA8E0', x'43E783CBAA550C4B8FA8C1750F8879EA', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, '?????????? ????(??????????)', 'autoarc_info', -1, NULL, NULL, NULL, NULL),
(x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'46AAACA12F5A984496E5BBF2B2A51719', '2017-06-05 16:43:16', '2017-07-20 19:32:41', NULL, NULL, NULL, '?????????? ????(??????????)', 'autoarmjrnladd', -1, NULL, NULL, NULL, NULL),
(x'32245159DFE6F941A4366BF7DB1800BB', x'47D6166E22FA994AB773E5CFF25E1F86', '2017-06-05 16:43:13', '2017-07-20 19:32:41', NULL, NULL, NULL, '???? ????(????)', 'autonum_zones', -1, NULL, NULL, NULL, NULL),
(x'8261E22384CCD642B7A2D8DA0026EBEE', x'4AC530495478FA4A8C4D929576B16E98', '2017-06-05 16:43:15', '2017-07-20 19:32:41', NULL, NULL, NULL, '???????????? ?????? ????(???????????? ??????)', 'autodinamicfilterscript', -1, NULL, NULL, NULL, NULL),
(x'24D75AB76F6BBD45B0BBC75D17309DC9', x'51C53E011155DC41AFCE4CB79E0998C4', '2017-06-05 16:43:17', '2017-07-20 19:32:42', NULL, NULL, NULL, '?????? ????(??????)', 'autofilters', -1, NULL, NULL, NULL, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'52458C310EDAC74CB45F3822A66F0C58', '2017-06-05 16:43:15', '2017-07-20 19:32:42', NULL, NULL, NULL, '???????????? ????(????????????)', 'autousers', -1, NULL, NULL, NULL, NULL),
(x'5A437DA5B3730741B22BC18782085C84', x'52B247BBBF1FA449A715465677BB0D1F', '2017-06-05 16:43:13', '2017-07-20 19:32:42', NULL, NULL, NULL, '??????????? ????(???????????)', 'autolocalizeinfo', -1, NULL, NULL, NULL, NULL),
(x'4DB613D7E84C6D46BE2B448874DC0469', x'53ECCCE30D04884CAF5F41E1BF443054', '2017-06-05 16:43:14', '2017-07-20 19:32:42', NULL, NULL, NULL, '????????????? ????(?????????????)', 'autopartview', -1, NULL, NULL, NULL, NULL),
(x'A23E94783679584FB31676E4F968E3B4', x'5746095530FDD742BE7671A86EF8006C', '2017-06-05 16:43:15', '2017-07-20 19:32:42', NULL, NULL, NULL, '?????? ???????????? ????(?????? ????????????)', 'autothe_session', -1, NULL, NULL, NULL, NULL),
(x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'588B9F1891E14443BFCABF57322C0ADC', '2017-06-05 16:43:15', '2017-07-20 19:32:42', NULL, NULL, NULL, '?????????? ?????????? ????(?????????? ??????????)', 'autoextenderinterface', -1, NULL, NULL, NULL, NULL),
(x'81AFF1D32C914849A87DDF549EE796E2', x'59DBF6196CCDFD458B4B0CF0B130022F', '2017-06-05 16:43:15', '2017-07-20 19:32:42', NULL, NULL, NULL, '???????? ????????? ?????? ????(???????? ????????? ??????)', 'autofieldsrcdef', -1, NULL, NULL, NULL, NULL),
(x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'5B6A0AC410131942A1EE228F1192C0CE', '2017-06-05 16:43:16', '2017-07-20 19:32:42', NULL, NULL, NULL, '????????? ???????? ????(????????? ????????)', 'autoarmjournal', -1, NULL, NULL, NULL, NULL),
(x'ADEF70062751D5118822204C4F4F5020', x'64FA779B66F92F44A5DBA525264C289D', '2017-06-05 16:43:14', '2017-07-20 19:32:42', NULL, NULL, NULL, '?????? ? ????????? ????(?????? ? ?????????)', 'autosharedmethod', -1, NULL, NULL, NULL, NULL),
(x'895CAA9CCBF1624BB1D0FF2D29A40057', x'6537434A65AAD944AA175B6DDCA5D1CA', '2017-06-05 16:43:14', '2017-07-20 19:32:42', NULL, NULL, NULL, '??????????? ???????????? ????(??????????? ????????????)', 'autouniqueconstraint', -1, NULL, NULL, NULL, NULL),
(x'EDE9BE7D7031CC43BBC42FD6050B87F1', x'66D36CF1C422CF44BFC917168999C0AE', '2017-07-20 17:58:39', '2017-07-20 19:32:42', NULL, NULL, NULL, '???? ??????? ????(???? ???????)', 'autoarmd_chaneltype', -1, NULL, NULL, NULL, NULL),
(x'236DF435F8613B41924F83792F76E698', x'6AB5FC0F4ACA444588213D68BBADDC64', '2017-06-05 16:43:13', '2017-07-20 19:32:42', NULL, NULL, NULL, '??????? ????(???????)', 'autoenumitem', -1, NULL, NULL, NULL, NULL),
(x'9F3507D4042269499789956215E456E6', x'6D09BB9D9862B944ACA4BC802A4E268A', '2017-06-05 16:43:16', '2017-07-20 19:32:42', NULL, NULL, NULL, '???????? ??????? ????(???????? ???????)', 'autoepfilterlink', -1, NULL, NULL, NULL, NULL),
(x'398B4CD264C8DF4B8015F9973D34C20D', x'70DD187EF5264B4EAA1FC830974FD844', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, '??? ?????? ????(??? ??????)', 'autoarc_md', -1, NULL, NULL, NULL, NULL),
(x'CA936976E67DDA4A82168BDDF2B0588E', x'71278B7D0269C04BB61AF77268B98AA8', '2017-06-05 16:43:13', '2017-07-20 19:32:43', NULL, NULL, NULL, '?????? ??? ????(?????? ???)', 'autogenmanualcode', -1, NULL, NULL, NULL, NULL),
(x'A14802F51E159C4D87D0906ACFD35C9F', x'72455C7B295280478E80B4465AAB1709', '2017-06-05 16:43:12', '2017-07-20 19:32:43', NULL, NULL, NULL, '???????? ????(????????)', 'autobpc_info', -1, NULL, NULL, NULL, NULL),
(x'6D2968111CA0DB45B67D76A07F3FF64C', x'74FCD32B103AC54396F7B12FF4DF4F41', '2017-06-05 16:43:14', '2017-07-20 19:32:43', NULL, NULL, NULL, '????? ?????? ????(????? ??????)', 'autoobjectmode', -1, NULL, NULL, NULL, NULL),
(x'CA6FBEF85D59464FACDBFB5838A246CA', x'7C1F376509ECD64B956211983335C342', '2017-06-05 16:43:14', '2017-07-20 19:32:43', NULL, NULL, NULL, '??????????? ?????????? ????(??????????? ??????????)', 'autopartparammap', -1, NULL, NULL, NULL, NULL),
(x'B22C7E24E96FBB499D4B021309A3F8F2', x'80B975BF4BABB147A42ECA7586043DE5', '2017-07-20 17:58:39', '2017-07-20 19:32:43', NULL, NULL, NULL, '??? ?????? ????(??? ??????)', 'autoarmd_type', -1, NULL, NULL, NULL, NULL),
(x'1051A02ED67D914BB774AF6ECBC42108', x'849BE21055811E47A84CC8FC045E5202', '2017-06-05 16:43:13', '2017-07-20 19:32:43', NULL, NULL, NULL, '???? ????(????)', 'autoiu_crole', -1, NULL, NULL, NULL, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'86F35CC38C5DA240B143809FBD19DCED', '2017-06-05 16:43:16', '2017-07-20 19:32:44', NULL, NULL, NULL, '?????? ??????? ????(?????? ???????)', 'autojcolumnsource', -1, NULL, NULL, NULL, NULL),
(x'E7C6F31042573147B94C647263E4E304', x'89C0500CA63B234FBD3AFA5FDDAD5028', '2017-06-05 16:43:13', '2017-07-20 19:32:44', NULL, NULL, NULL, '???? ????(????)', 'autoiu_rcfg_def', -1, NULL, NULL, NULL, NULL),
(x'C2E0DB8C89591042BDFB33C2C45F2509', x'8D02258553C3104B83A848EB4D1C854B', '2017-06-05 16:43:15', '2017-07-20 19:32:44', NULL, NULL, NULL, '?????????? ????(??????????)', 'automtzapp', -1, NULL, NULL, NULL, NULL),
(x'79A1C111B229DC4DBDB71EB21D2FF878', x'A11EF1EAB16382439693E8661870CA1C', '2017-06-05 16:43:14', '2017-07-20 19:32:44', NULL, NULL, NULL, '??????????? ???????? ????(??????????? ????????)', 'autonextstate', -1, NULL, NULL, NULL, NULL),
(x'DDE68FE4F979424DBAC3CB39F69171BC', x'A21BF27ED6DD9147880462D22EC3920A', '2017-06-05 16:43:17', '2017-07-20 19:32:44', NULL, NULL, NULL, '?????????? ?????????? ????(?????????? ??????????)', 'automtzextrel', -1, NULL, NULL, NULL, NULL),
(x'6C47841B846CDE4092B517045D93C35A', x'A52C4139E99B3444A3CC51A511412805', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, '?????? ?????????? ????(?????? ??????????)', 'autoarc_chanel', -1, NULL, NULL, NULL, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'A92147E6F6BF6F4B87F94630B063D759', '2017-06-05 16:43:12', '2017-07-20 19:32:44', NULL, NULL, NULL, '?????? ????(??????)', 'autoiu_int_modules', -1, NULL, NULL, NULL, NULL),
(x'317BD7F857A78C48BB5822700737D4B8', x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', '2017-06-05 16:43:16', '2017-07-20 19:32:44', NULL, NULL, NULL, '??????? ??????? ????(??????? ???????)', 'autojournalcolumn', -1, NULL, NULL, NULL, NULL),
(x'A6EF70062751D5118822204C4F4F5020', x'AD97F02BD60A4841BD8A5FDFC7864C41', '2017-06-05 16:43:13', '2017-07-20 19:32:45', NULL, NULL, NULL, '??????????? ????(???????????)', 'autofieldtypemap', -1, NULL, NULL, NULL, NULL),
(x'CFBD3CA6DD3D6441949752FE925B2A13', x'AF114BCC0A879B4D9200242BD3D95D3D', '2017-06-05 16:43:13', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ?????????? ????(?????? ??????????)', 'autoiu_u_def', -1, NULL, NULL, NULL, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'B020B3869D0D1447AD025FAB18B96C2E', '2017-06-05 16:43:16', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ????(??????)', 'autojournal', -1, NULL, NULL, NULL, NULL),
(x'E4C38941C2713D42A56F4E71CB91B52D', x'B1D18DC95FC4B346987C1DE9332AE2FB', '2017-06-05 16:43:15', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ???? ????(?????? ????)', 'autofieldmenu', -1, NULL, NULL, NULL, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'B23AC26A8ABB6C46A49B1D299A2994FB', '2017-06-05 16:43:15', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ?????? ????(?????? ??????)', 'autogroupuser', -1, NULL, NULL, NULL, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'B898C6A12240E34BBFA691AA404551D2', '2017-06-05 16:43:13', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ????(??????)', 'autonum_values', -1, NULL, NULL, NULL, NULL),
(x'8131E84FA500594B9413D06318A119D4', x'B9F17F07075E2C42B712755DFF4766D8', '2017-06-05 16:43:16', '2017-07-20 19:32:45', NULL, NULL, NULL, '???????? ????(????????)', 'autoarmjrnlrun', -1, NULL, NULL, NULL, NULL),
(x'DED0770C9E55FC43B181156E126543F1', x'BEFD29AD60E67142A255E0FECFDBF44C', '2017-06-05 16:43:16', '2017-07-20 19:32:45', NULL, NULL, NULL, '???? ?????? ????(???? ??????)', 'autorptfields', -1, NULL, NULL, NULL, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'BF8B7E3B0C8F154D91FD4513FDA57AE3', '2017-06-05 16:43:13', '2017-07-20 19:32:45', NULL, NULL, NULL, '??? ???? ????(??? ????)', 'autofieldtype', -1, NULL, NULL, NULL, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'CB236ADBA9DFDE4984132819DD43E5AB', '2017-06-05 16:43:15', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ????(??????)', 'autogroups', -1, NULL, NULL, NULL, NULL),
(x'A3EF70062751D5118822204C4F4F5020', x'CBE08C320913E042B13EE942A7905511', '2017-06-05 16:43:14', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????????? ????(??????????)', 'autoscript', -1, NULL, NULL, NULL, NULL),
(x'003476C234BE3340B4B5756CD5252CEA', x'CE0AFCE7C4EBB8438B91B3CA29F1B3D8', '2017-06-05 16:43:16', '2017-07-20 19:32:45', NULL, NULL, NULL, '?????? ????(??????)', 'autoarmjrnlrep', -1, NULL, NULL, NULL, NULL),
(x'E6F31473DE46B64AA09D05F6B0A69004', x'D1BDD33E942B1A48B87E0BF049B48ED8', '2017-07-20 17:58:39', '2017-07-20 19:32:45', NULL, NULL, NULL, '???????? ??? ????(???????? ???)', 'autoarsms_data', -1, NULL, NULL, NULL, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'DE372C7315796E409FAEA424CAFF2C5D', '2017-06-05 16:43:14', '2017-07-20 19:32:46', NULL, NULL, NULL, '????????? ????(?????????)', 'autoparameters', -1, NULL, NULL, NULL, NULL),
(x'05C61246727ED0478A2852CC7BFF4C7F', x'DEC4E37D423CAA4CA53FDF593CDF6FB5', '2017-06-05 16:43:13', '2017-07-20 19:32:46', NULL, NULL, NULL, '????? ????????? ????(????? ?????????)', 'autogenpackage', -1, NULL, NULL, NULL, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'DED5A25D1921524994DBFD96BDE4235C', '2017-06-05 16:43:15', '2017-07-20 19:32:46', NULL, NULL, NULL, '???? ????(????)', 'autofield', -1, NULL, NULL, NULL, NULL),
(x'7A7476873D74B947AF1CAB00FF81154F', x'E11361444B4881418D6B2FEF33523D80', '2017-06-05 16:43:14', '2017-07-20 19:32:46', NULL, NULL, NULL, '?????? ???? ????(?????? ????)', 'autotypemenu', -1, NULL, NULL, NULL, NULL),
(x'1A0E0B5D3680124BB08160139558B594', x'E2B710E2CF5D8A41921A8C241ADADBC3', '2017-06-05 16:43:15', '2017-07-20 19:32:46', NULL, NULL, NULL, '?????????? ?????????? ????(?????????? ??????????)', 'autofldextenders', -1, NULL, NULL, NULL, NULL),
(x'D08EB034B5C49C4BBA59870A4599F52A', x'E2E180EE8C3E034A8706D01F74BA7374', '2017-06-05 16:43:15', '2017-07-20 19:32:46', NULL, NULL, NULL, '???????? ?? ????????? ????(???????? ?? ?????????)', 'autofieldexpression', -1, NULL, NULL, NULL, NULL),
(x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'E587262B9A17E2468D2AE6751B931A96', '2017-06-05 16:43:16', '2017-07-20 19:32:46', NULL, NULL, NULL, '???? ????(????)', 'autoentrypoints', 0, NULL, NULL, NULL, NULL),
(x'5607A06E80B9234DB209202389953A13', x'E9328A2B199F96419E8A34A3FD25A4F2', '2017-06-05 16:43:15', '2017-07-20 19:32:46', NULL, NULL, NULL, '???????????? ?????????? ????(???????????? ??????????)', 'autoparentpackage', -1, NULL, NULL, NULL, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'ECE468ED0DDB444FA55FBD7376301B5B', '2017-06-05 16:43:14', '2017-07-20 19:32:46', NULL, NULL, NULL, '?????? ????(??????)', 'autopart', 0, NULL, NULL, NULL, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'EF2129A038D58F4491B4B8447C6B7474', '2017-06-05 16:43:12', '2017-07-20 19:32:46', NULL, NULL, NULL, '?????? ????(??????)', 'autoiu_rcfg_mod', -1, NULL, NULL, NULL, NULL),
(x'FB1CB30425654A479F16999870D8EAAF', x'F51C326762FF9240A25BCDB3539F6A60', '2017-06-05 16:43:13', '2017-07-20 19:32:46', NULL, NULL, NULL, '??????????? ???????? ????(??????????? ????????)', 'autogencontrols', -1, NULL, NULL, NULL, NULL),
(x'B10601C795AA73418097614495D6EF28', x'F7AB97A4CD21F340B3EE79FA53232F2F', '2017-06-05 16:43:14', '2017-07-20 19:32:47', NULL, NULL, NULL, '???? ??????????? ????(???? ???????????)', 'autoconstraintfield', -1, NULL, NULL, NULL, NULL),
(x'2A49E8F524222F4585FFA14882C6554F', x'F96D4B780527414B87DC233936A77496', '2017-06-05 16:43:16', '2017-07-20 19:32:47', NULL, NULL, NULL, '?????? ????(??????)', 'autorptstruct', 0, NULL, NULL, NULL, NULL),
(x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'FA51C1EA55BD4F47ABC87B539EDC1781', '2017-06-05 16:43:14', '2017-07-20 19:32:47', NULL, NULL, NULL, '??????????? ????? ????(??????????? ?????)', 'autofieldrestriction', -1, NULL, NULL, NULL, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'FACEDA2A0DFD2645B4D91001FC02D14A', '2017-06-05 16:43:16', '2017-07-20 19:32:47', NULL, NULL, NULL, '??? ????(???)', 'autoworkplace', -1, NULL, NULL, NULL, NULL);

-- 
-- Вывод данных для таблицы structrestriction
--
INSERT INTO structrestriction VALUES
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'0B3459D8005D3348A23785F959EADBA6', '2014-06-22 20:09:40', '2017-07-20 19:32:22', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', 0, 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'17E08E0CA2003F4DAFE3AFCB137AD499', '2014-07-07 13:17:47', '2017-07-20 19:32:22', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', -1, 0, -1, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'27D20D1F17D4E44183A728286F3D1496', '2012-06-15 12:09:09', '2017-07-20 19:32:22', NULL, NULL, NULL, x'003476C234BE3340B4B5756CD5252CEA', 0, 0, 0, 0),
(x'DE3A1841BFEFC74B9A60D56D74A29078', x'36E0F01B680C4D47B24D2B8A1CD1F3C1', '2014-06-22 20:09:40', '2017-07-20 19:32:22', NULL, NULL, NULL, x'84390EFA7C6BC845AECFE2FC7ECB622B', 0, 0, 0, 0),
(x'BFB0BEBDEF2312458267C24867395088', x'4C18FD28AFED2C4890F2236665490EEB', '2017-07-20 11:01:54', '2017-07-20 19:32:22', NULL, NULL, NULL, x'EDE9BE7D7031CC43BBC42FD6050B87F1', -1, 0, 0, 0),
(x'BFB0BEBDEF2312458267C24867395088', x'7CAB40A9F78E754FA0E6ADF9C8E42B0E', '2017-07-20 11:02:09', '2017-07-20 19:32:22', NULL, NULL, NULL, x'B22C7E24E96FBB499D4B021309A3F8F2', -1, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'87B2634A78B0E44F98234E0C12ED4E43', '2012-07-10 16:26:54', '2017-07-20 19:32:22', NULL, NULL, NULL, x'2CDE4EEF8B45AB4EAFE366AA500081DA', 0, 0, 0, 0),
(x'AE6DD0C85FC5FB40901CC7DF03D3A733', x'98D133805E766547BE55F1CF033D0F79', '2014-07-07 13:17:04', '2017-07-20 19:32:22', NULL, NULL, NULL, x'84D8A8DB867282478B286AF8916220B6', -1, 0, -1, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'A1DB965BB1B7334EA354E3ABC3CEE931', '2012-07-10 16:26:54', '2017-07-20 19:32:22', NULL, NULL, NULL, x'EDAB37F8E9CA0A439DEE519DBB1B79D5', 0, 0, 0, 0),
(x'BFB0BEBDEF2312458267C24867395088', x'A50F13162E083D4EA3FE451BC72A94E3', '2017-07-20 11:02:04', '2017-07-20 19:32:22', NULL, NULL, NULL, x'FE4567F62EEF1545A397B52EB98F59BF', 0, 0, 0, 0),
(x'BB6DC294F976E9429CE1378994104A47', x'B59756403FB0ED45AB2D80797CDB9063', '2017-06-06 20:54:15', '2017-07-20 19:32:22', NULL, NULL, NULL, x'E6F31473DE46B64AA09D05F6B0A69004', -1, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'C0F2C4856F331540BA4B9CE3B69871D3', '2012-07-10 16:26:54', '2017-07-20 19:32:22', NULL, NULL, NULL, x'9F3507D4042269499789956215E456E6', 0, 0, 0, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'C4C126654FA42844A1CA491610AA07E5', '2014-07-07 13:17:45', '2017-07-20 19:32:22', NULL, NULL, NULL, x'A3D07ECF2C64104B834721D86BFECBC4', -1, 0, -1, 0),
(x'5F4ABF9152EDF54FBA081F22A48402B5', x'C88383B58B4A844EBD18D6EE3CE212EA', '2014-07-09 22:40:50', '2017-07-20 19:32:23', NULL, NULL, NULL, x'E7C6F31042573147B94C647263E4E304', -1, 0, 0, 0),
(x'8CFE62593DBF7C4183F8DC53040FB714', x'CA5C01F22D28F746ACA8657F23B5FAB9', '2014-07-07 13:16:58', '2017-07-20 19:32:23', NULL, NULL, NULL, x'1051A02ED67D914BB774AF6ECBC42108', -1, 0, -1, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'CE9FE65717842549B31DD271E2904B55', '2012-07-10 16:26:54', '2017-07-20 19:32:23', NULL, NULL, NULL, x'050E1CC4F38C434B9D6EC5FCD37BEB47', 0, 0, 0, 0),
(x'1797BDCBD643404A9128F9E8AD7F8309', x'D1BFF08356E2EB48A4B6AAC3C8725087', '2012-07-10 16:26:54', '2017-07-20 19:32:23', NULL, NULL, NULL, x'CE37F730811C7246B0F96E5BF4B15971', 0, 0, 0, 0);

-- 
-- Вывод данных для таблицы uniqueconstraint
--
INSERT INTO uniqueconstraint VALUES
(x'ADEF70062751D5118822204C4F4F5020', x'0233B7117039A34F8F1A3272C3403647', '2012-01-20 14:40:15', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, 0, NULL),
(x'55B88B1465099E4EA3D648DCC8CE528B', x'10505EA1192FDA45BBDF11224A89BBD3', '2012-01-20 14:39:58', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'0BC03D83D7E8914D91032DD084BEFC1E', x'14596031B53AAF4991E971736A604FCC', '2012-01-20 14:40:13', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'B1EF70062751D5118822204C4F4F5020', x'1EA2D09E0607EE49BD235F831A3A86FE', '2012-01-20 14:40:16', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'52932CFE9AE20B4291343E3BDD832A6E', x'229DE7AE828F9A4F8D6F33328A7AAC05', '2012-01-20 14:39:58', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'A4EF70062751D5118822204C4F4F5020', x'2C69018196A768478ECB0316B5E9490F', '2012-01-20 14:40:16', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'84D8A8DB867282478B286AF8916220B6', x'510CA9FB376BDF4C8463211AEE16FC6C', '2014-06-22 20:09:41', '2017-07-20 19:33:35', NULL, NULL, NULL, '?????? ????????', -1, '?????? ????????'),
(x'6E6CC434159246478D9D4800B6549003', x'549833E56278BF41A477601B9171F82F', '2012-11-20 14:11:52', '2017-07-20 19:33:35', NULL, NULL, NULL, 'UC_ Journal_Name', 0, '???????????? ??? ??????.????????'),
(x'236DF435F8613B41924F83792F76E698', x'54AA42ED60A7E645B47222249907756C', '2012-01-20 14:40:15', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, -1, NULL),
(x'A5EF70062751D5118822204C4F4F5020', x'589DD1A7F33C2440B5AFB80CF77A9937', '2012-01-20 14:40:15', '2017-07-20 19:33:35', NULL, NULL, NULL, NULL, 0, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'5C9CC0540AFF494F927085CEEA24BB0D', '2012-01-20 14:40:03', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, 0, NULL),
(x'4CE798E5DEA9414086FA972E95635600', x'67C210AE9B069744A00619B350F5B93E', '2012-01-20 14:40:15', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'84390EFA7C6BC845AECFE2FC7ECB622B', x'67EF62DE3C494A4DA012F615C722F487', '2014-06-22 20:09:41', '2017-07-20 19:33:36', NULL, NULL, NULL, '?????? ????????', -1, '?????? ????????'),
(x'1051A02ED67D914BB774AF6ECBC42108', x'6D8AD9FADEFBA64EA79F3CF75512BC0E', '2014-04-15 11:45:13', '2017-07-20 19:33:36', NULL, NULL, NULL, 'UC_ iu_crole_name', 0, '???????????? ??? ????.????????'),
(x'B1EF70062751D5118822204C4F4F5020', x'81D6F8362AD53E4398ECDFD1117707A0', '2012-01-20 14:40:16', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, 0, NULL),
(x'EE6A0EA4417B6D47923CACA251C08E87', x'83506B856DD42848BDABFA523D1C5E34', '2012-01-20 14:39:58', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'A3D07ECF2C64104B834721D86BFECBC4', x'8B31D94685DFEE4C8DE384034D0B9FB0', '2014-06-22 20:09:41', '2017-07-20 19:33:36', NULL, NULL, NULL, '??? ????????? ????????', -1, '??? ????????? ????????'),
(x'A4EF70062751D5118822204C4F4F5020', x'976E7B4F8E0E8344BC8733748BE210AF', '2012-01-20 14:40:16', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'C421399726499D4CA7816062CF81B5AD', x'9A5A0FCD89DF784CA4EF78D5BD35525B', '2012-11-20 14:11:52', '2017-07-20 19:33:36', NULL, NULL, NULL, 'UC_ WorkPlace_Name', 0, '???????????? ??? ???.????????'),
(x'4CE798E5DEA9414086FA972E95635600', x'9C54DB9F2768EB45889BA167951C77F0', '2012-01-20 14:40:15', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'E7C6F31042573147B94C647263E4E304', x'AF45AFE59709034AA6FBD3886EB0DF70', '2014-06-22 20:09:41', '2017-07-20 19:33:36', NULL, NULL, NULL, '???? ?????????', 0, '???? ?????????'),
(x'4D24C3DAD670A445885DD610F748EBFC', x'B0C3538245A032429A6C934BCFD14E5E', '2012-01-20 14:40:03', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'236DF435F8613B41924F83792F76E698', x'B36BE8D930DFC34BB956901494C38D54', '2012-01-20 14:40:15', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'AFEF70062751D5118822204C4F4F5020', x'BDC473920492764EA6719F31ED575F68', '2012-01-20 14:40:16', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, 0, NULL),
(x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'BF4B14AAC5E5714C9FF4BFB3368255B4', '2012-01-20 14:40:03', '2017-07-20 19:33:36', NULL, NULL, NULL, NULL, -1, NULL),
(x'32245159DFE6F941A4366BF7DB1800BB', x'D5713D7A4386B140B50E6B3B1FCFB08A', '2012-01-20 14:40:13', '2017-07-20 19:33:37', NULL, NULL, NULL, NULL, -1, NULL),
(x'6E6CC434159246478D9D4800B6549003', x'F897A51A2519C24394094B0652F21393', '2012-01-20 14:40:03', '2017-07-20 19:33:37', NULL, NULL, NULL, NULL, 0, NULL);

-- 
-- Вывод данных для таблицы validator
--
-- Таблица areal_cli.validator не содержит данных

-- 
-- Вывод данных для таблицы constraintfield
--
INSERT INTO constraintfield VALUES
(x'81D6F8362AD53E4398ECDFD1117707A0', x'150A85055145F242A8EAEE81E1E27BBC', '2012-01-20 14:40:16', '2017-07-20 19:33:37', NULL, NULL, NULL, x'42304E8EC6032641BD107C3650D5B95B'),
(x'1EA2D09E0607EE49BD235F831A3A86FE', x'15492E0877260D49819517935015063A', '2012-01-20 14:40:16', '2017-07-20 19:33:37', NULL, NULL, NULL, x'CBBDBBA277AA5E479D3646AB5813CC27'),
(x'F897A51A2519C24394094B0652F21393', x'19ACF35E250B2644AB880DB8CBA8DA66', '2012-01-20 14:40:03', '2017-07-20 19:33:37', NULL, NULL, NULL, x'AEDE10BB9DE8344784444750220B79CE'),
(x'67C210AE9B069744A00619B350F5B93E', x'1BEE9539A343D3448B80CFCE5E5A90A5', '2012-01-20 14:40:15', '2017-07-20 19:33:37', NULL, NULL, NULL, x'BF56BA07E0FBCF468477AEE9C5EBFDCF'),
(x'B36BE8D930DFC34BB956901494C38D54', x'33E8C0DAE62FDE48AEAE843A7BF8F5FB', '2012-01-20 14:40:15', '2017-07-20 19:33:37', NULL, NULL, NULL, x'3743A2DC2CBB3A4696C0C37D6420679E'),
(x'589DD1A7F33C2440B5AFB80CF77A9937', x'396619AC0C713243AF89A7B13754CBB5', '2012-01-20 14:40:15', '2017-07-20 19:33:37', NULL, NULL, NULL, x'7DFC5301479BCC4384058339935320D4'),
(x'BDC473920492764EA6719F31ED575F68', x'3C4D70EAB393934286A59721303686BF', '2012-01-20 14:40:16', '2017-07-20 19:33:37', NULL, NULL, NULL, x'0FC7B0C75B17FA4CB81A328B0E29BF29'),
(x'5C9CC0540AFF494F927085CEEA24BB0D', x'475D40BD8BECC74EA646696C72FA3A1D', '2012-01-20 14:40:03', '2017-07-20 19:33:37', NULL, NULL, NULL, x'431F95DC8A34644CA248B9D11833BB46'),
(x'BF4B14AAC5E5714C9FF4BFB3368255B4', x'753DAA9E5434474F852456280498CABB', '2012-01-20 14:40:03', '2017-07-20 19:33:40', NULL, NULL, NULL, x'D77E3939283C4F41A18859E103B21F4A'),
(x'9A5A0FCD89DF784CA4EF78D5BD35525B', x'75C6053EBED02640AFB56F462A6D6EEF', '2012-11-20 14:11:52', '2017-07-20 19:33:40', NULL, NULL, NULL, x'24C4148E04FA8D4C8C74C28806A34ACD'),
(x'976E7B4F8E0E8344BC8733748BE210AF', x'75FF4CC5A7C32143903604D2D6233262', '2012-01-20 14:40:16', '2017-07-20 19:33:40', NULL, NULL, NULL, x'AB684CDF96732C44AF236BB1B7665B06'),
(x'2C69018196A768478ECB0316B5E9490F', x'79E7E4F70B7ED640BA48028010E0E59D', '2012-01-20 14:40:16', '2017-07-20 19:33:40', NULL, NULL, NULL, x'149976562DCDFF4F87242CCCC2209F72'),
(x'9C54DB9F2768EB45889BA167951C77F0', x'8A0C00ABD3B5EC46A23B888268EFB79D', '2012-01-20 14:40:15', '2017-07-20 19:33:40', NULL, NULL, NULL, x'56CA28FB7CD6054DAB844CC5D9A88066'),
(x'229DE7AE828F9A4F8D6F33328A7AAC05', x'8F42789808FA3543816EDC25789984B8', '2012-01-20 14:39:58', '2017-07-20 19:33:40', NULL, NULL, NULL, x'E24A0AA894472E4CA774277DD8C7E986'),
(x'549833E56278BF41A477601B9171F82F', x'9223802F1EC9C343B46B670DF6ACEAF6', '2012-11-20 14:11:52', '2017-07-20 19:33:40', NULL, NULL, NULL, x'431F95DC8A34644CA248B9D11833BB46'),
(x'B0C3538245A032429A6C934BCFD14E5E', x'94AB89F1C1B4D543959CBD91FB444A22', '2012-01-20 14:40:03', '2017-07-20 19:33:40', NULL, NULL, NULL, x'D25BACD9ABC3CB46A6302AD0EF3C5652'),
(x'AF45AFE59709034AA6FBD3886EB0DF70', x'959EF357A95EE24D87AB5F608FE6C4F4', '2014-06-22 20:09:41', '2017-07-20 19:33:40', NULL, NULL, NULL, x'2BCA37164AAD154EB41D5C41300AE020'),
(x'10505EA1192FDA45BBDF11224A89BBD3', x'998CE7AD224B5546BBEB8428FEECBC09', '2012-01-20 14:39:58', '2017-07-20 19:33:40', NULL, NULL, NULL, x'422E7BC75803914FBDD2B95A66B1EB25'),
(x'54AA42ED60A7E645B47222249907756C', x'A6FEB36743005247A4D7DD443D1E5BA2', '2012-01-20 14:40:15', '2017-07-20 19:33:41', NULL, NULL, NULL, x'98CD861EC37BF847A69186227D01E40C'),
(x'510CA9FB376BDF4C8463211AEE16FC6C', x'CB18F6750914584EBE4521776C471F3A', '2014-06-22 20:09:41', '2017-07-20 19:33:41', NULL, NULL, NULL, x'194ADE02C83C344A81EC7D41927986C2'),
(x'D5713D7A4386B140B50E6B3B1FCFB08A', x'DA777B9FD629BB46A3D8D2D530E7F117', '2012-01-20 14:40:13', '2017-07-20 19:33:41', NULL, NULL, NULL, x'533A99AC9B5E1143A1ABF80C00923883'),
(x'67EF62DE3C494A4DA012F615C722F487', x'EA18B08BF507914FA673468C8801A24B', '2014-06-22 20:09:41', '2017-07-20 19:33:41', NULL, NULL, NULL, x'A13307A850F1584281DB91330250BFF1'),
(x'6D8AD9FADEFBA64EA79F3CF75512BC0E', x'EBD1A36501BCB84CA75EE7464C458693', '2014-04-15 11:45:13', '2017-07-20 19:33:41', NULL, NULL, NULL, x'79A9219532B0D547AA5DB4C6D72773B3'),
(x'8B31D94685DFEE4C8DE384034D0B9FB0', x'EC08989F0CA3924087AA624F5185AC03', '2014-06-22 20:09:41', '2017-07-20 19:33:41', NULL, NULL, NULL, x'E048F724A05E5A42B4F4DC8C8D70D1CB'),
(x'0233B7117039A34F8F1A3272C3403647', x'EF92B6674E0E7E47BC006F172DE6762D', '2012-01-20 14:40:15', '2017-07-20 19:33:41', NULL, NULL, NULL, x'090365079152D44B90EB3B8118356905'),
(x'14596031B53AAF4991E971736A604FCC', x'F16616019529AA4496DE89A895053573', '2012-01-20 14:40:13', '2017-07-20 19:33:41', NULL, NULL, NULL, x'576D4D6F03EEBE4595BC51DF2D9FB41C'),
(x'83506B856DD42848BDABFA523D1C5E34', x'F71ACCAA8CA3D7449EBD2F23D7BB3177', '2012-01-20 14:39:58', '2017-07-20 19:33:41', NULL, NULL, NULL, x'AF477A68B568DD4D928F9229BE67CE36');

-- 
-- Вывод данных для таблицы dinamicfilterscript
--
-- Таблица areal_cli.dinamicfilterscript не содержит данных

-- 
-- Вывод данных для таблицы fieldexpression
--
-- Таблица areal_cli.fieldexpression не содержит данных

-- 
-- Вывод данных для таблицы fieldmenu
--
-- Таблица areal_cli.fieldmenu не содержит данных

-- 
-- Вывод данных для таблицы fieldsrcdef
--
-- Таблица areal_cli.fieldsrcdef не содержит данных

-- 
-- Вывод данных для таблицы fieldvalidator
--
-- Таблица areal_cli.fieldvalidator не содержит данных

-- 
-- Вывод данных для таблицы fldextenders
--
-- Таблица areal_cli.fldextenders не содержит данных

-- 
-- Вывод данных для таблицы partparammap
--
INSERT INTO partparammap VALUES
(x'09C838C6B647EA4782176BBBD95A9215', x'332488684FE969479A26E4A84D6B8FB6', '2012-01-20 14:40:02', '2017-07-20 19:32:39', NULL, NULL, NULL, '.Name', 'Name', -1),
(x'D95DDA3AF051D745BC52A10614A3FBA4', x'5DF9EB83912F8F48902CB803F3B13E80', '2012-01-20 14:40:13', '2017-07-20 19:32:40', NULL, NULL, NULL, '.brief', 'Name', 0),
(x'F4ACF611A5B0A744ADC53A46BBB7FBA7', x'816FDAEC9EA0CE449689633756F0B6A5', '2012-01-20 14:40:13', '2017-07-20 19:32:40', NULL, NULL, NULL, '.Name', 'Name', -1);

-- 
-- Вывод данных для таблицы partview_lnk
--
-- Таблица areal_cli.partview_lnk не содержит данных

-- 
-- Вывод данных для таблицы viewcolumn
--
INSERT INTO viewcolumn VALUES
(x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', x'001E7352D4640C4DA05F3AD960A5CB6F', '2017-06-05 16:43:16', '2017-07-20 19:32:47', NULL, NULL, NULL, 1, '?????????????????? (??????? ???????)', 'JournalColumn_sequence', x'317BD7F857A78C48BB5822700737D4B8', x'FBF842A55E1BBC42A5EA3FFEFBDFBF1C', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'016862D2F27B644BA17288C78368E6FD', '2017-06-05 16:43:14', '2017-07-20 19:32:47', NULL, NULL, NULL, 10, '??? ???????? (??????)', 'PART_OnRun', x'B1EF70062751D5118822204C4F4F5020', x'589CD89E08C83D4FAEF62E2AB006A146', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'021C1C4553FF7C4C90CBEF3EA4CF5B52', '2017-06-05 16:43:12', '2017-07-20 19:32:47', NULL, NULL, NULL, 6, '?????????? ?????????? (??????)', 'iu_int_modules_visibleControl', x'84D8A8DB867282478B286AF8916220B6', x'0C1072D2399B2349A194E72A17C853C9', 0, NULL, 0),
(x'4AC530495478FA4A8C4D929576B16E98', x'0263D35A27B1FE44BE10F7567DB1FFCA', '2017-06-05 16:43:15', '2017-07-20 19:32:47', NULL, NULL, NULL, 2, '?????? (???????????? ??????)', 'DINAMICFILTERSCRIPT_Code', x'8261E22384CCD642B7A2D8DA0026EBEE', x'93D550949210D24EB014CCEBD7FE526B', 0, NULL, 0),
(x'2D99A2CD286EBF44A5612A410C06D5F4', x'027F696A96D9154CBBF45473981F55B3', '2017-06-05 16:43:15', '2017-07-20 19:32:47', NULL, NULL, NULL, 2, '?????? (?????? ???? ?? ?????)', 'FIELDVALIDATOR_Code', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'C7837FFC5C63A34EBD541D7C3A1E0805', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'0303E43CA55E0D4DB698307DAB1568AD', '2017-06-05 16:43:15', '2017-07-20 19:32:47', NULL, NULL, NULL, 6, '?????? ????????? ?????? (???????? ????????? ??????)', 'FIELDSRCDEF_FilterString', x'81AFF1D32C914849A87DDF549EE796E2', x'8F6E8AF0D9AA3045A986FA201A9CB743', 0, NULL, 0),
(x'7C1F376509ECD64B956211983335C342', x'032072CF8CD2AC47992FCCD0CB469661', '2017-06-05 16:43:14', '2017-07-20 19:32:47', NULL, NULL, NULL, 2, '???????? (??????????? ??????????)', 'PARTPARAMMAP_ParamName', x'CA6FBEF85D59464FACDBFB5838A246CA', x'79374CE191F32446B135B1D27E52D383', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'033B23BF5771444E9F2477FFD911F111', '2017-06-05 16:43:16', '2017-07-20 19:32:47', NULL, NULL, NULL, 2, '???? ?????? (????????)', 'Reports_ReportFile', x'FA3D9B25ACB8784188FD4B715D372FC3', x'BFA8CC4E8013174E9169AAEF48E2964B', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'03EF4402F8FF0247B99B3111CFEE7C7A', '2017-06-05 16:43:15', '2017-07-20 19:32:47', NULL, NULL, NULL, 4, 'ID (???????? ????????? ??????)', 'FIELDSRCDEF_IDField', x'81AFF1D32C914849A87DDF549EE796E2', x'FA3F8898B85E65458EE5F6D4011BE295', 0, NULL, 0),
(x'B020B3869D0D1447AD025FAB18B96C2E', x'049BF1720133364BA333F3A507C265A3', '2017-06-05 16:43:16', '2017-07-20 19:32:47', NULL, NULL, NULL, 4, '?????? ??????? (??????)', 'Journal_jrnlIconCls', x'6E6CC434159246478D9D4800B6549003', x'6D085B0A45543E43983790F35EEF74D9', 0, NULL, 0),
(x'6D09BB9D9862B944ACA4BC802A4E268A', x'050F84C8E747464881D0FE8B08C266A3', '2017-06-05 16:43:16', '2017-07-20 19:32:48', NULL, NULL, NULL, 2, '????????? (???????? ???????)', 'EPFilterLink_TheExpression', x'9F3507D4042269499789956215E456E6', x'C4A81CCB73ACBF47BEC9DE9F1A0554CC', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'06F27B68F2E4694ABD6E676773E220B6', '2017-06-05 16:43:12', '2017-07-20 19:32:48', NULL, NULL, NULL, 4, '???????? ???? (??????)', 'iu_int_modules_name', x'84D8A8DB867282478B286AF8916220B6', x'194ADE02C83C344A81EC7D41927986C2', 0, NULL, 0),
(x'38316B1D67E2F44E95E12F0E665FE600', x'070D591190898A4188FFCB863AAA781A', '2017-06-05 16:43:14', '2017-07-20 19:32:48', NULL, NULL, NULL, 4, '???????? (?????????)', 'OBJSTATUS_the_comment', x'66C846DFF838F14E92E25F899D98BD16', x'ED484E66281E0D4786567FFB0672C2FA', 0, NULL, 0),
(x'BEFD29AD60E67142A255E0FECFDBF44C', x'07C12827521C774EA4322996E9101132', '2017-06-05 16:43:16', '2017-07-20 19:32:48', NULL, NULL, NULL, 4, '????????? (???? ??????)', 'RPTFields_Caption', x'DED0770C9E55FC43B181156E126543F1', x'8BD31B913B739B46BFF3516F735A0C8F', 0, NULL, 0),
(x'AD97F02BD60A4841BD8A5FDFC7864C41', x'07DE62766263694D9C5689BC71FC5AD3', '2017-06-05 16:43:13', '2017-07-20 19:32:48', NULL, NULL, NULL, 1, '????????? (???????????)', 'FIELDTYPEMAP_Target', x'A6EF70062751D5118822204C4F4F5020', x'EDEFC1792738FB4A8EB11DD6B5E8740F', 0, NULL, 0),
(x'069068FAFE56F143B89E851132C4C605', x'08B48B5B3FBDD84EA7AE070E3A78432B', '2017-06-05 16:43:15', '2017-07-20 19:32:48', NULL, NULL, NULL, 3, '?????? (??????????? ?????????)', 'SysRefCache_SessionID', x'DF24D235302854419E80FF578AAB323C', x'6896BFF3F10F2C42A457124B8FF36CB9', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'0A10CE35829ED94880B0AE914AE3CA5A', '2017-06-05 16:43:14', '2017-07-20 19:32:48', NULL, NULL, NULL, 1, '?????????????????? (?????????)', 'PARAMETERS_sequence', x'4CE798E5DEA9414086FA972E95635600', x'BF56BA07E0FBCF468477AEE9C5EBFDCF', 0, NULL, 0),
(x'175EA8BD0585F34BAB421EA306B00CB0', x'0A8C86D1EAAEC34C9F479DB2C2034DB6', '2017-06-05 16:43:14', '2017-07-20 19:32:48', NULL, NULL, NULL, 4, '????????? ???????? (??????????? ????????)', 'STRUCTRESTRICTION_AllowEdit', x'33AC48F4133B994893EE47D3D62962EC', x'D6D6FAE4D21C6B42B6F29B733D616892', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'0B26F9C950769944AB0DBA0F8DD3A566', '2017-06-05 16:43:14', '2017-07-20 19:32:48', NULL, NULL, NULL, 6, '???? - ?????? 2 (?????????????)', 'PARTVIEW_FilterField2', x'4DB613D7E84C6D46BE2B448874DC0469', x'1AADB443D53B00478B0DCADAC3AA848E', 0, NULL, 0),
(x'38316B1D67E2F44E95E12F0E665FE600', x'0B2EF02398A0E547AAF1AD7DBE2FF3A1', '2017-06-05 16:43:14', '2017-07-20 19:32:49', NULL, NULL, NULL, 1, '???????? (?????????)', 'OBJSTATUS_name', x'66C846DFF838F14E92E25F899D98BD16', x'AC8B0BE94A01584DAF79768BB242119D', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'0B7F18941CFC134086D2C813CE5228E4', '2017-06-05 16:43:12', '2017-07-20 19:32:49', NULL, NULL, NULL, 1, '? ?/? (??????)', 'iu_rcfg_mod_Sequence', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4295B643673AC84990AA25E8F54D1C42', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'0C4BA09E133DE5488A396D06E0A9558B', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 1, '?????? (??? ??????)', 'arc_md_mymodule', x'398B4CD264C8DF4B8015F9973D34C20D', x'D4CA377BE429B94982C7A5C6614031F2', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'0C87BB8DD740E142B63345E0C9D09B24', '2017-06-05 16:43:14', '2017-07-20 19:32:49', NULL, NULL, NULL, 8, '??? ?????? (?????????)', 'PARAMETERS_ReferenceType', x'4CE798E5DEA9414086FA972E95635600', x'D97FF283D0E4A645A5614703602BB9DE', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'0D3E34E33895D2468553B5413C8CC88F', '2017-06-05 16:43:12', '2017-07-20 19:32:49', NULL, NULL, NULL, 2, '??????? (??????)', 'iu_rcfg_mod_Caption', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'F3A56BA1DEB1DE49A74B225EB995D071', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'0FDE0BCE30EEA74E916E5838D5329B73', '2017-06-05 16:43:16', '2017-07-20 19:32:49', NULL, NULL, NULL, 10, '????? (????)', 'EntryPoints_Method', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AC430CE7C5F1AD4BBEB227E2CAF81780', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'1117FA7D1C1DF9418B6AA1D3B2E72EB3', '2017-06-05 16:43:15', '2017-07-20 19:32:49', NULL, NULL, NULL, 20, '???? ??? ??????? ???? (????)', 'FIELD_NumberDateField', x'A4EF70062751D5118822204C4F4F5020', x'FE7B6D8584309E4884424263A02AE30A', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'118B6518EB269949BB1179A76CA255A3', '2017-06-05 16:43:15', '2017-07-20 19:32:49', NULL, NULL, NULL, 1, '??????? (????????????)', 'Users_Family', x'55B88B1465099E4EA3D648DCC8CE528B', x'35BB10AD3FE2DC4EB6FED22292735BD2', 0, NULL, 0),
(x'0A398668D656984195CEC76A7A63BD85', x'11A9C0C821FD39458E6BA9E42685589F', '2017-06-05 16:43:14', '2017-07-20 19:32:49', NULL, NULL, NULL, 1, '??????? ????????? (?????? ?? ?????)', 'VALIDATOR_Target', x'5536327DD7BA124DAFC2E7FF3613B4A1', x'FBA664914D432E499BCBED05CD08591C', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'1418CC0AA3D4C247B8C124C92206E79B', '2017-06-05 16:43:13', '2017-07-20 19:32:50', NULL, NULL, NULL, 7, '????????? ?????? (?????? ??????????)', 'iu_u_def_freelancer', x'CFBD3CA6DD3D6441949752FE925B2A13', x'E2A0CD3011DFE7418C7E5DA06BC27D6D', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'1424DD5DE379884BBF51BAD8D558E6B8', '2017-07-20 17:58:38', '2017-07-20 19:32:50', NULL, NULL, NULL, 6, '????????? (????????)', 'arlog_data_finished', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'AB328AF99BAC104580C3EE28FE1D9336', 0, NULL, 0),
(x'2AA2728BFA77294584E856487926531E', x'1430AAEBF9B98742BDA3311739EDA44E', '2017-06-05 16:43:16', '2017-07-20 19:32:50', NULL, NULL, NULL, 1, '???????? (???????)', 'RPTFormula_Name', x'2E1322E4F4070F4C8246B0F16CD9186A', x'DD51EE13A4A9504E8C214A35A6743D6C', 0, NULL, 0),
(x'F51C326762FF9240A25BCDB3539F6A60', x'145C68194834AF4AA596A7928DD8BD8A', '2017-06-05 16:43:13', '2017-07-20 19:32:50', NULL, NULL, NULL, 4, '????????? (??????????? ????????)', 'GENCONTROLS_VersionMinor', x'FB1CB30425654A479F16999870D8EAAF', x'1DA5823CB495E84993717AE35A1EE5F0', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'149BB5297E85D143AC9134DE3E927584', '2017-06-05 16:43:14', '2017-07-20 19:32:50', NULL, NULL, NULL, 18, '????????????? ???? (??????)', 'PART_integerpkey', x'B1EF70062751D5118822204C4F4F5020', x'0DF7465693D94647A4329088098D18C4', 0, NULL, 0),
(x'B020B3869D0D1447AD025FAB18B96C2E', x'15222C60E1713141829B996DFC108215', '2017-06-05 16:43:16', '2017-07-20 19:32:50', NULL, NULL, NULL, 5, '???????? ????????? (??????)', 'Journal_UseFavorites', x'6E6CC434159246478D9D4800B6549003', x'FDD81F11562038498668757130F4D57C', 0, NULL, 0),
(x'5B6A0AC410131942A1EE228F1192C0CE', x'15243F14B8C6D243A5F2AA181EA2B8EF', '2017-06-05 16:43:16', '2017-07-20 19:32:50', NULL, NULL, NULL, 1, '?????? (????????? ????????)', 'ARMJournal_TheJournal', x'050E1CC4F38C434B9D6EC5FCD37BEB47', x'0849DBF13B9FE940AA27CAA7A524604D', 0, NULL, 0),
(x'6537434A65AAD944AA175B6DDCA5D1CA', x'15455EDFAD254B438341C2CE044025A8', '2017-06-05 16:43:14', '2017-07-20 19:32:51', NULL, NULL, NULL, 2, '?? ???????? (??????????? ????????????)', 'UNIQUECONSTRAINT_PerParent', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FBC3C5571B0DA34F98493C4AB14A3162', 0, NULL, 0),
(x'F51C326762FF9240A25BCDB3539F6A60', x'15E8F087CE24F247B32D2A2CCF9B4556', '2017-06-05 16:43:13', '2017-07-20 19:32:52', NULL, NULL, NULL, 3, '?????? (??????????? ????????)', 'GENCONTROLS_VersionMajor', x'FB1CB30425654A479F16999870D8EAAF', x'82461B4060B7B242913BCFDC7D4C44E7', 0, NULL, 0),
(x'4067E0D70926A14A815863CE6334A13D', x'178E08CA5FBC9D46BB0EB295887C6DA4', '2017-06-05 16:43:17', '2017-07-20 19:32:52', NULL, NULL, NULL, 3, '???????? (????????)', 'MTZExt_def_TheDescription', x'4A14627F7685BC48ACBA1F9DC4874459', x'DC329F056AE0B84480909B9F21F0D412', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'19FE3E4781923540ACB70C4AE5FB1881', '2017-06-05 16:43:14', '2017-07-20 19:32:52', NULL, NULL, NULL, 10, '?????????? ??? ?????? (??? ???????)', 'OBJECTTYPE_AllowSearch', x'AFEF70062751D5118822204C4F4F5020', x'E0B7C2728F4A884693D8A7E5839343A8', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'1A48206AF1BF5F4985446BE51BA5ACF2', '2017-06-05 16:43:13', '2017-07-20 19:32:52', NULL, NULL, NULL, 1, '???????? (??? ????)', 'FIELDTYPE_Name', x'A5EF70062751D5118822204C4F4F5020', x'7DFC5301479BCC4384058339935320D4', 0, NULL, 0),
(x'80B975BF4BABB147A42ECA7586043DE5', x'1A52F7D60475794F96472CA9345AB9EB', '2017-07-20 17:58:39', '2017-07-20 19:32:52', NULL, NULL, NULL, 1, '????????  ???? (??? ??????)', 'armd_type_name', x'B22C7E24E96FBB499D4B021309A3F8F2', x'B130489C3553E74485D3A12CD5A1DE8D', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'1AC95D8DB6BFF645AE318A1498316BDA', '2017-06-05 16:43:15', '2017-07-20 19:32:52', NULL, NULL, NULL, 16, '?????? ???????? ??????? (????)', 'FIELD_CreateRefOnly', x'A4EF70062751D5118822204C4F4F5020', x'B4BFBFEDBC84104B97B3A174D782CD9F', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'1B3F9CE9AB3C804290ACE05D9BB83F2E', '2017-07-20 17:58:39', '2017-07-20 19:32:52', NULL, NULL, NULL, 8, '?????? ??????? (???????? ???)', 'arsms_data_roof_open', x'E6F31473DE46B64AA09D05F6B0A69004', x'67BA9A85C2896F4BADDD848C42038640', 0, NULL, 0),
(x'08F5E5AC4F9E0645B5CA28F60AD0AF52', x'1C414F5245EE5F4BAA076077FF9C797A', '2017-06-05 16:43:13', '2017-07-20 19:32:52', NULL, NULL, NULL, 2, '????? ???  ???????? (????? ?????????)', 'iu_rcfg_docmode_AddMode', x'A3D07ECF2C64104B834721D86BFECBC4', x'D6D5BFCF64D63D4EAEECD9BA51167E33', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'1C81F579F18F924CAB65D850F19436F8', '2017-06-05 16:43:14', '2017-07-20 19:32:53', NULL, NULL, NULL, 8, '??? ???????? (??? ???????)', 'OBJECTTYPE_OnDelete', x'AFEF70062751D5118822204C4F4F5020', x'2DB4F8FC94D05A4DBF6278963DECAD92', 0, NULL, 0),
(x'B9F17F07075E2C42B712755DFF4766D8', x'1C88B3B803256443A03F9D4A8A1420EF', '2017-06-05 16:43:16', '2017-07-20 19:32:53', NULL, NULL, NULL, 2, '?????????? (????????)', 'ARMJRNLRUN_TheExtention', x'8131E84FA500594B9413D06318A119D4', x'0F822574BB1C99409D3FD437DEC9B3ED', 0, NULL, 0),
(x'6AB5FC0F4ACA444588213D68BBADDC64', x'1D301B0C965BBE4ABDE90C63DE2A4979', '2017-06-05 16:43:13', '2017-07-20 19:32:53', NULL, NULL, NULL, 1, '???????? (???????)', 'ENUMITEM_Name', x'236DF435F8613B41924F83792F76E698', x'3743A2DC2CBB3A4696C0C37D6420679E', 0, NULL, 0),
(x'E2B710E2CF5D8A41921A8C241ADADBC3', x'1EAE27FE2F8A5B428F56EB47C240E7FA', '2017-06-05 16:43:15', '2017-07-20 19:32:54', NULL, NULL, NULL, 2, '??????? ????????? (?????????? ??????????)', 'FldExtenders_TargetPlatform', x'1A0E0B5D3680124BB08160139558B594', x'83FDB46A09011044B5C4CAB69153378B', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'1F1B5D87DD9364489005A76217B2F658', '2017-07-20 17:58:39', '2017-07-20 19:32:54', NULL, NULL, NULL, 9, '??????? ? ????? (???????? ???)', 'arsms_data_power_ok', x'E6F31473DE46B64AA09D05F6B0A69004', x'7D2662569EDA704C8C5E4DCD434325FC', 0, NULL, 0),
(x'E2E180EE8C3E034A8706D01F74BA7374', x'1FDB4879ED5E0842A45F7F8CDE9C768B', '2017-06-05 16:43:15', '2017-07-20 19:32:54', NULL, NULL, NULL, 2, '?????? (???????? ?? ?????????)', 'FIELDEXPRESSION_Code', x'D08EB034B5C49C4BBA59870A4599F52A', x'164A939DB55F49489280F4D7733304CC', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'2139A4F29E919140991D8D45F1E7E0EE', '2017-06-05 16:43:16', '2017-07-20 19:32:54', NULL, NULL, NULL, 12, '?????????? (????)', 'EntryPoints_TheExtention', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'719F7F66A264274D93164A3A100A02AA', 0, NULL, 0),
(x'069068FAFE56F143B89E851132C4C605', x'22908C5FBFC82E44A7F6EDA2E6BCAA36', '2017-06-05 16:43:15', '2017-07-20 19:32:54', NULL, NULL, NULL, 2, '????????????? ????????? (??????????? ?????????)', 'SysRefCache_ObjectOwnerID', x'DF24D235302854419E80FF578AAB323C', x'3817A7E9D5356C4EB468B52F523E59D0', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'22A0533B9429FE40BE57C242342687BC', '2017-06-05 16:43:15', '2017-07-20 19:32:54', NULL, NULL, NULL, 12, '?????? ?? ??? (????)', 'FIELD_RefToType', x'A4EF70062751D5118822204C4F4F5020', x'7949BBB5D48E844B9E8FD8647287062B', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'22E420389EC26D48A7613126E5E8546C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 6, '???????? (?????? ??????????)', 'arc_chanel_chanelName', x'6C47841B846CDE4092B517045D93C35A', x'65650E329054564F9C2019FD56F24F6C', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'24DD79B72471054184BECF81F85FB64B', '2017-06-05 16:43:15', '2017-07-20 19:32:54', NULL, NULL, NULL, 8, '??????? ??????? (????????????)', 'Users_LocalPhone', x'55B88B1465099E4EA3D648DCC8CE528B', x'C5E82E7A7E969E4499BEF45B53615802', 0, NULL, 0),
(x'86F35CC38C5DA240B143809FBD19DCED', x'26A275340B821C449FC0082C458A9DE4', '2017-06-05 16:43:16', '2017-07-20 19:32:54', NULL, NULL, NULL, 1, '????????????? (?????? ???????)', 'JColumnSource_SrcPartView', x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'D77E3939283C4F41A18859E103B21F4A', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'27519B221158214199E71B8F8B20ED1F', '2017-06-05 16:43:12', '2017-07-20 19:32:55', NULL, NULL, NULL, 2, '?????? (??????)', 'iu_int_modules_TheIcon', x'84D8A8DB867282478B286AF8916220B6', x'E08B72618F25FF46A4A0420C5B3D4F2B', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'27F9F583149B1B40B84B173570F11313', '2017-06-05 16:43:14', '2017-07-20 19:32:55', NULL, NULL, NULL, 7, '??????? ??????? (?????? ????)', 'TYPEMENU_HotKey', x'7A7476873D74B947AF1CAB00FF81154F', x'778BEE54A226CE439350C496251E88AF', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'282FDE8DAA921D4AB065AA60745F9D25', '2017-07-20 17:58:38', '2017-07-20 19:32:55', NULL, NULL, NULL, 3, '????? ??????? (????????)', 'arlog_data_SendTime', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'E4A2D64A075A4B4BACF69FC7C64EDB32', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'28BB0DD638ECCA47A49BF3C6BC696762', '2017-07-20 17:58:39', '2017-07-20 19:32:55', NULL, NULL, NULL, 4, '??? ????????? (???????? ???)', 'arsms_data_opercode', x'E6F31473DE46B64AA09D05F6B0A69004', x'EDFCAC684AD33840AF8252B22B1A493E', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'2A13946160DA744BBA432CD8EA004A4F', '2017-06-05 16:43:15', '2017-07-20 19:32:55', NULL, NULL, NULL, 5, '??? ???? (????)', 'FIELD_Name', x'A4EF70062751D5118822204C4F4F5020', x'149976562DCDFF4F87242CCCC2209F72', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'2A468BFBA7512045B33F061482AACBEE', '2017-06-05 16:43:15', '2017-07-20 19:32:55', NULL, NULL, NULL, 5, '???????? ??? (????????????)', 'Users_DomaiName', x'55B88B1465099E4EA3D648DCC8CE528B', x'568A2862604DBE4C845387B8F227B9A9', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'2AAC95306AD16C45B8375BBD05F22CBF', '2017-06-05 16:43:13', '2017-07-20 19:32:56', NULL, NULL, NULL, 6, '????? ?????????? (??????????)', 'GENERATOR_TARGET_TheDevelopmentEnv', x'B9EF70062751D5118822204C4F4F5020', x'B5B21C9A6D0EED4195D1E81F8955FAFB', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'2B189A18B99B6A4494C140A4DDF0D944', '2017-06-05 16:43:13', '2017-07-20 19:32:56', NULL, NULL, NULL, 4, '???????? (?????? ??????????)', 'iu_u_def_surname', x'CFBD3CA6DD3D6441949752FE925B2A13', x'1CED800F06BC0C42B655398CC50653EA', 0, NULL, 0),
(x'E2B710E2CF5D8A41921A8C241ADADBC3', x'2B54D795CF96B547B633D36B1EB52372', '2017-06-05 16:43:15', '2017-07-20 19:32:56', NULL, NULL, NULL, 4, '?????? (?????????? ??????????)', 'FldExtenders_TheConfig', x'1A0E0B5D3680124BB08160139558B594', x'E5042C091A48154C9741738CE08064A1', 0, NULL, 0),
(x'849BE21055811E47A84CC8FC045E5202', x'2C0871A752E98F40A0621E91CB94FF00', '2017-06-05 16:43:13', '2017-07-20 19:32:57', NULL, NULL, NULL, 1, '???????? (????)', 'iu_crole_name', x'1051A02ED67D914BB774AF6ECBC42108', x'79A9219532B0D547AA5DB4C6D72773B3', 0, NULL, 0),
(x'1583598F41B2784F8AAEC48441FBF478', x'2C4D7382DA37314999AD58FD6F85F019', '2017-06-05 16:43:14', '2017-07-20 19:32:59', NULL, NULL, NULL, 1, '?????????, ??????? ??????????? ????? (??????????? ???????)', 'METHODRESTRICTION_Part', x'70307B0F09F77D4E868CCC337E3075D1', x'A346C0EDD504C845AD5372CCDEA55210', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'2DD0C364DCD72D4FA4A9CF55B147277D', '2017-06-05 16:43:15', '2017-07-20 19:32:59', NULL, NULL, NULL, 6, '????????? ????????????? (?????? ????????????)', 'the_Session_LastAccess', x'A23E94783679584FB31676E4F968E3B4', x'6E114E9F6A772547ACEEFB88734D4556', 0, NULL, 0),
(x'46AAACA12F5A984496E5BBF2B2A51719', x'2E86727E39415B40B4ACE963EC58BCAD', '2017-06-05 16:43:16', '2017-07-20 19:32:59', NULL, NULL, NULL, 2, '?????????? (??????????)', 'ARMJRNLADD_TheExtention', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'0D21836D650C7E49A3EED78AA5E84D1C', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'2ECCFEBB0ABB604391358D696A3A8D77', '2017-06-05 16:43:15', '2017-07-20 19:32:59', NULL, NULL, NULL, 4, '??? ??? ????? (????????????)', 'Users_Login', x'55B88B1465099E4EA3D648DCC8CE528B', x'422E7BC75803914FBDD2B95A66B1EB25', 0, NULL, 0),
(x'CBE08C320913E042B13EE942A7905511', x'2ECEBF347408D24FA613453C8D9F34E1', '2017-06-05 16:43:14', '2017-07-20 19:32:59', NULL, NULL, NULL, 2, '?????? (??????????)', 'SCRIPT_Code', x'A3EF70062751D5118822204C4F4F5020', x'79D0954B5006F0408A7224431AAE1AE4', 0, NULL, 0),
(x'FA51C1EA55BD4F47ABC87B539EDC1781', x'2F3106342EEBEA48A81E1D096D9F865A', '2017-06-05 16:43:14', '2017-07-20 19:33:00', NULL, NULL, NULL, 4, '????????? ??????????? (??????????? ?????)', 'FIELDRESTRICTION_AllowModify', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E7D8257EEED0BD4F87D143910056735B', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'2F52A05985E77F49A29E6E800F54C0EA', '2017-06-05 16:43:15', '2017-07-20 19:33:00', NULL, NULL, NULL, 3, '???????? (????????????)', 'Users_SurName', x'55B88B1465099E4EA3D648DCC8CE528B', x'E2ED0ACDFDDE0C468D52A98A09D3C086', 0, NULL, 0),
(x'08F5E5AC4F9E0645B5CA28F60AD0AF52', x'2FC1E2033E387946BCB24530C6657B5A', '2017-06-05 16:43:13', '2017-07-20 19:33:00', NULL, NULL, NULL, 4, '????? ????????? (????? ?????????)', 'iu_rcfg_docmode_AllowAdd', x'A3D07ECF2C64104B834721D86BFECBC4', x'1BA824EB70FC9F419A5850523563398C', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'3024223A18BA1C44AFF80CBE356FCEAC', '2017-06-05 16:43:15', '2017-07-20 19:33:00', NULL, NULL, NULL, 9, '????? ???? ?????? (????)', 'FIELD_AllowNull', x'A4EF70062751D5118822204C4F4F5020', x'162D0FE4B342E04B813B558CBBCA84FF', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'30C1815A5033C642963F9A303D9CDA90', '2017-06-05 16:43:14', '2017-07-20 19:33:00', NULL, NULL, NULL, 1, '? ?/? (??????)', 'PART_Sequence', x'B1EF70062751D5118822204C4F4F5020', x'CBBDBBA277AA5E479D3646AB5813CC27', 0, NULL, 0),
(x'FACEDA2A0DFD2645B4D91001FC02D14A', x'30FE92C2AA70F748A286E7899A586C8A', '2017-06-05 16:43:16', '2017-07-20 19:33:00', NULL, NULL, NULL, 5, '?????????? (???)', 'WorkPlace_TheComment', x'C421399726499D4CA7816062CF81B5AD', x'28848240D781C44399163998F43B2F29', 0, NULL, 0),
(x'1D298669C4F71143A7B45323230CA609', x'33C3492A2C513649A845E913AF2A3D27', '2017-06-05 16:43:15', '2017-07-20 19:33:00', NULL, NULL, NULL, 3, '?????? ? ??????? ????????? ???????? (?????? ???????)', 'SysLog_LogStructID', x'E8DAEA453798E54E9A3107370302F20F', x'B44D6A47DB69C54EA4D7999C09183B97', 0, NULL, 0),
(x'588B9F1891E14443BFCABF57322C0ADC', x'33EF3B1230890F42B6BCA1F5DA0B4DD1', '2017-06-05 16:43:15', '2017-07-20 19:33:00', NULL, NULL, NULL, 4, '?????? (?????????? ??????????)', 'ExtenderInterface_TheConfig', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'16A28D8A31BFAD44AABAF271D8F7A399', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'33F9A1DDAC5DDF43B2B934FA2D21A360', '2017-06-05 16:43:15', '2017-07-20 19:33:01', NULL, NULL, NULL, 7, '??????? ?????????? (????)', 'FIELD_IsBrief', x'A4EF70062751D5118822204C4F4F5020', x'9471AD46ACA9EA479C4AF685D7CBABFD', 0, NULL, 0),
(x'1F8AB1E4A56A7E4DAFDEAE788A7BE57E', x'345B61F831084E45B86F8C3B493A09E2', '2017-06-05 16:43:15', '2017-07-20 19:33:01', NULL, NULL, NULL, 2, '???????? (??????????? ??????????)', 'FIELDPARAMMAP_ParamName', x'E82A7554B006C64E8DAA692E52A0D36C', x'DEDFC8B1EE4DFF46B28B9E6F4852A1AE', 0, NULL, 0),
(x'A21BF27ED6DD9147880462D22EC3920A', x'350C48A581DCE44FA453BE532379A621', '2017-06-05 16:43:17', '2017-07-20 19:33:01', NULL, NULL, NULL, 2, '???????? ?????? (?????????? ??????????)', 'MTZExtRel_TheClassName', x'DDE68FE4F979424DBAC3CB39F69171BC', x'7356A5A4795A07499D2CAC330FAEF4BB', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'36C03BC02AF9364990A90DC6D93A6D3F', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 7, '?????? NO (??? ??????)', 'arc_md_roof_no', x'398B4CD264C8DF4B8015F9973D34C20D', x'C41ABB2FF73C974CAB36ABA8BEA98ADC', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'3705D6C5A449F340944FFFB3C4627746', '2017-06-05 16:43:14', '2017-07-20 19:33:01', NULL, NULL, NULL, 6, '????? ?? ???????? (?????????)', 'PARAMETERS_AllowNull', x'4CE798E5DEA9414086FA972E95635600', x'E2948ED3CE97BE4BA976D1998EE21CA3', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'37B6846625F36D4CAE7EA5C90DF809AF', '2017-06-05 16:43:14', '2017-07-20 19:33:01', NULL, NULL, NULL, 13, '???????? ??????? ?? ???????????? (??? ???????)', 'OBJECTTYPE_UseOwnership', x'AFEF70062751D5118822204C4F4F5020', x'29BD7E8346A648498546C52BDD2ECC82', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'3800F0A91580B94FA0E6467B7FD25C5C', '2017-06-05 16:43:16', '2017-07-20 19:33:01', NULL, NULL, NULL, 13, '??? (????)', 'EntryPoints_ARM', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'728E351326635C4B86533B7889594E4D', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'3905A1795D8FCB49A1BBD7F1C165DC6D', '2017-06-05 16:43:13', '2017-07-20 19:33:01', NULL, NULL, NULL, 2, '????????? (??? ????)', 'FIELDTYPE_TypeStyle', x'A5EF70062751D5118822204C4F4F5020', x'6D704889A360DE498A0DA4DEE615DBD8', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'39236BF2B58DFE42B46A67BC0661BA53', '2017-06-05 16:43:13', '2017-07-20 19:33:01', NULL, NULL, NULL, 5, '??????? (??? ????)', 'FIELDTYPE_Minimum', x'A5EF70062751D5118822204C4F4F5020', x'F1F54B530CB4054B9F0D9DC6C3EE5D56', 0, NULL, 0),
(x'FACEDA2A0DFD2645B4D91001FC02D14A', x'3A76367847794B4EAE6F3C3F69C0326B', '2017-06-05 16:43:16', '2017-07-20 19:33:01', NULL, NULL, NULL, 1, '???????? (???)', 'WorkPlace_Name', x'C421399726499D4CA7816062CF81B5AD', x'24C4148E04FA8D4C8C74C28806A34ACD', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'3A80CEEE4766A44CAC6BC858BB4A7949', '2017-06-05 16:43:14', '2017-07-20 19:33:01', NULL, NULL, NULL, 6, '? ?????? (?????? ???????)', 'PARTMENU_IsToolBarButton', x'2E9E8E54F6892248A312101CA4A9FE74', x'A643F157081A8C4B9EB122E58F4D5E75', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'3B9BC1C6C9FF084290D718F68A1694EE', '2017-06-05 16:43:16', '2017-07-20 19:33:02', NULL, NULL, NULL, 9, '???????? (????)', 'EntryPoints_Document', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'57025F8A0A88024DAE93E81E717140D4', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'3BFD340A9989EB49B957B51DB545ACEF', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 8, '???????? NO (??? ??????)', 'arc_md_pop_no', x'398B4CD264C8DF4B8015F9973D34C20D', x'63C32B86842F5A4193D8309C63EB5068', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'3E1931E0DA031B408EF40CF56A919BAC', '2017-06-05 16:43:13', '2017-07-20 19:33:02', NULL, NULL, NULL, 3, '??????? (??????????)', 'GENERATOR_TARGET_QueueName', x'B9EF70062751D5118822204C4F4F5020', x'75B9F1885CCCC24DB85E7DB3CCBBA666', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'3FC5EA5D4A95B04EB2BD44D5AFBC925B', '2017-06-05 16:43:15', '2017-07-20 19:33:02', NULL, NULL, NULL, 24, '????? (????)', 'FIELD_TheMask', x'A4EF70062751D5118822204C4F4F5020', x'2D13F4D4B6A5EB4F812E2910E961E2B8', 0, NULL, 0),
(x'588B9F1891E14443BFCABF57322C0ADC', x'4002D87DFEAB674FA134FA6E52B2E84F', '2017-06-05 16:43:15', '2017-07-20 19:33:02', NULL, NULL, NULL, 1, '???????? (?????????? ??????????)', 'ExtenderInterface_TheName', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'E6D050D3945BD94EBA9BE028575D15BA', 0, NULL, 0),
(x'6AB5FC0F4ACA444588213D68BBADDC64', x'404861FD4A95C34883201F543CA04A6D', '2017-06-05 16:43:13', '2017-07-20 19:33:02', NULL, NULL, NULL, 3, '???????? ? ???? (???????)', 'ENUMITEM_NameInCode', x'236DF435F8613B41924F83792F76E698', x'94F9A86BD8B2E94D97BBEE6ED01C3CF4', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'40A37FC820742349BF8B7B6FDA2F7600', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 9, '??????? NO (??? ??????)', 'arc_md_power_no', x'398B4CD264C8DF4B8015F9973D34C20D', x'2853A67C5AD81A43AF1BA7C643AEBB16', 0, NULL, 0),
(x'7C1F376509ECD64B956211983335C342', x'40E3EBC40AF01D4C8A0CD889032403FF', '2017-06-05 16:43:14', '2017-07-20 19:33:02', NULL, NULL, NULL, 1, '???? (????????) (??????????? ??????????)', 'PARTPARAMMAP_FieldName', x'CA6FBEF85D59464FACDBFB5838A246CA', x'8575828DCCB8AD42A6A76538E481BA21', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'414D0709258AE341923021C770D672DD', '2017-06-05 16:43:14', '2017-07-20 19:33:02', NULL, NULL, NULL, 10, '?????? ?? ?????? (?????????)', 'PARAMETERS_RefToPart', x'4CE798E5DEA9414086FA972E95635600', x'1E5877214C48A14190A3898F8065D615', 0, NULL, 0),
(x'FACEDA2A0DFD2645B4D91001FC02D14A', x'41E25C2F175B674586F79212284DF2F9', '2017-06-05 16:43:16', '2017-07-20 19:33:02', NULL, NULL, NULL, 4, '????????? ?????????? (???)', 'WorkPlace_ThePlatform', x'C421399726499D4CA7816062CF81B5AD', x'A6AD8C1D36B8F0448F86CBD63379EF4A', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'42E3825619773F4EA78E67E3926D210E', '2017-06-05 16:43:12', '2017-07-20 19:33:02', NULL, NULL, NULL, 8, '????? ????????? (??????)', 'iu_int_modules_otherdocmode', x'84D8A8DB867282478B286AF8916220B6', x'140DF587AF96624D9A3F9C193146E507', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'4368BECB9E17FD4C8BEFE83ABCA6CC92', '2017-06-05 16:43:16', '2017-07-20 19:33:02', NULL, NULL, NULL, 2, '???????? (????)', 'EntryPoints_Name', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'497DEF6C4BBE3742A2680B9155957F6B', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'43AE36D937DC5F42BC0C394564E273D4', '2017-06-05 16:43:15', '2017-07-20 19:33:02', NULL, NULL, NULL, 6, '? ?????? (?????? ????)', 'FIELDMENU_IsToolBarButton', x'E4C38941C2713D42A56F4E71CB91B52D', x'D286B50DC3C23442B4EAA8FFB5F14A2E', 0, NULL, 0),
(x'11E04692D1EB904A9129CA050A98DFB7', x'444080DBB370AD419B9B3A9A9266BCC6', '2017-06-05 16:43:17', '2017-07-20 19:33:02', NULL, NULL, NULL, 1, '?????????????????? (?????? ????? ???????)', 'FilterFieldGroup_sequence', x'23D9C69807B88C4191E7C351511B5EB1', x'27FAE1F8B8903A49902B9FCF50BA04F0', 0, NULL, 0),
(x'2D99A2CD286EBF44A5612A410C06D5F4', x'4454A759325BE44EA21741FC4FEA4A1F', '2017-06-05 16:43:15', '2017-07-20 19:33:02', NULL, NULL, NULL, 1, '????????? (?????? ???? ?? ?????)', 'FIELDVALIDATOR_Target', x'D5BE0BB4C5840B4B8679172AA1ACDAD9', x'F92E464CB68309428FD9D5B4E7C168EF', 0, NULL, 0),
(x'E2B710E2CF5D8A41921A8C241ADADBC3', x'4465B42E848E2E4CAB6036AD556F9FA6', '2017-06-05 16:43:15', '2017-07-20 19:33:02', NULL, NULL, NULL, 3, '?????? (?????????? ??????????)', 'FldExtenders_TheObject', x'1A0E0B5D3680124BB08160139558B594', x'1F2D71DE2EA202439AEBE9844DCC4D26', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'447233D5A7054D4DA4F4BAF4A8CA8210', '2017-06-05 16:43:16', '2017-07-20 19:33:02', NULL, NULL, NULL, 5, '??????? ???????? (????)', 'EntryPoints_ActionType', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'DD3BAAED6251234DB2200C017A16CC53', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'44D7C95E658E2A4D8B00B6C5D6B3B439', '2017-06-05 16:43:15', '2017-07-20 19:33:03', NULL, NULL, NULL, 1, '???????? (?????? ????)', 'FIELDMENU_Name', x'E4C38941C2713D42A56F4E71CB91B52D', x'1DE4E3D848C2C247868B2623D6B3E592', 0, NULL, 0),
(x'08F5E5AC4F9E0645B5CA28F60AD0AF52', x'450ADBF624C75141BFBC6F18B2ED14D0', '2017-06-05 16:43:13', '2017-07-20 19:33:03', NULL, NULL, NULL, 3, '????? ??? ?????????????? (????? ?????????)', 'iu_rcfg_docmode_EditMode', x'A3D07ECF2C64104B834721D86BFECBC4', x'4BECAF32481BAA4A8A2D388521183919', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'4631D5CCC610664486B1E016968798E3', '2017-06-05 16:43:15', '2017-07-20 19:33:03', NULL, NULL, NULL, 7, '?????? ???????? (?????? ????????????)', 'the_Session_StartAt', x'A23E94783679584FB31676E4F968E3B4', x'AD229F02920EC347A3E5FEA5ABFCC7C8', 0, NULL, 0),
(x'B9F17F07075E2C42B712755DFF4766D8', x'4788CADF6854F04982531753B6C5EAA4', '2017-06-05 16:43:16', '2017-07-20 19:33:04', NULL, NULL, NULL, 1, '???????? (????????)', 'ARMJRNLRUN_Name', x'8131E84FA500594B9413D06318A119D4', x'77AD01D324ADDE4D9DA90B6148B89662', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'47C921A603E78E48859FC02EC90E64DE', '2017-06-05 16:43:15', '2017-07-20 19:33:04', NULL, NULL, NULL, 23, '??? ?????? ??? ??????? ????? (????)', 'FIELD_theNameClass', x'A4EF70062751D5118822204C4F4F5020', x'F01A2228A296014A9708711D439C9787', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'480E1839B2280B4C8DFABC7B38E8B6AD', '2017-06-05 16:43:13', '2017-07-20 19:33:04', NULL, NULL, NULL, 8, '??????? ?????? (??????)', 'iu_rcfg_mod_ColegsObject', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'6AEB244EA5E24A40ABA30BC26B15AD72', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'4819AFA22860CE4C941E906249590017', '2017-06-05 16:43:15', '2017-07-20 19:33:04', NULL, NULL, NULL, 7, '?????????? ????????? ?????? (???????? ????????? ??????)', 'FIELDSRCDEF_SortField', x'81AFF1D32C914849A87DDF549EE796E2', x'766A3B30E1A9884182328B87342735B2', 0, NULL, 0),
(x'1EB8E0771DF1A749A169D9EA125860EC', x'48A813A2E6A8774CBBFBDBB88484755C', '2017-06-05 16:43:13', '2017-07-20 19:33:04', NULL, NULL, NULL, 4, '????????? (??????????)', 'GENREFERENCE_VersionMinor', x'9B803E67F6CF0943A52BFE2118AE508E', x'D08E98EBBC4F834FB79CD4773654471D', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'4920B6DBCBED3B45B811A098B1D28102', '2017-06-05 16:43:12', '2017-07-20 19:33:04', NULL, NULL, NULL, 4, '?????? (??????)', 'iu_rcfg_mod_TheIcon', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3A633BDBD2285C498DC472D02008F594', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'4A9880F95F5EE24280146F480D4F36EB', '2017-06-05 16:43:12', '2017-07-20 19:33:04', NULL, NULL, NULL, 5, '??????? (??????)', 'iu_int_modules_Caption', x'84D8A8DB867282478B286AF8916220B6', x'63A60194A7ED5842882595440CF82D40', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'4B5ECEFCB2B54D4CB5118EDA9F4757CC', '2017-06-05 16:43:16', '2017-07-20 19:33:04', NULL, NULL, NULL, 3, '????????? (????????)', 'Reports_Caption', x'FA3D9B25ACB8784188FD4B715D372FC3', x'44B70D542EDAF64489685F1A00AF372F', 0, NULL, 0),
(x'18594B077070E4479356DB0F70FA06DA', x'4BCD8748E3E94C4C8053EC8672F7C99A', '2017-07-20 17:58:39', '2017-07-20 19:33:04', NULL, NULL, NULL, 1, '?????? (??????)', 'armd_info_moduletype', x'FE4567F62EEF1545A397B52EB98F59BF', x'6AB31D6D41AD45488861C3DF51F65597', 0, NULL, 0),
(x'F51C326762FF9240A25BCDB3539F6A60', x'4D0414462B83754689D8FB7BBB699812', '2017-06-05 16:43:13', '2017-07-20 19:33:04', NULL, NULL, NULL, 1, 'ProgID ???????????? ???????? (??????????? ????????)', 'GENCONTROLS_ControlProgID', x'FB1CB30425654A479F16999870D8EAAF', x'8D727636686B454FB3E63754B3625164', 0, NULL, 0),
(x'B020B3869D0D1447AD025FAB18B96C2E', x'4D1E3C2D6DEB554F88ADD3C2C38B0FA5', '2017-06-05 16:43:16', '2017-07-20 19:33:05', NULL, NULL, NULL, 1, '???????? (??????)', 'Journal_Name', x'6E6CC434159246478D9D4800B6549003', x'431F95DC8A34644CA248B9D11833BB46', 0, NULL, 0),
(x'4067E0D70926A14A815863CE6334A13D', x'4E30D3EF23199943B03A44D3BBF46CEA', '2017-06-05 16:43:17', '2017-07-20 19:33:06', NULL, NULL, NULL, 1, '???????? (????????)', 'MTZExt_def_Name', x'4A14627F7685BC48ACBA1F9DC4874459', x'A00FA7E471BA8143A1938DA3DF3AE36F', 0, NULL, 0),
(x'CE0AFCE7C4EBB8438B91B3CA29F1B3D8', x'4ED4FACB70DB8D4D81F41414F0D80CF5', '2017-06-05 16:43:16', '2017-07-20 19:33:06', NULL, NULL, NULL, 2, '????? (??????)', 'ARMJRNLREP_TheReport', x'003476C234BE3340B4B5756CD5252CEA', x'9FD766EF1E249448AB2BAEB442FF12CC', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'4F3D6FFBEAA13B4489CA80F3A01596AE', '2017-06-05 16:43:14', '2017-07-20 19:33:06', NULL, NULL, NULL, 5, '???? - ?????? 1 (?????????????)', 'PARTVIEW_FilterField1', x'4DB613D7E84C6D46BE2B448874DC0469', x'B69A9691B3776949950E4A1D03D35FD6', 0, NULL, 0),
(x'08F5E5AC4F9E0645B5CA28F60AD0AF52', x'4F77C8C9F1BB1C4CBBD4C206C5B2039E', '2017-06-05 16:43:13', '2017-07-20 19:33:06', NULL, NULL, NULL, 1, '??? ????????? (????? ?????????)', 'iu_rcfg_docmode_The_Document', x'A3D07ECF2C64104B834721D86BFECBC4', x'E048F724A05E5A42B4F4DC8C8D70D1CB', 0, NULL, 0),
(x'11E04692D1EB904A9129CA050A98DFB7', x'50D11423CBE37F428D73A729BF46413A', '2017-06-05 16:43:17', '2017-07-20 19:33:06', NULL, NULL, NULL, 2, '???????? (?????? ????? ???????)', 'FilterFieldGroup_Name', x'23D9C69807B88C4191E7C351511B5EB1', x'4AE3643BF6A4BA49B0F85BF88770EEBA', 0, NULL, 0),
(x'74FCD32B103AC54396F7B12FF4DF4F41', x'51369A9459255546A41F51286F5E082F', '2017-06-05 16:43:14', '2017-07-20 19:33:06', NULL, NULL, NULL, 2, '???? ????? ???????? ???????? ??????? ?????? ??????? (????? ??????)', 'OBJECTMODE_DefaultMode', x'6D2968111CA0DB45B67D76A07F3FF64C', x'F7B5144DE8A0A445ADCC5B2D11D547B9', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'5155E0851F20E94FAB4F073FF3AAEFEC', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 4, '??????? (??????????)', 'arc_info_phone', x'1778EF018A784C4486C0DA720FFBA8E0', x'BC1D371B36319540B9697C9BF073511F', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'52428C747546514C9AEBFC0955A3C934', '2017-06-05 16:43:14', '2017-07-20 19:33:06', NULL, NULL, NULL, 7, '??????? (???????)', 'ViewColumn_Expression', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'F3BA514510EA2740A4401B6A23F36198', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'525C1B1C4BE54246900836C0CF41CCB4', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 7, '??????????? (?????? ??????????)', 'arc_chanel_chanelComment', x'6C47841B846CDE4092B517045D93C35A', x'6F47A494B029B743A3463402466B8503', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'527DE83DFCD45843AB03E8247565FA69', '2017-06-05 16:43:14', '2017-07-20 19:33:06', NULL, NULL, NULL, 16, '????? ?????? ????????? (??????)', 'PART_IsJormalChange', x'B1EF70062751D5118822204C4F4F5020', x'E10090E920B24445A483AFADDA09CEEF', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'52CAE8CCEA92644FA1728FC2A215CDC2', '2017-06-05 16:43:15', '2017-07-20 19:33:06', NULL, NULL, NULL, 10, '?????? ???? (????)', 'FIELD_DataSize', x'A4EF70062751D5118822204C4F4F5020', x'623C86641C1DD349BF84604893BCD630', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'532E5D9538DEED4A93262D987C7287A8', '2017-06-05 16:43:15', '2017-07-20 19:33:06', NULL, NULL, NULL, 7, '??????? ??????? (?????? ????)', 'FIELDMENU_HotKey', x'E4C38941C2713D42A56F4E71CB91B52D', x'2BD7973D7EBF9B47A94A561697724485', 0, NULL, 0),
(x'86F35CC38C5DA240B143809FBD19DCED', x'53A6FF0D753C2C42B5D1ED015690F7EC', '2017-06-05 16:43:16', '2017-07-20 19:33:07', NULL, NULL, NULL, 2, '???? ????????????? (?????? ???????)', 'JColumnSource_ViewField', x'EB858C8D5ED1D745B13B0B4001EB9AC2', x'8F0DF7445FB5FC4A975BA0C421E377C5', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'543E1E7782614F46849535A997499534', '2017-06-05 16:43:14', '2017-07-20 19:33:07', NULL, NULL, NULL, 13, '?????? ?????????? (??????)', 'PART_ExtenderObject', x'B1EF70062751D5118822204C4F4F5020', x'5CFE7F7D9C75394B9AC8E748A35EB0E0', 0, NULL, 0),
(x'51C53E011155DC41AFCE4CB79E0998C4', x'5443F4010B61D14983CFE51F696716B2', '2017-06-05 16:43:17', '2017-07-20 19:33:07', NULL, NULL, NULL, 1, '???????? (??????)', 'Filters_Name', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'9857DF622E53A54C924FE0CA9AF26DCE', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'547701BBECAC1E4DB4D2C6DECACF75B7', '2017-06-05 16:43:15', '2017-07-20 19:33:07', NULL, NULL, NULL, 2, '??? (????????????)', 'Users_Name', x'55B88B1465099E4EA3D648DCC8CE528B', x'50713C28D9A43A4E8BFA77AF0C2F704A', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'5540FF684DEFF6449A7D2813BA3C476B', '2017-06-05 16:43:15', '2017-07-20 19:33:07', NULL, NULL, NULL, 18, '????????? (????)', 'FIELD_TheNumerator', x'A4EF70062751D5118822204C4F4F5020', x'57B055D27CB93240A4A73B76F765E2E3', 0, NULL, 0),
(x'74FCD32B103AC54396F7B12FF4DF4F41', x'55DAC30F9F43A947A350A45CC972954D', '2017-06-05 16:43:14', '2017-07-20 19:33:07', NULL, NULL, NULL, 3, '???????? (????? ??????)', 'OBJECTMODE_TheComment', x'6D2968111CA0DB45B67D76A07F3FF64C', x'1B44AA1227414641956D6F887E04B47D', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'56BA84620A9B374A897958205F146683', '2017-06-05 16:43:16', '2017-07-20 19:33:07', NULL, NULL, NULL, 21, '????????? ?????? (????)', 'EntryPoints_AllowPrint', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'20EAAE69F1C8524BB6DA71F033C7208D', 0, NULL, 0),
(x'52B247BBBF1FA449A715465677BB0D1F', x'56E5A93FEC07D44B9FC07CF58334541F', '2017-06-05 16:43:13', '2017-07-20 19:33:07', NULL, NULL, NULL, 1, '???? - ???????? (???????????)', 'LocalizeInfo_LangFull', x'5A437DA5B3730741B22BC18782085C84', x'54892B16BB19C14186CC5E3B0EBE02A8', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'582AB51021A30D498D49F8A7B9AB38A1', '2017-06-05 16:43:15', '2017-07-20 19:33:07', NULL, NULL, NULL, 5, '???????????? (?????? ????????????)', 'the_Session_Usersid', x'A23E94783679584FB31676E4F968E3B4', x'828D644EFE81444E98ABCD542C698286', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'58B84C3C6CEA6340B9802E7409F16470', '2017-06-05 16:43:14', '2017-07-20 19:33:07', NULL, NULL, NULL, 12, '???????? (??? ???????)', 'OBJECTTYPE_TheComment', x'AFEF70062751D5118822204C4F4F5020', x'1C81FD5B49BB84479710A0529A35CF74', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'58F96CB7645D4E4CBC2A6E48097A3EFF', '2017-06-05 16:43:13', '2017-07-20 19:33:08', NULL, NULL, NULL, 8, '??????? ?????????? ? ????????? ????????????? (??? ????)', 'FIELDTYPE_GridSortType', x'A5EF70062751D5118822204C4F4F5020', x'7EAE9A6123DA0E4681ECCBE32A96D493', 0, NULL, 0),
(x'2AA2728BFA77294584E856487926531E', x'5A5A01E401375944BE90D95A9772702A', '2017-06-05 16:43:16', '2017-07-20 19:33:08', NULL, NULL, NULL, 2, '????????? (???????)', 'RPTFormula_Code', x'2E1322E4F4070F4C8246B0F16CD9186A', x'D5D4BFB72A29D1418986EA197AC38275', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'5ADFE9E19AA66044875C2651490DAB94', '2017-06-05 16:43:17', '2017-07-20 19:33:08', NULL, NULL, NULL, 4, '??? ???? (???? ???????)', 'FileterField_FieldType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'7D03FEC7BE86A648B808788BB35D8849', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'5B01B3EFD9C48142BEA203C18055789F', '2017-06-05 16:43:13', '2017-07-20 19:33:08', NULL, NULL, NULL, 11, '????? ????????? (??????)', 'iu_rcfg_mod_otherdocmode', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'76E1401971B4464097994A2A2997B236', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'5B06E99060B99D4C95D5F76D1FE060AF', '2017-06-05 16:43:14', '2017-07-20 19:33:08', NULL, NULL, NULL, 3, '????????? (?????? ???????)', 'PARTMENU_ToolTip', x'2E9E8E54F6892248A312101CA4A9FE74', x'E316214CAFA73C4D8EED671C681E78E3', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'5B76603B9525274CA2683E2B5903DC30', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 5, 'E-Mail (??????????)', 'arc_info_email', x'1778EF018A784C4486C0DA720FFBA8E0', x'7487CE8714D2334994E7C1DD557DE340', 0, NULL, 0),
(x'B020B3869D0D1447AD025FAB18B96C2E', x'5C2146A066CF5B4AB9AC8026CF7CEDDE', '2017-06-05 16:43:16', '2017-07-20 19:33:08', NULL, NULL, NULL, 2, '????????? (??????)', 'Journal_the_Alias', x'6E6CC434159246478D9D4800B6549003', x'AEDE10BB9DE8344784444750220B79CE', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'5C23ECF29F4188418672BF0D518E9EFE', '2017-06-05 16:43:14', '2017-07-20 19:33:08', NULL, NULL, NULL, 3, '??? ?????? (?????????????)', 'PARTVIEW_ForChoose', x'4DB613D7E84C6D46BE2B448874DC0469', x'A50917873AF66643AE915255F1A6AB91', 0, NULL, 0),
(x'74FCD32B103AC54396F7B12FF4DF4F41', x'5C83B663CF9F8444A53948C95BDE9A3D', '2017-06-05 16:43:14', '2017-07-20 19:33:08', NULL, NULL, NULL, 1, '???????? ?????? (????? ??????)', 'OBJECTMODE_Name', x'6D2968111CA0DB45B67D76A07F3FF64C', x'21E364D6ADCE054DA244E2039EECE21A', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'5CCFE45645FD954FA631A155133A1269', '2017-06-05 16:43:13', '2017-07-20 19:33:09', NULL, NULL, NULL, 8, 'e-mail (?????? ??????????)', 'iu_u_def_email', x'CFBD3CA6DD3D6441949752FE925B2A13', x'2384CCC80F7161439C6CDD0613DF9680', 0, NULL, 0),
(x'588B9F1891E14443BFCABF57322C0ADC', x'5D57CCA3C5E0854EB9EE459DCC0802B1', '2017-06-05 16:43:15', '2017-07-20 19:33:09', NULL, NULL, NULL, 2, '??????? ????????? (?????????? ??????????)', 'ExtenderInterface_TargetPlatform', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'9676341BA2FF2F42ACACFA465357D3C3', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'5D8FD7EBB66EEB4F8BE7643DBC546FE8', '2017-06-05 16:43:15', '2017-07-20 19:33:09', NULL, NULL, NULL, 6, 'e-mail (????????????)', 'Users_EMail', x'55B88B1465099E4EA3D648DCC8CE528B', x'4E59801BB0C45940B17E858E450FD636', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'6046A768E1B23A4089E7F11E35F8BE24', '2017-06-05 16:43:14', '2017-07-20 19:33:10', NULL, NULL, NULL, 3, '????????? ??? (????????? ?????????????)', 'PARTVIEW_LNK_RefType', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'FA0E0DE36C81CC4E9F2A3A736ED110BA', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'604EFC44FF083143AA2F0C2E736EB094', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 3, '????? ??????? (?????? ??????????)', 'arc_chanel_ch_on', x'6C47841B846CDE4092B517045D93C35A', x'E7EAC0FADC419F4E93A63D56C4704C03', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'6096C9A15D93C849868BD025E38D1B0F', '2017-06-05 16:43:14', '2017-07-20 19:33:10', NULL, NULL, NULL, 3, '????????? (?????????)', 'PARAMETERS_Caption', x'4CE798E5DEA9414086FA972E95635600', x'18A058D6F7E4FA429048215433A13347', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'60D6BC50B341FD48BAA7A7A5FBED9BE4', '2017-06-05 16:43:15', '2017-07-20 19:33:10', NULL, NULL, NULL, 3, '? ?/? (????)', 'FIELD_Sequence', x'A4EF70062751D5118822204C4F4F5020', x'AB684CDF96732C44AF236BB1B7665B06', 0, NULL, 0),
(x'18594B077070E4479356DB0F70FA06DA', x'60EA1AE91954D24CB8FD501D7F8BD9A6', '2017-07-20 17:58:39', '2017-07-20 19:33:10', NULL, NULL, NULL, 2, '???????? ????? (??????)', 'armd_info_serialno', x'FE4567F62EEF1545A397B52EB98F59BF', x'2A8A60BD279BF243A5596E8E5BB950BE', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'6123896629FD684EA66C28D70B49F683', '2017-06-05 16:43:15', '2017-07-20 19:33:10', NULL, NULL, NULL, 3, '?????? ???????? (?????? ????????????)', 'the_Session_ClosedAt', x'A23E94783679584FB31676E4F968E3B4', x'E7192E16C9BD4640B7375F1018307043', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'618EEF7EB553DB4FA4E5FF5DF72DDE18', '2017-06-05 16:43:14', '2017-07-20 19:33:11', NULL, NULL, NULL, 15, '??????? ??????????? BRIEF ???? (??????)', 'PART_ruleBrief', x'B1EF70062751D5118822204C4F4F5020', x'0D3ABD32A2B82445B9C11E290710778C', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'61F4865EDAC41448ADFA8E631CA7EEFC', '2017-06-05 16:43:13', '2017-07-20 19:33:11', NULL, NULL, NULL, 13, '?????????? ?????????? (??????)', 'iu_rcfg_mod_visibleControl', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'2718BD8B667C004A826C0C8D504CD016', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'621486B6DC9CF04C993CA64A52D8FE7B', '2017-06-05 16:43:13', '2017-07-20 19:33:12', NULL, NULL, NULL, 3, '???????? (??? ????)', 'FIELDTYPE_the_Comment', x'A5EF70062751D5118822204C4F4F5020', x'999CA22159C1D04D89258DF526B895FE', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'630644B08C3AEA479F6283F418E8C457', '2017-06-05 16:43:14', '2017-07-20 19:33:12', NULL, NULL, NULL, 4, '??? ?????? (?????????)', 'PARAMETERS_TypeOfParm', x'4CE798E5DEA9414086FA972E95635600', x'7070D54129C6C848A0A417ECE3163EB6', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'6389A6EE3F38604DBA94E16CBE95624C', '2017-06-05 16:43:14', '2017-07-20 19:33:12', NULL, NULL, NULL, 1, '???????? (?????? ???????)', 'PARTMENU_Name', x'2E9E8E54F6892248A312101CA4A9FE74', x'5C60BC924A29264DB6A0490B11A2B65E', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'63ECF0350E09FE4E8F9F5F8B509DBDAF', '2017-06-05 16:43:15', '2017-07-20 19:33:12', NULL, NULL, NULL, 22, '?????? ??? ???????? ??????????? (????)', 'FIELD_shablonBrief', x'A4EF70062751D5118822204C4F4F5020', x'5D87FB366347474A9E73291FBFE1F1DF', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'6408EF2953F76F4CB289B825D027306B', '2017-06-05 16:43:13', '2017-07-20 19:33:12', NULL, NULL, NULL, 7, '????? ?????? (??? ????)', 'FIELDTYPE_AllowLikeSearch', x'A5EF70062751D5118822204C4F4F5020', x'ADF67B2937FEE64EAC8B40D2E1E50A93', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'6436654DF1C4D64BB2D358AB23BAAF50', '2017-06-05 16:43:16', '2017-07-20 19:33:12', NULL, NULL, NULL, 6, '?????????? ??? ???????? ?????? (????????)', 'Reports_TheReportExt', x'FA3D9B25ACB8784188FD4B715D372FC3', x'DA54895B7920D94DA1752DF34D31E2BE', 0, NULL, 0),
(x'B898C6A12240E34BBFA691AA404551D2', x'65A20A30D77AF74AAC43A6B5B029FA89', '2017-06-05 16:43:13', '2017-07-20 19:33:13', NULL, NULL, NULL, 3, '????????????? ?????? (??????)', 'Num_Values_OwnerRowID', x'0BC03D83D7E8914D91032DD084BEFC1E', x'68CAE51FED8B624197FD6F44E2D0D6D9', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'65DFFACF646FDB4C8D9B1AC543670747', '2017-06-05 16:43:16', '2017-07-20 19:33:13', NULL, NULL, NULL, 4, '???????? ? ?????? (????)', 'EntryPoints_AsToolbarItem', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BDC65D7D13D14B4DBDABF0890B8D1CBE', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'66BD80268D11FC419F00C0985B4F9221', '2017-06-05 16:43:16', '2017-07-20 19:33:13', NULL, NULL, NULL, 19, '???????? ???????? (????)', 'EntryPoints_AllowDel', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'BC2555EC6D61834DA45F61ACAD93149F', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'6718757F6B1A314BB8D78EB7C0792AC9', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 4, '??? ???????????? (??? ??????)', 'arc_md_deivetype', x'398B4CD264C8DF4B8015F9973D34C20D', x'D6B2D1937D92174F9174FBF2B4B032B9', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'674E79854E678A4EA62E95DA4A9A0022', '2017-06-05 16:43:14', '2017-07-20 19:33:13', NULL, NULL, NULL, 6, '???????? ? ?????? (?????? ????)', 'TYPEMENU_IsToolBarButton', x'7A7476873D74B947AF1CAB00FF81154F', x'863AE5CA67FDBA439BABCF5E828B7B94', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'677188D83B6A484FAB2DB4672AA0AD6C', '2017-06-05 16:43:14', '2017-07-20 19:33:13', NULL, NULL, NULL, 9, '?????? ?? ??? (?????????)', 'PARAMETERS_RefToType', x'4CE798E5DEA9414086FA972E95635600', x'E38CB46586BB2D42A8C4E1CC5AC74F2C', 0, NULL, 0),
(x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', x'68B7C829F180444EB1970C6C8D46B882', '2017-06-05 16:43:16', '2017-07-20 19:33:13', NULL, NULL, NULL, 2, '???????? (??????? ???????)', 'JournalColumn_name', x'317BD7F857A78C48BB5822700737D4B8', x'53E2C57C8E936245BD3AA6B97484B8DC', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'6958734E5D4F434AAFF066F7F24D1FDF', '2017-06-05 16:43:13', '2017-07-20 19:33:13', NULL, NULL, NULL, 6, '????????? ?? ????? (?????? ??????????)', 'iu_u_def_sendtomail', x'CFBD3CA6DD3D6441949752FE925B2A13', x'5186229F6902904EA13833CFCAEA76DE', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'6A212B46D863FD4B8A55EEDF95A5248C', '2017-06-05 16:43:13', '2017-07-20 19:33:13', NULL, NULL, NULL, 1, '?????? (?????? ??????????)', 'iu_u_def_theClient', x'CFBD3CA6DD3D6441949752FE925B2A13', x'5CBE61865A265242A790E9A9B62A5DD2', 0, NULL, 0),
(x'FA51C1EA55BD4F47ABC87B539EDC1781', x'6A451876B08C6940A152096105BB7F65', '2017-06-05 16:43:14', '2017-07-20 19:33:14', NULL, NULL, NULL, 2, '????, ?? ??????? ????????????? ??????????? (??????????? ?????)', 'FIELDRESTRICTION_TheField', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'49E6AE83FAEB70479AF2F07A576345AA', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'6A5FD925A4257B43B4AA5CC74A410FDF', '2017-06-05 16:43:16', '2017-07-20 19:33:14', NULL, NULL, NULL, 3, '????????? (????)', 'EntryPoints_Caption', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'5C8EFFDC6FEF834DA2D318545B7B142F', 0, NULL, 0),
(x'52B247BBBF1FA449A715465677BB0D1F', x'6AAC34F9F1F68D459847B5E68DEB448D', '2017-06-05 16:43:13', '2017-07-20 19:33:14', NULL, NULL, NULL, 2, '??? ????? (???????????)', 'LocalizeInfo_LangShort', x'5A437DA5B3730741B22BC18782085C84', x'6089784572E2B24CA33C2559564C95A5', 0, NULL, 0),
(x'1F8AB1E4A56A7E4DAFDEAE788A7BE57E', x'6B4B556D93335244BDE58BC90C8EDF91', '2017-06-05 16:43:15', '2017-07-20 19:33:14', NULL, NULL, NULL, 3, '????????????? ???????? ?????? (??????????? ??????????)', 'FIELDPARAMMAP_NoEdit', x'E82A7554B006C64E8DAA692E52A0D36C', x'4D0AA71C88A35B44A8BA46E3001CA1CD', 0, NULL, 0),
(x'B020B3869D0D1447AD025FAB18B96C2E', x'6C553B70597D424F975EC6597749CD08', '2017-06-05 16:43:16', '2017-07-20 19:33:14', NULL, NULL, NULL, 3, '???????? (??????)', 'Journal_TheComment', x'6E6CC434159246478D9D4800B6549003', x'66650B8C936598408D5BCD1835C3BB7A', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'6C577595E4168945A1CB1255A9AE87FA', '2017-06-05 16:43:14', '2017-07-20 19:33:14', NULL, NULL, NULL, 17, '???????????? ?????? ???????? (??????)', 'PART_UseArchiving', x'B1EF70062751D5118822204C4F4F5020', x'560CCC73DC89724CBC4E67C07028EA15', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'6C79B9D8ACD43B44B6F42BF2F09D026C', '2017-06-05 16:43:15', '2017-07-20 19:33:14', NULL, NULL, NULL, 13, '?????? ?? ?????? (????)', 'FIELD_RefToPart', x'A4EF70062751D5118822204C4F4F5020', x'38F28AD75F0BF848B5F3C9230790DAA7', 0, NULL, 0),
(x'F51C326762FF9240A25BCDB3539F6A60', x'6CBB75F2D460C44C86FB339CFEF7DDF7', '2017-06-05 16:43:13', '2017-07-20 19:33:14', NULL, NULL, NULL, 2, '????? ???????????????????? (??????????? ????????)', 'GENCONTROLS_ControlClassID', x'FB1CB30425654A479F16999870D8EAAF', x'F71745CCA37F35478351A031B3315154', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'6CD60AF1DD03154F80DFC57907C38B65', '2017-06-05 16:43:16', '2017-07-20 19:33:14', NULL, NULL, NULL, 7, '?????? (????)', 'EntryPoints_Journal', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9EE64CB2B5C3854DA3A918BF50385854', 0, NULL, 0),
(x'11E04692D1EB904A9129CA050A98DFB7', x'6D344A62844BF6428A9063FBA402EBF0', '2017-06-05 16:43:17', '2017-07-20 19:33:14', NULL, NULL, NULL, 4, '????? ????????? (?????? ????? ???????)', 'FilterFieldGroup_AllowIgnore', x'23D9C69807B88C4191E7C351511B5EB1', x'C69F7C918243284A90767BC70352F94E', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'6D5AEF637530B14194D519A166892FA6', '2017-06-05 16:43:14', '2017-07-20 19:33:14', NULL, NULL, NULL, 1, '???????? (?????????????)', 'PARTVIEW_Name', x'4DB613D7E84C6D46BE2B448874DC0469', x'DF2429F38B66B9479CAFCDDA9B0C081B', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'6DB6C3853DFF45478DC3D4E2EB9321D9', '2017-06-05 16:43:17', '2017-07-20 19:33:14', NULL, NULL, NULL, 9, '?????? ???????? (???? ???????)', 'FileterField_ValueArray', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'91255A0E505DD14290D37E3DF29DFC51', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'6ECC0AAC9ED77A469571F83B58A9AEE5', '2017-06-05 16:43:13', '2017-07-20 19:33:14', NULL, NULL, NULL, 2, '??????? (?????? ??????????)', 'iu_u_def_lastname', x'CFBD3CA6DD3D6441949752FE925B2A13', x'CB8F6D43C322214CB8138FAAB49FCE66', 0, NULL, 0),
(x'087611F8DACB47469AADCE81BF086BA9', x'6F534E8550CBE34B8AD3903C0AD4759F', '2017-06-05 16:43:16', '2017-07-20 19:33:14', NULL, NULL, NULL, 4, '????????? ????????????? (????????? ???????)', 'JournalSrc_ViewAlias', x'4D24C3DAD670A445885DD610F748EBFC', x'32918078A0BB9D4B8482FC94C3A00B2E', 0, NULL, 0),
(x'52458C310EDAC74CB45F3822A66F0C58', x'6FAC7EA99019FD4EB95A17E1F8D712C3', '2017-06-05 16:43:15', '2017-07-20 19:33:15', NULL, NULL, NULL, 7, '??????? (????????????)', 'Users_Phone', x'55B88B1465099E4EA3D648DCC8CE528B', x'4EE8DCC2C7F88843BC47229E2E7A4910', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'705F4A3DEFD45E45AB158BA57CE51718', '2017-06-05 16:43:14', '2017-07-20 19:33:15', NULL, NULL, NULL, 11, '??? ?????????? (??? ???????)', 'OBJECTTYPE_ReplicaType', x'AFEF70062751D5118822204C4F4F5020', x'496770C738B39248A18F28417379EA86', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'70EC0393893EAB4FB979D7210C3EB4B7', '2017-06-05 16:43:13', '2017-07-20 19:33:15', NULL, NULL, NULL, 5, '???? ? ???????????? (?????? ??????????)', 'iu_u_def_curRole', x'CFBD3CA6DD3D6441949752FE925B2A13', x'D1DF1E0866A77E4FB0A3075CA70A61FB', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'714832E3F2B40A4791BF23BCB05E8561', '2017-07-20 17:58:38', '2017-07-20 19:33:15', NULL, NULL, NULL, 2, '????? (????????)', 'arlog_data_chanel', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'6A20C84C2F67404B9D139D7C500AED04', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'717CEEDD49E9D84D825946F23D81D929', '2017-06-05 16:43:12', '2017-07-20 19:33:15', NULL, NULL, NULL, 1, '? ?/? (??????)', 'iu_int_modules_Sequence', x'84D8A8DB867282478B286AF8916220B6', x'02358FCF910457458BE09862909B9166', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'718ECAD4B789084196214BB9F89A9944', '2017-06-05 16:43:14', '2017-07-20 19:33:16', NULL, NULL, NULL, 8, '??? ????? (???????)', 'ViewColumn_ForCombo', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'0C2652A0A1C78041A2C6DB82B70371A9', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'7231A80B48997E4BB694445BB9417DA7', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 6, '????????????? ???? (??? ??????)', 'arc_md_master_fio', x'398B4CD264C8DF4B8015F9973D34C20D', x'47941865E136DE419939DC53DEE36469', 0, NULL, 0),
(x'FA51C1EA55BD4F47ABC87B539EDC1781', x'7299C10544C77946A7FF1E0711790DF5', '2017-06-05 16:43:14', '2017-07-20 19:33:16', NULL, NULL, NULL, 1, '?????????, ??????? ??????????? ???? (??????????? ?????)', 'FIELDRESTRICTION_ThePart', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'4E11440C87AD7C4BB7782C5DF78855B2', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'729C94F36CCFD247BA3A1B8E86C99992', '2017-06-05 16:43:14', '2017-07-20 19:33:16', NULL, NULL, NULL, 2, '????????? (?????? ????)', 'TYPEMENU_Caption', x'7A7476873D74B947AF1CAB00FF81154F', x'2A675E9391B908459F484DF0E87EF687', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'757050DA62E1D84496A2A2F48AE1BD38', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 1, '??? ?????? (?????? ??????????)', 'arc_chanel_ch_taype', x'6C47841B846CDE4092B517045D93C35A', x'54426900137F914C8F9D921F5DCAC84D', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'75881646F417914BB2B9F60926650F63', '2017-06-05 16:43:15', '2017-07-20 19:33:16', NULL, NULL, NULL, 17, '????????????? (????)', 'FIELD_IsAutoNumber', x'A4EF70062751D5118822204C4F4F5020', x'A263F6A96AC0DA4D9B8A659CFFDF25E6', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'75927E2F3032C94BBE8B6D4FC4700C4C', '2017-06-05 16:43:15', '2017-07-20 19:33:16', NULL, NULL, NULL, 15, '?????? ? ???????? ??????? (????)', 'FIELD_InternalReference', x'A4EF70062751D5118822204C4F4F5020', x'B1A9CEEE5BC9C44186740C229C2892B3', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'76117A8C69A87E4BAC76E8885B6650B9', '2017-06-05 16:43:14', '2017-07-20 19:33:16', NULL, NULL, NULL, 15, '????????? ?????? ??????? (??? ???????)', 'OBJECTTYPE_CommitFullObject', x'AFEF70062751D5118822204C4F4F5020', x'7BFF06EA8FAD704187A74A019A5730F0', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'76A8DF85DB5D0E44B4C50BC618678752', '2017-06-05 16:43:16', '2017-07-20 19:33:16', NULL, NULL, NULL, 11, '???? ???????? (????)', 'EntryPoints_IconFile', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2405E5C702C3544DA6976F9C9518B5E9', 0, NULL, 0),
(x'1D298669C4F71143A7B45323230CA609', x'7830A1C74562F84B826A8637658FD48E', '2017-06-05 16:43:15', '2017-07-20 19:33:17', NULL, NULL, NULL, 5, '????????????? ????????? (?????? ???????)', 'SysLog_LogInstanceID', x'E8DAEA453798E54E9A3107370302F20F', x'9F813D7FBD932245B914FCCC2C91B48F', 0, NULL, 0),
(x'CB236ADBA9DFDE4984132819DD43E5AB', x'785DA3962184F24CB6C512964B39414A', '2017-06-05 16:43:15', '2017-07-20 19:33:17', NULL, NULL, NULL, 2, '?????? AD (??????)', 'Groups_ADGroup', x'EE6A0EA4417B6D47923CACA251C08E87', x'48F7DAB2A2B53B4A95F0D88AA74F202B', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'785F4632171A4C49ABF0FC6511985336', '2017-06-05 16:43:13', '2017-07-20 19:33:17', NULL, NULL, NULL, 3, '??? (?????? ??????????)', 'iu_u_def_name', x'CFBD3CA6DD3D6441949752FE925B2A13', x'C4E3147C3AB88D4DB65CC7B0339F1E42', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'7B1665ADCE7BFC4F8F7BA21DF1E5C2A1', '2017-06-05 16:43:14', '2017-07-20 19:33:17', NULL, NULL, NULL, 16, '?????? ??????? (??? ???????)', 'OBJECTTYPE_objIconCls', x'AFEF70062751D5118822204C4F4F5020', x'0D5ECD307DA1B246A306C78C6FF9D5AA', 0, NULL, 0),
(x'34A20FE8992A7B49999F64874F353E8D', x'7B90439EE9B9904BB6E4441893145B74', '2017-06-05 16:43:14', '2017-07-20 19:33:17', NULL, NULL, NULL, 1, '????????? (???????? ????????????)', 'INSTANCEVALIDATOR_Target', x'AD5B514233E2DB408F9045DCFCE01BE6', x'2040990F8E51BD4CB6176DECFA4F8627', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'7BD1950E213B5041AD9C544418A9D7B7', '2017-06-05 16:43:15', '2017-07-20 19:33:17', NULL, NULL, NULL, 2, '??? ?????? (????)', 'FIELD_FieldGroupBox', x'A4EF70062751D5118822204C4F4F5020', x'6635C79B580B7F4FA07407E2CB9CF633', 0, NULL, 0),
(x'18594B077070E4479356DB0F70FA06DA', x'7DC8DA2D381499408C37EB6544B0BD76', '2017-07-20 17:58:39', '2017-07-20 19:33:17', NULL, NULL, NULL, 3, '???? ???????????? (??????)', 'armd_info_makedate', x'FE4567F62EEF1545A397B52EB98F59BF', x'F34716C1EDE78B4580C934F3F1D96BB9', 0, NULL, 0),
(x'6AB5FC0F4ACA444588213D68BBADDC64', x'7DE697563F1EE046B4C41C5EFA521E90', '2017-06-05 16:43:13', '2017-07-20 19:33:17', NULL, NULL, NULL, 2, '???????? (???????)', 'ENUMITEM_NameValue', x'236DF435F8613B41924F83792F76E698', x'98CD861EC37BF847A69186227D01E40C', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'8033862C8FF5454181C7DCFF21CFD7B4', '2017-06-05 16:43:15', '2017-07-20 19:33:17', NULL, NULL, NULL, 2, '????????? (?????? ????)', 'FIELDMENU_Caption', x'E4C38941C2713D42A56F4E71CB91B52D', x'1A84D08432139F4BA547257056C7C3D7', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'81A6BEF4014CA34C9021DFCF6C526198', '2017-06-05 16:43:17', '2017-07-20 19:33:17', NULL, NULL, NULL, 7, '???, ???? ????????? (???? ???????)', 'FileterField_RefToType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'56F918905A5D5547A8986B3C52E4F32C', 0, NULL, 0),
(x'1D298669C4F71143A7B45323230CA609', x'81BA71043D49734FB29F75B6C6C0AFA1', '2017-06-05 16:43:15', '2017-07-20 19:33:18', NULL, NULL, NULL, 2, '?????? (?????? ???????)', 'SysLog_the_Resource', x'E8DAEA453798E54E9A3107370302F20F', x'5D0BC4816FB6C2468B1D45888F52ED6C', 0, NULL, 0),
(x'087611F8DACB47469AADCE81BF086BA9', x'827925D77AEFE440B52035A84C016CBA', '2017-06-05 16:43:16', '2017-07-20 19:33:18', NULL, NULL, NULL, 2, '??? ???????? (????????? ???????)', 'JournalSrc_OnRun', x'4D24C3DAD670A445885DD610F748EBFC', x'45EF18E2EC0D924C9A40001A0777CB1A', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'82A72DF47BE37E4D92EBE7504FC27610', '2017-06-05 16:43:17', '2017-07-20 19:33:18', NULL, NULL, NULL, 2, '???????? (???? ???????)', 'FileterField_Name', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5E94EA1F98118C40906040BD85D60EDC', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'8444A868DCB1F747BAE3FE8D4EF3A81D', '2017-07-20 17:58:39', '2017-07-20 19:33:18', NULL, NULL, NULL, 3, '???????? ????? (???????? ???)', 'arsms_data_serialno', x'E6F31473DE46B64AA09D05F6B0A69004', x'8AB2D1312FE90D46ABEE655BF9605BED', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'8457E22EAF26E1458932873CE67F631F', '2017-06-05 16:43:14', '2017-07-20 19:33:18', NULL, NULL, NULL, 1, '? (???????)', 'ViewColumn_sequence', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'91D6162E9EF6F44D804A3A3A87876BC4', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'8550DE740240324F9E444B561002ECC2', '2017-06-05 16:43:16', '2017-07-20 19:33:18', NULL, NULL, NULL, 8, '???????? (????????)', 'Reports_TheComment', x'FA3D9B25ACB8784188FD4B715D372FC3', x'860E54C84370D14A875B0386EA200688', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'85D3F819092E424BB4C420B1A460FFD3', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 1, '??????? (??????????)', 'arc_info_Family', x'1778EF018A784C4486C0DA720FFBA8E0', x'6C03B78FB4B785479DDA7B728340E8D2', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'86524775F5A43B48B198423DDAB81650', '2017-06-05 16:43:15', '2017-07-20 19:33:18', NULL, NULL, NULL, 3, '???????? ?????? (???????? ????????? ??????)', 'FIELDSRCDEF_DataSource', x'81AFF1D32C914849A87DDF549EE796E2', x'9B43F17390F9F242BAF05265D2FEA3FA', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'8916EE0829C65541A62455E4EC050DF5', '2017-06-05 16:43:14', '2017-07-20 19:33:18', NULL, NULL, NULL, 4, '???? - ?????? 0 (?????????????)', 'PARTVIEW_FilterField0', x'4DB613D7E84C6D46BE2B448874DC0469', x'28235A8810E61B46A7A77F4402F3EE8B', 0, NULL, 0),
(x'E2E180EE8C3E034A8706D01F74BA7374', x'89653BACB491F84CA96AAD587A05E545', '2017-06-05 16:43:15', '2017-07-20 19:33:18', NULL, NULL, NULL, 1, '????????? (???????? ?? ?????????)', 'FIELDEXPRESSION_Target', x'D08EB034B5C49C4BBA59870A4599F52A', x'31F0647932DA6146AE303EDB9D36C058', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'897AF47D4EC5DD48906CB93E6ACA8C3B', '2017-06-05 16:43:14', '2017-07-20 19:33:18', NULL, NULL, NULL, 4, '????? (?????? ????)', 'TYPEMENU_the_Action', x'7A7476873D74B947AF1CAB00FF81154F', x'B2CA6F7ABC11704A910C8ACA1F370BFD', 0, NULL, 0),
(x'6537434A65AAD944AA175B6DDCA5D1CA', x'897C3374AA58F54AAB7112FDF742CE4A', '2017-06-05 16:43:14', '2017-07-20 19:33:18', NULL, NULL, NULL, 1, '???????? (??????????? ????????????)', 'UNIQUECONSTRAINT_Name', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'FA8A2FCC5083CB48AB9D57E6103D4490', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'899DBECEAEC9AD42A8307BEEDCD0064C', '2017-06-05 16:43:14', '2017-07-20 19:33:19', NULL, NULL, NULL, 2, '?????: ???? ??? join ???????? (????????? ?????????????)', 'PARTVIEW_LNK_TheJoinSource', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'BC07F828234A3B4F80A28C30F5F12730', 0, NULL, 0),
(x'E2B710E2CF5D8A41921A8C241ADADBC3', x'89C555E3F1FF904EB2C34B81A8FB06EE', '2017-06-05 16:43:15', '2017-07-20 19:33:19', NULL, NULL, NULL, 1, '???????? (?????????? ??????????)', 'FldExtenders_TheName', x'1A0E0B5D3680124BB08160139558B594', x'4918E7AFF0F88A4AB7669C8F163F76F8', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'89DE2F7ABFC4F74B89178EBC4D157B01', '2017-06-05 16:43:15', '2017-07-20 19:33:19', NULL, NULL, NULL, 3, '????????? (?????? ????)', 'FIELDMENU_ToolTip', x'E4C38941C2713D42A56F4E71CB91B52D', x'4091DB91A97D81459DE91A30F697DA5A', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'8A79170D91B1A64891213BD86DE50C8E', '2017-06-05 16:43:14', '2017-07-20 19:33:19', NULL, NULL, NULL, 6, '????????? (???????)', 'ViewColumn_Aggregation', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'7C9ED214068F6B4EBA437EE095DCBA7B', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'8B1435CE2D82EC43880644F52935DD0B', '2017-06-05 16:43:16', '2017-07-20 19:33:19', NULL, NULL, NULL, 6, '?????? (????)', 'EntryPoints_TheFilter', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'3D79183F14ADB34C947B69CDDF289C35', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'8B6C1E8A2415F24CB0E1ADB4779EC73F', '2017-06-05 16:43:15', '2017-07-20 19:33:19', NULL, NULL, NULL, 4, '????????????? ??????????? ?????? (?????? ????)', 'FIELDMENU_ActionID', x'E4C38941C2713D42A56F4E71CB91B52D', x'747E09BA467801469F6AA62B63FBD083', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'8BB4D2110894E642B18DC25B20F44634', '2017-06-05 16:43:16', '2017-07-20 19:33:19', NULL, NULL, NULL, 1, '?????????????????? (????)', 'EntryPoints_sequence', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'E81AD38FB43733499536284B161D1215', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'8CF40FC471A9CF4DBB7EA3963B27315C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 3, '??????????? (??????????)', 'arc_info_org', x'1778EF018A784C4486C0DA720FFBA8E0', x'133309C5319B004A944066A74AB465D9', 0, NULL, 0),
(x'66D36CF1C422CF44BFC917168999C0AE', x'8CF63D2C35092042B2AD963C7635BC53', '2017-07-20 17:58:39', '2017-07-20 19:33:19', NULL, NULL, NULL, 1, '???????? ?????? (???? ???????)', 'armd_chaneltype_name', x'EDE9BE7D7031CC43BBC42FD6050B87F1', x'01F9BCDF9EC95C44958F8415EFFB84BD', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'8E6848F87756BE45AED1BA8C4C7C9583', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 8, '?????????? (???????? ????????? ??????)', 'FIELDSRCDEF_DescriptionString', x'81AFF1D32C914849A87DDF549EE796E2', x'44F899710146D44D865358688A220A8E', 0, NULL, 0),
(x'175EA8BD0585F34BAB421EA306B00CB0', x'8EA7EED40430B443977B733662F30BF4', '2017-06-05 16:43:14', '2017-07-20 19:33:20', NULL, NULL, NULL, 5, '????????? ??????? (??????????? ????????)', 'STRUCTRESTRICTION_AllowDelete', x'33AC48F4133B994893EE47D3D62962EC', x'4068A5FE3A87D04E80B9B88CB3A7570E', 0, NULL, 0),
(x'CB236ADBA9DFDE4984132819DD43E5AB', x'902E73D03AEAD5479DD597355300FD59', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 1, '???????? (??????)', 'Groups_Name', x'EE6A0EA4417B6D47923CACA251C08E87', x'AF477A68B568DD4D928F9229BE67CE36', 0, NULL, 0),
(x'AD97F02BD60A4841BD8A5FDFC7864C41', x'9049372E7EE01949BEEAD81C2002F6F7', '2017-06-05 16:43:13', '2017-07-20 19:33:20', NULL, NULL, NULL, 2, '??? ???????? (???????????)', 'FIELDTYPEMAP_StoageType', x'A6EF70062751D5118822204C4F4F5020', x'842BC8FA8E5E0A408433C29994016DD5', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'90FBFD336A59C94399BD3ACD38441E3F', '2017-06-05 16:43:17', '2017-07-20 19:33:20', NULL, NULL, NULL, 3, '????????? (???? ???????)', 'FileterField_Caption', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'59FD7494E228AF47A92734CD52DDBAC8', 0, NULL, 0),
(x'1EB8E0771DF1A749A169D9EA125860EC', x'91A68E933D8AF94A8E3B3313B5648BD2', '2017-06-05 16:43:13', '2017-07-20 19:33:20', NULL, NULL, NULL, 3, '????? ?????? (??????????)', 'GENREFERENCE_VersionMajor', x'9B803E67F6CF0943A52BFE2118AE508E', x'46886FE2AF53D84D8FDC0B89A6536F8A', 0, NULL, 0),
(x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', x'91DD79F7425EC54EA920C045EC567B39', '2017-06-05 16:43:16', '2017-07-20 19:33:20', NULL, NULL, NULL, 5, '?????????? ??? ??????????? (??????? ???????)', 'JournalColumn_GroupAggregation', x'317BD7F857A78C48BB5822700737D4B8', x'43DC9A4694826E469E8323C9A02C9C6C', 0, NULL, 0),
(x'51C53E011155DC41AFCE4CB79E0998C4', x'92A881E064CE9A4A87E2CE27F7DB7DD3', '2017-06-05 16:43:17', '2017-07-20 19:33:20', NULL, NULL, NULL, 2, '????????? (??????)', 'Filters_TheCaption', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'42EC5E3F709973408C2DAD363EBAEFCC', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'92A8A7E7F2E2EC438D631EA20AA9DC21', '2017-06-05 16:43:16', '2017-07-20 19:33:20', NULL, NULL, NULL, 5, '??? ?????? (????????)', 'Reports_ReportType', x'FA3D9B25ACB8784188FD4B715D372FC3', x'5457EE3FCA222742BF0F252E5E26A72B', 0, NULL, 0),
(x'4AC530495478FA4A8C4D929576B16E98', x'935CB39DE0B74F4989B5FA27DCF487A4', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 1, '??????? ????????? (???????????? ??????)', 'DINAMICFILTERSCRIPT_Target', x'8261E22384CCD642B7A2D8DA0026EBEE', x'8289AA2A31E8A945961524EE2CDAD2C5', 0, NULL, 0),
(x'4067E0D70926A14A815863CE6334A13D', x'942E8011A6C43B4F96BA64CEADBB7A19', '2017-06-05 16:43:17', '2017-07-20 19:33:20', NULL, NULL, NULL, 2, '??? ?????????? (????????)', 'MTZExt_def_ExtType', x'4A14627F7685BC48ACBA1F9DC4874459', x'B3C5D7628BBA8942ADD1D374580562FF', 0, NULL, 0),
(x'1D298669C4F71143A7B45323230CA609', x'949DF8CA75443A47BE76B39B4AA7875F', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 1, '?????? (?????? ???????)', 'SysLog_TheSession', x'E8DAEA453798E54E9A3107370302F20F', x'DFBC9C0B62AE6D40995E1299EAEEA664', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'94A9DAE08DED744A852870577C1127F0', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 21, '???????? (????)', 'FIELD_TheComment', x'A4EF70062751D5118822204C4F4F5020', x'7603E3482F2B8D4EA7D09852EF5CDBE6', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'97C5999B5C8B7A4385E1D895D9020419', '2017-06-05 16:43:14', '2017-07-20 19:33:20', NULL, NULL, NULL, 6, '??????? (????????? ?????????????)', 'PARTVIEW_LNK_SEQ', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'9DABCC08689A334C9F37876ACF95F27D', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'97FA3B40D92947488218B346982C00A0', '2017-06-05 16:43:14', '2017-07-20 19:33:20', NULL, NULL, NULL, 5, '?????? (?????????)', 'PARAMETERS_DataSize', x'4CE798E5DEA9414086FA972E95635600', x'526592209A9B7D47B9588F502B334E27', 0, NULL, 0),
(x'069068FAFE56F143B89E851132C4C605', x'990111AEEB16A34DB73D75603B20584E', '2017-06-05 16:43:15', '2017-07-20 19:33:20', NULL, NULL, NULL, 1, '??? ??????????? (??????????? ?????????)', 'SysRefCache_CacheType', x'DF24D235302854419E80FF578AAB323C', x'6FE2700A628D9D49B5C06F0918D81797', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'9949235C074E044180051110CDE3D616', '2017-06-05 16:43:14', '2017-07-20 19:33:21', NULL, NULL, NULL, 2, '??? (?????????)', 'PARAMETERS_Name', x'4CE798E5DEA9414086FA972E95635600', x'56CA28FB7CD6054DAB844CC5D9A88066', 0, NULL, 0),
(x'087611F8DACB47469AADCE81BF086BA9', x'9A193AD992C60E4AAC2EA12B3320EF84', '2017-06-05 16:43:16', '2017-07-20 19:33:21', NULL, NULL, NULL, 3, '????? ???????? (????????? ???????)', 'JournalSrc_OpenMode', x'4D24C3DAD670A445885DD610F748EBFC', x'715FB7CC138F0148AADF2C16EF98F035', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'9AEB8F9EF92A7D43B0A384DF76BAABC6', '2017-07-20 17:58:39', '2017-07-20 19:33:21', NULL, NULL, NULL, 5, '??????????? ??? (???????? ???)', 'arsms_data_controlcode', x'E6F31473DE46B64AA09D05F6B0A69004', x'E2C38C744074D347A2A4218D684EB7B0', 0, NULL, 0),
(x'6D09BB9D9862B944ACA4BC802A4E268A', x'9BA0F73AB5EFFD4B9ADC3364FC540811', '2017-06-05 16:43:16', '2017-07-20 19:33:21', NULL, NULL, NULL, 3, '???? ??????? (???????? ???????)', 'EPFilterLink_FilterField', x'9F3507D4042269499789956215E456E6', x'FBCE92419F45624085AD8E293A7A86AE', 0, NULL, 0),
(x'B898C6A12240E34BBFA691AA404551D2', x'9BD91C9674891C47A4EAD4187890BF7D', '2017-06-05 16:43:13', '2017-07-20 19:33:21', NULL, NULL, NULL, 1, '???????? (??????)', 'Num_Values_the_Value', x'0BC03D83D7E8914D91032DD084BEFC1E', x'576D4D6F03EEBE4595BC51DF2D9FB41C', 0, NULL, 0),
(x'6D09BB9D9862B944ACA4BC802A4E268A', x'9C4CAE3BEF4AC1418C5593A1B6D9A9AA', '2017-06-05 16:43:16', '2017-07-20 19:33:21', NULL, NULL, NULL, 1, '???????? (???????? ???????)', 'EPFilterLink_RowSource', x'9F3507D4042269499789956215E456E6', x'9CC7C465A81002458FE79F06DB70303F', 0, NULL, 0),
(x'A11EF1EAB16382439693E8661870CA1C', x'9CCC41F0B1B4564DA52A7679CE0DD8C0', '2017-06-05 16:43:14', '2017-07-20 19:33:21', NULL, NULL, NULL, 1, '??????????? ????????? (??????????? ????????)', 'NEXTSTATE_TheState', x'79A1C111B229DC4DBDB71EB21D2FF878', x'08F26761BF3ACE43B8F661D969EF1034', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'9D94081E62DFB041A0F11F01AF05FD75', '2017-06-05 16:43:15', '2017-07-20 19:33:21', NULL, NULL, NULL, 2, '?????? ?????????? ? ?????????? (???????? ????????? ??????)', 'FIELDSRCDEF_ConnectionString', x'81AFF1D32C914849A87DDF549EE796E2', x'1F26059075A3D7438DD91164EC7557AD', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'9DAB583811E01545BC80CA89CCFA14A4', '2017-06-05 16:43:14', '2017-07-20 19:33:21', NULL, NULL, NULL, 8, '??? ???????? (??????)', 'PART_OnCreate', x'B1EF70062751D5118822204C4F4F5020', x'4706FED84DEDCA40BF195813742B1AA4', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'9E05BF6C3901364DA5352462F0A32804', '2017-06-05 16:43:14', '2017-07-20 19:33:21', NULL, NULL, NULL, 5, '???????? ? ???? (?????? ???????)', 'PARTMENU_IsMenuItem', x'2E9E8E54F6892248A312101CA4A9FE74', x'7CBC36D5141A144B9ABF7326E396E760', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'9F26A35E6BDB5947A89261931FC36752', '2017-06-05 16:43:14', '2017-07-20 19:33:22', NULL, NULL, NULL, 7, '??? ???????? (??? ???????)', 'OBJECTTYPE_OnCreate', x'AFEF70062751D5118822204C4F4F5020', x'6C5D7D65FDB4464B9E10F140A42AD509', 0, NULL, 0),
(x'175EA8BD0585F34BAB421EA306B00CB0', x'A2C7057099F81846A8FE0816FEE3AE2C', '2017-06-05 16:43:14', '2017-07-20 19:33:22', NULL, NULL, NULL, 2, '???????? ???????? (??????????? ????????)', 'STRUCTRESTRICTION_AllowRead', x'33AC48F4133B994893EE47D3D62962EC', x'56E9FAA5DADE6745A5E351D1DB6DA9D1', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'A309AF21743011419777D85329365DF3', '2017-06-05 16:43:14', '2017-07-20 19:33:22', NULL, NULL, NULL, 2, '??? ???????? (??????)', 'PART_PartType', x'B1EF70062751D5118822204C4F4F5020', x'99D598E6212E4149AD6266AFF7B34F45', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'A354E015BEE5D7459F776882D2E4F5A6', '2017-06-05 16:43:15', '2017-07-20 19:33:22', NULL, NULL, NULL, 9, 'Login (?????? ????????????)', 'the_Session_Login', x'A23E94783679584FB31676E4F968E3B4', x'16559DABC41D4640B979093EF40199A3', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'A3AB6D346D6E6E4083FF8B03E4F7748F', '2017-06-05 16:43:16', '2017-07-20 19:33:22', NULL, NULL, NULL, 20, '???????? ?????? (????)', 'EntryPoints_AllowFilter', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'2D7A4347B9FC7F43B06F569A15CC81DA', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'A3EB4FF6A497EE44ABFC16E3AEAD5533', '2017-06-05 16:43:13', '2017-07-20 19:33:22', NULL, NULL, NULL, 9, '??????? (?????? ??????????)', 'iu_u_def_thephone', x'CFBD3CA6DD3D6441949752FE925B2A13', x'0FC6FEABF1AB034E910DDE669B66CC42', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'A418D96AEB613A47B304144F0E4C2558', '2017-06-05 16:43:12', '2017-07-20 19:33:22', NULL, NULL, NULL, 5, '???????? ???? (??????)', 'iu_rcfg_mod_name', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'A13307A850F1584281DB91330250BFF1', 0, NULL, 0),
(x'2AA2728BFA77294584E856487926531E', x'A451541F40BB8349BF12660A3D76C67A', '2017-06-05 16:43:16', '2017-07-20 19:33:22', NULL, NULL, NULL, 3, '????????? (???????)', 'RPTFormula_Platform', x'2E1322E4F4070F4C8246B0F16CD9186A', x'023CBBB7214126428DCCA905C7CAF264', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'A7B7D6D50FBE21488E4A7B5AE223F46A', '2017-06-05 16:43:14', '2017-07-20 19:33:22', NULL, NULL, NULL, 19, '?????? ??????? (??????)', 'PART_partIconCls', x'B1EF70062751D5118822204C4F4F5020', x'045B02DB8005AC4D9B3A97F8352BFD42', 0, NULL, 0),
(x'0A398668D656984195CEC76A7A63BD85', x'A8D50AF31326D242B3EC06F19056F273', '2017-06-05 16:43:14', '2017-07-20 19:33:22', NULL, NULL, NULL, 2, '?????? (?????? ?? ?????)', 'VALIDATOR_Code', x'5536327DD7BA124DAFC2E7FF3613B4A1', x'3522BEC13E7EF64D928CD35D347CC04C', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'A8F5D6C4319CC84289E25E7C6FDFA7EA', '2017-06-05 16:43:15', '2017-07-20 19:33:22', NULL, NULL, NULL, 8, '??????????? (?????? ????????????)', 'the_Session_Lang', x'A23E94783679584FB31676E4F968E3B4', x'EC17956C14F42044A5C3F04B7D91A23E', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'A90BF16660CA9D4D980A4ED6B1363D17', '2017-06-05 16:43:17', '2017-07-20 19:33:22', NULL, NULL, NULL, 5, '?????? (???? ???????)', 'FileterField_FieldSize', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'5467F4C026EE574BA16165E7582A86F4', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'A9F4C0A231565B4FA15F7803F6DEF2F7', '2017-06-05 16:43:16', '2017-07-20 19:33:23', NULL, NULL, NULL, 8, '????? (????)', 'EntryPoints_Report', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'4AEE4C033EA34146B27D6CD0D5F2CD9B', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'AA4C37802228FA48889B4C0C286FF75E', '2017-06-05 16:43:12', '2017-07-20 19:33:23', NULL, NULL, NULL, 6, '???? ???????? ??????? (??????)', 'iu_rcfg_mod_GroupName', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'E17FA681A502544185E27D08E05DCFA1', 0, NULL, 0),
(x'1D298669C4F71143A7B45323230CA609', x'AA7432122587044BB943B47A2CCBDD2B', '2017-06-05 16:43:15', '2017-07-20 19:33:23', NULL, NULL, NULL, 4, '???????? (?????? ???????)', 'SysLog_VERB', x'E8DAEA453798E54E9A3107370302F20F', x'9AE5BC4C22977840BA6BDEA3480E455D', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'AB917C623B378849B26DC4091C3ED95B', '2017-06-05 16:43:13', '2017-07-20 19:33:23', NULL, NULL, NULL, 4, '????? ?????? (??? ????)', 'FIELDTYPE_AllowSize', x'A5EF70062751D5118822204C4F4F5020', x'AD1768A8E4E4BE4EB08C60828659BD52', 0, NULL, 0),
(x'1F8AB1E4A56A7E4DAFDEAE788A7BE57E', x'AB998AC2EA95684BBB03A986E9034847', '2017-06-05 16:43:15', '2017-07-20 19:33:23', NULL, NULL, NULL, 1, '???? (????????) (??????????? ??????????)', 'FIELDPARAMMAP_FieldName', x'E82A7554B006C64E8DAA692E52A0D36C', x'E9313F83C43FCF429DFE5D81870CA276', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'AB9F0374C30B804FAB861F351FC7A3BA', '2017-06-05 16:43:13', '2017-07-20 19:33:23', NULL, NULL, NULL, 9, '??????????? ????????????? (??????)', 'iu_rcfg_mod_SubStructObjects', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'FF8DFA2330A2194EAD8CB0821A628D65', 0, NULL, 0),
(x'CE0AFCE7C4EBB8438B91B3CA29F1B3D8', x'ABB929641D6BB547A3A310553E8A5778', '2017-06-05 16:43:16', '2017-07-20 19:33:23', NULL, NULL, NULL, 1, '???????? ?????? (??????)', 'ARMJRNLREP_repname', x'003476C234BE3340B4B5756CD5252CEA', x'1BF559ACC4FF1844AF62ED2BE0BB53CA', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'AC7F91484AB66D409D152AE230743E01', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 6, '????? (??????????)', 'arc_info_login', x'1778EF018A784C4486C0DA720FFBA8E0', x'042F2F6253957440949378453BF13F67', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'ADF0477B34E62B46B5F4522638A4B315', '2017-06-05 16:43:15', '2017-07-20 19:33:23', NULL, NULL, NULL, 1, '????????? (???????? ????????? ??????)', 'FIELDSRCDEF_Provider', x'81AFF1D32C914849A87DDF549EE796E2', x'8492289A3109E240BF8DA5DE550052B6', 0, NULL, 0),
(x'F96D4B780527414B87DC233936A77496', x'AE04BE7ED7330A43B0854F4685533831', '2017-06-05 16:43:16', '2017-07-20 19:33:23', NULL, NULL, NULL, 1, '???????? (??????)', 'RPTStruct_Name', x'2A49E8F524222F4585FFA14882C6554F', x'711023109A1A0F479BE88E8C161A1120', 0, NULL, 0),
(x'A21BF27ED6DD9147880462D22EC3920A', x'AE1B0B6D558A034A99CC4B47DCF3DBF7', '2017-06-05 16:43:17', '2017-07-20 19:33:23', NULL, NULL, NULL, 1, '?????????? (?????????? ??????????)', 'MTZExtRel_ThePlatform', x'DDE68FE4F979424DBAC3CB39F69171BC', x'78D895D334C63F479671D9322967DA2C', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'AE40E9D731B70C4BB51EB181BF580ADC', '2017-06-05 16:43:15', '2017-07-20 19:33:23', NULL, NULL, NULL, 19, '?????? ???? ????????? (????)', 'FIELD_ZoneTemplate', x'A4EF70062751D5118822204C4F4F5020', x'71A9B816D3094B4A86D1FE3371D1D345', 0, NULL, 0),
(x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', x'B06ECB7EAC3ADC4A854BCB529F4702A5', '2017-06-05 16:43:16', '2017-07-20 19:33:23', NULL, NULL, NULL, 3, '???????????? (??????? ???????)', 'JournalColumn_ColumnAlignment', x'317BD7F857A78C48BB5822700737D4B8', x'3D95955ACBF0994C9BD7214886BDC2BA', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'B073CEC46993B8479DD669B5A2D8BCC7', '2017-06-05 16:43:15', '2017-07-20 19:33:24', NULL, NULL, NULL, 14, '????? (????)', 'FIELD_TheStyle', x'A4EF70062751D5118822204C4F4F5020', x'66FFDAA193BFF245879ABFD03C8D1E83', 0, NULL, 0),
(x'29B75214D39E7C40B342AF87089CA104', x'B07A48C0F4204D4DA55BF6A7A242CECA', '2017-06-05 16:43:13', '2017-07-20 19:33:24', NULL, NULL, NULL, 2, '????? ????????? (????????)', 'Num_head_Shema', x'D9BE36C44E29A7488C376D4CF32343BE', x'C2C81EA1042CA646A46659D2066349BC', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'B0E1F5B02CE8AE4A9EA1588ADF58E4DB', '2017-07-20 17:58:38', '2017-07-20 19:33:24', NULL, NULL, NULL, 4, '????????? (????????)', 'arlog_data_sendresult', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'5D7F8DEC3B909043ACFC3EDA7FEA4E78', 0, NULL, 0),
(x'FACEDA2A0DFD2645B4D91001FC02D14A', x'B10510561E7CA146A1574CC2807F9EEA', '2017-06-05 16:43:16', '2017-07-20 19:33:24', NULL, NULL, NULL, 2, '????????? (???)', 'WorkPlace_Caption', x'C421399726499D4CA7816062CF81B5AD', x'49026CB4877D044C959599D6D81FBEF1', 0, NULL, 0),
(x'6537434A65AAD944AA175B6DDCA5D1CA', x'B146226AF6CA294FB3392CF3DCDA30AB', '2017-06-05 16:43:14', '2017-07-20 19:33:24', NULL, NULL, NULL, 3, '???????? (??????????? ????????????)', 'UNIQUECONSTRAINT_TheComment', x'895CAA9CCBF1624BB1D0FF2D29A40057', x'80DF8E6D32976042847EE1209FF71CCE', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'B289D5DC66B6024CA295476C3205B7A8', '2017-07-20 17:58:39', '2017-07-20 19:33:24', NULL, NULL, NULL, 2, '??????? ??????????? (???????? ???)', 'arsms_data_phone', x'E6F31473DE46B64AA09D05F6B0A69004', x'FE1704683D422141B88D97861B0C762C', 0, NULL, 0),
(x'1583598F41B2784F8AAEC48441FBF478', x'B28F53D594F6704F9BC5D369DC424443', '2017-06-05 16:43:14', '2017-07-20 19:33:24', NULL, NULL, NULL, 3, '????????? ???????????? (??????????? ???????)', 'METHODRESTRICTION_IsRestricted', x'70307B0F09F77D4E868CCC337E3075D1', x'91C176D39A2F3647956B3A1A13ECC8DF', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'B37F9732E269E24E83ED35CC2149A2EA', '2017-06-05 16:43:13', '2017-07-20 19:33:24', NULL, NULL, NULL, 1, '???????? (??????????)', 'GENERATOR_TARGET_Name', x'B9EF70062751D5118822204C4F4F5020', x'17D7B34429D89D48A72E6921D49EB5D2', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'B398097FA16022408CF7B050602CAFC6', '2017-06-05 16:43:14', '2017-07-20 19:33:24', NULL, NULL, NULL, 11, '??? ???????? (??????)', 'PART_OnDelete', x'B1EF70062751D5118822204C4F4F5020', x'3E9A65BCAB1C394992E5E9D938DA5BD0', 0, NULL, 0),
(x'BEFD29AD60E67142A255E0FECFDBF44C', x'B3AC0523C479C34EAA78DD68ECC24805', '2017-06-05 16:43:16', '2017-07-20 19:33:24', NULL, NULL, NULL, 2, '??? ???? (???? ??????)', 'RPTFields_FieldType', x'DED0770C9E55FC43B181156E126543F1', x'3DDA49D28AFFDF429EC3A3A866E5B4DD', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'B45FB73C17D8C24A82DA3A3CEFB58209', '2017-06-05 16:43:14', '2017-07-20 19:33:24', NULL, NULL, NULL, 5, '???????? (??????)', 'PART_the_Comment', x'B1EF70062751D5118822204C4F4F5020', x'480E8A1B067CC443BB6430126CC62E52', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'B5E980649CDCF84B935BC26CCD9A83D8', '2017-06-05 16:43:16', '2017-07-20 19:33:24', NULL, NULL, NULL, 15, '??? ????????? (????)', 'EntryPoints_ObjectType', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'7F0E7C2D8150E64C8BDD156668269911', 0, NULL, 0),
(x'64FA779B66F92F44A5DBA525264C289D', x'B603127DCC79C54AB800ED0AB78CC187', '2017-06-05 16:43:14', '2017-07-20 19:33:24', NULL, NULL, NULL, 2, '???????? ?????? (?????? ? ?????????)', 'SHAREDMETHOD_the_Comment', x'ADEF70062751D5118822204C4F4F5020', x'676DEEC83B3BF34581FCC8F3FA40B840', 0, NULL, 0),
(x'8D02258553C3104B83A848EB4D1C854B', x'B64AF811D95C06429CE2CA49823889B1', '2017-06-05 16:43:15', '2017-07-20 19:33:25', NULL, NULL, NULL, 3, '???????? (??????????)', 'MTZAPP_TheComment', x'C2E0DB8C89591042BDFB33C2C45F2509', x'FEFF1E43FFEF1445B237B1ACABD0A2FB', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'B75493B9779C8040B23101E1A42E9220', '2017-06-05 16:43:12', '2017-07-20 19:33:25', NULL, NULL, NULL, 10, '??? ????? (??????)', 'iu_int_modules_AllObjects', x'84D8A8DB867282478B286AF8916220B6', x'27848A0D6725B0469EDF3313C969B9DB', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'B87665699A265C468EB49FEAEEE72046', '2017-06-05 16:43:14', '2017-07-20 19:33:25', NULL, NULL, NULL, 3, '??? (??? ???????)', 'OBJECTTYPE_Name', x'AFEF70062751D5118822204C4F4F5020', x'0FC7B0C75B17FA4CB81A328B0E29BF29', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'BA58747DE4F9AB4F9A6068F3507712FD', '2017-07-20 17:58:38', '2017-07-20 19:33:25', NULL, NULL, NULL, 5, '????? ??????? (????????)', 'arlog_data_trynumber', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'B8D7561EE6FD7D40B935904D21E26307', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'BA6979502A163F41B63BA92004899772', '2017-06-05 16:43:14', '2017-07-20 19:33:25', NULL, NULL, NULL, 4, '????? (?????? ???????)', 'PARTMENU_the_Action', x'2E9E8E54F6892248A312101CA4A9FE74', x'32473779E7B2DB41A34A9F6AAEC5BD36', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'BB51A25E24A97E4483A3EBD2A44DC8F6', '2017-06-05 16:43:14', '2017-07-20 19:33:25', NULL, NULL, NULL, 4, '??????????? ?????? ???? ?????? (??? ???????)', 'OBJECTTYPE_IsSingleInstance', x'AFEF70062751D5118822204C4F4F5020', x'DD041A279409B7439C470EC8EB9999BF', 0, NULL, 0),
(x'A21BF27ED6DD9147880462D22EC3920A', x'BB7CFEE09E2A5044B63EF19871C87F64', '2017-06-05 16:43:17', '2017-07-20 19:33:25', NULL, NULL, NULL, 3, '???????? ?????????? (?????????? ??????????)', 'MTZExtRel_TheLibraryName', x'DDE68FE4F979424DBAC3CB39F69171BC', x'BADD37C8FE4E5D44AABCC4701DF2ED55', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'BC43514681479A409578169D2C79C68B', '2017-06-05 16:43:16', '2017-07-20 19:33:25', NULL, NULL, NULL, 1, '???????? (????????)', 'Reports_Name', x'FA3D9B25ACB8784188FD4B715D372FC3', x'C6673C12706DB54D99EFEC32C85EEC7B', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'BEE50A5E95F8964285D55F36BC09D369', '2017-06-05 16:43:17', '2017-07-20 19:33:26', NULL, NULL, NULL, 8, '??????, ???? ????????? (???? ???????)', 'FileterField_RefToPart', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'BF7AFD80E3E1874897BEFEADC78B9EFC', 0, NULL, 0),
(x'51C53E011155DC41AFCE4CB79E0998C4', x'BF1A58AD6E8BAB46AF421E372108DD7D', '2017-06-05 16:43:17', '2017-07-20 19:33:26', NULL, NULL, NULL, 3, '???????? (??????)', 'Filters_TheComment', x'24D75AB76F6BBD45B0BBC75D17309DC9', x'6294208EDC98A04E83B77796A363820C', 0, NULL, 0),
(x'11E04692D1EB904A9129CA050A98DFB7', x'C021C0CCCEE85F4F95ADD9E268922BDC', '2017-06-05 16:43:17', '2017-07-20 19:33:26', NULL, NULL, NULL, 3, '????????? (?????? ????? ???????)', 'FilterFieldGroup_Caption', x'23D9C69807B88C4191E7C351511B5EB1', x'15402D79B1AA0842BF678D7D220AF66E', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'C0F0E8D971C48142A4723CD46CFCB506', '2017-06-05 16:43:14', '2017-07-20 19:33:26', NULL, NULL, NULL, 7, '????????? ?? ?????????????? (??????)', 'PART_ManualRegister', x'B1EF70062751D5118822204C4F4F5020', x'2F926B0127D09A439FD588D53724E5DB', 0, NULL, 0),
(x'588B9F1891E14443BFCABF57322C0ADC', x'C100A1BC54F5CA499D2BB7EE6A6F9445', '2017-06-05 16:43:15', '2017-07-20 19:33:26', NULL, NULL, NULL, 3, '?????? (?????????? ??????????)', 'ExtenderInterface_TheObject', x'96A9EF0FAD3BBB4EA9AD52AC582CD0A7', x'D1131FAA950F2B49A447601A029D16F3', 0, NULL, 0),
(x'E9328A2B199F96419E8A34A3FD25A4F2', x'C16D5AB55D9FE448BC1AD02BF041A887', '2017-06-05 16:43:15', '2017-07-20 19:33:26', NULL, NULL, NULL, 1, '?????????? (???????????? ??????????)', 'ParentPackage_Package', x'5607A06E80B9234DB209202389953A13', x'93FFEC828C54324FA9E98212DCE538B3', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'C29711F1B0AABC479E017AFD83AEC128', '2017-06-05 16:43:13', '2017-07-20 19:33:26', NULL, NULL, NULL, 9, '?????????? ?????????? (??? ????)', 'FIELDTYPE_DelayedSave', x'A5EF70062751D5118822204C4F4F5020', x'65DBC4A748C5D141A6143A6C57363977', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'C2CE50295816034EA25FAAF54105DE29', '2017-07-20 17:58:39', '2017-07-20 19:33:26', NULL, NULL, NULL, 6, '??????????? (???????? ???)', 'arsms_data_temperature', x'E6F31473DE46B64AA09D05F6B0A69004', x'E991DBC9484CBA428C1CCDF42B566447', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'C2E8B38CB6895541BB0A31AA9E6E4249', '2017-06-05 16:43:14', '2017-07-20 19:33:26', NULL, NULL, NULL, 4, '?????: ???? ??? join ???????? (????????? ?????????????)', 'PARTVIEW_LNK_TheJoinDestination', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'0E1879337F4A0D4B9E52B54228BE1F2A', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'C3DEC1382C4D904DA644EFC7A2139AE6', '2017-06-05 16:43:15', '2017-07-20 19:33:26', NULL, NULL, NULL, 11, '??? ?????? (????)', 'FIELD_ReferenceType', x'A4EF70062751D5118822204C4F4F5020', x'A737207F12045F4FB13B96FCAFB6CE63', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'C477BD1328F51044AC61B2E6B66A4015', '2017-06-05 16:43:12', '2017-07-20 19:33:26', NULL, NULL, NULL, 12, '??????????? ????????????? (??????)', 'iu_int_modules_SubStructObjects', x'84D8A8DB867282478B286AF8916220B6', x'0159899342B3614BB087CC3C552979FD', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'C5A1FEEE95387F4A9BB30B61CCD861B7', '2017-06-05 16:43:13', '2017-07-20 19:33:26', NULL, NULL, NULL, 10, '??? ????????? (??????)', 'iu_rcfg_mod_mydocmode', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'CBF8EDF2C2C4B147B14AA7FF5287AE2B', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'C5D52EB6B863504C85D8CE86C869BD62', '2017-06-05 16:43:15', '2017-07-20 19:33:26', NULL, NULL, NULL, 8, '??? ??????????? ? ??????? (????)', 'FIELD_IsTabBrief', x'A4EF70062751D5118822204C4F4F5020', x'CABEA17A06C3F543A416ABA0F9BB6DB5', 0, NULL, 0),
(x'FACEDA2A0DFD2645B4D91001FC02D14A', x'C691B2BFF4579D4A89668EBF4CF4D71C', '2017-06-05 16:43:16', '2017-07-20 19:33:26', NULL, NULL, NULL, 3, '?????? (???)', 'WorkPlace_TheVersion', x'C421399726499D4CA7816062CF81B5AD', x'332EF0EE70A27C47AC122CC57B907967', 0, NULL, 0),
(x'175EA8BD0585F34BAB421EA306B00CB0', x'C6D9B38E4B602F4EAABD99085E2A33D8', '2017-06-05 16:43:14', '2017-07-20 19:33:26', NULL, NULL, NULL, 1, '?????????, ?????? ? ??????? ????????? (??????????? ????????)', 'STRUCTRESTRICTION_Struct', x'33AC48F4133B994893EE47D3D62962EC', x'8EA7B2BF6A47CB4581DAC2AD0CC71AA6', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'C6F67CB5AD9CAA4B899433DA13719F89', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 2, '????????? (?????? ???????)', 'PARTMENU_Caption', x'2E9E8E54F6892248A312101CA4A9FE74', x'63AB589BA3D08F46B1A0B5890349F55C', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'C7122257700CE5418F7D11F3749937CB', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 3, '???????? (???????)', 'ViewColumn_the_Alias', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'AFFFFBD63B4BBB449D96FD96C6B3A920', 0, NULL, 0),
(x'7C1F376509ECD64B956211983335C342', x'C85B56CF5886294BA185E5EDF51E1B23', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 3, '????????????? ???????? ?????? (??????????? ??????????)', 'PARTPARAMMAP_NoEdit', x'CA6FBEF85D59464FACDBFB5838A246CA', x'A409E1A9C8F03A448E1EA78A7B53F84B', 0, NULL, 0),
(x'DE372C7315796E409FAEA424CAFF2C5D', x'C872F7907C7C534D8944D3BD07C72FB9', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 7, '?????????? ???????? (?????????)', 'PARAMETERS_OutParam', x'4CE798E5DEA9414086FA972E95635600', x'452C16E19EFFC046B2AE8B7962327874', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'C89B517CCC457848B02C3585E75C3EA0', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 1, '????????????? (????????? ?????????????)', 'PARTVIEW_LNK_TheView', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'CE94E3A02452CF48935B2963093CEB96', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'CA93C8329A9B1A49822317829C96DCF4', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 4, '?????? (?????? ??????????)', 'arc_chanel_msg_crash', x'6C47841B846CDE4092B517045D93C35A', x'3DB2729E554A8843B59699EE2994F6AB', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'CABB68BD313D7B4B977DAE3AF36A69BB', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 4, '???????? (??????)', 'PART_Name', x'B1EF70062751D5118822204C4F4F5020', x'42304E8EC6032641BD107C3650D5B95B', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'CB2BEECE065B9F4B87F932083B6CEB4B', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 6, '?? ?????????? ? ?????? (??????)', 'PART_NoLog', x'B1EF70062751D5118822204C4F4F5020', x'6B6B75696557834694480A729ED9CCE0', 0, NULL, 0),
(x'89C0500CA63B234FBD3AFA5FDDAD5028', x'CBEBD5E65D67EC4A90384257626CE861', '2017-06-05 16:43:13', '2017-07-20 19:33:27', NULL, NULL, NULL, 1, '???? (????)', 'iu_rcfg_def_therole', x'E7C6F31042573147B94C647263E4E304', x'2BCA37164AAD154EB41D5C41300AE020', 0, NULL, 0),
(x'CBE08C320913E042B13EE942A7905511', x'CC1FC034D3E04B42A6347EDBE9B44DF7', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 1, '??????? ????????? (??????????)', 'SCRIPT_Target', x'A3EF70062751D5118822204C4F4F5020', x'8C5D85F3195B434DBE96FA2156DB51E1', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'CC358D41C4BF5B4F936BBF92E6E95571', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 5, '???????? (?????? ??????????)', 'arc_chanel_msg_current', x'6C47841B846CDE4092B517045D93C35A', x'17B88C68F9F47E43B0119760B83A4FFD', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'CCDAE9061677EF4BAAE1A5790331F4A3', '2017-06-05 16:43:15', '2017-07-20 19:33:27', NULL, NULL, NULL, 6, '??? ???? (????)', 'FIELD_FieldType', x'A4EF70062751D5118822204C4F4F5020', x'94E580DCCCED2E41BE4FB27E23D6B780', 0, NULL, 0),
(x'0D62DC03806A1F4D8A5C27D960DC081B', x'CDD278B9091C9044A4BE5BC9FACD4F61', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 7, '??????? ??????? (?????? ???????)', 'PARTMENU_HotKey', x'2E9E8E54F6892248A312101CA4A9FE74', x'CA4BEE80724CD8439E7C0D635C4BA8B1', 0, NULL, 0),
(x'FA51C1EA55BD4F47ABC87B539EDC1781', x'CE1EB67C992B734292243657ADDD7CAD', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 5, '???????????? ???? (??????????? ?????)', 'FIELDRESTRICTION_MandatoryField', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'3D0C94D74AABF24C9A848445B27D028B', 0, NULL, 0),
(x'175EA8BD0585F34BAB421EA306B00CB0', x'CEBCA3A916F3364E832DC7FE7EE69718', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 3, '????????? ????????? (??????????? ????????)', 'STRUCTRESTRICTION_AllowAdd', x'33AC48F4133B994893EE47D3D62962EC', x'2300BA81E2F5E146958E664DFCEF2B6B', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'CEF03D67604EFF468C45D474D73C0EA1', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 5, '???????? ? ???? (?????? ????)', 'TYPEMENU_IsMenuItem', x'7A7476873D74B947AF1CAB00FF81154F', x'58014B86E904874599058D3F480B3CD2', 0, NULL, 0),
(x'FA51C1EA55BD4F47ABC87B539EDC1781', x'D0656AB3251AE74798886D4FE1C59930', '2017-06-05 16:43:14', '2017-07-20 19:33:27', NULL, NULL, NULL, 3, '???????? ???????? (??????????? ?????)', 'FIELDRESTRICTION_AllowRead', x'9C11C524C95DAC4ABB01B8CF8EBA998E', x'E97EEC74927E144983ED61C47253C3BA', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'D1AF9F0A13A19A4B8B575A11FAE083EB', '2017-06-05 16:43:16', '2017-07-20 19:33:28', NULL, NULL, NULL, 7, '??????? ?????? (????????)', 'Reports_ReportView', x'FA3D9B25ACB8784188FD4B715D372FC3', x'D6368FFEFD2FA3419BF315554CF22424', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'D1FAD91805AE8F41834F68F7DFD3AF06', '2017-06-05 16:43:14', '2017-07-20 19:33:28', NULL, NULL, NULL, 1, '???????? (?????? ????)', 'TYPEMENU_Name', x'7A7476873D74B947AF1CAB00FF81154F', x'7C715213F6E95544A225797A38525BCF', 0, NULL, 0),
(x'64FA779B66F92F44A5DBA525264C289D', x'D2878F4DE424A8459DC4D20A83816241', '2017-06-05 16:43:14', '2017-07-20 19:33:28', NULL, NULL, NULL, 1, '???????? (?????? ? ?????????)', 'SHAREDMETHOD_Name', x'ADEF70062751D5118822204C4F4F5020', x'090365079152D44B90EB3B8118356905', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'D2F271EDF852E14EA07BBDF2F46026D1', '2017-06-05 16:43:14', '2017-07-20 19:33:28', NULL, NULL, NULL, 2, '???????? (??? ???????)', 'OBJECTTYPE_the_Comment', x'AFEF70062751D5118822204C4F4F5020', x'C7F9B324369671488EB5233FA8EDCF4B', 0, NULL, 0),
(x'069068FAFE56F143B89E851132C4C605', x'D34A64823A00F24584E19F2D9008E96D', '2017-06-05 16:43:15', '2017-07-20 19:33:28', NULL, NULL, NULL, 4, '?????? (??????????? ?????????)', 'SysRefCache_modulename', x'DF24D235302854419E80FF578AAB323C', x'22CCEDFFD4595B40ADA4531839F059CA', 0, NULL, 0),
(x'AD97F02BD60A4841BD8A5FDFC7864C41', x'D374342A1F951E46B906869AAE6D8E97', '2017-06-05 16:43:13', '2017-07-20 19:33:28', NULL, NULL, NULL, 3, '?????? (???????????)', 'FIELDTYPEMAP_FixedSize', x'A6EF70062751D5118822204C4F4F5020', x'334FA599A91FD24DBE1AA84D56E30353', 0, NULL, 0),
(x'102D762FFA17E94CA1FDED6B801A43CA', x'D3E69985141A384197D6971221D83C69', '2017-06-05 16:43:16', '2017-07-20 19:33:28', NULL, NULL, NULL, 4, '????? ??? ???????????? (????????)', 'Reports_PrepareMethod', x'FA3D9B25ACB8784188FD4B715D372FC3', x'41365BA8B23A6545A4467D9E6AA1FA50', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'D3EC10635420EF46AD73DDE82E846105', '2017-06-05 16:43:13', '2017-07-20 19:33:28', NULL, NULL, NULL, 5, '??????? (??????????)', 'GENERATOR_TARGET_GeneratorStyle', x'B9EF70062751D5118822204C4F4F5020', x'2B57FE359AE20D4F87CA9C51A17F4FDD', 0, NULL, 0),
(x'1EB8E0771DF1A749A169D9EA125860EC', x'D410EC64E914BD48AA9D48082D2E907B', '2017-06-05 16:43:13', '2017-07-20 19:33:28', NULL, NULL, NULL, 2, '????? ?????? (??????????)', 'GENREFERENCE_RefClassID', x'9B803E67F6CF0943A52BFE2118AE508E', x'44C39AEA9B8F5A419CDF438A27C7AF2F', 0, NULL, 0),
(x'B898C6A12240E34BBFA691AA404551D2', x'D41F2535A0AB58438129896A1A3A5109', '2017-06-05 16:43:13', '2017-07-20 19:33:28', NULL, NULL, NULL, 2, '?????? (??????)', 'Num_Values_OwnerPartName', x'0BC03D83D7E8914D91032DD084BEFC1E', x'AA4BCC195B855B428957431FE17C8C6F', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'D4B64D952606C941BA87E3D4241146AB', '2017-06-05 16:43:15', '2017-07-20 19:33:29', NULL, NULL, NULL, 4, '??????? (????)', 'FIELD_Caption', x'A4EF70062751D5118822204C4F4F5020', x'62939D47339C71489FF4FF281A9A3D97', 0, NULL, 0),
(x'29B75214D39E7C40B342AF87089CA104', x'D4E635EB6926BB4CBAEF40CBA40B6036', '2017-06-05 16:43:13', '2017-07-20 19:33:29', NULL, NULL, NULL, 1, '???????? (????????)', 'Num_head_Name', x'D9BE36C44E29A7488C376D4CF32343BE', x'0352B4F4F9C7304FB0E233498862A6FB', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'D539C81AC8B2BF418108AE3BC8C7E916', '2017-06-05 16:43:15', '2017-07-20 19:33:29', NULL, NULL, NULL, 1, '?????????? (?????? ????????????)', 'the_Session_ApplicationID', x'A23E94783679584FB31676E4F968E3B4', x'E9F50C668C4DF94486378EC5A894FE22', 0, NULL, 0),
(x'71278B7D0269C04BB61AF77268B98AA8', x'D5511B7FE81DA24285BDA746A99EB0D2', '2017-06-05 16:43:13', '2017-07-20 19:33:29', NULL, NULL, NULL, 2, '????????? (?????? ???)', 'GENMANUALCODE_the_Alias', x'CA936976E67DDA4A82168BDDF2B0588E', x'5C5420F107406A49A220DD9CD45CA9B1', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'D6984EABC05A2242A85849C5C2384AE5', '2017-06-05 16:43:12', '2017-07-20 19:33:29', NULL, NULL, NULL, 3, '???????? (??????)', 'iu_rcfg_mod_ModuleAccessible', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'4A1CA8016B13F3409336A7496F00309E', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'D6AE201BB056404688534AAD027A6413', '2017-06-05 16:43:12', '2017-07-20 19:33:29', NULL, NULL, NULL, 11, '??????? ?????? (??????)', 'iu_int_modules_ColegsObject', x'84D8A8DB867282478B286AF8916220B6', x'67C1604FAC23984399FB44D7E1F22F3F', 0, NULL, 0),
(x'8D02258553C3104B83A848EB4D1C854B', x'D77231E6768499449A8EBAD08004785F', '2017-06-05 16:43:15', '2017-07-20 19:33:29', NULL, NULL, NULL, 2, '???? ?????? (??????????)', 'MTZAPP_DBName', x'C2E0DB8C89591042BDFB33C2C45F2509', x'DCCA6DDB19E13A41BE63ED1B5A6B8BEC', 0, NULL, 0),
(x'B23AC26A8ABB6C46A49B1D299A2994FB', x'D83AD6C935B3FE4D87CDB9E6351198D4', '2017-06-05 16:43:15', '2017-07-20 19:33:29', NULL, NULL, NULL, 1, '???????????? (?????? ??????)', 'GroupUser_TheUser', x'52932CFE9AE20B4291343E3BDD832A6E', x'E24A0AA894472E4CA774277DD8C7E986', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'D85D4A552C841D47928E28C4D2E64FDF', '2017-06-05 16:43:14', '2017-07-20 19:33:30', NULL, NULL, NULL, 6, '??? ??????? (??? ???????)', 'OBJECTTYPE_OnRun', x'AFEF70062751D5118822204C4F4F5020', x'BA700AEBB90FAE44ADE16910E4E7A240', 0, NULL, 0),
(x'DED5A25D1921524994DBFD96BDE4235C', x'D88E8BFD88D83F4A9BE2FB79416124FB', '2017-06-05 16:43:15', '2017-07-20 19:33:30', NULL, NULL, NULL, 1, '??? ??????? (????)', 'FIELD_TabName', x'A4EF70062751D5118822204C4F4F5020', x'54BFA35C84C2334097CBF39A598B1655', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'D9E2661C1FED2F4FA17D338448649C2B', '2017-06-05 16:43:14', '2017-07-20 19:33:30', NULL, NULL, NULL, 5, '????????????? ??? ?????? (??? ???????)', 'OBJECTTYPE_ChooseView', x'AFEF70062751D5118822204C4F4F5020', x'D70EF489A6577B489EE3471E19972638', 0, NULL, 0),
(x'8D02258553C3104B83A848EB4D1C854B', x'D9F8E322CC6468499A0605A8DC9EA2C3', '2017-06-05 16:43:15', '2017-07-20 19:33:30', NULL, NULL, NULL, 1, '???????? (??????????)', 'MTZAPP_Name', x'C2E0DB8C89591042BDFB33C2C45F2509', x'404410118C1BE44B9DF110E08910F052', 0, NULL, 0),
(x'18594B077070E4479356DB0F70FA06DA', x'DA2538AF3D911F4FA914C3EF15217E8F', '2017-07-20 17:58:39', '2017-07-20 19:33:30', NULL, NULL, NULL, 4, '????? ???????? (??????)', 'armd_info_phone', x'FE4567F62EEF1545A397B52EB98F59BF', x'B2956DC778F79A4AB98C494443C91C72', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'DB4E8FAD5D1A3248945C6191B71FA270', '2017-06-05 16:43:17', '2017-07-20 19:33:30', NULL, NULL, NULL, 6, '??? ?????? (???? ???????)', 'FileterField_RefType', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'589EC8C8E4F7F341A607B5160BC871C5', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'DC3151D08DAF0D4FBA9A4ED4F937DA3E', '2017-06-05 16:43:15', '2017-07-20 19:33:30', NULL, NULL, NULL, 4, '??????? (?????? ????????????)', 'the_Session_Closed', x'A23E94783679584FB31676E4F968E3B4', x'957AD70CDF485D4F8D3AC66F0EA66B6A', 0, NULL, 0),
(x'E11361444B4881418D6B2FEF33523D80', x'DCDE97BCF1B3C34EB46062EC189EC9A6', '2017-06-05 16:43:14', '2017-07-20 19:33:30', NULL, NULL, NULL, 3, '????????? (?????? ????)', 'TYPEMENU_ToolTip', x'7A7476873D74B947AF1CAB00FF81154F', x'3F2BB9B88F11C543AF2ABDEA0D7E6CA9', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'DDB49D9BC4C0564EA4F8A38B951713D2', '2017-06-05 16:43:14', '2017-07-20 19:33:30', NULL, NULL, NULL, 9, '?????????? ??? ?????? ?????? (??? ???????)', 'OBJECTTYPE_AllowRefToObject', x'AFEF70062751D5118822204C4F4F5020', x'9606F6E2AFFCB0468E387ADA90C05EBC', 0, NULL, 0),
(x'F96D4B780527414B87DC233936A77496', x'DE1B85040D4DAA44894BDC1E0D7439D0', '2017-06-05 16:43:16', '2017-07-20 19:33:30', NULL, NULL, NULL, 2, '????????? (??????)', 'RPTStruct_Caption', x'2A49E8F524222F4585FFA14882C6554F', x'BB7A3BB448294B4A8E4D53887AE4AA4E', 0, NULL, 0),
(x'BF8B7E3B0C8F154D91FD4513FDA57AE3', x'DFB8F99DA7F9DE46850DCAA942AC7E2C', '2017-06-05 16:43:13', '2017-07-20 19:33:30', NULL, NULL, NULL, 6, '???????? (??? ????)', 'FIELDTYPE_Maximum', x'A5EF70062751D5118822204C4F4F5020', x'B9AE9D29B2752E4B85921E48C6CFB6B7', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'DFE9141C63B5054EA8E0226BC23D7FEE', '2017-06-05 16:43:16', '2017-07-20 19:33:30', NULL, NULL, NULL, 16, '??????????? ? ??????? (????)', 'EntryPoints_JournalFixedQuery', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'46CA30E81A20034D9DBC3769CCF5EAB4', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'E0863E1AD200A9478B06CF971701DED9', '2017-06-05 16:43:14', '2017-07-20 19:33:30', NULL, NULL, NULL, 2, '????????? (?????????????)', 'PARTVIEW_the_Alias', x'4DB613D7E84C6D46BE2B448874DC0469', x'7044B40CCA76DB48A233EBBC749132F4', 0, NULL, 0),
(x'849BE21055811E47A84CC8FC045E5202', x'E1FB3152D297784889BBFD0160DA680E', '2017-06-05 16:43:13', '2017-07-20 19:33:31', NULL, NULL, NULL, 2, '??????? ?????? ?????????? (????)', 'iu_crole_allowSetUser', x'1051A02ED67D914BB774AF6ECBC42108', x'4F64C1DD0185354997EF02BE087C1A8C', 0, NULL, 0),
(x'BEFD29AD60E67142A255E0FECFDBF44C', x'E2CCEE39F4F1384DAFF4DDBB8B8BF910', '2017-06-05 16:43:16', '2017-07-20 19:33:31', NULL, NULL, NULL, 1, '???????? (???? ??????)', 'RPTFields_Name', x'DED0770C9E55FC43B181156E126543F1', x'D5BE1FBDCE5B2B409EC5609D94E8FC58', 0, NULL, 0),
(x'1383AE95D365AD4CA7EB3E2997E2E973', x'E31AF3F2FE4B6E458FDB8DB3C21BBA9C', '2017-07-20 17:58:38', '2017-07-20 19:33:31', NULL, NULL, NULL, 1, '??? (????????)', 'arlog_data_sms', x'3BBB3644E97E2649A7FD9D9B20BBF37A', x'7A31D78D93647D43A54135615D10DA8B', 0, NULL, 0),
(x'B1D18DC95FC4B346987C1DE9332AE2FB', x'E3C8E4045C907146B0FE70A0F9FABBBF', '2017-06-05 16:43:15', '2017-07-20 19:33:31', NULL, NULL, NULL, 5, '? ???? (?????? ????)', 'FIELDMENU_IsMenuItem', x'E4C38941C2713D42A56F4E71CB91B52D', x'BC360C9BCF2B864081419FEA56D6BA94', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'E43EC983FCE2DF4BB60137E85BB1F851', '2017-06-05 16:43:14', '2017-07-20 19:33:31', NULL, NULL, NULL, 14, '?????? ??? ???????? ??????????? (??????)', 'PART_shablonBrief', x'B1EF70062751D5118822204C4F4F5020', x'7C19B16501CC5F4CA316830D43E24A58', 0, NULL, 0),
(x'71278B7D0269C04BB61AF77268B98AA8', x'E4533EB9172C3542B6A78E53DEE17603', '2017-06-05 16:43:13', '2017-07-20 19:33:31', NULL, NULL, NULL, 3, '??? (?????? ???)', 'GENMANUALCODE_Code', x'CA936976E67DDA4A82168BDDF2B0588E', x'071E3E565D314543B9C12910037F595E', 0, NULL, 0),
(x'71278B7D0269C04BB61AF77268B98AA8', x'E4F994C15763FD4A87D39AFD037E6903', '2017-06-05 16:43:13', '2017-07-20 19:33:31', NULL, NULL, NULL, 1, '???????? (?????? ???)', 'GENMANUALCODE_Name', x'CA936976E67DDA4A82168BDDF2B0588E', x'90627C216E67474D9ABC67A754661FA1', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'E5125A18F2C9684EBEC4CD96FF8CEFB1', '2017-06-05 16:43:15', '2017-07-20 19:33:31', NULL, NULL, NULL, 5, '???????? ??????? ?????????? (???????? ????????? ??????)', 'FIELDSRCDEF_BriefString', x'81AFF1D32C914849A87DDF549EE796E2', x'C63FFED2D728944E80664B4B73BF102D', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'E55A919146019247874D9E10E756F691', '2017-07-20 17:58:39', '2017-07-20 19:33:31', NULL, NULL, NULL, 7, '????????-????? (???????? ???)', 'arsms_data_pop_ok', x'E6F31473DE46B64AA09D05F6B0A69004', x'3DBE8737CB319947B16B930466FE68D2', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'E5B2D96AC2E3E24A9D73EE931D1ED56C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 2, '???????? ????? ?????? (??? ??????)', 'arc_md_moduleserial', x'398B4CD264C8DF4B8015F9973D34C20D', x'2167F79EDDDCE34EAC4D019D204AD618', 0, NULL, 0),
(x'08F5E5AC4F9E0645B5CA28F60AD0AF52', x'E6352DDE8B49FF4CA4D1D7ADB2CF184F', '2017-06-05 16:43:13', '2017-07-20 19:33:31', NULL, NULL, NULL, 5, '????? ??????? (????? ?????????)', 'iu_rcfg_docmode_AllowDelete', x'A3D07ECF2C64104B834721D86BFECBC4', x'FC29BB6FB510764F9B1E373CB194C5C7', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'E644BF3FE3BAA542A3E7648CC0B5538E', '2017-06-05 16:43:14', '2017-07-20 19:33:31', NULL, NULL, NULL, 4, '?????? (???????)', 'ViewColumn_FromPart', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'43CFD88A728C3349A0ABCCAED0DC11A3', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'E6C419AA55124F4B9A22A66D7D804D2E', '2017-06-05 16:43:14', '2017-07-20 19:33:31', NULL, NULL, NULL, 5, '???? (???????)', 'ViewColumn_Field', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'D58EE2FB7930254EA159998191C32782', 0, NULL, 0),
(x'1583598F41B2784F8AAEC48441FBF478', x'E819F98664319140952419DDFDEC3D48', '2017-06-05 16:43:14', '2017-07-20 19:33:31', NULL, NULL, NULL, 2, '????? (??????????? ???????)', 'METHODRESTRICTION_Method', x'70307B0F09F77D4E868CCC337E3075D1', x'A9145A446225274895486236BCF0B09B', 0, NULL, 0),
(x'0F3BB57D6570E644AFB94719C00652B1', x'E84B4FC3DD6C0643B9DCA3040B41C794', '2017-06-05 16:43:14', '2017-07-20 19:33:32', NULL, NULL, NULL, 2, '???????? (???????)', 'ViewColumn_Name', x'5E3DF43BB50EDB4D8EFA62DF3261A272', x'B797253247A067458F01B6FC770A0EB0', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'E983DFC9D80FDB4B8CF64FFC922DB6B9', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 7, '????????????? (??????????)', 'arc_info_isadmin', x'1778EF018A784C4486C0DA720FFBA8E0', x'15E80C3856BBCF4CB210938CF326EB4D', 0, NULL, 0),
(x'1EB8E0771DF1A749A169D9EA125860EC', x'E9EAB33639551E4AB94AFE708BBF76E1', '2017-06-05 16:43:13', '2017-07-20 19:33:32', NULL, NULL, NULL, 1, '???????? (??????????)', 'GENREFERENCE_Name', x'9B803E67F6CF0943A52BFE2118AE508E', x'5CA5849F4CB5C24E99A1C9B7D61F9A95', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'EB943BD2E257EB44B638650239DF2FF1', '2017-06-05 16:43:12', '2017-07-20 19:33:32', NULL, NULL, NULL, 7, '????????? ?? ???????? (??????)', 'iu_int_modules_controldocmode', x'84D8A8DB867282478B286AF8916220B6', x'E282394EEEF79940A821172489EFC0FA', 0, NULL, 0),
(x'DEC4E37D423CAA4CA53FDF593CDF6FB5', x'EBC69C585D16A740B886E3436EF4315A', '2017-06-05 16:43:13', '2017-07-20 19:33:32', NULL, NULL, NULL, 1, '???????? (????? ?????????)', 'GENPACKAGE_Name', x'05C61246727ED0478A2852CC7BFF4C7F', x'CB3AFCA9DB42EC4E880973228594665C', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'EBD59A4CC3C47A4B8CCF357F2300FC05', '2017-06-05 16:43:14', '2017-07-20 19:33:32', NULL, NULL, NULL, 3, '????????? (??????)', 'PART_Caption', x'B1EF70062751D5118822204C4F4F5020', x'EC9A95007193DA4796B67DF48E836010', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'EC758CC8933C0C4D81B041F2E7E40E9C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 5, '????? (??? ??????)', 'arc_md_theaddress', x'398B4CD264C8DF4B8015F9973D34C20D', x'DFE249610023134395281C62D5616685', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'ED16C5E2CECBDD4CA3B16BD1CFBF5EF3', '2017-06-05 16:43:16', '2017-07-20 19:33:32', NULL, NULL, NULL, 18, '????????? ?????????????? (????)', 'EntryPoints_AllowEdit', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'AD7508DF65915840A66214F74D5A257B', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'ED1C5B00134B30419ABCDE33F1EC786C', '2017-06-05 16:43:13', '2017-07-20 19:33:33', NULL, NULL, NULL, 4, 'COM ????? (??????????)', 'GENERATOR_TARGET_GeneratorProgID', x'B9EF70062751D5118822204C4F4F5020', x'C4BC8E49F283934095A838A8CD0C4B83', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'ED4BAD64A4B4D44C94764EB1A7E066A3', '2017-06-05 16:43:13', '2017-07-20 19:33:33', NULL, NULL, NULL, 12, '????????? ?? ???????? (??????)', 'iu_rcfg_mod_controldocmode', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'0E8E7C6A72A4114794F908663E5CB2E7', 0, NULL, 0),
(x'5746095530FDD742BE7671A86EF8006C', x'ED7991BF8F89B94EA295EF42F966E6E7', '2017-06-05 16:43:15', '2017-07-20 19:33:33', NULL, NULL, NULL, 2, '??????? ???? ???????????? (?????? ????????????)', 'the_Session_UserRole', x'A23E94783679584FB31676E4F968E3B4', x'52A505481C86D347BD2F5C785F002E17', 0, NULL, 0),
(x'59DBF6196CCDFD458B4B0CF0B130022F', x'EE10F9B60AE6F44CB7AB6A5AC8D47014', '2017-06-05 16:43:15', '2017-07-20 19:33:33', NULL, NULL, NULL, 9, '?? ?????????? ????? ?????? (???????? ????????? ??????)', 'FIELDSRCDEF_DontShowDialog', x'81AFF1D32C914849A87DDF549EE796E2', x'9BE3C3B42EFDEC4889B2ED11FDC75FDA', 0, NULL, 0),
(x'53ECCCE30D04884CAF5F41E1BF443054', x'EE286AE646E39043AF8D6EBF17EA61B1', '2017-06-05 16:43:14', '2017-07-20 19:33:33', NULL, NULL, NULL, 7, '???? - ?????? 3 (?????????????)', 'PARTVIEW_FilterField3', x'4DB613D7E84C6D46BE2B448874DC0469', x'C1EBF74D21473849B88B8A09A12F3400', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'EEC35B739DCEF74884BA88502CA718A9', '2017-06-05 16:43:14', '2017-07-20 19:33:33', NULL, NULL, NULL, 14, '???????????? ?????? ???????? (??? ???????)', 'OBJECTTYPE_UseArchiving', x'AFEF70062751D5118822204C4F4F5020', x'3E9213D5E60C8144B79231A098EF94C9', 0, NULL, 0),
(x'AF114BCC0A879B4D9200242BD3D95D3D', x'EF4AF4376E56074BA0BE9A39A5F48371', '2017-06-05 16:43:13', '2017-07-20 19:33:33', NULL, NULL, NULL, 10, '??? ??? ????? (?????? ??????????)', 'iu_u_def_login', x'CFBD3CA6DD3D6441949752FE925B2A13', x'B790B6E7095B844F99FA943E75AE4D9A', 0, NULL, 0),
(x'F7AB97A4CD21F340B3EE79FA53232F2F', x'F0D776D9BB28534E87917E6BE8D72C94', '2017-06-05 16:43:15', '2017-07-20 19:33:33', NULL, NULL, NULL, 1, '???? (???? ???????????)', 'CONSTRAINTFIELD_TheField', x'B10601C795AA73418097614495D6EF28', x'14B4CF6C92BF8F46AD1CD4A2B360E6BD', 0, NULL, 0),
(x'BEFD29AD60E67142A255E0FECFDBF44C', x'F11B57AE1B5D974795857DB491C845CA', '2017-06-05 16:43:16', '2017-07-20 19:33:33', NULL, NULL, NULL, 3, '?????? (???? ??????)', 'RPTFields_FieldSize', x'DED0770C9E55FC43B181156E126543F1', x'89E7E3F472210F4093747F79118802D7', 0, NULL, 0),
(x'D1BDD33E942B1A48B87E0BF049B48ED8', x'F12780909B2A6143BC90DE5063AE3A32', '2017-07-20 17:58:39', '2017-07-20 19:33:33', NULL, NULL, NULL, 1, '???? ? ????? ??? (???????? ???)', 'arsms_data_smstime', x'E6F31473DE46B64AA09D05F6B0A69004', x'0380D97D843AD941962B0B56A922B592', 0, NULL, 0),
(x'64FA779B66F92F44A5DBA525264C289D', x'F22451132D0A5B40912B0ED9A121F77F', '2017-06-05 16:43:14', '2017-07-20 19:33:33', NULL, NULL, NULL, 3, '???????????? ??? (?????? ? ?????????)', 'SHAREDMETHOD_ReturnType', x'ADEF70062751D5118822204C4F4F5020', x'C2BD06116470BD47BF0505DE96CBACD6', 0, NULL, 0),
(x'19FA557C91C76C4CB6C5E2EAC48FDD5E', x'F238384D2C45B24EA904B4B5764C7BB6', '2017-06-05 16:43:13', '2017-07-20 19:33:33', NULL, NULL, NULL, 2, '??? ????????? (??????????)', 'GENERATOR_TARGET_TargetType', x'B9EF70062751D5118822204C4F4F5020', x'FE9414AC95E93D49B2E650A8F546F63A', 0, NULL, 0),
(x'34A20FE8992A7B49999F64874F353E8D', x'F3568E8FB7BEE74EA09469CA3CC1760B', '2017-06-05 16:43:14', '2017-07-20 19:33:33', NULL, NULL, NULL, 2, '?????? (???????? ????????????)', 'INSTANCEVALIDATOR_Code', x'AD5B514233E2DB408F9045DCFCE01BE6', x'A4DF0B748FB3FA4F809CBBC0400417C9', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'F4CB65421C132040A55600390CBAB809', '2017-06-05 16:43:16', '2017-07-20 19:33:33', NULL, NULL, NULL, 14, '?????????? (????)', 'EntryPoints_TheComment', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'176DB72D891905429ED6ED59A109D500', 0, NULL, 0),
(x'72455C7B295280478E80B4465AAB1709', x'F4D8BD2EC7D7C341AE1C16FB81B4925B', '2017-06-05 16:43:12', '2017-07-20 19:33:34', NULL, NULL, NULL, 1, '???????? (????????)', 'bpc_info_Name', x'A14802F51E159C4D87D0906ACFD35C9F', x'40FC7E105F6D234F9B443649F089250C', 0, NULL, 0),
(x'0093BEAA6C8FA1488BBAC9A814B8092E', x'F510215757DCC9488215A418FBF8E8CD', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 1, '?????????? (??? ???????)', 'OBJECTTYPE_Package', x'AFEF70062751D5118822204C4F4F5020', x'A02B5AFD54EC304BBADC96424894D118', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'F65E7ED6655C674EB3A21AF301625D20', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 12, '????????? ??? ?????????? (??????)', 'PART_AddBehaivor', x'B1EF70062751D5118822204C4F4F5020', x'4039D821BEFAE843BAB2C7D05C6651F1', 0, NULL, 0),
(x'AB7FB3AAAFAA164AAA5E007BDE54ADE8', x'F6C3776E6BDD1B42AE94DE40F965A808', '2017-06-05 16:43:16', '2017-07-20 19:33:34', NULL, NULL, NULL, 4, '?????????? ??????? (??????? ???????)', 'JournalColumn_ColSort', x'317BD7F857A78C48BB5822700737D4B8', x'8EEAA0B2E8183E41AAF17358EA471802', 0, NULL, 0),
(x'15920178CF7F404B90FF734C1DA73F9B', x'F6E6780EB48F7B4A835344BF67C3E885', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 5, '?????? join (????????? ?????????????)', 'PARTVIEW_LNK_HandJoin', x'A27FADEF7CA7304AA0E1FF0FFE0E4A61', x'8F954A5E5D43A54188945D70B788CD3D', 0, NULL, 0),
(x'38316B1D67E2F44E95E12F0E665FE600', x'F7165E83FFAD51488D09A28F49764873', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 2, '????????? (?????????)', 'OBJSTATUS_isStartup', x'66C846DFF838F14E92E25F899D98BD16', x'FA3705AE04871C4BA6906A1F7B521FA9', 0, NULL, 0),
(x'ECE468ED0DDB444FA55FBD7376301B5B', x'F7F5427E48804F4E896C318FADDDD4D6', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 9, '??? ?????????? (??????)', 'PART_OnSave', x'B1EF70062751D5118822204C4F4F5020', x'44E64538EA3AC241932DC946CB5CBE7D', 0, NULL, 0),
(x'46AAACA12F5A984496E5BBF2B2A51719', x'F819E52AB256BA43A4F4AC9D3A587FA3', '2017-06-05 16:43:16', '2017-07-20 19:33:34', NULL, NULL, NULL, 1, '???????? (??????????)', 'ARMJRNLADD_Name', x'EDAB37F8E9CA0A439DEE519DBB1B79D5', x'92A191DC907A7B41992FEE0E2139A949', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'F8785462638C844AA74272B504800812', '2017-06-05 16:43:12', '2017-07-20 19:33:34', NULL, NULL, NULL, 3, '???? ???????? ??????? (??????)', 'iu_int_modules_GroupName', x'84D8A8DB867282478B286AF8916220B6', x'F35B97FAD6270947BA7A77BE6F209057', 0, NULL, 0),
(x'EF2129A038D58F4491B4B8447C6B7474', x'F9961C66F036D44FAA2077D61D63F60E', '2017-06-05 16:43:12', '2017-07-20 19:33:34', NULL, NULL, NULL, 7, '??? ????? (??????)', 'iu_rcfg_mod_AllObjects', x'84390EFA7C6BC845AECFE2FC7ECB622B', x'3290897F4F10C9478E589B6FCABBFE86', 0, NULL, 0),
(x'70DD187EF5264B4EAA1FC830974FD844', x'FC1F32EBFA5EF746BD64E1D630AF5822', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 3, '???????? (??? ??????)', 'arc_md_name', x'398B4CD264C8DF4B8015F9973D34C20D', x'B90E8DEFE714CC4388A982BBA545491D', 0, NULL, 0),
(x'E587262B9A17E2468D2AE6751B931A96', x'FC600A4285BEE144B18ECCCC2939F429', '2017-06-05 16:43:16', '2017-07-20 19:33:34', NULL, NULL, NULL, 17, '????????? ?????????? (????)', 'EntryPoints_AllowAdd', x'2CDE4EEF8B45AB4EAFE366AA500081DA', x'9AD2DE26AB2FB84ABE815CE5013238FD', 0, NULL, 0),
(x'43E783CBAA550C4B8FA8C1750F8879EA', x'FD0FC9AD023E2842839428AEA990F574', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 2, '??? (??????????)', 'arc_info_Name', x'1778EF018A784C4486C0DA720FFBA8E0', x'22A3E71208CAF14EB5094B010C205C4A', 0, NULL, 0),
(x'47D6166E22FA994AB773E5CFF25E1F86', x'FD2D80DEA8AF804590616EFAFC3C0754', '2017-06-05 16:43:13', '2017-07-20 19:33:34', NULL, NULL, NULL, 1, '????? ???? (????)', 'Num_zones_ZoneMask', x'32245159DFE6F941A4366BF7DB1800BB', x'533A99AC9B5E1143A1ABF80C00923883', 0, NULL, 0),
(x'A52C4139E99B3444A3CC51A511412805', x'FE1AF27701D96B448ACBA76C3212A07C', '2018-04-06 13:14:57', '2018-04-06 13:14:57', NULL, NULL, NULL, 2, '????????? ?????? (?????? ??????????)', 'arc_chanel_ch_param', x'6C47841B846CDE4092B517045D93C35A', x'18A40507A5CB8B4AA46C49D7FC338F1B', 0, NULL, 0),
(x'A92147E6F6BF6F4B87F94630B063D759', x'FECE88DD76C8DE45BFC27A481A700371', '2017-06-05 16:43:12', '2017-07-20 19:33:34', NULL, NULL, NULL, 9, '??? ????????? (??????)', 'iu_int_modules_mydocmode', x'84D8A8DB867282478B286AF8916220B6', x'A17B5EDDA7D7D640B0230FAF705FE438', 0, NULL, 0),
(x'3CCA5BC3CE032C418B0399AB5497779F', x'FF4094E664CB3A4A9073997010CECCAB', '2017-06-05 16:43:16', '2017-07-20 19:33:34', NULL, NULL, NULL, 1, '??? ????????? (?????? ?????)', 'ARMTypes_TheDocumentType', x'CE37F730811C7246B0F96E5BF4B15971', x'4C7130F4D8D0624780B0FCC2256627BF', 0, NULL, 0),
(x'38316B1D67E2F44E95E12F0E665FE600', x'FF67A639AFB9DF40B7D7C306C820E0A7', '2017-06-05 16:43:14', '2017-07-20 19:33:34', NULL, NULL, NULL, 3, '???????? (?????????)', 'OBJSTATUS_IsArchive', x'66C846DFF838F14E92E25F899D98BD16', x'692DAD0CD6A11D4987AB0BFB5C11E4D6', 0, NULL, 0),
(x'1175774D80CA8F499FE423034E28C9A0', x'FFAA872144E2DD4D917857E767AD07F3', '2017-06-05 16:43:17', '2017-07-20 19:33:35', NULL, NULL, NULL, 1, '?????????????????? (???? ???????)', 'FileterField_sequence', x'0C74B3F476E66E4BA833EDE44CB9FA63', x'969228CDDA5D044D961001E312E4C4CB', 0, NULL, 0);

-- 
-- Вывод данных для таблицы fieldparammap
--
-- Таблица areal_cli.fieldparammap не содержит данных

--
-- Установка базы данных по умолчанию
--
USE areal_cli;

DELIMITER $$

--
-- Удалить триггер "arc_info_updated"
--
DROP TRIGGER IF EXISTS arc_info_updated$$

--
-- Удалить триггер "arc_info_inserted"
--
DROP TRIGGER IF EXISTS arc_info_inserted$$

DELIMITER ;

--
-- Установка базы данных по умолчанию
--
USE areal_cli;

DELIMITER $$

--
-- Создать триггер "arc_info_inserted"
--
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER arc_info_inserted
	AFTER INSERT
	ON arc_info
	FOR EACH ROW
begin
    declare existsCnt  integer;
    declare ID  binary(16);
    if new.login <> '' then
        select count(*) into existsCnt from users where login=new.login or usersid=new.arc_infoid;
        if existsCnt = 0 then
         select instanceid into id from instance where objtype='MTZUsers';
         insert into users
         (changestamp,instanceid,usersid,family,name, surname, login,password) 
         values 
         (sysdate(),id,new.arc_infoid, new.family, new.name,'',new.login,md5(new.login));
       else
		 update users
			set family=new.family,name=new.name, login=new.login where usersid=new.arc_infoid;
		update users
			set family=new.family,name=new.name  where login=new.login;
        end if;
    end if;

end
$$

--
-- Создать триггер "arc_info_updated"
--
CREATE 
	DEFINER = 'root'@'localhost'
TRIGGER arc_info_updated
	AFTER UPDATE
	ON arc_info
	FOR EACH ROW
begin
    declare existsCnt  integer;
    declare ID  binary(16);
    select instanceid into id from instance where objtype='MTZUsers';

	  if new.login<>old.login then
			
				select count(*) into existsCnt from users where  usersid=new.arc_infoid;
				if existsCnt = 0 then
				  
				   select count(*) into existsCnt from users where login=old.login ;
					 if existsCnt = 0 then
							 insert into users
							 (changestamp,instanceid,usersid,family,name,surname, login,password) 
							 values 
							 (sysdate(),id,new.arc_infoid,new.family,new.name,' ',new.login,md5(new.login));
					 else
							update users  set login=new.login, password=  md5(new.login) where  login = old.login ;
							update users set family=new.family, name=new.name where login=new.login ;
					 end if;
				else
					update users  set login=new.login, password=  md5(new.login) where  login = old.login ;
					update users  set login=new.login, password=  md5(new.login) where  usersid=new.arc_infoid;
					update users set family=new.family, name=new.name where usersid=new.arc_infoid;
				end if;
	
    ELSE
           select count(*) into existsCnt from users where login=old.login or usersid=new.arc_infoid ;
					 if existsCnt = 0 then
							 insert into users
							 (changestamp,instanceid,usersid,family,name,surname, login,password) 
							 values 
							 (sysdate(),id,new.arc_infoid,new.family,new.name,' ',new.login,md5(new.login));
          end IF;

				update users set family=new.family,name=new.name where login=new.login  or usersid=new.arc_infoid;
		end if;

end
$$

DELIMITER ;
-- 
-- Восстановить предыдущий режим SQL (SQL mode)
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Включение внешних ключей
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;
